(function (factory) {
  typeof define === 'function' && define.amd ? define(factory) :
  factory();
}((function () { 'use strict';

  var global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});

  // We have an ES6 Map available, return the native instance
  if (typeof global$1.Map !== 'undefined') {
    module.exports = global$1.Map;
    module.exports.Map = global$1.Map;
  } else {
    // We will return a polyfill
    var Map$4 = function(array) {
      this._keys = [];
      this._values = {};

      for (var i = 0; i < array.length; i++) {
        if (array[i] == null) continue; // skip null and undefined
        var entry = array[i];
        var key = entry[0];
        var value = entry[1];
        // Add the key to the list of keys in order
        this._keys.push(key);
        // Add the key and value to the values dictionary with a point
        // to the location in the ordered keys list
        this._values[key] = { v: value, i: this._keys.length - 1 };
      }
    };

    Map$4.prototype.clear = function() {
      this._keys = [];
      this._values = {};
    };

    Map$4.prototype.delete = function(key) {
      var value = this._values[key];
      if (value == null) return false;
      // Delete entry
      delete this._values[key];
      // Remove the key from the ordered keys list
      this._keys.splice(value.i, 1);
      return true;
    };

    Map$4.prototype.entries = function() {
      var self = this;
      var index = 0;

      return {
        next: function() {
          var key = self._keys[index++];
          return {
            value: key !== undefined ? [key, self._values[key].v] : undefined,
            done: key !== undefined ? false : true
          };
        }
      };
    };

    Map$4.prototype.forEach = function(callback, self) {
      self = self || this;

      for (var i = 0; i < this._keys.length; i++) {
        var key = this._keys[i];
        // Call the forEach callback
        callback.call(self, this._values[key].v, key, self);
      }
    };

    Map$4.prototype.get = function(key) {
      return this._values[key] ? this._values[key].v : undefined;
    };

    Map$4.prototype.has = function(key) {
      return this._values[key] != null;
    };

    Map$4.prototype.keys = function() {
      var self = this;
      var index = 0;

      return {
        next: function() {
          var key = self._keys[index++];
          return {
            value: key !== undefined ? key : undefined,
            done: key !== undefined ? false : true
          };
        }
      };
    };

    Map$4.prototype.set = function(key, value) {
      if (this._values[key]) {
        this._values[key].v = value;
        return this;
      }

      // Add the key to the list of keys in order
      this._keys.push(key);
      // Add the key and value to the values dictionary with a point
      // to the location in the ordered keys list
      this._values[key] = { v: value, i: this._keys.length - 1 };
      return this;
    };

    Map$4.prototype.values = function() {
      var self = this;
      var index = 0;

      return {
        next: function() {
          var key = self._keys[index++];
          return {
            value: key !== undefined ? self._values[key].v : undefined,
            done: key !== undefined ? false : true
          };
        }
      };
    };

    // Last ismaster
    Object.defineProperty(Map$4.prototype, 'size', {
      enumerable: true,
      get: function() {
        return this._keys.length;
      }
    });

    module.exports = Map$4;
    module.exports.Map = Map$4;
  }

  var map$2 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //
  // Copyright 2009 Google Inc. All Rights Reserved

  /**
   * Defines a Long class for representing a 64-bit two's-complement
   * integer value, which faithfully simulates the behavior of a Java "Long". This
   * implementation is derived from LongLib in GWT.
   *
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a Long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @class
   * @param {number} low  the low (signed) 32 bits of the Long.
   * @param {number} high the high (signed) 32 bits of the Long.
   * @return {Long}
   */
  function Long$8(low, high) {
    if (!(this instanceof Long$8)) return new Long$8(low, high);

    this._bsontype = 'Long';
    /**
     * @type {number}
     * @ignore
     */
    this.low_ = low | 0; // force into 32 signed bits.

    /**
     * @type {number}
     * @ignore
     */
    this.high_ = high | 0; // force into 32 signed bits.
  }

  /**
   * Return the int value.
   *
   * @method
   * @return {number} the value, assuming it is a 32-bit integer.
   */
  Long$8.prototype.toInt = function() {
    return this.low_;
  };

  /**
   * Return the Number value.
   *
   * @method
   * @return {number} the closest floating-point representation to this value.
   */
  Long$8.prototype.toNumber = function() {
    return this.high_ * Long$8.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
  };

  /** Converts the Long to a BigInt (arbitrary precision). */
  Long$8.prototype.toBigInt = function () {
    return BigInt(this.toString());
  };

  /**
   * Return the JSON value.
   *
   * @method
   * @return {string} the JSON representation.
   */
  Long$8.prototype.toJSON = function() {
    return this.toString();
  };

  /**
   * Return the String value.
   *
   * @method
   * @param {number} [opt_radix] the radix in which the text should be written.
   * @return {string} the textual representation of this value.
   */
  Long$8.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(Long$8.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = Long$8.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = Long$8.fromNumber(Math.pow(radix, 6));

    rem = this;
    var result = '';

    while (!rem.isZero()) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };

  /**
   * Return the high 32-bits value.
   *
   * @method
   * @return {number} the high 32-bits as a signed value.
   */
  Long$8.prototype.getHighBits = function() {
    return this.high_;
  };

  /**
   * Return the low 32-bits value.
   *
   * @method
   * @return {number} the low 32-bits as a signed value.
   */
  Long$8.prototype.getLowBits = function() {
    return this.low_;
  };

  /**
   * Return the low unsigned 32-bits value.
   *
   * @method
   * @return {number} the low 32-bits as an unsigned value.
   */
  Long$8.prototype.getLowBitsUnsigned = function() {
    return this.low_ >= 0 ? this.low_ : Long$8.TWO_PWR_32_DBL_ + this.low_;
  };

  /**
   * Returns the number of bits needed to represent the absolute value of this Long.
   *
   * @method
   * @return {number} Returns the number of bits needed to represent the absolute value of this Long.
   */
  Long$8.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(Long$8.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ !== 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) !== 0) {
          break;
        }
      }
      return this.high_ !== 0 ? bit + 33 : bit + 1;
    }
  };

  /**
   * Return whether this value is zero.
   *
   * @method
   * @return {boolean} whether this value is zero.
   */
  Long$8.prototype.isZero = function() {
    return this.high_ === 0 && this.low_ === 0;
  };

  /**
   * Return whether this value is negative.
   *
   * @method
   * @return {boolean} whether this value is negative.
   */
  Long$8.prototype.isNegative = function() {
    return this.high_ < 0;
  };

  /**
   * Return whether this value is odd.
   *
   * @method
   * @return {boolean} whether this value is odd.
   */
  Long$8.prototype.isOdd = function() {
    return (this.low_ & 1) === 1;
  };

  /**
   * Return whether this Long equals the other
   *
   * @method
   * @param {Long} other Long to compare against.
   * @return {boolean} whether this Long equals the other
   */
  Long$8.prototype.equals = function(other) {
    return this.high_ === other.high_ && this.low_ === other.low_;
  };

  /**
   * Return whether this Long does not equal the other.
   *
   * @method
   * @param {Long} other Long to compare against.
   * @return {boolean} whether this Long does not equal the other.
   */
  Long$8.prototype.notEquals = function(other) {
    return this.high_ !== other.high_ || this.low_ !== other.low_;
  };

  /**
   * Return whether this Long is less than the other.
   *
   * @method
   * @param {Long} other Long to compare against.
   * @return {boolean} whether this Long is less than the other.
   */
  Long$8.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };

  /**
   * Return whether this Long is less than or equal to the other.
   *
   * @method
   * @param {Long} other Long to compare against.
   * @return {boolean} whether this Long is less than or equal to the other.
   */
  Long$8.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };

  /**
   * Return whether this Long is greater than the other.
   *
   * @method
   * @param {Long} other Long to compare against.
   * @return {boolean} whether this Long is greater than the other.
   */
  Long$8.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };

  /**
   * Return whether this Long is greater than or equal to the other.
   *
   * @method
   * @param {Long} other Long to compare against.
   * @return {boolean} whether this Long is greater than or equal to the other.
   */
  Long$8.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };

  /**
   * Compares this Long with the given one.
   *
   * @method
   * @param {Long} other Long to compare against.
   * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.
   */
  Long$8.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };

  /**
   * The negation of this value.
   *
   * @method
   * @return {Long} the negation of this value.
   */
  Long$8.prototype.negate = function() {
    if (this.equals(Long$8.MIN_VALUE)) {
      return Long$8.MIN_VALUE;
    } else {
      return this.not().add(Long$8.ONE);
    }
  };

  /**
   * Returns the sum of this and the given Long.
   *
   * @method
   * @param {Long} other Long to add to this one.
   * @return {Long} the sum of this and the given Long.
   */
  Long$8.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xffff;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xffff;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xffff;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xffff;

    var c48 = 0,
      c32 = 0,
      c16 = 0,
      c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xffff;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xffff;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c48 += a48 + b48;
    c48 &= 0xffff;
    return Long$8.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };

  /**
   * Returns the difference of this and the given Long.
   *
   * @method
   * @param {Long} other Long to subtract from this.
   * @return {Long} the difference of this and the given Long.
   */
  Long$8.prototype.subtract = function(other) {
    return this.add(other.negate());
  };

  /**
   * Returns the product of this and the given Long.
   *
   * @method
   * @param {Long} other Long to multiply with this.
   * @return {Long} the product of this and the other.
   */
  Long$8.prototype.multiply = function(other) {
    if (this.isZero()) {
      return Long$8.ZERO;
    } else if (other.isZero()) {
      return Long$8.ZERO;
    }

    if (this.equals(Long$8.MIN_VALUE)) {
      return other.isOdd() ? Long$8.MIN_VALUE : Long$8.ZERO;
    } else if (other.equals(Long$8.MIN_VALUE)) {
      return this.isOdd() ? Long$8.MIN_VALUE : Long$8.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate()
          .multiply(other)
          .negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both Longs are small, use float multiplication
    if (this.lessThan(Long$8.TWO_PWR_24_) && other.lessThan(Long$8.TWO_PWR_24_)) {
      return Long$8.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xffff;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xffff;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xffff;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xffff;

    var c48 = 0,
      c32 = 0,
      c16 = 0,
      c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xffff;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xffff;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xffff;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xffff;
    return Long$8.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };

  /**
   * Returns this Long divided by the given one.
   *
   * @method
   * @param {Long} other Long by which to divide.
   * @return {Long} this Long divided by the given one.
   */
  Long$8.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return Long$8.ZERO;
    }

    if (this.equals(Long$8.MIN_VALUE)) {
      if (other.equals(Long$8.ONE) || other.equals(Long$8.NEG_ONE)) {
        return Long$8.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(Long$8.MIN_VALUE)) {
        return Long$8.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(Long$8.ZERO)) {
          return other.isNegative() ? Long$8.ONE : Long$8.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(Long$8.MIN_VALUE)) {
      return Long$8.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate()
          .div(other)
          .negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = Long$8.ZERO;
    rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = Long$8.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = Long$8.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = Long$8.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };

  /**
   * Returns this Long modulo the given one.
   *
   * @method
   * @param {Long} other Long by which to mod.
   * @return {Long} this Long modulo the given one.
   */
  Long$8.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };

  /**
   * The bitwise-NOT of this value.
   *
   * @method
   * @return {Long} the bitwise-NOT of this value.
   */
  Long$8.prototype.not = function() {
    return Long$8.fromBits(~this.low_, ~this.high_);
  };

  /**
   * Returns the bitwise-AND of this Long and the given one.
   *
   * @method
   * @param {Long} other the Long with which to AND.
   * @return {Long} the bitwise-AND of this and the other.
   */
  Long$8.prototype.and = function(other) {
    return Long$8.fromBits(this.low_ & other.low_, this.high_ & other.high_);
  };

  /**
   * Returns the bitwise-OR of this Long and the given one.
   *
   * @method
   * @param {Long} other the Long with which to OR.
   * @return {Long} the bitwise-OR of this and the other.
   */
  Long$8.prototype.or = function(other) {
    return Long$8.fromBits(this.low_ | other.low_, this.high_ | other.high_);
  };

  /**
   * Returns the bitwise-XOR of this Long and the given one.
   *
   * @method
   * @param {Long} other the Long with which to XOR.
   * @return {Long} the bitwise-XOR of this and the other.
   */
  Long$8.prototype.xor = function(other) {
    return Long$8.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
  };

  /**
   * Returns this Long with bits shifted to the left by the given amount.
   *
   * @method
   * @param {number} numBits the number of bits by which to shift.
   * @return {Long} this shifted to the left by the given amount.
   */
  Long$8.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits === 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return Long$8.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return Long$8.fromBits(0, low << (numBits - 32));
      }
    }
  };

  /**
   * Returns this Long with bits shifted to the right by the given amount.
   *
   * @method
   * @param {number} numBits the number of bits by which to shift.
   * @return {Long} this shifted to the right by the given amount.
   */
  Long$8.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits === 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return Long$8.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);
      } else {
        return Long$8.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);
      }
    }
  };

  /**
   * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.
   *
   * @method
   * @param {number} numBits the number of bits by which to shift.
   * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.
   */
  Long$8.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits === 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return Long$8.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);
      } else if (numBits === 32) {
        return Long$8.fromBits(high, 0);
      } else {
        return Long$8.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  /**
   * Returns a Long representing the given (32-bit) integer value.
   *
   * @method
   * @param {number} value the 32-bit integer in question.
   * @return {Long} the corresponding Long value.
   */
  Long$8.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = Long$8.INT_CACHE_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new Long$8(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      Long$8.INT_CACHE_[value] = obj;
    }
    return obj;
  };

  /**
   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
   *
   * @method
   * @param {number} value the number in question.
   * @return {Long} the corresponding Long value.
   */
  Long$8.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return Long$8.ZERO;
    } else if (value <= -Long$8.TWO_PWR_63_DBL_) {
      return Long$8.MIN_VALUE;
    } else if (value + 1 >= Long$8.TWO_PWR_63_DBL_) {
      return Long$8.MAX_VALUE;
    } else if (value < 0) {
      return Long$8.fromNumber(-value).negate();
    } else {
      return new Long$8((value % Long$8.TWO_PWR_32_DBL_) | 0, (value / Long$8.TWO_PWR_32_DBL_) | 0);
    }
  };

  /**
   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
   * @param {bigint} value - The number in question
   * @returns {Long} The corresponding Long value
   */
  Long$8.fromBigInt =  function(value) {
    return Long$8.fromString(value.toString(10), 10);
  };

  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.
   *
   * @method
   * @param {number} lowBits the low 32-bits.
   * @param {number} highBits the high 32-bits.
   * @return {Long} the corresponding Long value.
   */
  Long$8.fromBits = function(lowBits, highBits) {
    return new Long$8(lowBits, highBits);
  };

  /**
   * Returns a Long representation of the given string, written using the given radix.
   *
   * @method
   * @param {string} str the textual representation of the Long.
   * @param {number} opt_radix the radix in which the text is written.
   * @return {Long} the corresponding Long value.
   */
  Long$8.fromString = function(str, opt_radix) {
    if (str.length === 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) === '-') {
      return Long$8.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = Long$8.fromNumber(Math.pow(radix, 8));

    var result = Long$8.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = Long$8.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(Long$8.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(Long$8.fromNumber(value));
      }
    }
    return result;
  };

  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.

  /**
   * A cache of the Long representations of small integer values.
   * @type {Object}
   * @ignore
   */
  Long$8.INT_CACHE_ = {};

  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.

  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @ignore
   */
  Long$8.TWO_PWR_16_DBL_ = 1 << 16;

  /**
   * @type {number}
   * @ignore
   */
  Long$8.TWO_PWR_24_DBL_ = 1 << 24;

  /**
   * @type {number}
   * @ignore
   */
  Long$8.TWO_PWR_32_DBL_ = Long$8.TWO_PWR_16_DBL_ * Long$8.TWO_PWR_16_DBL_;

  /**
   * @type {number}
   * @ignore
   */
  Long$8.TWO_PWR_31_DBL_ = Long$8.TWO_PWR_32_DBL_ / 2;

  /**
   * @type {number}
   * @ignore
   */
  Long$8.TWO_PWR_48_DBL_ = Long$8.TWO_PWR_32_DBL_ * Long$8.TWO_PWR_16_DBL_;

  /**
   * @type {number}
   * @ignore
   */
  Long$8.TWO_PWR_64_DBL_ = Long$8.TWO_PWR_32_DBL_ * Long$8.TWO_PWR_32_DBL_;

  /**
   * @type {number}
   * @ignore
   */
  Long$8.TWO_PWR_63_DBL_ = Long$8.TWO_PWR_64_DBL_ / 2;

  /** @type {Long} */
  Long$8.ZERO = Long$8.fromInt(0);

  /** @type {Long} */
  Long$8.ONE = Long$8.fromInt(1);

  /** @type {Long} */
  Long$8.NEG_ONE = Long$8.fromInt(-1);

  /** @type {Long} */
  Long$8.MAX_VALUE = Long$8.fromBits(0xffffffff | 0, 0x7fffffff | 0);

  /** @type {Long} */
  Long$8.MIN_VALUE = Long$8.fromBits(0, 0x80000000 | 0);

  /**
   * @type {Long}
   * @ignore
   */
  Long$8.TWO_PWR_24_ = Long$8.fromInt(1 << 24);

  /**
   * Expose.
   */
  var long = Long$8;
  var Long_1$1 = Long$8;
  long.Long = Long_1$1;

  /**
   * A class representation of the BSON Double type.
   *
   * @class
   * @param {number} value the number we want to represent as a double.
   * @return {Double}
   */
  function Double$2(value) {
    if (!(this instanceof Double$2)) return new Double$2(value);

    this._bsontype = 'Double';
    this.value = value;
  }

  /**
   * Access the number value.
   *
   * @method
   * @return {number} returns the wrapped double number.
   */
  Double$2.prototype.valueOf = function() {
    return this.value;
  };

  /**
   * @ignore
   */
  Double$2.prototype.toJSON = function() {
    return this.value;
  };

  var double = Double$2;
  var Double_1$1 = Double$2;
  double.Double = Double_1$1;

  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  //
  // Copyright 2009 Google Inc. All Rights Reserved

  /**
   * This type is for INTERNAL use in MongoDB only and should not be used in applications.
   * The appropriate corresponding type is the JavaScript Date type.
   * 
   * Defines a Timestamp class for representing a 64-bit two's-complement
   * integer value, which faithfully simulates the behavior of a Java "Timestamp". This
   * implementation is derived from TimestampLib in GWT.
   *
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Timestamps.
   *
   * The internal representation of a Timestamp is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @class
   * @param {number} low  the low (signed) 32 bits of the Timestamp.
   * @param {number} high the high (signed) 32 bits of the Timestamp.
   */
  function Timestamp$2(low, high) {
    if (!(this instanceof Timestamp$2)) return new Timestamp$2(low, high);
    this._bsontype = 'Timestamp';
    /**
     * @type {number}
     * @ignore
     */
    this.low_ = low | 0; // force into 32 signed bits.

    /**
     * @type {number}
     * @ignore
     */
    this.high_ = high | 0; // force into 32 signed bits.
  }

  /**
   * Return the int value.
   *
   * @return {number} the value, assuming it is a 32-bit integer.
   */
  Timestamp$2.prototype.toInt = function() {
    return this.low_;
  };

  /**
   * Return the Number value.
   *
   * @method
   * @return {number} the closest floating-point representation to this value.
   */
  Timestamp$2.prototype.toNumber = function() {
    return this.high_ * Timestamp$2.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
  };

  /**
   * Return the JSON value.
   *
   * @method
   * @return {string} the JSON representation.
   */
  Timestamp$2.prototype.toJSON = function() {
    return this.toString();
  };

  /**
   * Return the String value.
   *
   * @method
   * @param {number} [opt_radix] the radix in which the text should be written.
   * @return {string} the textual representation of this value.
   */
  Timestamp$2.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(Timestamp$2.MIN_VALUE)) {
        // We need to change the Timestamp value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixTimestamp = Timestamp$2.fromNumber(radix);
        var div = this.div(radixTimestamp);
        var rem = div.multiply(radixTimestamp).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = Timestamp$2.fromNumber(Math.pow(radix, 6));

    rem = this;
    var result = '';

    while (!rem.isZero()) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };

  /**
   * Return the high 32-bits value.
   *
   * @method
   * @return {number} the high 32-bits as a signed value.
   */
  Timestamp$2.prototype.getHighBits = function() {
    return this.high_;
  };

  /**
   * Return the low 32-bits value.
   *
   * @method
   * @return {number} the low 32-bits as a signed value.
   */
  Timestamp$2.prototype.getLowBits = function() {
    return this.low_;
  };

  /**
   * Return the low unsigned 32-bits value.
   *
   * @method
   * @return {number} the low 32-bits as an unsigned value.
   */
  Timestamp$2.prototype.getLowBitsUnsigned = function() {
    return this.low_ >= 0 ? this.low_ : Timestamp$2.TWO_PWR_32_DBL_ + this.low_;
  };

  /**
   * Returns the number of bits needed to represent the absolute value of this Timestamp.
   *
   * @method
   * @return {number} Returns the number of bits needed to represent the absolute value of this Timestamp.
   */
  Timestamp$2.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(Timestamp$2.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ !== 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) !== 0) {
          break;
        }
      }
      return this.high_ !== 0 ? bit + 33 : bit + 1;
    }
  };

  /**
   * Return whether this value is zero.
   *
   * @method
   * @return {boolean} whether this value is zero.
   */
  Timestamp$2.prototype.isZero = function() {
    return this.high_ === 0 && this.low_ === 0;
  };

  /**
   * Return whether this value is negative.
   *
   * @method
   * @return {boolean} whether this value is negative.
   */
  Timestamp$2.prototype.isNegative = function() {
    return this.high_ < 0;
  };

  /**
   * Return whether this value is odd.
   *
   * @method
   * @return {boolean} whether this value is odd.
   */
  Timestamp$2.prototype.isOdd = function() {
    return (this.low_ & 1) === 1;
  };

  /**
   * Return whether this Timestamp equals the other
   *
   * @method
   * @param {Timestamp} other Timestamp to compare against.
   * @return {boolean} whether this Timestamp equals the other
   */
  Timestamp$2.prototype.equals = function(other) {
    return this.high_ === other.high_ && this.low_ === other.low_;
  };

  /**
   * Return whether this Timestamp does not equal the other.
   *
   * @method
   * @param {Timestamp} other Timestamp to compare against.
   * @return {boolean} whether this Timestamp does not equal the other.
   */
  Timestamp$2.prototype.notEquals = function(other) {
    return this.high_ !== other.high_ || this.low_ !== other.low_;
  };

  /**
   * Return whether this Timestamp is less than the other.
   *
   * @method
   * @param {Timestamp} other Timestamp to compare against.
   * @return {boolean} whether this Timestamp is less than the other.
   */
  Timestamp$2.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };

  /**
   * Return whether this Timestamp is less than or equal to the other.
   *
   * @method
   * @param {Timestamp} other Timestamp to compare against.
   * @return {boolean} whether this Timestamp is less than or equal to the other.
   */
  Timestamp$2.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };

  /**
   * Return whether this Timestamp is greater than the other.
   *
   * @method
   * @param {Timestamp} other Timestamp to compare against.
   * @return {boolean} whether this Timestamp is greater than the other.
   */
  Timestamp$2.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };

  /**
   * Return whether this Timestamp is greater than or equal to the other.
   *
   * @method
   * @param {Timestamp} other Timestamp to compare against.
   * @return {boolean} whether this Timestamp is greater than or equal to the other.
   */
  Timestamp$2.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };

  /**
   * Compares this Timestamp with the given one.
   *
   * @method
   * @param {Timestamp} other Timestamp to compare against.
   * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.
   */
  Timestamp$2.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };

  /**
   * The negation of this value.
   *
   * @method
   * @return {Timestamp} the negation of this value.
   */
  Timestamp$2.prototype.negate = function() {
    if (this.equals(Timestamp$2.MIN_VALUE)) {
      return Timestamp$2.MIN_VALUE;
    } else {
      return this.not().add(Timestamp$2.ONE);
    }
  };

  /**
   * Returns the sum of this and the given Timestamp.
   *
   * @method
   * @param {Timestamp} other Timestamp to add to this one.
   * @return {Timestamp} the sum of this and the given Timestamp.
   */
  Timestamp$2.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xffff;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xffff;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xffff;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xffff;

    var c48 = 0,
      c32 = 0,
      c16 = 0,
      c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xffff;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xffff;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c48 += a48 + b48;
    c48 &= 0xffff;
    return Timestamp$2.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };

  /**
   * Returns the difference of this and the given Timestamp.
   *
   * @method
   * @param {Timestamp} other Timestamp to subtract from this.
   * @return {Timestamp} the difference of this and the given Timestamp.
   */
  Timestamp$2.prototype.subtract = function(other) {
    return this.add(other.negate());
  };

  /**
   * Returns the product of this and the given Timestamp.
   *
   * @method
   * @param {Timestamp} other Timestamp to multiply with this.
   * @return {Timestamp} the product of this and the other.
   */
  Timestamp$2.prototype.multiply = function(other) {
    if (this.isZero()) {
      return Timestamp$2.ZERO;
    } else if (other.isZero()) {
      return Timestamp$2.ZERO;
    }

    if (this.equals(Timestamp$2.MIN_VALUE)) {
      return other.isOdd() ? Timestamp$2.MIN_VALUE : Timestamp$2.ZERO;
    } else if (other.equals(Timestamp$2.MIN_VALUE)) {
      return this.isOdd() ? Timestamp$2.MIN_VALUE : Timestamp$2.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate()
          .multiply(other)
          .negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both Timestamps are small, use float multiplication
    if (this.lessThan(Timestamp$2.TWO_PWR_24_) && other.lessThan(Timestamp$2.TWO_PWR_24_)) {
      return Timestamp$2.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xffff;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xffff;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xffff;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xffff;

    var c48 = 0,
      c32 = 0,
      c16 = 0,
      c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xffff;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xffff;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xffff;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xffff;
    return Timestamp$2.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };

  /**
   * Returns this Timestamp divided by the given one.
   *
   * @method
   * @param {Timestamp} other Timestamp by which to divide.
   * @return {Timestamp} this Timestamp divided by the given one.
   */
  Timestamp$2.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return Timestamp$2.ZERO;
    }

    if (this.equals(Timestamp$2.MIN_VALUE)) {
      if (other.equals(Timestamp$2.ONE) || other.equals(Timestamp$2.NEG_ONE)) {
        return Timestamp$2.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(Timestamp$2.MIN_VALUE)) {
        return Timestamp$2.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(Timestamp$2.ZERO)) {
          return other.isNegative() ? Timestamp$2.ONE : Timestamp$2.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(Timestamp$2.MIN_VALUE)) {
      return Timestamp$2.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate()
          .div(other)
          .negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = Timestamp$2.ZERO;
    rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = Timestamp$2.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = Timestamp$2.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = Timestamp$2.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };

  /**
   * Returns this Timestamp modulo the given one.
   *
   * @method
   * @param {Timestamp} other Timestamp by which to mod.
   * @return {Timestamp} this Timestamp modulo the given one.
   */
  Timestamp$2.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };

  /**
   * The bitwise-NOT of this value.
   *
   * @method
   * @return {Timestamp} the bitwise-NOT of this value.
   */
  Timestamp$2.prototype.not = function() {
    return Timestamp$2.fromBits(~this.low_, ~this.high_);
  };

  /**
   * Returns the bitwise-AND of this Timestamp and the given one.
   *
   * @method
   * @param {Timestamp} other the Timestamp with which to AND.
   * @return {Timestamp} the bitwise-AND of this and the other.
   */
  Timestamp$2.prototype.and = function(other) {
    return Timestamp$2.fromBits(this.low_ & other.low_, this.high_ & other.high_);
  };

  /**
   * Returns the bitwise-OR of this Timestamp and the given one.
   *
   * @method
   * @param {Timestamp} other the Timestamp with which to OR.
   * @return {Timestamp} the bitwise-OR of this and the other.
   */
  Timestamp$2.prototype.or = function(other) {
    return Timestamp$2.fromBits(this.low_ | other.low_, this.high_ | other.high_);
  };

  /**
   * Returns the bitwise-XOR of this Timestamp and the given one.
   *
   * @method
   * @param {Timestamp} other the Timestamp with which to XOR.
   * @return {Timestamp} the bitwise-XOR of this and the other.
   */
  Timestamp$2.prototype.xor = function(other) {
    return Timestamp$2.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
  };

  /**
   * Returns this Timestamp with bits shifted to the left by the given amount.
   *
   * @method
   * @param {number} numBits the number of bits by which to shift.
   * @return {Timestamp} this shifted to the left by the given amount.
   */
  Timestamp$2.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits === 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return Timestamp$2.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return Timestamp$2.fromBits(0, low << (numBits - 32));
      }
    }
  };

  /**
   * Returns this Timestamp with bits shifted to the right by the given amount.
   *
   * @method
   * @param {number} numBits the number of bits by which to shift.
   * @return {Timestamp} this shifted to the right by the given amount.
   */
  Timestamp$2.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits === 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return Timestamp$2.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);
      } else {
        return Timestamp$2.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);
      }
    }
  };

  /**
   * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.
   *
   * @method
   * @param {number} numBits the number of bits by which to shift.
   * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.
   */
  Timestamp$2.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits === 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return Timestamp$2.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);
      } else if (numBits === 32) {
        return Timestamp$2.fromBits(high, 0);
      } else {
        return Timestamp$2.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  /**
   * Returns a Timestamp representing the given (32-bit) integer value.
   *
   * @method
   * @param {number} value the 32-bit integer in question.
   * @return {Timestamp} the corresponding Timestamp value.
   */
  Timestamp$2.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = Timestamp$2.INT_CACHE_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new Timestamp$2(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      Timestamp$2.INT_CACHE_[value] = obj;
    }
    return obj;
  };

  /**
   * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.
   *
   * @method
   * @param {number} value the number in question.
   * @return {Timestamp} the corresponding Timestamp value.
   */
  Timestamp$2.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return Timestamp$2.ZERO;
    } else if (value <= -Timestamp$2.TWO_PWR_63_DBL_) {
      return Timestamp$2.MIN_VALUE;
    } else if (value + 1 >= Timestamp$2.TWO_PWR_63_DBL_) {
      return Timestamp$2.MAX_VALUE;
    } else if (value < 0) {
      return Timestamp$2.fromNumber(-value).negate();
    } else {
      return new Timestamp$2(
        (value % Timestamp$2.TWO_PWR_32_DBL_) | 0,
        (value / Timestamp$2.TWO_PWR_32_DBL_) | 0
      );
    }
  };

  /**
   * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.
   *
   * @method
   * @param {number} lowBits the low 32-bits.
   * @param {number} highBits the high 32-bits.
   * @return {Timestamp} the corresponding Timestamp value.
   */
  Timestamp$2.fromBits = function(lowBits, highBits) {
    return new Timestamp$2(lowBits, highBits);
  };

  /**
   * Returns a Timestamp representation of the given string, written using the given radix.
   *
   * @method
   * @param {string} str the textual representation of the Timestamp.
   * @param {number} opt_radix the radix in which the text is written.
   * @return {Timestamp} the corresponding Timestamp value.
   */
  Timestamp$2.fromString = function(str, opt_radix) {
    if (str.length === 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) === '-') {
      return Timestamp$2.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = Timestamp$2.fromNumber(Math.pow(radix, 8));

    var result = Timestamp$2.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = Timestamp$2.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(Timestamp$2.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(Timestamp$2.fromNumber(value));
      }
    }
    return result;
  };

  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.

  /**
   * A cache of the Timestamp representations of small integer values.
   * @type {Object}
   * @ignore
   */
  Timestamp$2.INT_CACHE_ = {};

  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.

  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @ignore
   */
  Timestamp$2.TWO_PWR_16_DBL_ = 1 << 16;

  /**
   * @type {number}
   * @ignore
   */
  Timestamp$2.TWO_PWR_24_DBL_ = 1 << 24;

  /**
   * @type {number}
   * @ignore
   */
  Timestamp$2.TWO_PWR_32_DBL_ = Timestamp$2.TWO_PWR_16_DBL_ * Timestamp$2.TWO_PWR_16_DBL_;

  /**
   * @type {number}
   * @ignore
   */
  Timestamp$2.TWO_PWR_31_DBL_ = Timestamp$2.TWO_PWR_32_DBL_ / 2;

  /**
   * @type {number}
   * @ignore
   */
  Timestamp$2.TWO_PWR_48_DBL_ = Timestamp$2.TWO_PWR_32_DBL_ * Timestamp$2.TWO_PWR_16_DBL_;

  /**
   * @type {number}
   * @ignore
   */
  Timestamp$2.TWO_PWR_64_DBL_ = Timestamp$2.TWO_PWR_32_DBL_ * Timestamp$2.TWO_PWR_32_DBL_;

  /**
   * @type {number}
   * @ignore
   */
  Timestamp$2.TWO_PWR_63_DBL_ = Timestamp$2.TWO_PWR_64_DBL_ / 2;

  /** @type {Timestamp} */
  Timestamp$2.ZERO = Timestamp$2.fromInt(0);

  /** @type {Timestamp} */
  Timestamp$2.ONE = Timestamp$2.fromInt(1);

  /** @type {Timestamp} */
  Timestamp$2.NEG_ONE = Timestamp$2.fromInt(-1);

  /** @type {Timestamp} */
  Timestamp$2.MAX_VALUE = Timestamp$2.fromBits(0xffffffff | 0, 0x7fffffff | 0);

  /** @type {Timestamp} */
  Timestamp$2.MIN_VALUE = Timestamp$2.fromBits(0, 0x80000000 | 0);

  /**
   * @type {Timestamp}
   * @ignore
   */
  Timestamp$2.TWO_PWR_24_ = Timestamp$2.fromInt(1 << 24);

  /**
   * Expose.
   */
  var timestamp$1 = Timestamp$2;
  var Timestamp_1$1 = Timestamp$2;
  timestamp$1.Timestamp = Timestamp_1$1;

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init$1 () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init$1();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init$1();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read$2 (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray$2 = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer$9.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  /*
   * Export kMaxLength after typed array support is determined.
   */
  var _kMaxLength = kMaxLength();

  function kMaxLength () {
    return Buffer$9.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer$9.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer$9(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer$9 (arg, encodingOrOffset, length) {
    if (!Buffer$9.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$9)) {
      return new Buffer$9(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer$9.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer$9._augment = function (arr) {
    arr.__proto__ = Buffer$9.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer$9.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer$9.TYPED_ARRAY_SUPPORT) {
    Buffer$9.prototype.__proto__ = Uint8Array.prototype;
    Buffer$9.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer$9.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer$9.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer$9.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer$9.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer$9.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer$9.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray$2(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer$9.alloc(+length)
  }
  Buffer$9.isBuffer = isBuffer$1;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer$9.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer$9.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer$9.concat = function concat (list, length) {
    if (!isArray$2(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer$9.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer$9.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer$9.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer$9.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer$9.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer$9.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer$9.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer$9.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer$9.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer$9.compare(this, b) === 0
  };

  Buffer$9.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer$9.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer$9.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer$9.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer$9.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer$9.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer$9.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer$9.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer$9.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer$9.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer$9.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer$9(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer$9.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer$9.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer$9.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer$9.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer$9.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer$9.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer$9.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer$9.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$9.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$9.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer$9.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$9.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$9.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer$9.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer$9.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read$2(this, offset, true, 23, 4)
  };

  Buffer$9.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read$2(this, offset, false, 23, 4)
  };

  Buffer$9.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read$2(this, offset, true, 52, 8)
  };

  Buffer$9.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read$2(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer$9.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$9.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$9.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer$9.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer$9.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$9.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer$9.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$9.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer$9.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$9.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$9.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer$9.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer$9.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$9.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer$9.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$9.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer$9.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer$9.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer$9.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer$9.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer$9.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer$9.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer$9.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer$9.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer$9.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer$9(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer$1(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var bufferEs6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Buffer: Buffer$9,
    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
    SlowBuffer: SlowBuffer,
    isBuffer: isBuffer$1,
    kMaxLength: _kMaxLength
  });

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config = {};

  function noop$1() {}

  var on = noop$1;
  var addListener = noop$1;
  var once = noop$1;
  var off = noop$1;
  var removeListener = noop$1;
  var removeAllListeners = noop$1;
  var emit = noop$1;

  function binding$1(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance = global$1.performance || {};
  var performanceNow =
    performance.now        ||
    performance.mozNow     ||
    performance.msNow      ||
    performance.oNow       ||
    performance.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var browser$1 = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding$1,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  // Custom inspect property name / symbol.
  var inspect$2 = 'inspect';

  var utils$7 = require('./parser/utils');

  /**
   * Machine id.
   *
   * Create a random 3-byte value (i.e. unique for this
   * process). Other drivers use a md5 of the machine id here, but
   * that would mean an asyc call to gethostname, so we don't bother.
   * @ignore
   */
  var MACHINE_ID = parseInt(Math.random() * 0xffffff, 10);

  // Regular expression that checks for hex value
  var checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');

  // Check if buffer exists
  try {
    if (Buffer$9 && Buffer$9.from) {
      var hasBufferType = true;
      inspect$2 = require('util').inspect.custom || 'inspect';
    }
  } catch (err) {
    hasBufferType = false;
  }

  /**
  * Create a new ObjectID instance
  *
  * @class
  * @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.
  * @property {number} generationTime The generation time of this ObjectId instance
  * @return {ObjectID} instance of ObjectID.
  */
  var ObjectID$7 = function ObjectID(id) {
    // Duck-typing to support ObjectId from different npm packages
    if (id instanceof ObjectID) return id;
    if (!(this instanceof ObjectID)) return new ObjectID(id);

    this._bsontype = 'ObjectID';

    // The most common usecase (blank id, new objectId instance)
    if (id == null || typeof id === 'number') {
      // Generate a new id
      this.id = this.generate(id);
      // If we are caching the hex string
      if (ObjectID.cacheHexString) this.__id = this.toString('hex');
      // Return the object
      return;
    }

    // Check if the passed in id is valid
    var valid = ObjectID.isValid(id);

    // Throw an error if it's not a valid setup
    if (!valid && id != null) {
      throw new Error(
        'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'
      );
    } else if (valid && typeof id === 'string' && id.length === 24 && hasBufferType) {
      return new ObjectID(utils$7.toBuffer(id, 'hex'));
    } else if (valid && typeof id === 'string' && id.length === 24) {
      return ObjectID.createFromHexString(id);
    } else if (id != null && id.length === 12) {
      // assume 12 byte string
      this.id = id;
    } else if (id != null && typeof id.toHexString === 'function') {
      // Duck-typing to support ObjectId from different npm packages
      return id;
    } else {
      throw new Error(
        'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'
      );
    }

    if (ObjectID.cacheHexString) this.__id = this.toString('hex');
  };

  // Allow usage of ObjectId as well as ObjectID
  // var ObjectId = ObjectID;

  // Precomputed hex table enables speedy hex string conversion
  var hexTable = [];
  for (var i = 0; i < 256; i++) {
    hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);
  }

  /**
  * Return the ObjectID id as a 24 byte hex string representation
  *
  * @method
  * @return {string} return the 24 byte hex string representation.
  */
  ObjectID$7.prototype.toHexString = function() {
    if (ObjectID$7.cacheHexString && this.__id) return this.__id;

    var hexString = '';
    if (!this.id || !this.id.length) {
      throw new Error(
        'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +
          JSON.stringify(this.id) +
          ']'
      );
    }

    if (this.id instanceof _Buffer) {
      hexString = convertToHex(this.id);
      if (ObjectID$7.cacheHexString) this.__id = hexString;
      return hexString;
    }

    for (var i = 0; i < this.id.length; i++) {
      hexString += hexTable[this.id.charCodeAt(i)];
    }

    if (ObjectID$7.cacheHexString) this.__id = hexString;
    return hexString;
  };

  /**
  * Update the ObjectID index used in generating new ObjectID's on the driver
  *
  * @method
  * @return {number} returns next index value.
  * @ignore
  */
  ObjectID$7.prototype.get_inc = function() {
    return (ObjectID$7.index = (ObjectID$7.index + 1) % 0xffffff);
  };

  /**
  * Update the ObjectID index used in generating new ObjectID's on the driver
  *
  * @method
  * @return {number} returns next index value.
  * @ignore
  */
  ObjectID$7.prototype.getInc = function() {
    return this.get_inc();
  };

  /**
  * Generate a 12 byte id buffer used in ObjectID's
  *
  * @method
  * @param {number} [time] optional parameter allowing to pass in a second based timestamp.
  * @return {Buffer} return the 12 byte id buffer string.
  */
  ObjectID$7.prototype.generate = function(time) {
    if ('number' !== typeof time) {
      time = ~~(Date.now() / 1000);
    }

    // Use pid
    var pid =
      (typeof browser$1 === 'undefined' || browser$1.pid === 1
        ? Math.floor(Math.random() * 100000)
        : browser$1.pid) % 0xffff;
    var inc = this.get_inc();
    // Buffer used
    var buffer = utils$7.allocBuffer(12);
    // Encode time
    buffer[3] = time & 0xff;
    buffer[2] = (time >> 8) & 0xff;
    buffer[1] = (time >> 16) & 0xff;
    buffer[0] = (time >> 24) & 0xff;
    // Encode machine
    buffer[6] = MACHINE_ID & 0xff;
    buffer[5] = (MACHINE_ID >> 8) & 0xff;
    buffer[4] = (MACHINE_ID >> 16) & 0xff;
    // Encode pid
    buffer[8] = pid & 0xff;
    buffer[7] = (pid >> 8) & 0xff;
    // Encode index
    buffer[11] = inc & 0xff;
    buffer[10] = (inc >> 8) & 0xff;
    buffer[9] = (inc >> 16) & 0xff;
    // Return the buffer
    return buffer;
  };

  /**
  * Converts the id into a 24 byte hex string for printing
  *
  * @param {String} format The Buffer toString format parameter.
  * @return {String} return the 24 byte hex string representation.
  * @ignore
  */
  ObjectID$7.prototype.toString = function(format) {
    // Is the id a buffer then use the buffer toString method to return the format
    if (this.id && this.id.copy) {
      return this.id.toString(typeof format === 'string' ? format : 'hex');
    }

    // if(this.buffer )
    return this.toHexString();
  };

  /**
  * Converts to a string representation of this Id.
  *
  * @return {String} return the 24 byte hex string representation.
  * @ignore
  */
  ObjectID$7.prototype[inspect$2] = ObjectID$7.prototype.toString;

  /**
  * Converts to its JSON representation.
  *
  * @return {String} return the 24 byte hex string representation.
  * @ignore
  */
  ObjectID$7.prototype.toJSON = function() {
    return this.toHexString();
  };

  /**
  * Compares the equality of this ObjectID with `otherID`.
  *
  * @method
  * @param {object} otherID ObjectID instance to compare against.
  * @return {boolean} the result of comparing two ObjectID's
  */
  ObjectID$7.prototype.equals = function equals(otherId) {
    // var id;

    if (otherId instanceof ObjectID$7) {
      return this.toString() === otherId.toString();
    } else if (
      typeof otherId === 'string' &&
      ObjectID$7.isValid(otherId) &&
      otherId.length === 12 &&
      this.id instanceof _Buffer
    ) {
      return otherId === this.id.toString('binary');
    } else if (typeof otherId === 'string' && ObjectID$7.isValid(otherId) && otherId.length === 24) {
      return otherId.toLowerCase() === this.toHexString();
    } else if (typeof otherId === 'string' && ObjectID$7.isValid(otherId) && otherId.length === 12) {
      return otherId === this.id;
    } else if (otherId != null && (otherId instanceof ObjectID$7 || otherId.toHexString)) {
      return otherId.toHexString() === this.toHexString();
    } else {
      return false;
    }
  };

  /**
  * Returns the generation date (accurate up to the second) that this ID was generated.
  *
  * @method
  * @return {date} the generation date
  */
  ObjectID$7.prototype.getTimestamp = function() {
    var timestamp = new Date();
    var time = this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);
    timestamp.setTime(Math.floor(time) * 1000);
    return timestamp;
  };

  /**
  * @ignore
  */
  ObjectID$7.index = ~~(Math.random() * 0xffffff);

  /**
  * @ignore
  */
  ObjectID$7.createPk = function createPk() {
    return new ObjectID$7();
  };

  /**
  * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.
  *
  * @method
  * @param {number} time an integer number representing a number of seconds.
  * @return {ObjectID} return the created ObjectID
  */
  ObjectID$7.createFromTime = function createFromTime(time) {
    var buffer = utils$7.toBuffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    // Encode time into first 4 bytes
    buffer[3] = time & 0xff;
    buffer[2] = (time >> 8) & 0xff;
    buffer[1] = (time >> 16) & 0xff;
    buffer[0] = (time >> 24) & 0xff;
    // Return the new objectId
    return new ObjectID$7(buffer);
  };

  // Lookup tables
  //var encodeLookup = '0123456789abcdef'.split('');
  var decodeLookup = [];
  i = 0;
  while (i < 10) decodeLookup[0x30 + i] = i++;
  while (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;

  var _Buffer = Buffer$9;
  var convertToHex = function(bytes) {
    return bytes.toString('hex');
  };

  /**
  * Creates an ObjectID from a hex string representation of an ObjectID.
  *
  * @method
  * @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.
  * @return {ObjectID} return the created ObjectID
  */
  ObjectID$7.createFromHexString = function createFromHexString(string) {
    // Throw an error if it's not a valid setup
    if (typeof string === 'undefined' || (string != null && string.length !== 24)) {
      throw new Error(
        'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'
      );
    }

    // Use Buffer.from method if available
    if (hasBufferType) return new ObjectID$7(utils$7.toBuffer(string, 'hex'));

    // Calculate lengths
    var array = new _Buffer(12);
    var n = 0;
    var i = 0;

    while (i < 24) {
      array[n++] = (decodeLookup[string.charCodeAt(i++)] << 4) | decodeLookup[string.charCodeAt(i++)];
    }

    return new ObjectID$7(array);
  };

  /**
  * Checks if a value is a valid bson ObjectId
  *
  * @method
  * @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.
  */
  ObjectID$7.isValid = function isValid(id) {
    if (id == null) return false;

    if (typeof id === 'number') {
      return true;
    }

    if (typeof id === 'string') {
      return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));
    }

    if (id instanceof ObjectID$7) {
      return true;
    }

    if (id instanceof _Buffer) {
      return true;
    }

    // Duck-Typing detection of ObjectId like objects
    if (
        typeof id.toHexString === 'function' &&
        (id.id instanceof _Buffer || typeof id.id === 'string')
    ) {
      return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));
    }

    return false;
  };

  /**
  * @ignore
  */
  Object.defineProperty(ObjectID$7.prototype, 'generationTime', {
    enumerable: true,
    get: function() {
      return this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);
    },
    set: function(value) {
      // Encode time into first 4 bytes
      this.id[3] = value & 0xff;
      this.id[2] = (value >> 8) & 0xff;
      this.id[1] = (value >> 16) & 0xff;
      this.id[0] = (value >> 24) & 0xff;
    }
  });

  /**
   * Expose.
   */
  module.exports = ObjectID$7;
  module.exports.ObjectID = ObjectID$7;
  module.exports.ObjectId = ObjectID$7;

  var objectid = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  /**
   * A class representation of the BSON RegExp type.
   *
   * @class
   * @return {BSONRegExp} A MinKey instance
   */
  function BSONRegExp$2(pattern, options) {
    if (!(this instanceof BSONRegExp$2)) return new BSONRegExp$2();

    // Execute
    this._bsontype = 'BSONRegExp';
    this.pattern = pattern || '';
    this.options = options || '';

    // Validate options
    for (var i = 0; i < this.options.length; i++) {
      if (
        !(
          this.options[i] === 'i' ||
          this.options[i] === 'm' ||
          this.options[i] === 'x' ||
          this.options[i] === 'l' ||
          this.options[i] === 's' ||
          this.options[i] === 'u'
        )
      ) {
        throw new Error('the regular expression options [' + this.options[i] + '] is not supported');
      }
    }
  }

  var regexp$1 = BSONRegExp$2;
  var BSONRegExp_1$1 = BSONRegExp$2;
  regexp$1.BSONRegExp = BSONRegExp_1$1;

  // Custom inspect property name / symbol.
  var inspect$1 = Buffer$9 ? require('util').inspect.custom || 'inspect' : 'inspect';

  /**
   * A class representation of the BSON Symbol type.
   *
   * @class
   * @deprecated
   * @param {string} value the string representing the symbol.
   * @return {Symbol}
   */
  function Symbol$4(value) {
    if (!(this instanceof Symbol$4)) return new Symbol$4(value);
    this._bsontype = 'Symbol';
    this.value = value;
  }

  /**
   * Access the wrapped string value.
   *
   * @method
   * @return {String} returns the wrapped string.
   */
  Symbol$4.prototype.valueOf = function() {
    return this.value;
  };

  /**
   * @ignore
   */
  Symbol$4.prototype.toString = function() {
    return this.value;
  };

  /**
   * @ignore
   */
  Symbol$4.prototype[inspect$1] = function() {
    return this.value;
  };

  /**
   * @ignore
   */
  Symbol$4.prototype.toJSON = function() {
    return this.value;
  };

  module.exports = Symbol$4;
  module.exports.Symbol = Symbol$4;

  var symbol = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  /**
   * A class representation of a BSON Int32 type.
   *
   * @class
   * @param {number} value the number we want to represent as an int32.
   * @return {Int32}
   */
  var Int32 = function(value) {
    if (!(this instanceof Int32)) return new Int32(value);

    this._bsontype = 'Int32';
    this.value = value;
  };

  /**
   * Access the number value.
   *
   * @method
   * @return {number} returns the wrapped int32 number.
   */
  Int32.prototype.valueOf = function() {
    return this.value;
  };

  /**
   * @ignore
   */
  Int32.prototype.toJSON = function() {
    return this.value;
  };

  var int_32 = Int32;
  var Int32_1$1 = Int32;
  int_32.Int32 = Int32_1$1;

  /**
   * A class representation of the BSON Code type.
   *
   * @class
   * @param {(string|function)} code a string or function.
   * @param {Object} [scope] an optional scope for the function.
   * @return {Code}
   */
  var Code$4 = function Code(code, scope) {
    if (!(this instanceof Code)) return new Code(code, scope);
    this._bsontype = 'Code';
    this.code = code;
    this.scope = scope;
  };

  /**
   * @ignore
   */
  Code$4.prototype.toJSON = function() {
    return { scope: this.scope, code: this.code };
  };

  var code = Code$4;
  var Code_1$1 = Code$4;
  code.Code = Code_1$1;

  /**
   * Normalizes our expected stringified form of a function across versions of node
   * @param {Function} fn The function to stringify
   */
  function normalizedFunctionString$2(fn) {
    return fn.toString().replace(/function *\(/, 'function (');
  }

  function newBuffer(item, encoding) {
    return new Buffer$9(item, encoding);
  }

  function allocBuffer() {
    return Buffer$9.alloc.apply(Buffer$9, arguments);
  }

  function toBuffer() {
    return Buffer$9.from.apply(Buffer$9, arguments);
  }

  module.exports = {
    normalizedFunctionString: normalizedFunctionString$2,
    allocBuffer: typeof Buffer$9.alloc === 'function' ? allocBuffer : newBuffer,
    toBuffer: typeof Buffer$9.from === 'function' ? toBuffer : newBuffer
  };

  var utils$6 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var utils$5 = /*@__PURE__*/getAugmentedNamespace(utils$6);

  var PARSE_STRING_REGEXP = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/;
  var PARSE_INF_REGEXP = /^(\+|-)?(Infinity|inf)$/i;
  var PARSE_NAN_REGEXP = /^(\+|-)?NaN$/i;

  var EXPONENT_MAX = 6111;
  var EXPONENT_MIN = -6176;
  var EXPONENT_BIAS = 6176;
  var MAX_DIGITS = 34;

  // Nan value bits as 32 bit values (due to lack of longs)
  var NAN_BUFFER = [
    0x7c,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
  ].reverse();
  // Infinity value bits 32 bit values (due to lack of longs)
  var INF_NEGATIVE_BUFFER = [
    0xf8,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
  ].reverse();
  var INF_POSITIVE_BUFFER = [
    0x78,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
  ].reverse();

  var EXPONENT_REGEX = /^([-+])?(\d+)?$/;



  // Detect if the value is a digit
  var isDigit = function(value) {
    return !isNaN(parseInt(value, 10));
  };

  // Divide two uint128 values
  var divideu128 = function(value) {
    var DIVISOR = long.fromNumber(1000 * 1000 * 1000);
    var _rem = long.fromNumber(0);
    var i = 0;

    if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {
      return { quotient: value, rem: _rem };
    }

    for (i = 0; i <= 3; i++) {
      // Adjust remainder to match value of next dividend
      _rem = _rem.shiftLeft(32);
      // Add the divided to _rem
      _rem = _rem.add(new long(value.parts[i], 0));
      value.parts[i] = _rem.div(DIVISOR).low_;
      _rem = _rem.modulo(DIVISOR);
    }

    return { quotient: value, rem: _rem };
  };

  // Multiply two Long values and return the 128 bit value
  var multiply64x2 = function(left, right) {
    if (!left && !right) {
      return { high: long.fromNumber(0), low: long.fromNumber(0) };
    }

    var leftHigh = left.shiftRightUnsigned(32);
    var leftLow = new long(left.getLowBits(), 0);
    var rightHigh = right.shiftRightUnsigned(32);
    var rightLow = new long(right.getLowBits(), 0);

    var productHigh = leftHigh.multiply(rightHigh);
    var productMid = leftHigh.multiply(rightLow);
    var productMid2 = leftLow.multiply(rightHigh);
    var productLow = leftLow.multiply(rightLow);

    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productMid = new long(productMid.getLowBits(), 0)
      .add(productMid2)
      .add(productLow.shiftRightUnsigned(32));

    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productLow = productMid.shiftLeft(32).add(new long(productLow.getLowBits(), 0));

    // Return the 128 bit result
    return { high: productHigh, low: productLow };
  };

  var lessThan = function(left, right) {
    // Make values unsigned
    var uhleft = left.high_ >>> 0;
    var uhright = right.high_ >>> 0;

    // Compare high bits first
    if (uhleft < uhright) {
      return true;
    } else if (uhleft === uhright) {
      var ulleft = left.low_ >>> 0;
      var ulright = right.low_ >>> 0;
      if (ulleft < ulright) return true;
    }

    return false;
  };

  // var longtoHex = function(value) {
  //   var buffer = utils.allocBuffer(8);
  //   var index = 0;
  //   // Encode the low 64 bits of the decimal
  //   // Encode low bits
  //   buffer[index++] = value.low_ & 0xff;
  //   buffer[index++] = (value.low_ >> 8) & 0xff;
  //   buffer[index++] = (value.low_ >> 16) & 0xff;
  //   buffer[index++] = (value.low_ >> 24) & 0xff;
  //   // Encode high bits
  //   buffer[index++] = value.high_ & 0xff;
  //   buffer[index++] = (value.high_ >> 8) & 0xff;
  //   buffer[index++] = (value.high_ >> 16) & 0xff;
  //   buffer[index++] = (value.high_ >> 24) & 0xff;
  //   return buffer.reverse().toString('hex');
  // };

  // var int32toHex = function(value) {
  //   var buffer = utils.allocBuffer(4);
  //   var index = 0;
  //   // Encode the low 64 bits of the decimal
  //   // Encode low bits
  //   buffer[index++] = value & 0xff;
  //   buffer[index++] = (value >> 8) & 0xff;
  //   buffer[index++] = (value >> 16) & 0xff;
  //   buffer[index++] = (value >> 24) & 0xff;
  //   return buffer.reverse().toString('hex');
  // };

  /**
   * A class representation of the BSON Decimal128 type.
   *
   * @class
   * @param {Buffer} bytes a buffer containing the raw Decimal128 bytes.
   * @return {Double}
   */
  var Decimal128$1 = function(bytes) {
    this._bsontype = 'Decimal128';
    this.bytes = bytes;
  };

  /**
   * Create a Decimal128 instance from a string representation
   *
   * @method
   * @param {string} string a numeric string representation.
   * @return {Decimal128} returns a Decimal128 instance.
   */
  Decimal128$1.fromString = function(string) {
    // Parse state tracking
    var isNegative = false;
    var sawRadix = false;
    var foundNonZero = false;

    // Total number of significant digits (no leading or trailing zero)
    var significantDigits = 0;
    // Total number of significand digits read
    var nDigitsRead = 0;
    // Total number of digits (no leading zeros)
    var nDigits = 0;
    // The number of the digits after radix
    var radixPosition = 0;
    // The index of the first non-zero in *str*
    var firstNonZero = 0;

    // Digits Array
    var digits = [0];
    // The number of digits in digits
    var nDigitsStored = 0;
    // Insertion pointer for digits
    var digitsInsert = 0;
    // The index of the first non-zero digit
    var firstDigit = 0;
    // The index of the last digit
    var lastDigit = 0;

    // Exponent
    var exponent = 0;
    // loop index over array
    var i = 0;
    // The high 17 digits of the significand
    var significandHigh = [0, 0];
    // The low 17 digits of the significand
    var significandLow = [0, 0];
    // The biased exponent
    var biasedExponent = 0;

    // Read index
    var index = 0;

    // Trim the string
    string = string.trim();

    // Naively prevent against REDOS attacks.
    // TODO: implementing a custom parsing for this, or refactoring the regex would yield
    //       further gains.
    if (string.length >= 7000) {
      throw new Error('' + string + ' not a valid Decimal128 string');
    }

    // Results
    var stringMatch = string.match(PARSE_STRING_REGEXP);
    var infMatch = string.match(PARSE_INF_REGEXP);
    var nanMatch = string.match(PARSE_NAN_REGEXP);

    // Validate the string
    if ((!stringMatch && !infMatch && !nanMatch) || string.length === 0) {
      throw new Error('' + string + ' not a valid Decimal128 string');
    }

    // Check if we have an illegal exponent format
    if (stringMatch && stringMatch[4] && stringMatch[2] === undefined) {
      throw new Error('' + string + ' not a valid Decimal128 string');
    }

    // Get the negative or positive sign
    if (string[index] === '+' || string[index] === '-') {
      isNegative = string[index++] === '-';
    }

    // Check if user passed Infinity or NaN
    if (!isDigit(string[index]) && string[index] !== '.') {
      if (string[index] === 'i' || string[index] === 'I') {
        return new Decimal128$1(utils$5.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
      } else if (string[index] === 'N') {
        return new Decimal128$1(utils$5.toBuffer(NAN_BUFFER));
      }
    }

    // Read all the digits
    while (isDigit(string[index]) || string[index] === '.') {
      if (string[index] === '.') {
        if (sawRadix) {
          return new Decimal128$1(utils$5.toBuffer(NAN_BUFFER));
        }

        sawRadix = true;
        index = index + 1;
        continue;
      }

      if (nDigitsStored < 34) {
        if (string[index] !== '0' || foundNonZero) {
          if (!foundNonZero) {
            firstNonZero = nDigitsRead;
          }

          foundNonZero = true;

          // Only store 34 digits
          digits[digitsInsert++] = parseInt(string[index], 10);
          nDigitsStored = nDigitsStored + 1;
        }
      }

      if (foundNonZero) {
        nDigits = nDigits + 1;
      }

      if (sawRadix) {
        radixPosition = radixPosition + 1;
      }

      nDigitsRead = nDigitsRead + 1;
      index = index + 1;
    }

    if (sawRadix && !nDigitsRead) {
      throw new Error('' + string + ' not a valid Decimal128 string');
    }

    // Read exponent if exists
    if (string[index] === 'e' || string[index] === 'E') {
      // Read exponent digits
      var match = string.substr(++index).match(EXPONENT_REGEX);

      // No digits read
      if (!match || !match[2]) {
        return new Decimal128$1(utils$5.toBuffer(NAN_BUFFER));
      }

      // Get exponent
      exponent = parseInt(match[0], 10);

      // Adjust the index
      index = index + match[0].length;
    }

    // Return not a number
    if (string[index]) {
      return new Decimal128$1(utils$5.toBuffer(NAN_BUFFER));
    }

    // Done reading input
    // Find first non-zero digit in digits
    firstDigit = 0;

    if (!nDigitsStored) {
      firstDigit = 0;
      lastDigit = 0;
      digits[0] = 0;
      nDigits = 1;
      nDigitsStored = 1;
      significantDigits = 0;
    } else {
      lastDigit = nDigitsStored - 1;
      significantDigits = nDigits;

      if (exponent !== 0 && significantDigits !== 1) {
        while (string[firstNonZero + significantDigits - 1] === '0') {
          significantDigits = significantDigits - 1;
        }
      }
    }

    // Normalization of exponent
    // Correct exponent based on radix position, and shift significand as needed
    // to represent user input

    // Overflow prevention
    if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {
      exponent = EXPONENT_MIN;
    } else {
      exponent = exponent - radixPosition;
    }

    // Attempt to normalize the exponent
    while (exponent > EXPONENT_MAX) {
      // Shift exponent to significand and decrease
      lastDigit = lastDigit + 1;

      if (lastDigit - firstDigit > MAX_DIGITS) {
        // Check if we have a zero then just hard clamp, otherwise fail
        var digitsString = digits.join('');
        if (digitsString.match(/^0+$/)) {
          exponent = EXPONENT_MAX;
          break;
        } else {
          return new Decimal128$1(utils$5.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
        }
      }

      exponent = exponent - 1;
    }

    while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {
      // Shift last digit
      if (lastDigit === 0) {
        exponent = EXPONENT_MIN;
        significantDigits = 0;
        break;
      }

      if (nDigitsStored < nDigits) {
        // adjust to match digits not stored
        nDigits = nDigits - 1;
      } else {
        // adjust to round
        lastDigit = lastDigit - 1;
      }

      if (exponent < EXPONENT_MAX) {
        exponent = exponent + 1;
      } else {
        // Check if we have a zero then just hard clamp, otherwise fail
        digitsString = digits.join('');
        if (digitsString.match(/^0+$/)) {
          exponent = EXPONENT_MAX;
          break;
        } else {
          return new Decimal128$1(utils$5.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
        }
      }
    }

    // Round
    // We've normalized the exponent, but might still need to round.
    if (lastDigit - firstDigit + 1 < significantDigits && string[significantDigits] !== '0') {
      var endOfString = nDigitsRead;

      // If we have seen a radix point, 'string' is 1 longer than we have
      // documented with ndigits_read, so inc the position of the first nonzero
      // digit and the position that digits are read to.
      if (sawRadix && exponent === EXPONENT_MIN) {
        firstNonZero = firstNonZero + 1;
        endOfString = endOfString + 1;
      }

      var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);
      var roundBit = 0;

      if (roundDigit >= 5) {
        roundBit = 1;

        if (roundDigit === 5) {
          roundBit = digits[lastDigit] % 2 === 1;

          for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {
            if (parseInt(string[i], 10)) {
              roundBit = 1;
              break;
            }
          }
        }
      }

      if (roundBit) {
        var dIdx = lastDigit;

        for (; dIdx >= 0; dIdx--) {
          if (++digits[dIdx] > 9) {
            digits[dIdx] = 0;

            // overflowed most significant digit
            if (dIdx === 0) {
              if (exponent < EXPONENT_MAX) {
                exponent = exponent + 1;
                digits[dIdx] = 1;
              } else {
                return new Decimal128$1(
                  utils$5.toBuffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER)
                );
              }
            }
          } else {
            break;
          }
        }
      }
    }

    // Encode significand
    // The high 17 digits of the significand
    significandHigh = long.fromNumber(0);
    // The low 17 digits of the significand
    significandLow = long.fromNumber(0);

    // read a zero
    if (significantDigits === 0) {
      significandHigh = long.fromNumber(0);
      significandLow = long.fromNumber(0);
    } else if (lastDigit - firstDigit < 17) {
      dIdx = firstDigit;
      significandLow = long.fromNumber(digits[dIdx++]);
      significandHigh = new long(0, 0);

      for (; dIdx <= lastDigit; dIdx++) {
        significandLow = significandLow.multiply(long.fromNumber(10));
        significandLow = significandLow.add(long.fromNumber(digits[dIdx]));
      }
    } else {
      dIdx = firstDigit;
      significandHigh = long.fromNumber(digits[dIdx++]);

      for (; dIdx <= lastDigit - 17; dIdx++) {
        significandHigh = significandHigh.multiply(long.fromNumber(10));
        significandHigh = significandHigh.add(long.fromNumber(digits[dIdx]));
      }

      significandLow = long.fromNumber(digits[dIdx++]);

      for (; dIdx <= lastDigit; dIdx++) {
        significandLow = significandLow.multiply(long.fromNumber(10));
        significandLow = significandLow.add(long.fromNumber(digits[dIdx]));
      }
    }

    var significand = multiply64x2(significandHigh, long.fromString('100000000000000000'));

    significand.low = significand.low.add(significandLow);

    if (lessThan(significand.low, significandLow)) {
      significand.high = significand.high.add(long.fromNumber(1));
    }

    // Biased exponent
    biasedExponent = exponent + EXPONENT_BIAS;
    var dec = { low: long.fromNumber(0), high: long.fromNumber(0) };

    // Encode combination, exponent, and significand.
    if (
      significand.high
        .shiftRightUnsigned(49)
        .and(long.fromNumber(1))
        .equals(long.fromNumber)
    ) {
      // Encode '11' into bits 1 to 3
      dec.high = dec.high.or(long.fromNumber(0x3).shiftLeft(61));
      dec.high = dec.high.or(
        long.fromNumber(biasedExponent).and(long.fromNumber(0x3fff).shiftLeft(47))
      );
      dec.high = dec.high.or(significand.high.and(long.fromNumber(0x7fffffffffff)));
    } else {
      dec.high = dec.high.or(long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));
      dec.high = dec.high.or(significand.high.and(long.fromNumber(0x1ffffffffffff)));
    }

    dec.low = significand.low;

    // Encode sign
    if (isNegative) {
      dec.high = dec.high.or(long.fromString('9223372036854775808'));
    }

    // Encode into a buffer
    var buffer = utils$5.allocBuffer(16);
    index = 0;

    // Encode the low 64 bits of the decimal
    // Encode low bits
    buffer[index++] = dec.low.low_ & 0xff;
    buffer[index++] = (dec.low.low_ >> 8) & 0xff;
    buffer[index++] = (dec.low.low_ >> 16) & 0xff;
    buffer[index++] = (dec.low.low_ >> 24) & 0xff;
    // Encode high bits
    buffer[index++] = dec.low.high_ & 0xff;
    buffer[index++] = (dec.low.high_ >> 8) & 0xff;
    buffer[index++] = (dec.low.high_ >> 16) & 0xff;
    buffer[index++] = (dec.low.high_ >> 24) & 0xff;

    // Encode the high 64 bits of the decimal
    // Encode low bits
    buffer[index++] = dec.high.low_ & 0xff;
    buffer[index++] = (dec.high.low_ >> 8) & 0xff;
    buffer[index++] = (dec.high.low_ >> 16) & 0xff;
    buffer[index++] = (dec.high.low_ >> 24) & 0xff;
    // Encode high bits
    buffer[index++] = dec.high.high_ & 0xff;
    buffer[index++] = (dec.high.high_ >> 8) & 0xff;
    buffer[index++] = (dec.high.high_ >> 16) & 0xff;
    buffer[index++] = (dec.high.high_ >> 24) & 0xff;

    // Return the new Decimal128
    return new Decimal128$1(buffer);
  };

  // Extract least significant 5 bits
  var COMBINATION_MASK = 0x1f;
  // Extract least significant 14 bits
  var EXPONENT_MASK = 0x3fff;
  // Value of combination field for Inf
  var COMBINATION_INFINITY = 30;
  // Value of combination field for NaN
  var COMBINATION_NAN = 31;
  // Value of combination field for NaN
  // var COMBINATION_SNAN = 32;
  // decimal128 exponent bias
  EXPONENT_BIAS = 6176;

  /**
   * Create a string representation of the raw Decimal128 value
   *
   * @method
   * @return {string} returns a Decimal128 string representation.
   */
  Decimal128$1.prototype.toString = function() {
    // Note: bits in this routine are referred to starting at 0,
    // from the sign bit, towards the coefficient.

    // bits 0 - 31
    var high;
    // bits 32 - 63
    var midh;
    // bits 64 - 95
    var midl;
    // bits 96 - 127
    var low;
    // bits 1 - 5
    var combination;
    // decoded biased exponent (14 bits)
    var biased_exponent;
    // the number of significand digits
    var significand_digits = 0;
    // the base-10 digits in the significand
    var significand = new Array(36);
    for (var i = 0; i < significand.length; i++) significand[i] = 0;
    // read pointer into significand
    var index = 0;

    // unbiased exponent
    var exponent;
    // the exponent if scientific notation is used
    var scientific_exponent;

    // true if the number is zero
    var is_zero = false;

    // the most signifcant significand bits (50-46)
    var significand_msb;
    // temporary storage for significand decoding
    var significand128 = { parts: new Array(4) };
    var j, k;

    // Output string
    var string = [];

    // Unpack index
    index = 0;

    // Buffer reference
    var buffer = this.bytes;

    // Unpack the low 64bits into a long
    low =
      buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
    midl =
      buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);

    // Unpack the high 64bits into a long
    midh =
      buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
    high =
      buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);

    // Unpack index
    index = 0;

    // Create the state of the decimal
    var dec = {
      low: new long(low, midl),
      high: new long(midh, high)
    };

    if (dec.high.lessThan(long.ZERO)) {
      string.push('-');
    }

    // Decode combination field and exponent
    combination = (high >> 26) & COMBINATION_MASK;

    if (combination >> 3 === 3) {
      // Check for 'special' values
      if (combination === COMBINATION_INFINITY) {
        return string.join('') + 'Infinity';
      } else if (combination === COMBINATION_NAN) {
        return 'NaN';
      } else {
        biased_exponent = (high >> 15) & EXPONENT_MASK;
        significand_msb = 0x08 + ((high >> 14) & 0x01);
      }
    } else {
      significand_msb = (high >> 14) & 0x07;
      biased_exponent = (high >> 17) & EXPONENT_MASK;
    }

    exponent = biased_exponent - EXPONENT_BIAS;

    // Create string of significand digits

    // Convert the 114-bit binary number represented by
    // (significand_high, significand_low) to at most 34 decimal
    // digits through modulo and division.
    significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);
    significand128.parts[1] = midh;
    significand128.parts[2] = midl;
    significand128.parts[3] = low;

    if (
      significand128.parts[0] === 0 &&
      significand128.parts[1] === 0 &&
      significand128.parts[2] === 0 &&
      significand128.parts[3] === 0
    ) {
      is_zero = true;
    } else {
      for (k = 3; k >= 0; k--) {
        var least_digits = 0;
        // Peform the divide
        var result = divideu128(significand128);
        significand128 = result.quotient;
        least_digits = result.rem.low_;

        // We now have the 9 least significant digits (in base 2).
        // Convert and output to string.
        if (!least_digits) continue;

        for (j = 8; j >= 0; j--) {
          // significand[k * 9 + j] = Math.round(least_digits % 10);
          significand[k * 9 + j] = least_digits % 10;
          // least_digits = Math.round(least_digits / 10);
          least_digits = Math.floor(least_digits / 10);
        }
      }
    }

    // Output format options:
    // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd
    // Regular    - ddd.ddd

    if (is_zero) {
      significand_digits = 1;
      significand[index] = 0;
    } else {
      significand_digits = 36;
      i = 0;

      while (!significand[index]) {
        i++;
        significand_digits = significand_digits - 1;
        index = index + 1;
      }
    }

    scientific_exponent = significand_digits - 1 + exponent;

    // The scientific exponent checks are dictated by the string conversion
    // specification and are somewhat arbitrary cutoffs.
    //
    // We must check exponent > 0, because if this is the case, the number
    // has trailing zeros.  However, we *cannot* output these trailing zeros,
    // because doing so would change the precision of the value, and would
    // change stored data if the string converted number is round tripped.

    if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {
      // Scientific format
      string.push(significand[index++]);
      significand_digits = significand_digits - 1;

      if (significand_digits) {
        string.push('.');
      }

      for (i = 0; i < significand_digits; i++) {
        string.push(significand[index++]);
      }

      // Exponent
      string.push('E');
      if (scientific_exponent > 0) {
        string.push('+' + scientific_exponent);
      } else {
        string.push(scientific_exponent);
      }
    } else {
      // Regular format with no decimal place
      if (exponent >= 0) {
        for (i = 0; i < significand_digits; i++) {
          string.push(significand[index++]);
        }
      } else {
        var radix_position = significand_digits + exponent;

        // non-zero digits before radix
        if (radix_position > 0) {
          for (i = 0; i < radix_position; i++) {
            string.push(significand[index++]);
          }
        } else {
          string.push('0');
        }

        string.push('.');
        // add leading zeros after radix
        while (radix_position++ < 0) {
          string.push('0');
        }

        for (i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {
          string.push(significand[index++]);
        }
      }
    }

    return string.join('');
  };

  Decimal128$1.prototype.toJSON = function() {
    return { $numberDecimal: this.toString() };
  };

  var decimal128 = Decimal128$1;
  var Decimal128_1$1 = Decimal128$1;
  decimal128.Decimal128 = Decimal128_1$1;

  /**
   * A class representation of the BSON MinKey type.
   *
   * @class
   * @return {MinKey} A MinKey instance
   */
  function MinKey$2() {
    if (!(this instanceof MinKey$2)) return new MinKey$2();

    this._bsontype = 'MinKey';
  }

  var min_key = MinKey$2;
  var MinKey_1$1 = MinKey$2;
  min_key.MinKey = MinKey_1$1;

  /**
   * A class representation of the BSON MaxKey type.
   *
   * @class
   * @return {MaxKey} A MaxKey instance
   */
  function MaxKey$2() {
    if (!(this instanceof MaxKey$2)) return new MaxKey$2();

    this._bsontype = 'MaxKey';
  }

  var max_key = MaxKey$2;
  var MaxKey_1$1 = MaxKey$2;
  max_key.MaxKey = MaxKey_1$1;

  /**
   * A class representation of the BSON DBRef type.
   *
   * @class
   * @param {string} namespace the collection name.
   * @param {ObjectID} oid the reference ObjectID.
   * @param {string} [db] optional db name, if omitted the reference is local to the current db.
   * @return {DBRef}
   */
  function DBRef$2(namespace, oid, db) {
    if (!(this instanceof DBRef$2)) return new DBRef$2(namespace, oid, db);

    this._bsontype = 'DBRef';
    this.namespace = namespace;
    this.oid = oid;
    this.db = db;
  }

  /**
   * @ignore
   * @api private
   */
  DBRef$2.prototype.toJSON = function() {
    return {
      $ref: this.namespace,
      $id: this.oid,
      $db: this.db == null ? '' : this.db
    };
  };

  var db_ref = DBRef$2;
  var DBRef_1$1 = DBRef$2;
  db_ref.DBRef = DBRef_1$1;

  /**
   * Module dependencies.
   * @ignore
   */

  // Test if we're in Node via presence of "global" not absence of "window"
  // to support hybrid environments like Electron
  if (typeof global$1 !== 'undefined') {
    var Buffer$8 = require('buffer').Buffer; // TODO just use global Buffer
  }

  var utils$4 = require('./parser/utils');

  /**
   * A class representation of the BSON Binary type.
   *
   * Sub types
   *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.
   *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.
   *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.
   *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.
   *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.
   *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.
   *
   * @class
   * @param {Buffer} buffer a buffer object containing the binary data.
   * @param {Number} [subType] the option binary type.
   * @return {Binary}
   */
  function Binary$8(buffer, subType) {
    if (!(this instanceof Binary$8)) return new Binary$8(buffer, subType);

    if (
      buffer != null &&
      !(typeof buffer === 'string') &&
      !Buffer$8.isBuffer(buffer) &&
      !(buffer instanceof Uint8Array) &&
      !Array.isArray(buffer)
    ) {
      throw new Error('only String, Buffer, Uint8Array or Array accepted');
    }

    this._bsontype = 'Binary';

    if (buffer instanceof Number) {
      this.sub_type = buffer;
      this.position = 0;
    } else {
      this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;
      this.position = 0;
    }

    if (buffer != null && !(buffer instanceof Number)) {
      // Only accept Buffer, Uint8Array or Arrays
      if (typeof buffer === 'string') {
        // Different ways of writing the length of the string for the different types
        if (typeof Buffer$8 !== 'undefined') {
          this.buffer = utils$4.toBuffer(buffer);
        } else if (
          typeof Uint8Array !== 'undefined' ||
          Object.prototype.toString.call(buffer) === '[object Array]'
        ) {
          this.buffer = writeStringToArray(buffer);
        } else {
          throw new Error('only String, Buffer, Uint8Array or Array accepted');
        }
      } else {
        this.buffer = buffer;
      }
      this.position = buffer.length;
    } else {
      if (typeof Buffer$8 !== 'undefined') {
        this.buffer = utils$4.allocBuffer(Binary$8.BUFFER_SIZE);
      } else if (typeof Uint8Array !== 'undefined') {
        this.buffer = new Uint8Array(new ArrayBuffer(Binary$8.BUFFER_SIZE));
      } else {
        this.buffer = new Array(Binary$8.BUFFER_SIZE);
      }
      // Set position to start of buffer
      this.position = 0;
    }
  }

  /**
   * Updates this binary with byte_value.
   *
   * @method
   * @param {string} byte_value a single byte we wish to write.
   */
  Binary$8.prototype.put = function put(byte_value) {
    // If it's a string and a has more than one character throw an error
    if (byte_value['length'] != null && typeof byte_value !== 'number' && byte_value.length !== 1)
      throw new Error('only accepts single character String, Uint8Array or Array');
    if ((typeof byte_value !== 'number' && byte_value < 0) || byte_value > 255)
      throw new Error('only accepts number in a valid unsigned byte range 0-255');

    // Decode the byte value once
    var decoded_byte = null;
    if (typeof byte_value === 'string') {
      decoded_byte = byte_value.charCodeAt(0);
    } else if (byte_value['length'] != null) {
      decoded_byte = byte_value[0];
    } else {
      decoded_byte = byte_value;
    }

    if (this.buffer.length > this.position) {
      this.buffer[this.position++] = decoded_byte;
    } else {
      if (typeof Buffer$8 !== 'undefined' && Buffer$8.isBuffer(this.buffer)) {
        // Create additional overflow buffer
        var buffer = utils$4.allocBuffer(Binary$8.BUFFER_SIZE + this.buffer.length);
        // Combine the two buffers together
        this.buffer.copy(buffer, 0, 0, this.buffer.length);
        this.buffer = buffer;
        this.buffer[this.position++] = decoded_byte;
      } else {
        buffer = null;
        // Create a new buffer (typed or normal array)
        if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {
          buffer = new Uint8Array(new ArrayBuffer(Binary$8.BUFFER_SIZE + this.buffer.length));
        } else {
          buffer = new Array(Binary$8.BUFFER_SIZE + this.buffer.length);
        }

        // We need to copy all the content to the new array
        for (var i = 0; i < this.buffer.length; i++) {
          buffer[i] = this.buffer[i];
        }

        // Reassign the buffer
        this.buffer = buffer;
        // Write the byte
        this.buffer[this.position++] = decoded_byte;
      }
    }
  };

  /**
   * Writes a buffer or string to the binary.
   *
   * @method
   * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.
   * @param {number} offset specify the binary of where to write the content.
   * @return {null}
   */
  Binary$8.prototype.write = function write(string, offset) {
    offset = typeof offset === 'number' ? offset : this.position;

    // If the buffer is to small let's extend the buffer
    if (this.buffer.length < offset + string.length) {
      var buffer = null;
      // If we are in node.js
      if (typeof Buffer$8 !== 'undefined' && Buffer$8.isBuffer(this.buffer)) {
        buffer = utils$4.allocBuffer(this.buffer.length + string.length);
        this.buffer.copy(buffer, 0, 0, this.buffer.length);
      } else if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {
        // Create a new buffer
        buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length));
        // Copy the content
        for (var i = 0; i < this.position; i++) {
          buffer[i] = this.buffer[i];
        }
      }

      // Assign the new buffer
      this.buffer = buffer;
    }

    if (typeof Buffer$8 !== 'undefined' && Buffer$8.isBuffer(string) && Buffer$8.isBuffer(this.buffer)) {
      string.copy(this.buffer, offset, 0, string.length);
      this.position = offset + string.length > this.position ? offset + string.length : this.position;
      // offset = string.length
    } else if (
      typeof Buffer$8 !== 'undefined' &&
      typeof string === 'string' &&
      Buffer$8.isBuffer(this.buffer)
    ) {
      this.buffer.write(string, offset, 'binary');
      this.position = offset + string.length > this.position ? offset + string.length : this.position;
      // offset = string.length;
    } else if (
      Object.prototype.toString.call(string) === '[object Uint8Array]' ||
      (Object.prototype.toString.call(string) === '[object Array]' && typeof string !== 'string')
    ) {
      for (i = 0; i < string.length; i++) {
        this.buffer[offset++] = string[i];
      }

      this.position = offset > this.position ? offset : this.position;
    } else if (typeof string === 'string') {
      for (i = 0; i < string.length; i++) {
        this.buffer[offset++] = string.charCodeAt(i);
      }

      this.position = offset > this.position ? offset : this.position;
    }
  };

  /**
   * Reads **length** bytes starting at **position**.
   *
   * @method
   * @param {number} position read from the given position in the Binary.
   * @param {number} length the number of bytes to read.
   * @return {Buffer}
   */
  Binary$8.prototype.read = function read(position, length) {
    length = length && length > 0 ? length : this.position;

    // Let's return the data based on the type we have
    if (this.buffer['slice']) {
      return this.buffer.slice(position, position + length);
    } else {
      // Create a buffer to keep the result
      var buffer =
        typeof Uint8Array !== 'undefined'
          ? new Uint8Array(new ArrayBuffer(length))
          : new Array(length);
      for (var i = 0; i < length; i++) {
        buffer[i] = this.buffer[position++];
      }
    }
    // Return the buffer
    return buffer;
  };

  /**
   * Returns the value of this binary as a string.
   *
   * @method
   * @return {string}
   */
  Binary$8.prototype.value = function value(asRaw) {
    asRaw = asRaw == null ? false : asRaw;

    // Optimize to serialize for the situation where the data == size of buffer
    if (
      asRaw &&
      typeof Buffer$8 !== 'undefined' &&
      Buffer$8.isBuffer(this.buffer) &&
      this.buffer.length === this.position
    )
      return this.buffer;

    // If it's a node.js buffer object
    if (typeof Buffer$8 !== 'undefined' && Buffer$8.isBuffer(this.buffer)) {
      return asRaw
        ? this.buffer.slice(0, this.position)
        : this.buffer.toString('binary', 0, this.position);
    } else {
      if (asRaw) {
        // we support the slice command use it
        if (this.buffer['slice'] != null) {
          return this.buffer.slice(0, this.position);
        } else {
          // Create a new buffer to copy content to
          var newBuffer =
            Object.prototype.toString.call(this.buffer) === '[object Uint8Array]'
              ? new Uint8Array(new ArrayBuffer(this.position))
              : new Array(this.position);
          // Copy content
          for (var i = 0; i < this.position; i++) {
            newBuffer[i] = this.buffer[i];
          }
          // Return the buffer
          return newBuffer;
        }
      } else {
        return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);
      }
    }
  };

  /**
   * Length.
   *
   * @method
   * @return {number} the length of the binary.
   */
  Binary$8.prototype.length = function length() {
    return this.position;
  };

  /**
   * @ignore
   */
  Binary$8.prototype.toJSON = function() {
    return this.buffer != null ? this.buffer.toString('base64') : '';
  };

  /**
   * @ignore
   */
  Binary$8.prototype.toString = function(format) {
    return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';
  };

  /**
   * Binary default subtype
   * @ignore
   */
  var BSON_BINARY_SUBTYPE_DEFAULT = 0;

  /**
   * @ignore
   */
  var writeStringToArray = function(data) {
    // Create a buffer
    var buffer =
      typeof Uint8Array !== 'undefined'
        ? new Uint8Array(new ArrayBuffer(data.length))
        : new Array(data.length);
    // Write the content to the buffer
    for (var i = 0; i < data.length; i++) {
      buffer[i] = data.charCodeAt(i);
    }
    // Write the string to the buffer
    return buffer;
  };

  /**
   * Convert Array ot Uint8Array to Binary String
   *
   * @ignore
   */
  var convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {
    var result = '';
    for (var i = startIndex; i < endIndex; i++) {
      result = result + String.fromCharCode(byteArray[i]);
    }
    return result;
  };

  Binary$8.BUFFER_SIZE = 256;

  /**
   * Default BSON type
   *
   * @classconstant SUBTYPE_DEFAULT
   **/
  Binary$8.SUBTYPE_DEFAULT = 0;
  /**
   * Function BSON type
   *
   * @classconstant SUBTYPE_DEFAULT
   **/
  Binary$8.SUBTYPE_FUNCTION = 1;
  /**
   * Byte Array BSON type
   *
   * @classconstant SUBTYPE_DEFAULT
   **/
  Binary$8.SUBTYPE_BYTE_ARRAY = 2;
  /**
   * OLD UUID BSON type
   *
   * @classconstant SUBTYPE_DEFAULT
   **/
  Binary$8.SUBTYPE_UUID_OLD = 3;
  /**
   * UUID BSON type
   *
   * @classconstant SUBTYPE_DEFAULT
   **/
  Binary$8.SUBTYPE_UUID = 4;
  /**
   * MD5 BSON type
   *
   * @classconstant SUBTYPE_DEFAULT
   **/
  Binary$8.SUBTYPE_MD5 = 5;
  /**
   * User BSON type
   *
   * @classconstant SUBTYPE_DEFAULT
   **/
  Binary$8.SUBTYPE_USER_DEFINED = 128;

  /**
   * Expose.
   */
  module.exports = Binary$8;
  module.exports.Binary = Binary$8;

  var binary = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var ObjectId = /*@__PURE__*/getAugmentedNamespace(objectid);

  var Symbol$3 = /*@__PURE__*/getAugmentedNamespace(symbol);

  var Binary$7 = /*@__PURE__*/getAugmentedNamespace(binary);

  var Long$7 = long.Long,
    Double$1 = double.Double,
    Timestamp$1 = timestamp$1.Timestamp,
    ObjectID$6 = ObjectId.ObjectID,
    Symbol$2 = Symbol$3.Symbol,
    Code$3 = code.Code,
    MinKey$1 = min_key.MinKey,
    MaxKey$1 = max_key.MaxKey,
    DBRef$1 = db_ref.DBRef,
    BSONRegExp$1 = regexp$1.BSONRegExp,
    Binary$6 = Binary$7.Binary;



  var deserialize = function(buffer, options, isArray) {
    options = options == null ? {} : options;
    var index = options && options.index ? options.index : 0;
    // Read the document size
    var size =
      buffer[index] |
      (buffer[index + 1] << 8) |
      (buffer[index + 2] << 16) |
      (buffer[index + 3] << 24);

    // Ensure buffer is valid size
    if (size < 5 || buffer.length < size || size + index > buffer.length) {
      throw new Error('corrupt bson message');
    }

    // Illegal end value
    if (buffer[index + size - 1] !== 0) {
      throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");
    }

    // Start deserializtion
    return deserializeObject(buffer, index, options, isArray);
  };

  var deserializeObject = function(buffer, index, options, isArray) {
    var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];
    var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];
    var cacheFunctionsCrc32 =
      options['cacheFunctionsCrc32'] == null ? false : options['cacheFunctionsCrc32'];

    if (!cacheFunctionsCrc32) var crc32 = null;

    var fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];

    // Return raw bson buffer instead of parsing it
    var raw = options['raw'] == null ? false : options['raw'];

    // Return BSONRegExp objects instead of native regular expressions
    var bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;

    // Controls the promotion of values vs wrapper classes
    var promoteBuffers = options['promoteBuffers'] == null ? false : options['promoteBuffers'];
    var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];
    var promoteValues = options['promoteValues'] == null ? true : options['promoteValues'];

    // Set the start index
    var startIndex = index;

    // Validate that we have at least 4 bytes of buffer
    if (buffer.length < 5) throw new Error('corrupt bson message < 5 bytes long');

    // Read the document size
    var size =
      buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);

    // Ensure buffer is valid size
    if (size < 5 || size > buffer.length) throw new Error('corrupt bson message');

    // Create holding object
    var object = isArray ? [] : {};
    // Used for arrays to skip having to perform utf8 decoding
    var arrayIndex = 0;

    var done = false;

    // While we have more left data left keep parsing
    // while (buffer[index + 1] !== 0) {
    while (!done) {
      // Read the type
      var elementType = buffer[index++];
      // If we get a zero it's the last byte, exit
      if (elementType === 0) break;

      // Get the start search index
      var i = index;
      // Locate the end of the c string
      while (buffer[i] !== 0x00 && i < buffer.length) {
        i++;
      }

      // If are at the end of the buffer there is a problem with the document
      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');
      var name = isArray ? arrayIndex++ : buffer.toString('utf8', index, i);

      index = i + 1;

      if (elementType === BSON$g.BSON_DATA_STRING) {
        var stringSize =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        if (
          stringSize <= 0 ||
          stringSize > buffer.length - index ||
          buffer[index + stringSize - 1] !== 0
        )
          throw new Error('bad string length in bson');
        object[name] = buffer.toString('utf8', index, index + stringSize - 1);
        index = index + stringSize;
      } else if (elementType === BSON$g.BSON_DATA_OID) {
        var oid = utils$5.allocBuffer(12);
        buffer.copy(oid, 0, index, index + 12);
        object[name] = new ObjectID$6(oid);
        index = index + 12;
      } else if (elementType === BSON$g.BSON_DATA_INT && promoteValues === false) {
        object[name] = new int_32(
          buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24)
        );
      } else if (elementType === BSON$g.BSON_DATA_INT) {
        object[name] =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
      } else if (elementType === BSON$g.BSON_DATA_NUMBER && promoteValues === false) {
        object[name] = new Double$1(buffer.readDoubleLE(index));
        index = index + 8;
      } else if (elementType === BSON$g.BSON_DATA_NUMBER) {
        object[name] = buffer.readDoubleLE(index);
        index = index + 8;
      } else if (elementType === BSON$g.BSON_DATA_DATE) {
        var lowBits =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        var highBits =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        object[name] = new Date(new Long$7(lowBits, highBits).toNumber());
      } else if (elementType === BSON$g.BSON_DATA_BOOLEAN) {
        if (buffer[index] !== 0 && buffer[index] !== 1) throw new Error('illegal boolean type value');
        object[name] = buffer[index++] === 1;
      } else if (elementType === BSON$g.BSON_DATA_OBJECT) {
        var _index = index;
        var objectSize =
          buffer[index] |
          (buffer[index + 1] << 8) |
          (buffer[index + 2] << 16) |
          (buffer[index + 3] << 24);
        if (objectSize <= 0 || objectSize > buffer.length - index)
          throw new Error('bad embedded document length in bson');

        // We have a raw value
        if (raw) {
          object[name] = buffer.slice(index, index + objectSize);
        } else {
          object[name] = deserializeObject(buffer, _index, options, false);
        }

        index = index + objectSize;
      } else if (elementType === BSON$g.BSON_DATA_ARRAY) {
        _index = index;
        objectSize =
          buffer[index] |
          (buffer[index + 1] << 8) |
          (buffer[index + 2] << 16) |
          (buffer[index + 3] << 24);
        var arrayOptions = options;

        // Stop index
        var stopIndex = index + objectSize;

        // All elements of array to be returned as raw bson
        if (fieldsAsRaw && fieldsAsRaw[name]) {
          arrayOptions = {};
          for (var n in options) arrayOptions[n] = options[n];
          arrayOptions['raw'] = true;
        }

        object[name] = deserializeObject(buffer, _index, arrayOptions, true);
        index = index + objectSize;

        if (buffer[index - 1] !== 0) throw new Error('invalid array terminator byte');
        if (index !== stopIndex) throw new Error('corrupted array bson');
      } else if (elementType === BSON$g.BSON_DATA_UNDEFINED) {
        object[name] = undefined;
      } else if (elementType === BSON$g.BSON_DATA_NULL) {
        object[name] = null;
      } else if (elementType === BSON$g.BSON_DATA_LONG) {
        // Unpack the low and high bits
        lowBits =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        highBits =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        var long = new Long$7(lowBits, highBits);
        // Promote the long if possible
        if (promoteLongs && promoteValues === true) {
          object[name] =
            long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG)
              ? long.toNumber()
              : long;
        } else {
          object[name] = long;
        }
      } else if (elementType === BSON$g.BSON_DATA_DECIMAL128) {
        // Buffer to contain the decimal bytes
        var bytes = utils$5.allocBuffer(16);
        // Copy the next 16 bytes into the bytes buffer
        buffer.copy(bytes, 0, index, index + 16);
        // Update index
        index = index + 16;
        // Assign the new Decimal128 value
        var decimal128$1 = new decimal128(bytes);
        // If we have an alternative mapper use that
        object[name] = decimal128$1.toObject ? decimal128$1.toObject() : decimal128$1;
      } else if (elementType === BSON$g.BSON_DATA_BINARY) {
        var binarySize =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        var totalBinarySize = binarySize;
        var subType = buffer[index++];

        // Did we have a negative binary size, throw
        if (binarySize < 0) throw new Error('Negative binary type element size found');

        // Is the length longer than the document
        if (binarySize > buffer.length) throw new Error('Binary type size larger than document size');

        // Decode as raw Buffer object if options specifies it
        if (buffer['slice'] != null) {
          // If we have subtype 2 skip the 4 bytes for the size
          if (subType === Binary$6.SUBTYPE_BYTE_ARRAY) {
            binarySize =
              buffer[index++] |
              (buffer[index++] << 8) |
              (buffer[index++] << 16) |
              (buffer[index++] << 24);
            if (binarySize < 0)
              throw new Error('Negative binary type element size found for subtype 0x02');
            if (binarySize > totalBinarySize - 4)
              throw new Error('Binary type with subtype 0x02 contains to long binary size');
            if (binarySize < totalBinarySize - 4)
              throw new Error('Binary type with subtype 0x02 contains to short binary size');
          }

          if (promoteBuffers && promoteValues) {
            object[name] = buffer.slice(index, index + binarySize);
          } else {
            object[name] = new Binary$6(buffer.slice(index, index + binarySize), subType);
          }
        } else {
          var _buffer =
            typeof Uint8Array !== 'undefined'
              ? new Uint8Array(new ArrayBuffer(binarySize))
              : new Array(binarySize);
          // If we have subtype 2 skip the 4 bytes for the size
          if (subType === Binary$6.SUBTYPE_BYTE_ARRAY) {
            binarySize =
              buffer[index++] |
              (buffer[index++] << 8) |
              (buffer[index++] << 16) |
              (buffer[index++] << 24);
            if (binarySize < 0)
              throw new Error('Negative binary type element size found for subtype 0x02');
            if (binarySize > totalBinarySize - 4)
              throw new Error('Binary type with subtype 0x02 contains to long binary size');
            if (binarySize < totalBinarySize - 4)
              throw new Error('Binary type with subtype 0x02 contains to short binary size');
          }

          // Copy the data
          for (i = 0; i < binarySize; i++) {
            _buffer[i] = buffer[index + i];
          }

          if (promoteBuffers && promoteValues) {
            object[name] = _buffer;
          } else {
            object[name] = new Binary$6(_buffer, subType);
          }
        }

        // Update the index
        index = index + binarySize;
      } else if (elementType === BSON$g.BSON_DATA_REGEXP && bsonRegExp === false) {
        // Get the start search index
        i = index;
        // Locate the end of the c string
        while (buffer[i] !== 0x00 && i < buffer.length) {
          i++;
        }
        // If are at the end of the buffer there is a problem with the document
        if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');
        // Return the C string
        var source = buffer.toString('utf8', index, i);
        // Create the regexp
        index = i + 1;

        // Get the start search index
        i = index;
        // Locate the end of the c string
        while (buffer[i] !== 0x00 && i < buffer.length) {
          i++;
        }
        // If are at the end of the buffer there is a problem with the document
        if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');
        // Return the C string
        var regExpOptions = buffer.toString('utf8', index, i);
        index = i + 1;

        // For each option add the corresponding one for javascript
        var optionsArray = new Array(regExpOptions.length);

        // Parse options
        for (i = 0; i < regExpOptions.length; i++) {
          switch (regExpOptions[i]) {
            case 'm':
              optionsArray[i] = 'm';
              break;
            case 's':
              optionsArray[i] = 'g';
              break;
            case 'i':
              optionsArray[i] = 'i';
              break;
          }
        }

        object[name] = new RegExp(source, optionsArray.join(''));
      } else if (elementType === BSON$g.BSON_DATA_REGEXP && bsonRegExp === true) {
        // Get the start search index
        i = index;
        // Locate the end of the c string
        while (buffer[i] !== 0x00 && i < buffer.length) {
          i++;
        }
        // If are at the end of the buffer there is a problem with the document
        if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');
        // Return the C string
        source = buffer.toString('utf8', index, i);
        index = i + 1;

        // Get the start search index
        i = index;
        // Locate the end of the c string
        while (buffer[i] !== 0x00 && i < buffer.length) {
          i++;
        }
        // If are at the end of the buffer there is a problem with the document
        if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');
        // Return the C string
        regExpOptions = buffer.toString('utf8', index, i);
        index = i + 1;

        // Set the object
        object[name] = new BSONRegExp$1(source, regExpOptions);
      } else if (elementType === BSON$g.BSON_DATA_SYMBOL) {
        stringSize =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        if (
          stringSize <= 0 ||
          stringSize > buffer.length - index ||
          buffer[index + stringSize - 1] !== 0
        )
          throw new Error('bad string length in bson');
        object[name] = new Symbol$2(buffer.toString('utf8', index, index + stringSize - 1));
        index = index + stringSize;
      } else if (elementType === BSON$g.BSON_DATA_TIMESTAMP) {
        lowBits =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        highBits =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        object[name] = new Timestamp$1(lowBits, highBits);
      } else if (elementType === BSON$g.BSON_DATA_MIN_KEY) {
        object[name] = new MinKey$1();
      } else if (elementType === BSON$g.BSON_DATA_MAX_KEY) {
        object[name] = new MaxKey$1();
      } else if (elementType === BSON$g.BSON_DATA_CODE) {
        stringSize =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        if (
          stringSize <= 0 ||
          stringSize > buffer.length - index ||
          buffer[index + stringSize - 1] !== 0
        )
          throw new Error('bad string length in bson');
        var functionString = buffer.toString('utf8', index, index + stringSize - 1);

        // If we are evaluating the functions
        if (evalFunctions) {
          // If we have cache enabled let's look for the md5 of the function in the cache
          if (cacheFunctions) {
            var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;
            // Got to do this to avoid V8 deoptimizing the call due to finding eval
            object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);
          } else {
            object[name] = isolateEval(functionString);
          }
        } else {
          object[name] = new Code$3(functionString);
        }

        // Update parse index position
        index = index + stringSize;
      } else if (elementType === BSON$g.BSON_DATA_CODE_W_SCOPE) {
        var totalSize =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);

        // Element cannot be shorter than totalSize + stringSize + documentSize + terminator
        if (totalSize < 4 + 4 + 4 + 1) {
          throw new Error('code_w_scope total size shorter minimum expected length');
        }

        // Get the code string size
        stringSize =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        // Check if we have a valid string
        if (
          stringSize <= 0 ||
          stringSize > buffer.length - index ||
          buffer[index + stringSize - 1] !== 0
        )
          throw new Error('bad string length in bson');

        // Javascript function
        functionString = buffer.toString('utf8', index, index + stringSize - 1);
        // Update parse index position
        index = index + stringSize;
        // Parse the element
        _index = index;
        // Decode the size of the object document
        objectSize =
          buffer[index] |
          (buffer[index + 1] << 8) |
          (buffer[index + 2] << 16) |
          (buffer[index + 3] << 24);
        // Decode the scope object
        var scopeObject = deserializeObject(buffer, _index, options, false);
        // Adjust the index
        index = index + objectSize;

        // Check if field length is to short
        if (totalSize < 4 + 4 + objectSize + stringSize) {
          throw new Error('code_w_scope total size is to short, truncating scope');
        }

        // Check if totalSize field is to long
        if (totalSize > 4 + 4 + objectSize + stringSize) {
          throw new Error('code_w_scope total size is to long, clips outer document');
        }

        // If we are evaluating the functions
        if (evalFunctions) {
          // If we have cache enabled let's look for the md5 of the function in the cache
          if (cacheFunctions) {
            hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;
            // Got to do this to avoid V8 deoptimizing the call due to finding eval
            object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);
          } else {
            object[name] = isolateEval(functionString);
          }

          object[name].scope = scopeObject;
        } else {
          object[name] = new Code$3(functionString, scopeObject);
        }
      } else if (elementType === BSON$g.BSON_DATA_DBPOINTER) {
        // Get the code string size
        stringSize =
          buffer[index++] |
          (buffer[index++] << 8) |
          (buffer[index++] << 16) |
          (buffer[index++] << 24);
        // Check if we have a valid string
        if (
          stringSize <= 0 ||
          stringSize > buffer.length - index ||
          buffer[index + stringSize - 1] !== 0
        )
          throw new Error('bad string length in bson');
        // Namespace
        var namespace = buffer.toString('utf8', index, index + stringSize - 1);
        // Update parse index position
        index = index + stringSize;

        // Read the oid
        var oidBuffer = utils$5.allocBuffer(12);
        buffer.copy(oidBuffer, 0, index, index + 12);
        oid = new ObjectID$6(oidBuffer);

        // Update the index
        index = index + 12;

        // Split the namespace
        var parts = namespace.split('.');
        var db = parts.shift();
        var collection = parts.join('.');
        // Upgrade to DBRef type
        object[name] = new DBRef$1(collection, oid, db);
      } else {
        throw new Error(
          'Detected unknown BSON type ' +
            elementType.toString(16) +
            ' for fieldname "' +
            name +
            '", are you using the latest BSON parser'
        );
      }
    }

    // Check if the deserialization was against a valid array/object
    if (size !== index - startIndex) {
      if (isArray) throw new Error('corrupt array bson');
      throw new Error('corrupt object bson');
    }

    // Check if we have a db ref object
    if (object['$id'] != null) object = new DBRef$1(object['$ref'], object['$id'], object['$db']);
    return object;
  };

  /**
   * Ensure eval is isolated.
   *
   * @ignore
   * @api private
   */
  var isolateEvalWithHash = function(functionCache, hash, functionString, object) {
    // Contains the value we are going to set
    var value = null;

    // Check for cache hit, eval if missing and return cached function
    if (functionCache[hash] == null) {
      eval('value = ' + functionString);
      functionCache[hash] = value;
    }
    // Set the object
    return functionCache[hash].bind(object);
  };

  /**
   * Ensure eval is isolated.
   *
   * @ignore
   * @api private
   */
  var isolateEval = function(functionString) {
    // Contains the value we are going to set
    var value = null;
    // Eval the function
    eval('value = ' + functionString);
    return value;
  };

  var BSON$g = {};

  /**
   * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5
   *
   * @ignore
   * @api private
   */
  var functionCache = (BSON$g.functionCache = {});

  /**
   * Number BSON Type
   *
   * @classconstant BSON_DATA_NUMBER
   **/
  BSON$g.BSON_DATA_NUMBER = 1;
  /**
   * String BSON Type
   *
   * @classconstant BSON_DATA_STRING
   **/
  BSON$g.BSON_DATA_STRING = 2;
  /**
   * Object BSON Type
   *
   * @classconstant BSON_DATA_OBJECT
   **/
  BSON$g.BSON_DATA_OBJECT = 3;
  /**
   * Array BSON Type
   *
   * @classconstant BSON_DATA_ARRAY
   **/
  BSON$g.BSON_DATA_ARRAY = 4;
  /**
   * Binary BSON Type
   *
   * @classconstant BSON_DATA_BINARY
   **/
  BSON$g.BSON_DATA_BINARY = 5;
  /**
   * Binary BSON Type
   *
   * @classconstant BSON_DATA_UNDEFINED
   **/
  BSON$g.BSON_DATA_UNDEFINED = 6;
  /**
   * ObjectID BSON Type
   *
   * @classconstant BSON_DATA_OID
   **/
  BSON$g.BSON_DATA_OID = 7;
  /**
   * Boolean BSON Type
   *
   * @classconstant BSON_DATA_BOOLEAN
   **/
  BSON$g.BSON_DATA_BOOLEAN = 8;
  /**
   * Date BSON Type
   *
   * @classconstant BSON_DATA_DATE
   **/
  BSON$g.BSON_DATA_DATE = 9;
  /**
   * null BSON Type
   *
   * @classconstant BSON_DATA_NULL
   **/
  BSON$g.BSON_DATA_NULL = 10;
  /**
   * RegExp BSON Type
   *
   * @classconstant BSON_DATA_REGEXP
   **/
  BSON$g.BSON_DATA_REGEXP = 11;
  /**
   * Code BSON Type
   *
   * @classconstant BSON_DATA_DBPOINTER
   **/
  BSON$g.BSON_DATA_DBPOINTER = 12;
  /**
   * Code BSON Type
   *
   * @classconstant BSON_DATA_CODE
   **/
  BSON$g.BSON_DATA_CODE = 13;
  /**
   * Symbol BSON Type
   *
   * @classconstant BSON_DATA_SYMBOL
   **/
  BSON$g.BSON_DATA_SYMBOL = 14;
  /**
   * Code with Scope BSON Type
   *
   * @classconstant BSON_DATA_CODE_W_SCOPE
   **/
  BSON$g.BSON_DATA_CODE_W_SCOPE = 15;
  /**
   * 32 bit Integer BSON Type
   *
   * @classconstant BSON_DATA_INT
   **/
  BSON$g.BSON_DATA_INT = 16;
  /**
   * Timestamp BSON Type
   *
   * @classconstant BSON_DATA_TIMESTAMP
   **/
  BSON$g.BSON_DATA_TIMESTAMP = 17;
  /**
   * Long BSON Type
   *
   * @classconstant BSON_DATA_LONG
   **/
  BSON$g.BSON_DATA_LONG = 18;
  /**
   * Long BSON Type
   *
   * @classconstant BSON_DATA_DECIMAL128
   **/
  BSON$g.BSON_DATA_DECIMAL128 = 19;
  /**
   * MinKey BSON Type
   *
   * @classconstant BSON_DATA_MIN_KEY
   **/
  BSON$g.BSON_DATA_MIN_KEY = 0xff;
  /**
   * MaxKey BSON Type
   *
   * @classconstant BSON_DATA_MAX_KEY
   **/
  BSON$g.BSON_DATA_MAX_KEY = 0x7f;

  /**
   * Binary Default Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
   **/
  BSON$g.BSON_BINARY_SUBTYPE_DEFAULT = 0;
  /**
   * Binary Function Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
   **/
  BSON$g.BSON_BINARY_SUBTYPE_FUNCTION = 1;
  /**
   * Binary Byte Array Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
   **/
  BSON$g.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
  /**
   * Binary UUID Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_UUID
   **/
  BSON$g.BSON_BINARY_SUBTYPE_UUID = 3;
  /**
   * Binary MD5 Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_MD5
   **/
  BSON$g.BSON_BINARY_SUBTYPE_MD5 = 4;
  /**
   * Binary User Defined Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
   **/
  BSON$g.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

  // BSON MAX VALUES
  BSON$g.BSON_INT32_MAX = 0x7fffffff;
  BSON$g.BSON_INT32_MIN = -0x80000000;

  BSON$g.BSON_INT64_MAX = Math.pow(2, 63) - 1;
  BSON$g.BSON_INT64_MIN = -Math.pow(2, 63);

  // JS MAX PRECISE VALUES
  BSON$g.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.
  BSON$g.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.

  // Internal long versions
  var JS_INT_MAX_LONG = Long$7.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.
  var JS_INT_MIN_LONG = Long$7.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.

  var deserializer = deserialize;

  var writeIEEE754 = require('../float_parser').writeIEEE754,
    Long$6 = require('../long').Long,
    Map$3 = require('../map'),
    Binary$5 = require('../binary').Binary;

  var normalizedFunctionString$1 = require('./utils').normalizedFunctionString;

  // try {
  //   var _Buffer = Uint8Array;
  // } catch (e) {
  //   _Buffer = Buffer;
  // }

  var regexp = /\x00/; // eslint-disable-line no-control-regex
  var ignoreKeys = ['$db', '$ref', '$id', '$clusterTime'];

  // To ensure that 0.4 of node works correctly
  var isDate$2 = function isDate(d) {
    return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';
  };

  var isRegExp$1 = function isRegExp(d) {
    return Object.prototype.toString.call(d) === '[object RegExp]';
  };

  var serializeString = function(buffer, key, value, index, isArray) {
    // Encode String type
    buffer[index++] = BSON$f.BSON_DATA_STRING;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes + 1;
    buffer[index - 1] = 0;
    // Write the string
    var size = buffer.write(value, index + 4, 'utf8');
    // Write the size of the string to buffer
    buffer[index + 3] = ((size + 1) >> 24) & 0xff;
    buffer[index + 2] = ((size + 1) >> 16) & 0xff;
    buffer[index + 1] = ((size + 1) >> 8) & 0xff;
    buffer[index] = (size + 1) & 0xff;
    // Update index
    index = index + 4 + size;
    // Write zero
    buffer[index++] = 0;
    return index;
  };

  var serializeNumber = function(buffer, key, value, index, isArray) {
    // We have an integer value
    if (Math.floor(value) === value && value >= BSON$f.JS_INT_MIN && value <= BSON$f.JS_INT_MAX) {
      // If the value fits in 32 bits encode as int, if it fits in a double
      // encode it as a double, otherwise long
      if (value >= BSON$f.BSON_INT32_MIN && value <= BSON$f.BSON_INT32_MAX) {
        // Set int type 32 bits or less
        buffer[index++] = BSON$f.BSON_DATA_INT;
        // Number of written bytes
        var numberOfWrittenBytes = !isArray
          ? buffer.write(key, index, 'utf8')
          : buffer.write(key, index, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Write the int value
        buffer[index++] = value & 0xff;
        buffer[index++] = (value >> 8) & 0xff;
        buffer[index++] = (value >> 16) & 0xff;
        buffer[index++] = (value >> 24) & 0xff;
      } else if (value >= BSON$f.JS_INT_MIN && value <= BSON$f.JS_INT_MAX) {
        // Encode as double
        buffer[index++] = BSON$f.BSON_DATA_NUMBER;
        // Number of written bytes
        numberOfWrittenBytes = !isArray
          ? buffer.write(key, index, 'utf8')
          : buffer.write(key, index, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Write float
        writeIEEE754(buffer, value, index, 'little', 52, 8);
        // Ajust index
        index = index + 8;
      } else {
        // Set long type
        buffer[index++] = BSON$f.BSON_DATA_LONG;
        // Number of written bytes
        numberOfWrittenBytes = !isArray
          ? buffer.write(key, index, 'utf8')
          : buffer.write(key, index, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        var longVal = Long$6.fromNumber(value);
        var lowBits = longVal.getLowBits();
        var highBits = longVal.getHighBits();
        // Encode low bits
        buffer[index++] = lowBits & 0xff;
        buffer[index++] = (lowBits >> 8) & 0xff;
        buffer[index++] = (lowBits >> 16) & 0xff;
        buffer[index++] = (lowBits >> 24) & 0xff;
        // Encode high bits
        buffer[index++] = highBits & 0xff;
        buffer[index++] = (highBits >> 8) & 0xff;
        buffer[index++] = (highBits >> 16) & 0xff;
        buffer[index++] = (highBits >> 24) & 0xff;
      }
    } else {
      // Encode as double
      buffer[index++] = BSON$f.BSON_DATA_NUMBER;
      // Number of written bytes
      numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, 'utf8')
        : buffer.write(key, index, 'ascii');
      // Encode the name
      index = index + numberOfWrittenBytes;
      buffer[index++] = 0;
      // Write float
      writeIEEE754(buffer, value, index, 'little', 52, 8);
      // Ajust index
      index = index + 8;
    }

    return index;
  };

  var serializeNull = function(buffer, key, value, index, isArray) {
    // Set long type
    buffer[index++] = BSON$f.BSON_DATA_NULL;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    return index;
  };

  var serializeBoolean = function(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON$f.BSON_DATA_BOOLEAN;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Encode the boolean value
    buffer[index++] = value ? 1 : 0;
    return index;
  };

  var serializeDate = function(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON$f.BSON_DATA_DATE;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;

    // Write the date
    var dateInMilis = Long$6.fromNumber(value.getTime());
    var lowBits = dateInMilis.getLowBits();
    var highBits = dateInMilis.getHighBits();
    // Encode low bits
    buffer[index++] = lowBits & 0xff;
    buffer[index++] = (lowBits >> 8) & 0xff;
    buffer[index++] = (lowBits >> 16) & 0xff;
    buffer[index++] = (lowBits >> 24) & 0xff;
    // Encode high bits
    buffer[index++] = highBits & 0xff;
    buffer[index++] = (highBits >> 8) & 0xff;
    buffer[index++] = (highBits >> 16) & 0xff;
    buffer[index++] = (highBits >> 24) & 0xff;
    return index;
  };

  var serializeRegExp = function(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON$f.BSON_DATA_REGEXP;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    if (value.source && value.source.match(regexp) != null) {
      throw Error('value ' + value.source + ' must not contain null bytes');
    }
    // Adjust the index
    index = index + buffer.write(value.source, index, 'utf8');
    // Write zero
    buffer[index++] = 0x00;
    // Write the parameters
    if (value.global) buffer[index++] = 0x73; // s
    if (value.ignoreCase) buffer[index++] = 0x69; // i
    if (value.multiline) buffer[index++] = 0x6d; // m
    // Add ending zero
    buffer[index++] = 0x00;
    return index;
  };

  var serializeBSONRegExp = function(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON$f.BSON_DATA_REGEXP;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;

    // Check the pattern for 0 bytes
    if (value.pattern.match(regexp) != null) {
      // The BSON spec doesn't allow keys with null bytes because keys are
      // null-terminated.
      throw Error('pattern ' + value.pattern + ' must not contain null bytes');
    }

    // Adjust the index
    index = index + buffer.write(value.pattern, index, 'utf8');
    // Write zero
    buffer[index++] = 0x00;
    // Write the options
    index =
      index +
      buffer.write(
        value.options
          .split('')
          .sort()
          .join(''),
        index,
        'utf8'
      );
    // Add ending zero
    buffer[index++] = 0x00;
    return index;
  };

  var serializeMinMax = function(buffer, key, value, index, isArray) {
    // Write the type of either min or max key
    if (value === null) {
      buffer[index++] = BSON$f.BSON_DATA_NULL;
    } else if (value._bsontype === 'MinKey') {
      buffer[index++] = BSON$f.BSON_DATA_MIN_KEY;
    } else {
      buffer[index++] = BSON$f.BSON_DATA_MAX_KEY;
    }

    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    return index;
  };

  var serializeObjectId = function(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON$f.BSON_DATA_OID;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');

    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;

    // Write the objectId into the shared buffer
    if (typeof value.id === 'string') {
      buffer.write(value.id, index, 'binary');
    } else if (value.id && value.id.copy) {
      value.id.copy(buffer, index, 0, 12);
    } else {
      throw new Error('object [' + JSON.stringify(value) + '] is not a valid ObjectId');
    }

    // Ajust index
    return index + 12;
  };

  var serializeBuffer = function(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON$f.BSON_DATA_BINARY;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Get size of the buffer (current write point)
    var size = value.length;
    // Write the size of the string to buffer
    buffer[index++] = size & 0xff;
    buffer[index++] = (size >> 8) & 0xff;
    buffer[index++] = (size >> 16) & 0xff;
    buffer[index++] = (size >> 24) & 0xff;
    // Write the default subtype
    buffer[index++] = BSON$f.BSON_BINARY_SUBTYPE_DEFAULT;
    // Copy the content form the binary field to the buffer
    value.copy(buffer, index, 0, size);
    // Adjust the index
    index = index + size;
    return index;
  };

  var serializeObject = function(
    buffer,
    key,
    value,
    index,
    checkKeys,
    depth,
    serializeFunctions,
    ignoreUndefined,
    isArray,
    path
  ) {
    for (var i = 0; i < path.length; i++) {
      if (path[i] === value) throw new Error('cyclic dependency detected');
    }

    // Push value to stack
    path.push(value);
    // Write the type
    buffer[index++] = Array.isArray(value) ? BSON$f.BSON_DATA_ARRAY : BSON$f.BSON_DATA_OBJECT;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    var endIndex = serializeInto(
      buffer,
      value,
      checkKeys,
      index,
      depth + 1,
      serializeFunctions,
      ignoreUndefined,
      path
    );
    // Pop stack
    path.pop();
    // Write size
    return endIndex;
  };

  var serializeDecimal128 = function(buffer, key, value, index, isArray) {
    buffer[index++] = BSON$f.BSON_DATA_DECIMAL128;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the data from the value
    value.bytes.copy(buffer, index, 0, 16);
    return index + 16;
  };

  var serializeLong = function(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = value._bsontype === 'Long' ? BSON$f.BSON_DATA_LONG : BSON$f.BSON_DATA_TIMESTAMP;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the date
    var lowBits = value.getLowBits();
    var highBits = value.getHighBits();
    // Encode low bits
    buffer[index++] = lowBits & 0xff;
    buffer[index++] = (lowBits >> 8) & 0xff;
    buffer[index++] = (lowBits >> 16) & 0xff;
    buffer[index++] = (lowBits >> 24) & 0xff;
    // Encode high bits
    buffer[index++] = highBits & 0xff;
    buffer[index++] = (highBits >> 8) & 0xff;
    buffer[index++] = (highBits >> 16) & 0xff;
    buffer[index++] = (highBits >> 24) & 0xff;
    return index;
  };

  var serializeInt32 = function(buffer, key, value, index, isArray) {
    // Set int type 32 bits or less
    buffer[index++] = BSON$f.BSON_DATA_INT;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the int value
    buffer[index++] = value & 0xff;
    buffer[index++] = (value >> 8) & 0xff;
    buffer[index++] = (value >> 16) & 0xff;
    buffer[index++] = (value >> 24) & 0xff;
    return index;
  };

  var serializeDouble = function(buffer, key, value, index, isArray) {
    // Encode as double
    buffer[index++] = BSON$f.BSON_DATA_NUMBER;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write float
    writeIEEE754(buffer, value, index, 'little', 52, 8);
    // Ajust index
    index = index + 8;
    return index;
  };

  var serializeFunction = function(buffer, key, value, index, checkKeys, depth, isArray) {
    buffer[index++] = BSON$f.BSON_DATA_CODE;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Function string
    var functionString = normalizedFunctionString$1(value);

    // Write the string
    var size = buffer.write(functionString, index + 4, 'utf8') + 1;
    // Write the size of the string to buffer
    buffer[index] = size & 0xff;
    buffer[index + 1] = (size >> 8) & 0xff;
    buffer[index + 2] = (size >> 16) & 0xff;
    buffer[index + 3] = (size >> 24) & 0xff;
    // Update index
    index = index + 4 + size - 1;
    // Write zero
    buffer[index++] = 0;
    return index;
  };

  var serializeCode = function(
    buffer,
    key,
    value,
    index,
    checkKeys,
    depth,
    serializeFunctions,
    ignoreUndefined,
    isArray
  ) {
    if (value.scope && typeof value.scope === 'object') {
      // Write the type
      buffer[index++] = BSON$f.BSON_DATA_CODE_W_SCOPE;
      // Number of written bytes
      var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, 'utf8')
        : buffer.write(key, index, 'ascii');
      // Encode the name
      index = index + numberOfWrittenBytes;
      buffer[index++] = 0;

      // Starting index
      var startIndex = index;

      // Serialize the function
      // Get the function string
      var functionString = typeof value.code === 'string' ? value.code : value.code.toString();
      // Index adjustment
      index = index + 4;
      // Write string into buffer
      var codeSize = buffer.write(functionString, index + 4, 'utf8') + 1;
      // Write the size of the string to buffer
      buffer[index] = codeSize & 0xff;
      buffer[index + 1] = (codeSize >> 8) & 0xff;
      buffer[index + 2] = (codeSize >> 16) & 0xff;
      buffer[index + 3] = (codeSize >> 24) & 0xff;
      // Write end 0
      buffer[index + 4 + codeSize - 1] = 0;
      // Write the
      index = index + codeSize + 4;

      //
      // Serialize the scope value
      var endIndex = serializeInto(
        buffer,
        value.scope,
        checkKeys,
        index,
        depth + 1,
        serializeFunctions,
        ignoreUndefined
      );
      index = endIndex - 1;

      // Writ the total
      var totalSize = endIndex - startIndex;

      // Write the total size of the object
      buffer[startIndex++] = totalSize & 0xff;
      buffer[startIndex++] = (totalSize >> 8) & 0xff;
      buffer[startIndex++] = (totalSize >> 16) & 0xff;
      buffer[startIndex++] = (totalSize >> 24) & 0xff;
      // Write trailing zero
      buffer[index++] = 0;
    } else {
      buffer[index++] = BSON$f.BSON_DATA_CODE;
      // Number of written bytes
      numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, 'utf8')
        : buffer.write(key, index, 'ascii');
      // Encode the name
      index = index + numberOfWrittenBytes;
      buffer[index++] = 0;
      // Function string
      functionString = value.code.toString();
      // Write the string
      var size = buffer.write(functionString, index + 4, 'utf8') + 1;
      // Write the size of the string to buffer
      buffer[index] = size & 0xff;
      buffer[index + 1] = (size >> 8) & 0xff;
      buffer[index + 2] = (size >> 16) & 0xff;
      buffer[index + 3] = (size >> 24) & 0xff;
      // Update index
      index = index + 4 + size - 1;
      // Write zero
      buffer[index++] = 0;
    }

    return index;
  };

  var serializeBinary = function(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON$f.BSON_DATA_BINARY;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Extract the buffer
    var data = value.value(true);
    // Calculate size
    var size = value.position;
    // Add the deprecated 02 type 4 bytes of size to total
    if (value.sub_type === Binary$5.SUBTYPE_BYTE_ARRAY) size = size + 4;
    // Write the size of the string to buffer
    buffer[index++] = size & 0xff;
    buffer[index++] = (size >> 8) & 0xff;
    buffer[index++] = (size >> 16) & 0xff;
    buffer[index++] = (size >> 24) & 0xff;
    // Write the subtype to the buffer
    buffer[index++] = value.sub_type;

    // If we have binary type 2 the 4 first bytes are the size
    if (value.sub_type === Binary$5.SUBTYPE_BYTE_ARRAY) {
      size = size - 4;
      buffer[index++] = size & 0xff;
      buffer[index++] = (size >> 8) & 0xff;
      buffer[index++] = (size >> 16) & 0xff;
      buffer[index++] = (size >> 24) & 0xff;
    }

    // Write the data to the object
    data.copy(buffer, index, 0, value.position);
    // Adjust the index
    index = index + value.position;
    return index;
  };

  var serializeSymbol = function(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON$f.BSON_DATA_SYMBOL;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the string
    var size = buffer.write(value.value, index + 4, 'utf8') + 1;
    // Write the size of the string to buffer
    buffer[index] = size & 0xff;
    buffer[index + 1] = (size >> 8) & 0xff;
    buffer[index + 2] = (size >> 16) & 0xff;
    buffer[index + 3] = (size >> 24) & 0xff;
    // Update index
    index = index + 4 + size - 1;
    // Write zero
    buffer[index++] = 0x00;
    return index;
  };

  var serializeDBRef = function(buffer, key, value, index, depth, serializeFunctions, isArray) {
    // Write the type
    buffer[index++] = BSON$f.BSON_DATA_OBJECT;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
      ? buffer.write(key, index, 'utf8')
      : buffer.write(key, index, 'ascii');

    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;

    var startIndex = index;
    var endIndex;

    // Serialize object
    if (null != value.db) {
      endIndex = serializeInto(
        buffer,
        {
          $ref: value.namespace,
          $id: value.oid,
          $db: value.db
        },
        false,
        index,
        depth + 1,
        serializeFunctions
      );
    } else {
      endIndex = serializeInto(
        buffer,
        {
          $ref: value.namespace,
          $id: value.oid
        },
        false,
        index,
        depth + 1,
        serializeFunctions
      );
    }

    // Calculate object size
    var size = endIndex - startIndex;
    // Write the size
    buffer[startIndex++] = size & 0xff;
    buffer[startIndex++] = (size >> 8) & 0xff;
    buffer[startIndex++] = (size >> 16) & 0xff;
    buffer[startIndex++] = (size >> 24) & 0xff;
    // Set index
    return endIndex;
  };

  var serializeInto = function serializeInto(
    buffer,
    object,
    checkKeys,
    startingIndex,
    depth,
    serializeFunctions,
    ignoreUndefined,
    path
  ) {
    startingIndex = startingIndex || 0;
    path = path || [];

    // Push the object to the path
    path.push(object);

    // Start place to serialize into
    var index = startingIndex + 4;
    // var self = this;

    // Special case isArray
    if (Array.isArray(object)) {
      // Get object keys
      for (var i = 0; i < object.length; i++) {
        var key = '' + i;
        var value = object[i];

        // Is there an override value
        if (value && value.toBSON) {
          if (typeof value.toBSON !== 'function') throw new Error('toBSON is not a function');
          value = value.toBSON();
        }

        var type = typeof value;
        if (type === 'string') {
          index = serializeString(buffer, key, value, index, true);
        } else if (type === 'number') {
          index = serializeNumber(buffer, key, value, index, true);
        } else  if(type === 'bigint') {
          throw new TypeError('Unsupported type BigInt, please use Decimal128');
        } else if (type === 'boolean') {
          index = serializeBoolean(buffer, key, value, index, true);
        } else if (value instanceof Date || isDate$2(value)) {
          index = serializeDate(buffer, key, value, index, true);
        } else if (value === undefined) {
          index = serializeNull(buffer, key, value, index, true);
        } else if (value === null) {
          index = serializeNull(buffer, key, value, index, true);
        } else if (value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {
          index = serializeObjectId(buffer, key, value, index, true);
        } else if (Buffer$9.isBuffer(value)) {
          index = serializeBuffer(buffer, key, value, index, true);
        } else if (value instanceof RegExp || isRegExp$1(value)) {
          index = serializeRegExp(buffer, key, value, index, true);
        } else if (type === 'object' && value['_bsontype'] == null) {
          index = serializeObject(
            buffer,
            key,
            value,
            index,
            checkKeys,
            depth,
            serializeFunctions,
            ignoreUndefined,
            true,
            path
          );
        } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {
          index = serializeDecimal128(buffer, key, value, index, true);
        } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {
          index = serializeLong(buffer, key, value, index, true);
        } else if (value['_bsontype'] === 'Double') {
          index = serializeDouble(buffer, key, value, index, true);
        } else if (typeof value === 'function' && serializeFunctions) {
          index = serializeFunction(
            buffer,
            key,
            value,
            index,
            checkKeys,
            depth,
            serializeFunctions);
        } else if (value['_bsontype'] === 'Code') {
          index = serializeCode(
            buffer,
            key,
            value,
            index,
            checkKeys,
            depth,
            serializeFunctions,
            ignoreUndefined,
            true
          );
        } else if (value['_bsontype'] === 'Binary') {
          index = serializeBinary(buffer, key, value, index, true);
        } else if (value['_bsontype'] === 'Symbol') {
          index = serializeSymbol(buffer, key, value, index, true);
        } else if (value['_bsontype'] === 'DBRef') {
          index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, true);
        } else if (value['_bsontype'] === 'BSONRegExp') {
          index = serializeBSONRegExp(buffer, key, value, index, true);
        } else if (value['_bsontype'] === 'Int32') {
          index = serializeInt32(buffer, key, value, index, true);
        } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {
          index = serializeMinMax(buffer, key, value, index, true);
        } else if (typeof value['_bsontype'] !== 'undefined') {
          throw new TypeError('Unrecognized or invalid _bsontype: ' + value['_bsontype']);
        }
      }
    } else if (object instanceof Map$3) {
      var iterator = object.entries();
      var done = false;

      while (!done) {
        // Unpack the next entry
        var entry = iterator.next();
        done = entry.done;
        // Are we done, then skip and terminate
        if (done) continue;

        // Get the entry values
        key = entry.value[0];
        value = entry.value[1];

        // Check the type of the value
        type = typeof value;

        // Check the key and throw error if it's illegal
        if (typeof key === 'string' && ignoreKeys.indexOf(key) === -1) {
          if (key.match(regexp) != null) {
            // The BSON spec doesn't allow keys with null bytes because keys are
            // null-terminated.
            throw Error('key ' + key + ' must not contain null bytes');
          }

          if (checkKeys) {
            if ('$' === key[0]) {
              throw Error('key ' + key + " must not start with '$'");
            } else if (~key.indexOf('.')) {
              throw Error('key ' + key + " must not contain '.'");
            }
          }
        }

        if (type === 'string') {
          index = serializeString(buffer, key, value, index);
        } else if (type === 'number') {
          index = serializeNumber(buffer, key, value, index);
        } else if(type === 'bigint') {
          throw new TypeError('Unsupported type BigInt, please use Decimal128');
        } else if (type === 'boolean') {
          index = serializeBoolean(buffer, key, value, index);
        } else if (value instanceof Date || isDate$2(value)) {
          index = serializeDate(buffer, key, value, index);
          // } else if (value === undefined && ignoreUndefined === true) {
        } else if (value === null || (value === undefined && ignoreUndefined === false)) {
          index = serializeNull(buffer, key, value, index);
        } else if (value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {
          index = serializeObjectId(buffer, key, value, index);
        } else if (Buffer$9.isBuffer(value)) {
          index = serializeBuffer(buffer, key, value, index);
        } else if (value instanceof RegExp || isRegExp$1(value)) {
          index = serializeRegExp(buffer, key, value, index);
        } else if (type === 'object' && value['_bsontype'] == null) {
          index = serializeObject(
            buffer,
            key,
            value,
            index,
            checkKeys,
            depth,
            serializeFunctions,
            ignoreUndefined,
            false,
            path
          );
        } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {
          index = serializeDecimal128(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {
          index = serializeLong(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Double') {
          index = serializeDouble(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Code') {
          index = serializeCode(
            buffer,
            key,
            value,
            index,
            checkKeys,
            depth,
            serializeFunctions,
            ignoreUndefined
          );
        } else if (typeof value === 'function' && serializeFunctions) {
          index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);
        } else if (value['_bsontype'] === 'Binary') {
          index = serializeBinary(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Symbol') {
          index = serializeSymbol(buffer, key, value, index);
        } else if (value['_bsontype'] === 'DBRef') {
          index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);
        } else if (value['_bsontype'] === 'BSONRegExp') {
          index = serializeBSONRegExp(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Int32') {
          index = serializeInt32(buffer, key, value, index);
        } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {
          index = serializeMinMax(buffer, key, value, index);
        } else if (typeof value['_bsontype'] !== 'undefined') {
          throw new TypeError('Unrecognized or invalid _bsontype: ' + value['_bsontype']);
        }
      }
    } else {
      // Did we provide a custom serialization method
      if (object.toBSON) {
        if (typeof object.toBSON !== 'function') throw new Error('toBSON is not a function');
        object = object.toBSON();
        if (object != null && typeof object !== 'object')
          throw new Error('toBSON function did not return an object');
      }

      // Iterate over all the keys
      for (key in object) {
        value = object[key];
        // Is there an override value
        if (value && value.toBSON) {
          if (typeof value.toBSON !== 'function') throw new Error('toBSON is not a function');
          value = value.toBSON();
        }

        // Check the type of the value
        type = typeof value;

        // Check the key and throw error if it's illegal
        if (typeof key === 'string' && ignoreKeys.indexOf(key) === -1) {
          if (key.match(regexp) != null) {
            // The BSON spec doesn't allow keys with null bytes because keys are
            // null-terminated.
            throw Error('key ' + key + ' must not contain null bytes');
          }

          if (checkKeys) {
            if ('$' === key[0]) {
              throw Error('key ' + key + " must not start with '$'");
            } else if (~key.indexOf('.')) {
              throw Error('key ' + key + " must not contain '.'");
            }
          }
        }

        if (type === 'string') {
          index = serializeString(buffer, key, value, index);
        } else if (type === 'number') {
          index = serializeNumber(buffer, key, value, index);
        } else if(type === 'bigint') {
          throw new TypeError('Unsupported type BigInt, please use Decimal128');
        } else if (type === 'boolean') {
          index = serializeBoolean(buffer, key, value, index);
        } else if (value instanceof Date || isDate$2(value)) {
          index = serializeDate(buffer, key, value, index);
        } else if (value === undefined) {
          if (ignoreUndefined === false) index = serializeNull(buffer, key, value, index);
        } else if (value === null) {
          index = serializeNull(buffer, key, value, index);
        } else if (value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {
          index = serializeObjectId(buffer, key, value, index);
        } else if (Buffer$9.isBuffer(value)) {
          index = serializeBuffer(buffer, key, value, index);
        } else if (value instanceof RegExp || isRegExp$1(value)) {
          index = serializeRegExp(buffer, key, value, index);
        } else if (type === 'object' && value['_bsontype'] == null) {
          index = serializeObject(
            buffer,
            key,
            value,
            index,
            checkKeys,
            depth,
            serializeFunctions,
            ignoreUndefined,
            false,
            path
          );
        } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {
          index = serializeDecimal128(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {
          index = serializeLong(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Double') {
          index = serializeDouble(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Code') {
          index = serializeCode(
            buffer,
            key,
            value,
            index,
            checkKeys,
            depth,
            serializeFunctions,
            ignoreUndefined
          );
        } else if (typeof value === 'function' && serializeFunctions) {
          index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);
        } else if (value['_bsontype'] === 'Binary') {
          index = serializeBinary(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Symbol') {
          index = serializeSymbol(buffer, key, value, index);
        } else if (value['_bsontype'] === 'DBRef') {
          index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);
        } else if (value['_bsontype'] === 'BSONRegExp') {
          index = serializeBSONRegExp(buffer, key, value, index);
        } else if (value['_bsontype'] === 'Int32') {
          index = serializeInt32(buffer, key, value, index);
        } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {
          index = serializeMinMax(buffer, key, value, index);
        } else if (typeof value['_bsontype'] !== 'undefined') {
          throw new TypeError('Unrecognized or invalid _bsontype: ' + value['_bsontype']);
        }
      }
    }

    // Remove the path
    path.pop();

    // Final padding byte for object
    buffer[index++] = 0x00;

    // Final size
    var size = index - startingIndex;
    // Write the size of the object
    buffer[startingIndex++] = size & 0xff;
    buffer[startingIndex++] = (size >> 8) & 0xff;
    buffer[startingIndex++] = (size >> 16) & 0xff;
    buffer[startingIndex++] = (size >> 24) & 0xff;
    return index;
  };

  var BSON$f = {};

  /**
   * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5
   *
   * @ignore
   * @api private
   */
  // var functionCache = (BSON.functionCache = {});

  /**
   * Number BSON Type
   *
   * @classconstant BSON_DATA_NUMBER
   **/
  BSON$f.BSON_DATA_NUMBER = 1;
  /**
   * String BSON Type
   *
   * @classconstant BSON_DATA_STRING
   **/
  BSON$f.BSON_DATA_STRING = 2;
  /**
   * Object BSON Type
   *
   * @classconstant BSON_DATA_OBJECT
   **/
  BSON$f.BSON_DATA_OBJECT = 3;
  /**
   * Array BSON Type
   *
   * @classconstant BSON_DATA_ARRAY
   **/
  BSON$f.BSON_DATA_ARRAY = 4;
  /**
   * Binary BSON Type
   *
   * @classconstant BSON_DATA_BINARY
   **/
  BSON$f.BSON_DATA_BINARY = 5;
  /**
   * ObjectID BSON Type, deprecated
   *
   * @classconstant BSON_DATA_UNDEFINED
   **/
  BSON$f.BSON_DATA_UNDEFINED = 6;
  /**
   * ObjectID BSON Type
   *
   * @classconstant BSON_DATA_OID
   **/
  BSON$f.BSON_DATA_OID = 7;
  /**
   * Boolean BSON Type
   *
   * @classconstant BSON_DATA_BOOLEAN
   **/
  BSON$f.BSON_DATA_BOOLEAN = 8;
  /**
   * Date BSON Type
   *
   * @classconstant BSON_DATA_DATE
   **/
  BSON$f.BSON_DATA_DATE = 9;
  /**
   * null BSON Type
   *
   * @classconstant BSON_DATA_NULL
   **/
  BSON$f.BSON_DATA_NULL = 10;
  /**
   * RegExp BSON Type
   *
   * @classconstant BSON_DATA_REGEXP
   **/
  BSON$f.BSON_DATA_REGEXP = 11;
  /**
   * Code BSON Type
   *
   * @classconstant BSON_DATA_CODE
   **/
  BSON$f.BSON_DATA_CODE = 13;
  /**
   * Symbol BSON Type
   *
   * @classconstant BSON_DATA_SYMBOL
   **/
  BSON$f.BSON_DATA_SYMBOL = 14;
  /**
   * Code with Scope BSON Type
   *
   * @classconstant BSON_DATA_CODE_W_SCOPE
   **/
  BSON$f.BSON_DATA_CODE_W_SCOPE = 15;
  /**
   * 32 bit Integer BSON Type
   *
   * @classconstant BSON_DATA_INT
   **/
  BSON$f.BSON_DATA_INT = 16;
  /**
   * Timestamp BSON Type
   *
   * @classconstant BSON_DATA_TIMESTAMP
   **/
  BSON$f.BSON_DATA_TIMESTAMP = 17;
  /**
   * Long BSON Type
   *
   * @classconstant BSON_DATA_LONG
   **/
  BSON$f.BSON_DATA_LONG = 18;
  /**
   * Long BSON Type
   *
   * @classconstant BSON_DATA_DECIMAL128
   **/
  BSON$f.BSON_DATA_DECIMAL128 = 19;
  /**
   * MinKey BSON Type
   *
   * @classconstant BSON_DATA_MIN_KEY
   **/
  BSON$f.BSON_DATA_MIN_KEY = 0xff;
  /**
   * MaxKey BSON Type
   *
   * @classconstant BSON_DATA_MAX_KEY
   **/
  BSON$f.BSON_DATA_MAX_KEY = 0x7f;
  /**
   * Binary Default Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
   **/
  BSON$f.BSON_BINARY_SUBTYPE_DEFAULT = 0;
  /**
   * Binary Function Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
   **/
  BSON$f.BSON_BINARY_SUBTYPE_FUNCTION = 1;
  /**
   * Binary Byte Array Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
   **/
  BSON$f.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
  /**
   * Binary UUID Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_UUID
   **/
  BSON$f.BSON_BINARY_SUBTYPE_UUID = 3;
  /**
   * Binary MD5 Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_MD5
   **/
  BSON$f.BSON_BINARY_SUBTYPE_MD5 = 4;
  /**
   * Binary User Defined Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
   **/
  BSON$f.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

  // BSON MAX VALUES
  BSON$f.BSON_INT32_MAX = 0x7fffffff;
  BSON$f.BSON_INT32_MIN = -0x80000000;

  BSON$f.BSON_INT64_MAX = Math.pow(2, 63) - 1;
  BSON$f.BSON_INT64_MIN = -Math.pow(2, 63);

  // JS MAX PRECISE VALUES
  BSON$f.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.
  BSON$f.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.

  // Internal long versions
  // var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.
  // var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.

  module.exports = serializeInto;

  var serializer$1 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var Long$5 = require('../long').Long,
    Double = require('../double').Double,
    Timestamp = require('../timestamp').Timestamp,
    ObjectID$5 = require('../objectid').ObjectID,
    Symbol$1 = require('../symbol').Symbol,
    BSONRegExp = require('../regexp').BSONRegExp,
    Code$2 = require('../code').Code,
    Decimal128 = require('../decimal128'),
    MinKey = require('../min_key').MinKey,
    MaxKey = require('../max_key').MaxKey,
    DBRef = require('../db_ref').DBRef,
    Binary$4 = require('../binary').Binary;

  var normalizedFunctionString = require('./utils').normalizedFunctionString;

  // To ensure that 0.4 of node works correctly
  var isDate$1 = function isDate(d) {
    return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';
  };

  var calculateObjectSize$1 = function calculateObjectSize(
    object,
    serializeFunctions,
    ignoreUndefined
  ) {
    var totalLength = 4 + 1;

    if (Array.isArray(object)) {
      for (var i = 0; i < object.length; i++) {
        totalLength += calculateElement(
          i.toString(),
          object[i],
          serializeFunctions,
          true,
          ignoreUndefined
        );
      }
    } else {
      // If we have toBSON defined, override the current object
      if (object.toBSON) {
        object = object.toBSON();
      }

      // Calculate size
      for (var key in object) {
        totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);
      }
    }

    return totalLength;
  };

  /**
   * @ignore
   * @api private
   */
  function calculateElement(name, value, serializeFunctions, isArray, ignoreUndefined) {
    // If we have toBSON defined, override the current object
    if (value && value.toBSON) {
      value = value.toBSON();
    }

    switch (typeof value) {
      case 'string':
        return 1 + Buffer$9.byteLength(name, 'utf8') + 1 + 4 + Buffer$9.byteLength(value, 'utf8') + 1;
      case 'number':
        if (Math.floor(value) === value && value >= BSON$e.JS_INT_MIN && value <= BSON$e.JS_INT_MAX) {
          if (value >= BSON$e.BSON_INT32_MIN && value <= BSON$e.BSON_INT32_MAX) {
            // 32 bit
            return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (4 + 1);
          } else {
            return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
          }
        } else {
          // 64 bit
          return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
        }
      case 'undefined':
        if (isArray || !ignoreUndefined)
          return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + 1;
        return 0;
      case 'boolean':
        return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (1 + 1);
      case 'object':
        if (
          value == null ||
          value instanceof MinKey ||
          value instanceof MaxKey ||
          value['_bsontype'] === 'MinKey' ||
          value['_bsontype'] === 'MaxKey'
        ) {
          return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + 1;
        } else if (value instanceof ObjectID$5 || value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {
          return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (12 + 1);
        } else if (value instanceof Date || isDate$1(value)) {
          return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
        } else if (typeof Buffer$9 !== 'undefined' && Buffer$9.isBuffer(value)) {
          return (
            (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (1 + 4 + 1) + value.length
          );
        } else if (
          value instanceof Long$5 ||
          value instanceof Double ||
          value instanceof Timestamp ||
          value['_bsontype'] === 'Long' ||
          value['_bsontype'] === 'Double' ||
          value['_bsontype'] === 'Timestamp'
        ) {
          return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
        } else if (value instanceof Decimal128 || value['_bsontype'] === 'Decimal128') {
          return (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (16 + 1);
        } else if (value instanceof Code$2 || value['_bsontype'] === 'Code') {
          // Calculate size depending on the availability of a scope
          if (value.scope != null && Object.keys(value.scope).length > 0) {
            return (
              (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
              1 +
              4 +
              4 +
              Buffer$9.byteLength(value.code.toString(), 'utf8') +
              1 +
              calculateObjectSize$1(value.scope, serializeFunctions, ignoreUndefined)
            );
          } else {
            return (
              (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
              1 +
              4 +
              Buffer$9.byteLength(value.code.toString(), 'utf8') +
              1
            );
          }
        } else if (value instanceof Binary$4 || value['_bsontype'] === 'Binary') {
          // Check what kind of subtype we have
          if (value.sub_type === Binary$4.SUBTYPE_BYTE_ARRAY) {
            return (
              (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
              (value.position + 1 + 4 + 1 + 4)
            );
          } else {
            return (
              (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1)
            );
          }
        } else if (value instanceof Symbol$1 || value['_bsontype'] === 'Symbol') {
          return (
            (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
            Buffer$9.byteLength(value.value, 'utf8') +
            4 +
            1 +
            1
          );
        } else if (value instanceof DBRef || value['_bsontype'] === 'DBRef') {
          // Set up correct object for serialization
          var ordered_values = {
            $ref: value.namespace,
            $id: value.oid
          };

          // Add db reference if it exists
          if (null != value.db) {
            ordered_values['$db'] = value.db;
          }

          return (
            (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
            1 +
            calculateObjectSize$1(ordered_values, serializeFunctions, ignoreUndefined)
          );
        } else if (
          value instanceof RegExp ||
          Object.prototype.toString.call(value) === '[object RegExp]'
        ) {
          return (
            (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
            1 +
            Buffer$9.byteLength(value.source, 'utf8') +
            1 +
            (value.global ? 1 : 0) +
            (value.ignoreCase ? 1 : 0) +
            (value.multiline ? 1 : 0) +
            1
          );
        } else if (value instanceof BSONRegExp || value['_bsontype'] === 'BSONRegExp') {
          return (
            (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
            1 +
            Buffer$9.byteLength(value.pattern, 'utf8') +
            1 +
            Buffer$9.byteLength(value.options, 'utf8') +
            1
          );
        } else {
          return (
            (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
            calculateObjectSize$1(value, serializeFunctions, ignoreUndefined) +
            1
          );
        }
      case 'function':
        // WTF for 0.4.X where typeof /someregexp/ === 'function'
        if (
          value instanceof RegExp ||
          Object.prototype.toString.call(value) === '[object RegExp]' ||
          String.call(value) === '[object RegExp]'
        ) {
          return (
            (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
            1 +
            Buffer$9.byteLength(value.source, 'utf8') +
            1 +
            (value.global ? 1 : 0) +
            (value.ignoreCase ? 1 : 0) +
            (value.multiline ? 1 : 0) +
            1
          );
        } else {
          if (serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {
            return (
              (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
              1 +
              4 +
              4 +
              Buffer$9.byteLength(normalizedFunctionString(value), 'utf8') +
              1 +
              calculateObjectSize$1(value.scope, serializeFunctions, ignoreUndefined)
            );
          } else if (serializeFunctions) {
            return (
              (name != null ? Buffer$9.byteLength(name, 'utf8') + 1 : 0) +
              1 +
              4 +
              Buffer$9.byteLength(normalizedFunctionString(value), 'utf8') +
              1
            );
          }
        }
    }

    return 0;
  }

  var BSON$e = {};

  // BSON MAX VALUES
  BSON$e.BSON_INT32_MAX = 0x7fffffff;
  BSON$e.BSON_INT32_MIN = -0x80000000;

  // JS MAX PRECISE VALUES
  BSON$e.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.
  BSON$e.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.

  module.exports = calculateObjectSize$1;

  var calculate_size = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var Map$2 = /*@__PURE__*/getAugmentedNamespace(map$2);

  var serializer = /*@__PURE__*/getAugmentedNamespace(serializer$1);

  var calculateObjectSize = /*@__PURE__*/getAugmentedNamespace(calculate_size);

  // Parts of the parser


  /**
   * @ignore
   * @api private
   */
  // Default Max Size
  var MAXSIZE = 1024 * 1024 * 17;

  // Current Internal Temporary Serialization Buffer
  var buffer$1 = utils$5.allocBuffer(MAXSIZE);

  var BSON$d = function() {};

  /**
   * Serialize a Javascript object.
   *
   * @param {Object} object the Javascript object to serialize.
   * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.
   * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.
   * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.
   * @param {Number} [options.minInternalBufferSize=1024*1024*17] minimum size of the internal temporary serialization buffer **(default:1024*1024*17)**.
   * @return {Buffer} returns the Buffer object containing the serialized object.
   * @api public
   */
  BSON$d.prototype.serialize = function serialize(object, options) {
    options = options || {};
    // Unpack the options
    var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;
    var serializeFunctions =
      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    var ignoreUndefined =
      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
    var minInternalBufferSize =
      typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;
    
    // Resize the internal serialization buffer if needed
    if (buffer$1.length < minInternalBufferSize) {
      buffer$1 = utils$5.allocBuffer(minInternalBufferSize);
    }

    // Attempt to serialize
    var serializationIndex = serializer(
      buffer$1,
      object,
      checkKeys,
      0,
      0,
      serializeFunctions,
      ignoreUndefined,
      []
    );
    // Create the final buffer
    var finishedBuffer = utils$5.allocBuffer(serializationIndex);
    // Copy into the finished buffer
    buffer$1.copy(finishedBuffer, 0, 0, finishedBuffer.length);
    // Return the buffer
    return finishedBuffer;
  };

  /**
   * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.
   *
   * @param {Object} object the Javascript object to serialize.
   * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.
   * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.
   * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.
   * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.
   * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.
   * @return {Number} returns the index pointing to the last written byte in the buffer.
   * @api public
   */
  BSON$d.prototype.serializeWithBufferAndIndex = function(object, finalBuffer, options) {
    options = options || {};
    // Unpack the options
    var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;
    var serializeFunctions =
      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    var ignoreUndefined =
      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
    var startIndex = typeof options.index === 'number' ? options.index : 0;

    // Attempt to serialize
    var serializationIndex = serializer(
      finalBuffer,
      object,
      checkKeys,
      startIndex || 0,
      0,
      serializeFunctions,
      ignoreUndefined
    );

    // Return the index
    return serializationIndex - 1;
  };

  /**
   * Deserialize data as BSON.
   *
   * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.
   * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.
   * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.
   * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.
   * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits
   * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.
   * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.
   * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.
   * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.
   * @return {Object} returns the deserialized Javascript Object.
   * @api public
   */
  BSON$d.prototype.deserialize = function(buffer, options) {
    return deserializer(buffer, options);
  };

  /**
   * Calculate the bson size for a passed in Javascript object.
   *
   * @param {Object} object the Javascript object to calculate the BSON byte size for.
   * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.
   * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.
   * @return {Number} returns the number of bytes the BSON object will take up.
   * @api public
   */
  BSON$d.prototype.calculateObjectSize = function(object, options) {
    options = options || {};

    var serializeFunctions =
      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    var ignoreUndefined =
      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;

    return calculateObjectSize(object, serializeFunctions, ignoreUndefined);
  };

  /**
   * Deserialize stream data as BSON documents.
   *
   * @param {Buffer} data the buffer containing the serialized set of BSON documents.
   * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.
   * @param {Number} numberOfDocuments number of documents to deserialize.
   * @param {Array} documents an array where to store the deserialized documents.
   * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.
   * @param {Object} [options] additional options used for the deserialization.
   * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.
   * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.
   * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.
   * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits
   * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.
   * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.
   * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.
   * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.
   * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.
   * @api public
   */
  BSON$d.prototype.deserializeStream = function(
    data,
    startIndex,
    numberOfDocuments,
    documents,
    docStartIndex,
    options
  ) {
    options = options != null ? options : {};
    var index = startIndex;
    // Loop over all documents
    for (var i = 0; i < numberOfDocuments; i++) {
      // Find size of the document
      var size =
        data[index] | (data[index + 1] << 8) | (data[index + 2] << 16) | (data[index + 3] << 24);
      // Update options with index
      options['index'] = index;
      // Parse the document at this point
      documents[docStartIndex + i] = this.deserialize(data, options);
      // Adjust index by the document size
      index = index + size;
    }

    // Return object containing end index of parsing and list of documents
    return index;
  };

  /**
   * @ignore
   * @api private
   */
  // BSON MAX VALUES
  BSON$d.BSON_INT32_MAX = 0x7fffffff;
  BSON$d.BSON_INT32_MIN = -0x80000000;

  BSON$d.BSON_INT64_MAX = Math.pow(2, 63) - 1;
  BSON$d.BSON_INT64_MIN = -Math.pow(2, 63);

  // JS MAX PRECISE VALUES
  BSON$d.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.
  BSON$d.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.

  // Internal long versions
  // var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.
  // var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.

  /**
   * Number BSON Type
   *
   * @classconstant BSON_DATA_NUMBER
   **/
  BSON$d.BSON_DATA_NUMBER = 1;
  /**
   * String BSON Type
   *
   * @classconstant BSON_DATA_STRING
   **/
  BSON$d.BSON_DATA_STRING = 2;
  /**
   * Object BSON Type
   *
   * @classconstant BSON_DATA_OBJECT
   **/
  BSON$d.BSON_DATA_OBJECT = 3;
  /**
   * Array BSON Type
   *
   * @classconstant BSON_DATA_ARRAY
   **/
  BSON$d.BSON_DATA_ARRAY = 4;
  /**
   * Binary BSON Type
   *
   * @classconstant BSON_DATA_BINARY
   **/
  BSON$d.BSON_DATA_BINARY = 5;
  /**
   * ObjectID BSON Type
   *
   * @classconstant BSON_DATA_OID
   **/
  BSON$d.BSON_DATA_OID = 7;
  /**
   * Boolean BSON Type
   *
   * @classconstant BSON_DATA_BOOLEAN
   **/
  BSON$d.BSON_DATA_BOOLEAN = 8;
  /**
   * Date BSON Type
   *
   * @classconstant BSON_DATA_DATE
   **/
  BSON$d.BSON_DATA_DATE = 9;
  /**
   * null BSON Type
   *
   * @classconstant BSON_DATA_NULL
   **/
  BSON$d.BSON_DATA_NULL = 10;
  /**
   * RegExp BSON Type
   *
   * @classconstant BSON_DATA_REGEXP
   **/
  BSON$d.BSON_DATA_REGEXP = 11;
  /**
   * Code BSON Type
   *
   * @classconstant BSON_DATA_CODE
   **/
  BSON$d.BSON_DATA_CODE = 13;
  /**
   * Symbol BSON Type
   *
   * @classconstant BSON_DATA_SYMBOL
   **/
  BSON$d.BSON_DATA_SYMBOL = 14;
  /**
   * Code with Scope BSON Type
   *
   * @classconstant BSON_DATA_CODE_W_SCOPE
   **/
  BSON$d.BSON_DATA_CODE_W_SCOPE = 15;
  /**
   * 32 bit Integer BSON Type
   *
   * @classconstant BSON_DATA_INT
   **/
  BSON$d.BSON_DATA_INT = 16;
  /**
   * Timestamp BSON Type
   *
   * @classconstant BSON_DATA_TIMESTAMP
   **/
  BSON$d.BSON_DATA_TIMESTAMP = 17;
  /**
   * Long BSON Type
   *
   * @classconstant BSON_DATA_LONG
   **/
  BSON$d.BSON_DATA_LONG = 18;
  /**
   * MinKey BSON Type
   *
   * @classconstant BSON_DATA_MIN_KEY
   **/
  BSON$d.BSON_DATA_MIN_KEY = 0xff;
  /**
   * MaxKey BSON Type
   *
   * @classconstant BSON_DATA_MAX_KEY
   **/
  BSON$d.BSON_DATA_MAX_KEY = 0x7f;

  /**
   * Binary Default Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
   **/
  BSON$d.BSON_BINARY_SUBTYPE_DEFAULT = 0;
  /**
   * Binary Function Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
   **/
  BSON$d.BSON_BINARY_SUBTYPE_FUNCTION = 1;
  /**
   * Binary Byte Array Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
   **/
  BSON$d.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
  /**
   * Binary UUID Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_UUID
   **/
  BSON$d.BSON_BINARY_SUBTYPE_UUID = 3;
  /**
   * Binary MD5 Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_MD5
   **/
  BSON$d.BSON_BINARY_SUBTYPE_MD5 = 4;
  /**
   * Binary User Defined Type
   *
   * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
   **/
  BSON$d.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

  // Return BSON
  var bson$2 = BSON$d;
  var Code_1 = code;
  var _Map = Map$2;
  var _Symbol = Symbol$3;
  var BSON_1 = BSON$d;
  var DBRef_1 = db_ref;
  var Binary_1 = Binary$7;
  var ObjectID_1 = ObjectId;
  var Long_1 = long;
  var Timestamp_1 = timestamp$1;
  var Double_1 = double;
  var Int32_1 = int_32;
  var MinKey_1 = min_key;
  var MaxKey_1 = max_key;
  var BSONRegExp_1 = regexp$1;
  var Decimal128_1 = decimal128;
  bson$2.Code = Code_1;
  bson$2.Map = _Map;
  bson$2.Symbol = _Symbol;
  bson$2.BSON = BSON_1;
  bson$2.DBRef = DBRef_1;
  bson$2.Binary = Binary_1;
  bson$2.ObjectID = ObjectID_1;
  bson$2.Long = Long_1;
  bson$2.Timestamp = Timestamp_1;
  bson$2.Double = Double_1;
  bson$2.Int32 = Int32_1;
  bson$2.MinKey = MinKey_1;
  bson$2.MaxKey = MaxKey_1;
  bson$2.BSONRegExp = BSONRegExp_1;
  bson$2.Decimal128 = Decimal128_1;

  // BSON MAX VALUES
  bson$2.BSON_INT32_MAX = 0x7fffffff;
  bson$2.BSON_INT32_MIN = -0x80000000;

  bson$2.BSON_INT64_MAX = Math.pow(2, 63) - 1;
  bson$2.BSON_INT64_MIN = -Math.pow(2, 63);

  // JS MAX PRECISE VALUES
  bson$2.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.
  bson$2.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.

  // Add BSON types to function creation
  bson$2.Binary = Binary$7;
  bson$2.Code = code;
  bson$2.DBRef = db_ref;
  bson$2.Decimal128 = decimal128;
  bson$2.Double = double;
  bson$2.Int32 = int_32;
  bson$2.Long = long;
  bson$2.Map = Map$2;
  bson$2.MaxKey = max_key;
  bson$2.MinKey = min_key;
  bson$2.ObjectId = ObjectId;
  bson$2.ObjectID = ObjectId;
  bson$2.BSONRegExp = regexp$1;
  bson$2.Symbol = Symbol$3;
  bson$2.Timestamp = timestamp$1;

  // Return the BSON
  var bson$1 = bson$2;

  var path$1 = require('path'),
    fs$3 = require('fs'),
    f$7 = require('util').format,
    resolveFrom = require('resolve-from'),
    semver = require('semver');

  var exists$1 = fs$3.existsSync || path$1.existsSync;

  // Find the location of a package.json file near or above the given location
  var find_package_json = function(location) {
    var found = false;

    while(!found) {
      if (exists$1(location + '/package.json')) {
        found = location;
      } else if (location !== '/') {
        location = path$1.dirname(location);
      } else {
        return false;
      }
    }

    return location;
  };

  // Find the package.json object of the module closest up the module call tree that contains name in that module's peerOptionalDependencies
  var find_package_json_with_name = function(name) {
    // Walk up the module call tree until we find a module containing name in its peerOptionalDependencies
    var currentModule = module;
    var found = false;
    while (currentModule) {
      // Check currentModule has a package.json
      location = currentModule.filename;
      var location = find_package_json(location);
      if (!location) {
        currentModule = currentModule.parent;
        continue;
      }

      // Read the package.json file
      var object = JSON.parse(fs$3.readFileSync(f$7('%s/package.json', location)));
      // Is the name defined by interal file references
      var parts = name.split(/\//);

      // Check whether this package.json contains peerOptionalDependencies containing the name we're searching for
      if (!object.peerOptionalDependencies || (object.peerOptionalDependencies && !object.peerOptionalDependencies[parts[0]])) {
        currentModule = currentModule.parent;
        continue;
      }
      found = true;
      break;
    }

    // Check whether name has been found in currentModule's peerOptionalDependencies
    if (!found) {
      throw new Error(f$7('no optional dependency [%s] defined in peerOptionalDependencies in any package.json', parts[0]));
    }

    return {
      object: object,
      parts: parts
    }
  };

  var require_optional$1 = function(name, options) {
    options = options || {};
    options.strict = typeof options.strict == 'boolean' ? options.strict : true;

    var res = find_package_json_with_name(name);
    var object = res.object;
    var parts = res.parts;

    // Unpack the expected version
    var expectedVersions = object.peerOptionalDependencies[parts[0]];
    // The resolved package
    var moduleEntry = undefined;
    // Module file
    var moduleEntryFile = name;

    try {
      // Validate if it's possible to read the module
      moduleEntry = require(moduleEntryFile);
    } catch(err) {
      // Attempt to resolve in top level package
      try {
        // Get the module entry file
        moduleEntryFile = resolveFrom(browser$1.cwd(), name);
        if(moduleEntryFile == null) return undefined;
        // Attempt to resolve the module
        moduleEntry = require(moduleEntryFile);
      } catch(err) {
        if(err.code === 'MODULE_NOT_FOUND') return undefined;
      }
    }

    // Resolve the location of the module's package.json file
    var location = find_package_json(require.resolve(moduleEntryFile));
    if(!location) {
      throw new Error('package.json can not be located');
    }

    // Read the module file
    var dependentOnModule = JSON.parse(fs$3.readFileSync(f$7('%s/package.json', location)));
    // Get the version
    var version = dependentOnModule.version;
    // Validate if the found module satisfies the version id
    if(semver.satisfies(version, expectedVersions) == false
      && options.strict) {
        var error = new Error(f$7('optional dependency [%s] found but version [%s] did not satisfy constraint [%s]', parts[0], version, expectedVersions));
        error.code = 'OPTIONAL_MODULE_NOT_FOUND';
        throw error;
    }

    // Satifies the module requirement
    return moduleEntry;
  };

  require_optional$1.exists = function(name) {
    try {
      var m = require_optional$1(name);
      if(m === undefined) return false;
      return true;
    } catch(err) {
      return false;
    }
  };

  module.exports = require_optional$1;

  var require_optional$2 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  const os = require('os');
  const crypto$2 = require('crypto');
  const requireOptional = require('require_optional');

  /**
   * Generate a UUIDv4
   */
  const uuidV4$1 = () => {
    const result = crypto$2.randomBytes(16);
    result[6] = (result[6] & 0x0f) | 0x40;
    result[8] = (result[8] & 0x3f) | 0x80;
    return result;
  };

  /**
   * Relays events for a given listener and emitter
   *
   * @param {EventEmitter} listener the EventEmitter to listen to the events from
   * @param {EventEmitter} emitter the EventEmitter to relay the events to
   */
  function relayEvents$6(listener, emitter, events) {
    events.forEach(eventName => listener.on(eventName, event => emitter.emit(eventName, event)));
  }

  function retrieveKerberos$1() {
    let kerberos;

    try {
      kerberos = requireOptional('kerberos');
    } catch (err) {
      if (err.code === 'MODULE_NOT_FOUND') {
        throw new Error('The `kerberos` module was not found. Please install it and try again.');
      }

      throw err;
    }

    return kerberos;
  }

  // Throw an error if an attempt to use EJSON is made when it is not installed
  const noEJSONError = function() {
    throw new Error('The `mongodb-extjson` module was not found. Please install it and try again.');
  };

  // Facilitate loading EJSON optionally
  function retrieveEJSON() {
    let EJSON = null;
    try {
      EJSON = requireOptional('mongodb-extjson');
    } catch (error) {} // eslint-disable-line
    if (!EJSON) {
      EJSON = {
        parse: noEJSONError,
        deserialize: noEJSONError,
        serialize: noEJSONError,
        stringify: noEJSONError,
        setBSONModule: noEJSONError,
        BSON: noEJSONError
      };
    }

    return EJSON;
  }

  /**
   * A helper function for determining `maxWireVersion` between legacy and new topology
   * instances
   *
   * @private
   * @param {(Topology|Server)} topologyOrServer
   */
  function maxWireVersion$f(topologyOrServer) {
    if (topologyOrServer) {
      if (topologyOrServer.ismaster) {
        return topologyOrServer.ismaster.maxWireVersion;
      }

      if (typeof topologyOrServer.lastIsMaster === 'function') {
        const lastIsMaster = topologyOrServer.lastIsMaster();
        if (lastIsMaster) {
          return lastIsMaster.maxWireVersion;
        }
      }

      if (topologyOrServer.description) {
        return topologyOrServer.description.maxWireVersion;
      }
    }

    return 0;
  }

  /*
   * Checks that collation is supported by server.
   *
   * @param {Server} [server] to check against
   * @param {object} [cmd] object where collation may be specified
   * @param {function} [callback] callback function
   * @return true if server does not support collation
   */
  function collationNotSupported$2(server, cmd) {
    return cmd && cmd.collation && maxWireVersion$f(server) < 5;
  }

  /**
   * Checks if a given value is a Promise
   *
   * @param {*} maybePromise
   * @return true if the provided value is a Promise
   */
  function isPromiseLike$3(maybePromise) {
    return maybePromise && typeof maybePromise.then === 'function';
  }

  /**
   * Applies the function `eachFn` to each item in `arr`, in parallel.
   *
   * @param {array} arr an array of items to asynchronusly iterate over
   * @param {function} eachFn A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.
   * @param {function} callback The callback called after every item has been iterated
   */
  function eachAsync$2(arr, eachFn, callback) {
    arr = arr || [];

    let idx = 0;
    let awaiting = 0;
    for (idx = 0; idx < arr.length; ++idx) {
      awaiting++;
      eachFn(arr[idx], eachCallback);
    }

    if (awaiting === 0) {
      callback();
      return;
    }

    function eachCallback(err) {
      awaiting--;
      if (err) {
        callback(err);
        return;
      }

      if (idx === arr.length && awaiting <= 0) {
        callback();
      }
    }
  }

  function eachAsyncSeries(arr, eachFn, callback) {
    arr = arr || [];

    let idx = 0;
    let awaiting = arr.length;
    if (awaiting === 0) {
      callback();
      return;
    }

    function eachCallback(err) {
      idx++;
      awaiting--;
      if (err) {
        callback(err);
        return;
      }

      if (idx === arr.length && awaiting <= 0) {
        callback();
        return;
      }

      eachFn(arr[idx], eachCallback);
    }

    eachFn(arr[idx], eachCallback);
  }

  function isUnifiedTopology$2(topology) {
    return topology.description != null;
  }

  function arrayStrictEqual(arr, arr2) {
    if (!Array.isArray(arr) || !Array.isArray(arr2)) {
      return false;
    }

    return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);
  }

  function tagsStrictEqual(tags, tags2) {
    const tagsKeys = Object.keys(tags);
    const tags2Keys = Object.keys(tags2);
    return tagsKeys.length === tags2Keys.length && tagsKeys.every(key => tags2[key] === tags[key]);
  }

  function errorStrictEqual(lhs, rhs) {
    if (lhs === rhs) {
      return true;
    }

    if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {
      return false;
    }

    if (lhs.constructor.name !== rhs.constructor.name) {
      return false;
    }

    if (lhs.message !== rhs.message) {
      return false;
    }

    return true;
  }

  function makeStateMachine$2(stateTable) {
    return function stateTransition(target, newState) {
      const legalStates = stateTable[target.s.state];
      if (legalStates && legalStates.indexOf(newState) < 0) {
        throw new TypeError(
          `illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`
        );
      }

      target.emit('stateChanged', target.s.state, newState);
      target.s.state = newState;
    };
  }

  function makeClientMetadata$4(options) {
    options = options || {};

    const metadata = {
      driver: {
        name: 'nodejs',
        version: require('../../package.json').version
      },
      os: {
        type: os.type(),
        name: browser$1.platform,
        architecture: browser$1.arch,
        version: os.release()
      },
      platform: `'Node.js ${browser$1.version}, ${os.endianness} (${
      options.useUnifiedTopology ? 'unified' : 'legacy'
    })`
    };

    // support optionally provided wrapping driver info
    if (options.driverInfo) {
      if (options.driverInfo.name) {
        metadata.driver.name = `${metadata.driver.name}|${options.driverInfo.name}`;
      }

      if (options.driverInfo.version) {
        metadata.version = `${metadata.driver.version}|${options.driverInfo.version}`;
      }

      if (options.driverInfo.platform) {
        metadata.platform = `${metadata.platform}|${options.driverInfo.platform}`;
      }
    }

    if (options.appname) {
      // MongoDB requires the appname not exceed a byte length of 128
      const buffer = Buffer$9.from(options.appname);
      metadata.application = {
        name: buffer.length > 128 ? buffer.slice(0, 128).toString('utf8') : options.appname
      };
    }

    return metadata;
  }

  const noop = () => {};

  module.exports = {
    uuidV4: uuidV4$1,
    relayEvents: relayEvents$6,
    collationNotSupported: collationNotSupported$2,
    retrieveEJSON,
    retrieveKerberos: retrieveKerberos$1,
    maxWireVersion: maxWireVersion$f,
    isPromiseLike: isPromiseLike$3,
    eachAsync: eachAsync$2,
    eachAsyncSeries,
    isUnifiedTopology: isUnifiedTopology$2,
    arrayStrictEqual,
    tagsStrictEqual,
    errorStrictEqual,
    makeStateMachine: makeStateMachine$2,
    makeClientMetadata: makeClientMetadata$4,
    noop
  };

  var utils$3 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  const kErrorLabels = Symbol('errorLabels');

  /**
   * Creates a new MongoError
   *
   * @augments Error
   * @param {Error|string|object} message The error message
   * @property {string} message The error message
   * @property {string} stack The error call stack
   */
  class MongoError$N extends Error {
    constructor(message) {
      if (message instanceof Error) {
        super(message.message);
        this.stack = message.stack;
      } else {
        if (typeof message === 'string') {
          super(message);
        } else {
          super(message.message || message.errmsg || message.$err || 'n/a');
          if (message.errorLabels) {
            this[kErrorLabels] = new Set(message.errorLabels);
          }

          for (var name in message) {
            if (name === 'errorLabels' || name === 'errmsg') {
              continue;
            }

            this[name] = message[name];
          }
        }

        Error.captureStackTrace(this, this.constructor);
      }

      this.name = 'MongoError';
    }

    /**
     * Legacy name for server error responses
     */
    get errmsg() {
      return this.message;
    }

    /**
     * Creates a new MongoError object
     *
     * @param {Error|string|object} options The options used to create the error.
     * @return {MongoError} A MongoError instance
     * @deprecated Use `new MongoError()` instead.
     */
    static create(options) {
      return new MongoError$N(options);
    }

    /**
     * Checks the error to see if it has an error label
     * @param {string} label The error label to check for
     * @returns {boolean} returns true if the error has the provided error label
     */
    hasErrorLabel(label) {
      if (this[kErrorLabels] == null) {
        return false;
      }

      return this[kErrorLabels].has(label);
    }

    addErrorLabel(label) {
      if (this[kErrorLabels] == null) {
        this[kErrorLabels] = new Set();
      }

      this[kErrorLabels].add(label);
    }

    get errorLabels() {
      return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];
    }
  }

  const kBeforeHandshake = Symbol('beforeHandshake');
  function isNetworkErrorBeforeHandshake(err) {
    return err[kBeforeHandshake] === true;
  }

  /**
   * An error indicating an issue with the network, including TCP
   * errors and timeouts.
   *
   * @param {Error|string|object} message The error message
   * @property {string} message The error message
   * @property {string} stack The error call stack
   * @extends MongoError
   */
  class MongoNetworkError$9 extends MongoError$N {
    constructor(message, options) {
      super(message);
      this.name = 'MongoNetworkError';

      if (options && options.beforeHandshake === true) {
        this[kBeforeHandshake] = true;
      }
    }
  }

  /**
   * An error indicating a network timeout occurred
   *
   * @param {Error|string|object} message The error message
   * @property {string} message The error message
   * @property {object} [options.beforeHandshake] Indicates the timeout happened before a connection handshake completed
   * @extends MongoError
   */
  class MongoNetworkTimeoutError$1 extends MongoNetworkError$9 {
    constructor(message, options) {
      super(message, options);
      this.name = 'MongoNetworkTimeoutError';
    }
  }

  /**
   * An error used when attempting to parse a value (like a connection string)
   *
   * @param {Error|string|object} message The error message
   * @property {string} message The error message
   * @extends MongoError
   */
  class MongoParseError$1 extends MongoError$N {
    constructor(message) {
      super(message);
      this.name = 'MongoParseError';
    }
  }

  /**
   * An error signifying a client-side timeout event
   *
   * @param {Error|string|object} message The error message
   * @param {string|object} [reason] The reason the timeout occured
   * @property {string} message The error message
   * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers
   * @extends MongoError
   */
  class MongoTimeoutError$1 extends MongoError$N {
    constructor(message, reason) {
      if (reason && reason.error) {
        super(reason.error.message || reason.error);
      } else {
        super(message);
      }

      this.name = 'MongoTimeoutError';
      if (reason) {
        this.reason = reason;
      }
    }
  }

  /**
   * An error signifying a client-side server selection error
   *
   * @param {Error|string|object} message The error message
   * @param {string|object} [reason] The reason the timeout occured
   * @property {string} message The error message
   * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers
   * @extends MongoError
   */
  class MongoServerSelectionError$1 extends MongoTimeoutError$1 {
    constructor(message, reason) {
      super(message, reason);
      this.name = 'MongoServerSelectionError';
    }
  }

  function makeWriteConcernResultObject(input) {
    const output = Object.assign({}, input);

    if (output.ok === 0) {
      output.ok = 1;
      delete output.errmsg;
      delete output.code;
      delete output.codeName;
    }

    return output;
  }

  /**
   * An error thrown when the server reports a writeConcernError
   *
   * @param {Error|string|object} message The error message
   * @param {object} result The result document (provided if ok: 1)
   * @property {string} message The error message
   * @property {object} [result] The result document (provided if ok: 1)
   * @extends MongoError
   */
  class MongoWriteConcernError$3 extends MongoError$N {
    constructor(message, result) {
      super(message);
      this.name = 'MongoWriteConcernError';

      if (result && Array.isArray(result.errorLabels)) {
        this[kErrorLabels] = new Set(result.errorLabels);
      }

      if (result != null) {
        this.result = makeWriteConcernResultObject(result);
      }
    }
  }

  // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms
  const RETRYABLE_ERROR_CODES = new Set([
    6, // HostUnreachable
    7, // HostNotFound
    89, // NetworkTimeout
    91, // ShutdownInProgress
    189, // PrimarySteppedDown
    9001, // SocketException
    10107, // NotMaster
    11600, // InterruptedAtShutdown
    11602, // InterruptedDueToReplStateChange
    13435, // NotMasterNoSlaveOk
    13436 // NotMasterOrSecondary
  ]);

  const RETRYABLE_WRITE_ERROR_CODES = new Set([
    11600, // InterruptedAtShutdown
    11602, // InterruptedDueToReplStateChange
    10107, // NotMaster
    13435, // NotMasterNoSlaveOk
    13436, // NotMasterOrSecondary
    189, // PrimarySteppedDown
    91, // ShutdownInProgress
    7, // HostNotFound
    6, // HostUnreachable
    89, // NetworkTimeout
    9001, // SocketException
    262 // ExceededTimeLimit
  ]);

  function isRetryableWriteError$1(error) {
    if (error instanceof MongoWriteConcernError$3) {
      return (
        RETRYABLE_WRITE_ERROR_CODES.has(error.code) ||
        RETRYABLE_WRITE_ERROR_CODES.has(error.result.code)
      );
    }

    return RETRYABLE_WRITE_ERROR_CODES.has(error.code);
  }

  /**
   * Determines whether an error is something the driver should attempt to retry
   *
   * @ignore
   * @param {MongoError|Error} error
   */
  function isRetryableError$2(error) {
    return (
      RETRYABLE_ERROR_CODES.has(error.code) ||
      error instanceof MongoNetworkError$9 ||
      error.message.match(/not master/) ||
      error.message.match(/node is recovering/)
    );
  }

  const SDAM_RECOVERING_CODES = new Set([
    91, // ShutdownInProgress
    189, // PrimarySteppedDown
    11600, // InterruptedAtShutdown
    11602, // InterruptedDueToReplStateChange
    13436 // NotMasterOrSecondary
  ]);

  const SDAM_NOTMASTER_CODES = new Set([
    10107, // NotMaster
    13435 // NotMasterNoSlaveOk
  ]);

  const SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([
    11600, // InterruptedAtShutdown
    91 // ShutdownInProgress
  ]);

  function isRecoveringError(err) {
    if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {
      return true;
    }

    return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);
  }

  function isNotMasterError(err) {
    if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {
      return true;
    }

    if (isRecoveringError(err)) {
      return false;
    }

    return err.message.match(/not master/);
  }

  function isNodeShuttingDownError(err) {
    return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);
  }

  /**
   * Determines whether SDAM can recover from a given error. If it cannot
   * then the pool will be cleared, and server state will completely reset
   * locally.
   *
   * @ignore
   * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering
   * @param {MongoError|Error} error
   */
  function isSDAMUnrecoverableError(error) {
    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or
    //       close event are considered unrecoverable
    if (error instanceof MongoParseError$1 || error == null) {
      return true;
    }

    if (isRecoveringError(error) || isNotMasterError(error)) {
      return true;
    }

    return false;
  }

  var error$2 = {
    MongoError: MongoError$N,
    MongoNetworkError: MongoNetworkError$9,
    MongoNetworkTimeoutError: MongoNetworkTimeoutError$1,
    MongoParseError: MongoParseError$1,
    MongoTimeoutError: MongoTimeoutError$1,
    MongoServerSelectionError: MongoServerSelectionError$1,
    MongoWriteConcernError: MongoWriteConcernError$3,
    isRetryableError: isRetryableError$2,
    isSDAMUnrecoverableError,
    isNodeShuttingDownError,
    isRetryableWriteError: isRetryableWriteError$1,
    isNetworkErrorBeforeHandshake
  };

  var domain;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers() {}
  EventHandlers.prototype = Object.create(null);

  function EventEmitter$9() {
    EventEmitter$9.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter$9.EventEmitter = EventEmitter$9;

  EventEmitter$9.usingDomains = false;

  EventEmitter$9.prototype.domain = undefined;
  EventEmitter$9.prototype._events = undefined;
  EventEmitter$9.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter$9.defaultMaxListeners = 10;

  EventEmitter$9.init = function() {
    this.domain = null;
    if (EventEmitter$9.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active ) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter$9.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter$9.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter$9.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter$9.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning$4(w);
        }
      }
    }

    return target;
  }
  function emitWarning$4(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter$9.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter$9.prototype.on = EventEmitter$9.prototype.addListener;

  EventEmitter$9.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function _onceWrap(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter$9.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter$9.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter$9.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne(list, position);
          }

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter$9.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter$9.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      ret = [];
    else {
      evlistener = events[type];
      if (!evlistener)
        ret = [];
      else if (typeof evlistener === 'function')
        ret = [evlistener.listener || evlistener];
      else
        ret = unwrapListeners(evlistener);
    }

    return ret;
  };

  EventEmitter$9.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount$1.call(emitter, type);
    }
  };

  EventEmitter$9.prototype.listenerCount = listenerCount$1;
  function listenerCount$1(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter$9.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);
    while (i--)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  var events$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': EventEmitter$9,
    EventEmitter: EventEmitter$9
  });

  var empty = {};

  var empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': empty
  });

  var require_optional = /*@__PURE__*/getAugmentedNamespace(require_optional$2);

  function debugOptions$5(debugFields, options) {
    var finaloptions = {};
    debugFields.forEach(function(n) {
      finaloptions[n] = options[n];
    });

    return finaloptions;
  }

  function retrieveBSON$9() {
    var BSON = bson$1;
    BSON.native = false;

    try {
      var optionalBSON = require_optional('bson-ext');
      if (optionalBSON) {
        optionalBSON.native = true;
        return optionalBSON;
      }
    } catch (err) {} // eslint-disable-line

    return BSON;
  }

  // Throw an error if an attempt to use Snappy is made when Snappy is not installed
  function noSnappyWarning() {
    throw new Error(
      'Attempted to use Snappy compression, but Snappy is not installed. Install or disable Snappy compression and try again.'
    );
  }

  // Facilitate loading Snappy optionally
  function retrieveSnappy() {
    var snappy = null;
    try {
      snappy = require_optional('snappy');
    } catch (error) {} // eslint-disable-line
    if (!snappy) {
      snappy = {
        compress: noSnappyWarning,
        uncompress: noSnappyWarning,
        compressSync: noSnappyWarning,
        uncompressSync: noSnappyWarning
      };
    }
    return snappy;
  }

  var utils$2 = {
    debugOptions: debugOptions$5,
    retrieveBSON: retrieveBSON$9,
    retrieveSnappy
  };

  const MongoError$M = require('./core/error').MongoError;
  const WriteConcern$3 = require('./write_concern');

  var shallowClone$2 = function(obj) {
    var copy = {};
    for (var name in obj) copy[name] = obj[name];
    return copy;
  };

  // Set simple property
  var getSingleProperty$1 = function(obj, name, value) {
    Object.defineProperty(obj, name, {
      enumerable: true,
      get: function() {
        return value;
      }
    });
  };

  var formatSortValue = (exports.formatSortValue = function(sortDirection) {
    var value = ('' + sortDirection).toLowerCase();

    switch (value) {
      case 'ascending':
      case 'asc':
      case '1':
        return 1;
      case 'descending':
      case 'desc':
      case '-1':
        return -1;
      default:
        throw new Error(
          'Illegal sort clause, must be of the form ' +
            "[['field1', '(ascending|descending)'], " +
            "['field2', '(ascending|descending)']]"
        );
    }
  });

  var formattedOrderClause$3 = (exports.formattedOrderClause = function(sortValue) {
    var orderBy = {};
    if (sortValue == null) return null;
    if (Array.isArray(sortValue)) {
      if (sortValue.length === 0) {
        return null;
      }

      for (var i = 0; i < sortValue.length; i++) {
        if (sortValue[i].constructor === String) {
          orderBy[sortValue[i]] = 1;
        } else {
          orderBy[sortValue[i][0]] = formatSortValue(sortValue[i][1]);
        }
      }
    } else if (sortValue != null && typeof sortValue === 'object') {
      orderBy = sortValue;
    } else if (typeof sortValue === 'string') {
      orderBy[sortValue] = 1;
    } else {
      throw new Error(
        'Illegal sort clause, must be of the form ' +
          "[['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]"
      );
    }

    return orderBy;
  });

  var checkCollectionName$2 = function checkCollectionName(collectionName) {
    if ('string' !== typeof collectionName) {
      throw new MongoError$M('collection name must be a String');
    }

    if (!collectionName || collectionName.indexOf('..') !== -1) {
      throw new MongoError$M('collection names cannot be empty');
    }

    if (
      collectionName.indexOf('$') !== -1 &&
      collectionName.match(/((^\$cmd)|(oplog\.\$main))/) == null
    ) {
      throw new MongoError$M("collection names must not contain '$'");
    }

    if (collectionName.match(/^\.|\.$/) != null) {
      throw new MongoError$M("collection names must not start or end with '.'");
    }

    // Validate that we are not passing 0x00 in the collection name
    if (collectionName.indexOf('\x00') !== -1) {
      throw new MongoError$M('collection names cannot contain a null character');
    }
  };

  var handleCallback$f = function(callback, err, value1, value2) {
    try {
      if (callback == null) return;

      if (callback) {
        return value2 ? callback(err, value1, value2) : callback(err, value1);
      }
    } catch (err) {
      browser$1.nextTick(function() {
        throw err;
      });
      return false;
    }

    return true;
  };

  /**
   * Wrap a Mongo error document in an Error instance
   * @ignore
   * @api private
   */
  var toError$7 = function(error) {
    if (error instanceof Error) return error;

    var msg = error.err || error.errmsg || error.errMessage || error;
    var e = MongoError$M.create({ message: msg, driver: true });

    // Get all object keys
    var keys = typeof error === 'object' ? Object.keys(error) : [];

    for (var i = 0; i < keys.length; i++) {
      try {
        e[keys[i]] = error[keys[i]];
      } catch (err) {
        // continue
      }
    }

    return e;
  };

  /**
   * @ignore
   */
  var normalizeHintField$1 = function normalizeHintField(hint) {
    var finalHint = null;

    if (typeof hint === 'string') {
      finalHint = hint;
    } else if (Array.isArray(hint)) {
      finalHint = {};

      hint.forEach(function(param) {
        finalHint[param] = 1;
      });
    } else if (hint != null && typeof hint === 'object') {
      finalHint = {};
      for (var name in hint) {
        finalHint[name] = hint[name];
      }
    }

    return finalHint;
  };

  /**
   * Create index name based on field spec
   *
   * @ignore
   * @api private
   */
  var parseIndexOptions$2 = function(fieldOrSpec) {
    var fieldHash = {};
    var indexes = [];
    var keys;

    // Get all the fields accordingly
    if ('string' === typeof fieldOrSpec) {
      // 'type'
      indexes.push(fieldOrSpec + '_' + 1);
      fieldHash[fieldOrSpec] = 1;
    } else if (Array.isArray(fieldOrSpec)) {
      fieldOrSpec.forEach(function(f) {
        if ('string' === typeof f) {
          // [{location:'2d'}, 'type']
          indexes.push(f + '_' + 1);
          fieldHash[f] = 1;
        } else if (Array.isArray(f)) {
          // [['location', '2d'],['type', 1]]
          indexes.push(f[0] + '_' + (f[1] || 1));
          fieldHash[f[0]] = f[1] || 1;
        } else if (isObject$1(f)) {
          // [{location:'2d'}, {type:1}]
          keys = Object.keys(f);
          keys.forEach(function(k) {
            indexes.push(k + '_' + f[k]);
            fieldHash[k] = f[k];
          });
        } else ;
      });
    } else if (isObject$1(fieldOrSpec)) {
      // {location:'2d', type:1}
      keys = Object.keys(fieldOrSpec);
      keys.forEach(function(key) {
        indexes.push(key + '_' + fieldOrSpec[key]);
        fieldHash[key] = fieldOrSpec[key];
      });
    }

    return {
      name: indexes.join('_'),
      keys: keys,
      fieldHash: fieldHash
    };
  };

  var isObject$1 = (exports.isObject = function(arg) {
    return '[object Object]' === Object.prototype.toString.call(arg);
  });

  var debugOptions$4 = function(debugFields, options) {
    var finaloptions = {};
    debugFields.forEach(function(n) {
      finaloptions[n] = options[n];
    });

    return finaloptions;
  };

  var decorateCommand$1 = function(command, options, exclude) {
    for (var name in options) {
      if (exclude.indexOf(name) === -1) command[name] = options[name];
    }

    return command;
  };

  var mergeOptions$5 = function(target, source) {
    for (var name in source) {
      target[name] = source[name];
    }

    return target;
  };

  // Merge options with translation
  var translateOptions$5 = function(target, source) {
    var translations = {
      // SSL translation options
      sslCA: 'ca',
      sslCRL: 'crl',
      sslValidate: 'rejectUnauthorized',
      sslKey: 'key',
      sslCert: 'cert',
      sslPass: 'passphrase',
      // SocketTimeout translation options
      socketTimeoutMS: 'socketTimeout',
      connectTimeoutMS: 'connectionTimeout',
      // Replicaset options
      replicaSet: 'setName',
      rs_name: 'setName',
      secondaryAcceptableLatencyMS: 'acceptableLatency',
      connectWithNoPrimary: 'secondaryOnlyConnectionAllowed',
      // Mongos options
      acceptableLatencyMS: 'localThresholdMS'
    };

    for (var name in source) {
      if (translations[name]) {
        target[translations[name]] = source[name];
      } else {
        target[name] = source[name];
      }
    }

    return target;
  };

  var filterOptions$4 = function(options, names) {
    var filterOptions = {};

    for (var name in options) {
      if (names.indexOf(name) !== -1) filterOptions[name] = options[name];
    }

    // Filtered options
    return filterOptions;
  };

  // Write concern keys
  const WRITE_CONCERN_KEYS = ['w', 'j', 'wtimeout', 'fsync', 'writeConcern'];

  /**
   * If there is no WriteConcern related options defined on target then inherit from source.
   * Otherwise, do not inherit **any** options from source.
   * @internal
   * @param {object} target - options object conditionally receiving the writeConcern options
   * @param {object} source - options object containing the potentially inherited writeConcern options
   */
  function conditionallyMergeWriteConcern$1(target, source) {
    let found = false;
    for (const wcKey of WRITE_CONCERN_KEYS) {
      if (wcKey in target) {
        // Found a writeConcern option
        found = true;
        break;
      }
    }

    if (!found) {
      for (const wcKey of WRITE_CONCERN_KEYS) {
        if (source[wcKey]) {
          if (!('writeConcern' in target)) {
            target.writeConcern = {};
          }
          target.writeConcern[wcKey] = source[wcKey];
        }
      }
    }

    return target;
  }

  /**
   * Executes the given operation with provided arguments.
   *
   * This method reduces large amounts of duplication in the entire codebase by providing
   * a single point for determining whether callbacks or promises should be used. Additionally
   * it allows for a single point of entry to provide features such as implicit sessions, which
   * are required by the Driver Sessions specification in the event that a ClientSession is
   * not provided
   *
   * @param {object} topology The topology to execute this operation on
   * @param {function} operation The operation to execute
   * @param {array} args Arguments to apply the provided operation
   * @param {object} [options] Options that modify the behavior of the method
   */
  const executeLegacyOperation$5 = (topology, operation, args, options) => {
    if (topology == null) {
      throw new TypeError('This method requires a valid topology instance');
    }

    if (!Array.isArray(args)) {
      throw new TypeError('This method requires an array of arguments to apply');
    }

    options = options || {};
    const Promise = topology.s.promiseLibrary;
    let callback = args[args.length - 1];

    // The driver sessions spec mandates that we implicitly create sessions for operations
    // that are not explicitly provided with a session.
    let session, opOptions, owner;
    if (!options.skipSessions && topology.hasSessionSupport()) {
      opOptions = args[args.length - 2];
      if (opOptions == null || opOptions.session == null) {
        owner = Symbol();
        session = topology.startSession({ owner });
        const optionsIndex = args.length - 2;
        args[optionsIndex] = Object.assign({}, args[optionsIndex], { session: session });
      } else if (opOptions.session && opOptions.session.hasEnded) {
        throw new MongoError$M('Use of expired sessions is not permitted');
      }
    }

    const makeExecuteCallback = (resolve, reject) =>
      function executeCallback(err, result) {
        if (session && session.owner === owner && !options.returnsCursor) {
          session.endSession(() => {
            delete opOptions.session;
            if (err) return reject(err);
            resolve(result);
          });
        } else {
          if (err) return reject(err);
          resolve(result);
        }
      };

    // Execute using callback
    if (typeof callback === 'function') {
      callback = args.pop();
      const handler = makeExecuteCallback(
        result => callback(null, result),
        err => callback(err, null)
      );
      args.push(handler);

      try {
        return operation.apply(null, args);
      } catch (e) {
        handler(e);
        throw e;
      }
    }

    // Return a Promise
    if (args[args.length - 1] != null) {
      throw new TypeError('final argument to `executeLegacyOperation` must be a callback');
    }

    return new Promise(function(resolve, reject) {
      const handler = makeExecuteCallback(resolve, reject);
      args[args.length - 1] = handler;

      try {
        return operation.apply(null, args);
      } catch (e) {
        handler(e);
      }
    });
  };

  /**
   * Applies retryWrites: true to a command if retryWrites is set on the command's database.
   *
   * @param {object} target The target command to which we will apply retryWrites.
   * @param {object} db The database from which we can inherit a retryWrites value.
   */
  function applyRetryableWrites$2(target, db) {
    if (db && db.s.options.retryWrites) {
      target.retryWrites = true;
    }

    return target;
  }

  /**
   * Applies a write concern to a command based on well defined inheritance rules, optionally
   * detecting support for the write concern in the first place.
   *
   * @param {Object} target the target command we will be applying the write concern to
   * @param {Object} sources sources where we can inherit default write concerns from
   * @param {Object} [options] optional settings passed into a command for write concern overrides
   * @returns {Object} the (now) decorated target
   */
  function applyWriteConcern$8(target, sources, options) {
    options = options || {};
    const db = sources.db;
    const coll = sources.collection;

    if (options.session && options.session.inTransaction()) {
      // writeConcern is not allowed within a multi-statement transaction
      if (target.writeConcern) {
        delete target.writeConcern;
      }

      return target;
    }

    const writeConcern = WriteConcern$3.fromOptions(options);
    if (writeConcern) {
      return Object.assign(target, { writeConcern });
    }

    if (coll && coll.writeConcern) {
      return Object.assign(target, { writeConcern: Object.assign({}, coll.writeConcern) });
    }

    if (db && db.writeConcern) {
      return Object.assign(target, { writeConcern: Object.assign({}, db.writeConcern) });
    }

    return target;
  }

  /**
   * Checks if a given value is a Promise
   *
   * @param {*} maybePromise
   * @return true if the provided value is a Promise
   */
  function isPromiseLike$2(maybePromise) {
    return maybePromise && typeof maybePromise.then === 'function';
  }

  /**
   * Applies collation to a given command.
   *
   * @param {object} [command] the command on which to apply collation
   * @param {(Cursor|Collection)} [target] target of command
   * @param {object} [options] options containing collation settings
   */
  function decorateWithCollation$3(command, target, options) {
    const topology = (target.s && target.s.topology) || target.topology;

    if (!topology) {
      throw new TypeError('parameter "target" is missing a topology');
    }

    const capabilities = topology.capabilities();
    if (options.collation && typeof options.collation === 'object') {
      if (capabilities && capabilities.commandsTakeCollation) {
        command.collation = options.collation;
      } else {
        throw new MongoError$M(`Current topology does not support collation`);
      }
    }
  }

  /**
   * Applies a read concern to a given command.
   *
   * @param {object} command the command on which to apply the read concern
   * @param {Collection} coll the parent collection of the operation calling this method
   */
  function decorateWithReadConcern$3(command, coll, options) {
    if (options && options.session && options.session.inTransaction()) {
      return;
    }
    let readConcern = Object.assign({}, command.readConcern || {});
    if (coll.s.readConcern) {
      Object.assign(readConcern, coll.s.readConcern);
    }

    if (Object.keys(readConcern).length > 0) {
      Object.assign(command, { readConcern: readConcern });
    }
  }

  /**
   * Applies an explain to a given command.
   * @internal
   *
   * @param {object} command - the command on which to apply the explain
   * @param {Explain} explain - the options containing the explain verbosity
   * @return the new command
   */
  function decorateWithExplain$3(command, explain) {
    if (command.explain) {
      return command;
    }

    return { explain: command, verbosity: explain.verbosity };
  }

  const nodejsMajorVersion = +browser$1.version.split('.')[0].substring(1);
  const emitProcessWarning = msg =>
    nodejsMajorVersion <= 6
      ? browser$1.emitWarning(msg, 'DeprecationWarning', MONGODB_WARNING_CODE)
      : browser$1.emitWarning(msg, { type: 'DeprecationWarning', code: MONGODB_WARNING_CODE });
  // eslint-disable-next-line no-console
  const emitConsoleWarning = msg => console.error(msg);
  const emitDeprecationWarning$2 = browser$1.emitWarning ? emitProcessWarning : emitConsoleWarning;

  /**
   * Default message handler for generating deprecation warnings.
   *
   * @param {string} name function name
   * @param {string} option option name
   * @return {string} warning message
   * @ignore
   * @api private
   */
  function defaultMsgHandler(name, option) {
    return `${name} option [${option}] is deprecated and will be removed in a later version.`;
  }

  /**
   * Deprecates a given function's options.
   *
   * @param {object} config configuration for deprecation
   * @param {string} config.name function name
   * @param {Array} config.deprecatedOptions options to deprecate
   * @param {number} config.optionsIndex index of options object in function arguments array
   * @param {function} [config.msgHandler] optional custom message handler to generate warnings
   * @param {function} fn the target function of deprecation
   * @return {function} modified function that warns once per deprecated option, and executes original function
   * @ignore
   * @api private
   */
  function deprecateOptions$2(config, fn) {
    if (browser$1.noDeprecation === true) {
      return fn;
    }

    const msgHandler = config.msgHandler ? config.msgHandler : defaultMsgHandler;

    const optionsWarned = new Set();
    function deprecated() {
      const options = arguments[config.optionsIndex];

      // ensure options is a valid, non-empty object, otherwise short-circuit
      if (!isObject$1(options) || Object.keys(options).length === 0) {
        return fn.apply(this, arguments);
      }

      config.deprecatedOptions.forEach(deprecatedOption => {
        if (
          Object.prototype.hasOwnProperty.call(options, deprecatedOption) &&
          !optionsWarned.has(deprecatedOption)
        ) {
          optionsWarned.add(deprecatedOption);
          const msg = msgHandler(config.name, deprecatedOption);
          emitDeprecationWarning$2(msg);
          if (this && this.getLogger) {
            const logger = this.getLogger();
            if (logger) {
              logger.warn(msg);
            }
          }
        }
      });

      return fn.apply(this, arguments);
    }

    // These lines copied from https://github.com/nodejs/node/blob/25e5ae41688676a5fd29b2e2e7602168eee4ceb5/lib/internal/util.js#L73-L80
    // The wrapper will keep the same prototype as fn to maintain prototype chain
    Object.setPrototypeOf(deprecated, fn);
    if (fn.prototype) {
      // Setting this (rather than using Object.setPrototype, as above) ensures
      // that calling the unwrapped constructor gives an instanceof the wrapped
      // constructor.
      deprecated.prototype = fn.prototype;
    }

    return deprecated;
  }

  const SUPPORTS$1 = {};
  // Test asyncIterator support
  try {
    require('./async/async_iterator');
    SUPPORTS$1.ASYNC_ITERATOR = true;
  } catch (e) {
    SUPPORTS$1.ASYNC_ITERATOR = false;
  }

  class MongoDBNamespace$8 {
    constructor(db, collection) {
      this.db = db;
      this.collection = collection;
    }

    toString() {
      return this.collection ? `${this.db}.${this.collection}` : this.db;
    }

    withCollection(collection) {
      return new MongoDBNamespace$8(this.db, collection);
    }

    static fromString(namespace) {
      if (!namespace) {
        throw new Error(`Cannot parse namespace from "${namespace}"`);
      }

      const index = namespace.indexOf('.');
      return new MongoDBNamespace$8(namespace.substring(0, index), namespace.substring(index + 1));
    }
  }

  function* makeCounter(seed) {
    let count = seed || 0;
    while (true) {
      const newCount = count;
      count += 1;
      yield newCount;
    }
  }

  /**
   * Helper function for either accepting a callback, or returning a promise
   *
   * @param {Object} parent an instance of parent with promiseLibrary.
   * @param {object} parent.s an object containing promiseLibrary.
   * @param {function} parent.s.promiseLibrary an object containing promiseLibrary.
   * @param {[Function]} callback an optional callback.
   * @param {Function} fn A function that takes a callback
   * @returns {Promise|void} Returns nothing if a callback is supplied, else returns a Promise.
   */
  function maybePromise$5(parent, callback, fn) {
    const PromiseLibrary = (parent && parent.s && parent.s.promiseLibrary) || Promise;

    let result;
    if (typeof callback !== 'function') {
      result = new PromiseLibrary((resolve, reject) => {
        callback = (err, res) => {
          if (err) return reject(err);
          resolve(res);
        };
      });
    }

    fn(function(err, res) {
      if (err != null) {
        try {
          callback(err);
        } catch (error) {
          return browser$1.nextTick(() => {
            throw error;
          });
        }
        return;
      }

      callback(err, res);
    });

    return result;
  }

  function now$4() {
    const hrtime = browser$1.hrtime();
    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);
  }

  function calculateDurationInMs$3(started) {
    if (typeof started !== 'number') {
      throw TypeError('numeric value required to calculate duration');
    }

    const elapsed = now$4() - started;
    return elapsed < 0 ? 0 : elapsed;
  }

  /**
   * Creates an interval timer which is able to be woken up sooner than
   * the interval. The timer will also debounce multiple calls to wake
   * ensuring that the function is only ever called once within a minimum
   * interval window.
   *
   * @param {function} fn An async function to run on an interval, must accept a `callback` as its only parameter
   * @param {object} [options] Optional settings
   * @param {number} [options.interval] The interval at which to run the provided function
   * @param {number} [options.minInterval] The minimum time which must pass between invocations of the provided function
   * @param {boolean} [options.immediate] Execute the function immediately when the interval is started
   */
  function makeInterruptableAsyncInterval(fn, options) {
    let timerId;
    let lastCallTime;
    let lastWakeTime;
    let stopped = false;

    options = options || {};
    const interval = options.interval || 1000;
    const minInterval = options.minInterval || 500;
    const immediate = typeof options.immediate === 'boolean' ? options.immediate : false;
    const clock = typeof options.clock === 'function' ? options.clock : now$4;

    function wake() {
      const currentTime = clock();
      const timeSinceLastWake = currentTime - lastWakeTime;
      const timeSinceLastCall = currentTime - lastCallTime;
      const timeUntilNextCall = interval - timeSinceLastCall;
      lastWakeTime = currentTime;

      // For the streaming protocol: there is nothing obviously stopping this
      // interval from being woken up again while we are waiting "infinitely"
      // for `fn` to be called again`. Since the function effectively
      // never completes, the `timeUntilNextCall` will continue to grow
      // negatively unbounded, so it will never trigger a reschedule here.

      // debounce multiple calls to wake within the `minInterval`
      if (timeSinceLastWake < minInterval) {
        return;
      }

      // reschedule a call as soon as possible, ensuring the call never happens
      // faster than the `minInterval`
      if (timeUntilNextCall > minInterval) {
        reschedule(minInterval);
      }

      // This is possible in virtualized environments like AWS Lambda where our
      // clock is unreliable. In these cases the timer is "running" but never
      // actually completes, so we want to execute immediately and then attempt
      // to reschedule.
      if (timeUntilNextCall < 0) {
        executeAndReschedule();
      }
    }

    function stop() {
      stopped = true;
      if (timerId) {
        clearTimeout(timerId);
        timerId = null;
      }

      lastCallTime = 0;
      lastWakeTime = 0;
    }

    function reschedule(ms) {
      if (stopped) return;
      clearTimeout(timerId);
      timerId = setTimeout(executeAndReschedule, ms || interval);
    }

    function executeAndReschedule() {
      lastWakeTime = 0;
      lastCallTime = clock();

      fn(err => {
        if (err) throw err;
        reschedule(interval);
      });
    }

    if (immediate) {
      executeAndReschedule();
    } else {
      lastCallTime = clock();
      reschedule();
    }

    return { wake, stop };
  }

  function hasAtomicOperators$1(doc) {
    if (Array.isArray(doc)) {
      return doc.reduce((err, u) => err || hasAtomicOperators$1(u), null);
    }

    return (
      Object.keys(typeof doc.toBSON !== 'function' ? doc : doc.toBSON())
        .map(k => k[0])
        .indexOf('$') >= 0
    );
  }

  /**
   * When the driver used emitWarning the code will be equal to this.
   * @public
   *
   * @example
   * ```js
   * process.on('warning', (warning) => {
   *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')
   * })
   * ```
   */
  const MONGODB_WARNING_CODE = 'MONGODB DRIVER';

  /**
   * @internal
   * @param {string} message - message to warn about
   */
  function emitWarning$3(message) {
    if (browser$1.emitWarning) {
      return nodejsMajorVersion <= 6
        ? browser$1.emitWarning(message, undefined, MONGODB_WARNING_CODE)
        : browser$1.emitWarning(message, { code: MONGODB_WARNING_CODE });
    } else {
      // Approximate the style of print out on node versions pre 8.x
      // eslint-disable-next-line no-console
      return console.error(`[${MONGODB_WARNING_CODE}] Warning:`, message);
    }
  }

  const emittedWarnings = new Set();
  /**
   * Will emit a warning once for the duration of the application.
   * Uses the message to identify if it has already been emitted
   * so using string interpolation can cause multiple emits
   * @internal
   * @param {string} message - message to warn about
   */
  function emitWarningOnce$5(message) {
    if (!emittedWarnings.has(message)) {
      emittedWarnings.add(message);
      return emitWarning$3(message);
    }
  }

  module.exports = {
    filterOptions: filterOptions$4,
    mergeOptions: mergeOptions$5,
    translateOptions: translateOptions$5,
    shallowClone: shallowClone$2,
    getSingleProperty: getSingleProperty$1,
    checkCollectionName: checkCollectionName$2,
    toError: toError$7,
    formattedOrderClause: formattedOrderClause$3,
    parseIndexOptions: parseIndexOptions$2,
    normalizeHintField: normalizeHintField$1,
    handleCallback: handleCallback$f,
    decorateCommand: decorateCommand$1,
    isObject: isObject$1,
    debugOptions: debugOptions$4,
    MAX_JS_INT: Number.MAX_SAFE_INTEGER + 1,
    conditionallyMergeWriteConcern: conditionallyMergeWriteConcern$1,
    executeLegacyOperation: executeLegacyOperation$5,
    applyRetryableWrites: applyRetryableWrites$2,
    applyWriteConcern: applyWriteConcern$8,
    isPromiseLike: isPromiseLike$2,
    decorateWithCollation: decorateWithCollation$3,
    decorateWithReadConcern: decorateWithReadConcern$3,
    decorateWithExplain: decorateWithExplain$3,
    deprecateOptions: deprecateOptions$2,
    SUPPORTS: SUPPORTS$1,
    MongoDBNamespace: MongoDBNamespace$8,
    emitDeprecationWarning: emitDeprecationWarning$2,
    makeCounter,
    maybePromise: maybePromise$5,
    now: now$4,
    calculateDurationInMs: calculateDurationInMs$3,
    makeInterruptableAsyncInterval,
    hasAtomicOperators: hasAtomicOperators$1,
    MONGODB_WARNING_CODE,
    emitWarning: emitWarning$3,
    emitWarningOnce: emitWarningOnce$5
  };

  var utils$1 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(utils$1);

  const emitWarningOnce$4 = require$$1$1.emitWarningOnce;

  /**
   * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is
   * used to construct connections.
   * @class
   * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)
   * @param {array} tags The tags object
   * @param {object} [options] Additional read preference options
   * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.
   * @param {object} [options.hedge] Server mode in which the same query is dispatched in parallel to multiple replica set members.
   * @param {boolean} [options.hedge.enabled] Explicitly enable or disable hedged reads.
   * @see https://docs.mongodb.com/manual/core/read-preference/
   * @return {ReadPreference}
   */
  const ReadPreference$h = function(mode, tags, options) {
    if (!ReadPreference$h.isValid(mode)) {
      throw new TypeError(`Invalid read preference mode ${mode}`);
    }

    // TODO(major): tags MUST be an array of tagsets
    if (tags && !Array.isArray(tags)) {
      emitWarningOnce$4(
        'ReadPreference tags must be an array, this will change in the next major version'
      );

      const tagsHasMaxStalenessSeconds = typeof tags.maxStalenessSeconds !== 'undefined';
      const tagsHasHedge = typeof tags.hedge !== 'undefined';
      const tagsHasOptions = tagsHasMaxStalenessSeconds || tagsHasHedge;
      if (tagsHasOptions) {
        // this is likely an options object
        options = tags;
        tags = undefined;
      } else {
        tags = [tags];
      }
    }

    this.mode = mode;
    this.tags = tags;
    this.hedge = options && options.hedge;

    options = options || {};
    if (options.maxStalenessSeconds != null) {
      if (options.maxStalenessSeconds <= 0) {
        throw new TypeError('maxStalenessSeconds must be a positive integer');
      }

      this.maxStalenessSeconds = options.maxStalenessSeconds;

      // NOTE: The minimum required wire version is 5 for this read preference. If the existing
      //       topology has a lower value then a MongoError will be thrown during server selection.
      this.minWireVersion = 5;
    }

    if (this.mode === ReadPreference$h.PRIMARY) {
      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {
        throw new TypeError('Primary read preference cannot be combined with tags');
      }

      if (this.maxStalenessSeconds) {
        throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');
      }

      if (this.hedge) {
        throw new TypeError('Primary read preference cannot be combined with hedge');
      }
    }
  };

  // Support the deprecated `preference` property introduced in the porcelain layer
  Object.defineProperty(ReadPreference$h.prototype, 'preference', {
    enumerable: true,
    get: function() {
      return this.mode;
    }
  });

  /*
   * Read preference mode constants
   */
  ReadPreference$h.PRIMARY = 'primary';
  ReadPreference$h.PRIMARY_PREFERRED = 'primaryPreferred';
  ReadPreference$h.SECONDARY = 'secondary';
  ReadPreference$h.SECONDARY_PREFERRED = 'secondaryPreferred';
  ReadPreference$h.NEAREST = 'nearest';

  const VALID_MODES = [
    ReadPreference$h.PRIMARY,
    ReadPreference$h.PRIMARY_PREFERRED,
    ReadPreference$h.SECONDARY,
    ReadPreference$h.SECONDARY_PREFERRED,
    ReadPreference$h.NEAREST,
    null
  ];

  /**
   * Construct a ReadPreference given an options object.
   *
   * @param {object} options The options object from which to extract the read preference.
   * @return {ReadPreference}
   */
  ReadPreference$h.fromOptions = function(options) {
    if (!options) return null;
    const readPreference = options.readPreference;
    if (!readPreference) return null;
    const readPreferenceTags = options.readPreferenceTags;
    const maxStalenessSeconds = options.maxStalenessSeconds;
    if (typeof readPreference === 'string') {
      return new ReadPreference$h(readPreference, readPreferenceTags);
    } else if (!(readPreference instanceof ReadPreference$h) && typeof readPreference === 'object') {
      const mode = readPreference.mode || readPreference.preference;
      if (mode && typeof mode === 'string') {
        return new ReadPreference$h(mode, readPreference.tags, {
          maxStalenessSeconds: readPreference.maxStalenessSeconds || maxStalenessSeconds,
          hedge: readPreference.hedge
        });
      }
    }

    return readPreference;
  };

  /**
   * Resolves a read preference based on well-defined inheritance rules. This method will not only
   * determine the read preference (if there is one), but will also ensure the returned value is a
   * properly constructed instance of `ReadPreference`.
   *
   * @param {Collection|Db|MongoClient} parent The parent of the operation on which to determine the read
   * preference, used for determining the inherited read preference.
   * @param {object} options The options passed into the method, potentially containing a read preference
   * @returns {(ReadPreference|null)} The resolved read preference
   */
  ReadPreference$h.resolve = function(parent, options) {
    options = options || {};
    const session = options.session;

    const inheritedReadPreference = parent && parent.readPreference;

    let readPreference;
    if (options.readPreference) {
      readPreference = ReadPreference$h.fromOptions(options);
    } else if (session && session.inTransaction() && session.transaction.options.readPreference) {
      // The transaction’s read preference MUST override all other user configurable read preferences.
      readPreference = session.transaction.options.readPreference;
    } else if (inheritedReadPreference != null) {
      readPreference = inheritedReadPreference;
    } else {
      readPreference = ReadPreference$h.primary;
    }

    return typeof readPreference === 'string' ? new ReadPreference$h(readPreference) : readPreference;
  };

  /**
   * Replaces options.readPreference with a ReadPreference instance
   */
  ReadPreference$h.translate = function(options) {
    if (options.readPreference == null) return options;
    const r = options.readPreference;

    if (typeof r === 'string') {
      options.readPreference = new ReadPreference$h(r);
    } else if (r && !(r instanceof ReadPreference$h) && typeof r === 'object') {
      const mode = r.mode || r.preference;
      if (mode && typeof mode === 'string') {
        options.readPreference = new ReadPreference$h(mode, r.tags, {
          maxStalenessSeconds: r.maxStalenessSeconds
        });
      }
    } else if (!(r instanceof ReadPreference$h)) {
      throw new TypeError('Invalid read preference: ' + r);
    }

    return options;
  };

  /**
   * Validate if a mode is legal
   *
   * @method
   * @param {string} mode The string representing the read preference mode.
   * @return {boolean} True if a mode is valid
   */
  ReadPreference$h.isValid = function(mode) {
    return VALID_MODES.indexOf(mode) !== -1;
  };

  /**
   * Validate if a mode is legal
   *
   * @method
   * @param {string} mode The string representing the read preference mode.
   * @return {boolean} True if a mode is valid
   */
  ReadPreference$h.prototype.isValid = function(mode) {
    return ReadPreference$h.isValid(typeof mode === 'string' ? mode : this.mode);
  };

  const needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];

  /**
   * Indicates that this readPreference needs the "slaveOk" bit when sent over the wire
   * @method
   * @return {boolean}
   * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query
   */
  ReadPreference$h.prototype.slaveOk = function() {
    return needSlaveOk.indexOf(this.mode) !== -1;
  };

  /**
   * Are the two read preference equal
   * @method
   * @param {ReadPreference} readPreference The read preference with which to check equality
   * @return {boolean} True if the two ReadPreferences are equivalent
   */
  ReadPreference$h.prototype.equals = function(readPreference) {
    return readPreference.mode === this.mode;
  };

  /**
   * Return JSON representation
   * @method
   * @return {Object} A JSON representation of the ReadPreference
   */
  ReadPreference$h.prototype.toJSON = function() {
    const readPreference = { mode: this.mode };
    if (Array.isArray(this.tags)) readPreference.tags = this.tags;
    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;
    if (this.hedge) readPreference.hedge = this.hedge;
    return readPreference;
  };

  /**
   * Primary read preference
   * @member
   * @type {ReadPreference}
   */
  ReadPreference$h.primary = new ReadPreference$h('primary');
  /**
   * Primary Preferred read preference
   * @member
   * @type {ReadPreference}
   */
  ReadPreference$h.primaryPreferred = new ReadPreference$h('primaryPreferred');
  /**
   * Secondary read preference
   * @member
   * @type {ReadPreference}
   */
  ReadPreference$h.secondary = new ReadPreference$h('secondary');
  /**
   * Secondary Preferred read preference
   * @member
   * @type {ReadPreference}
   */
  ReadPreference$h.secondaryPreferred = new ReadPreference$h('secondaryPreferred');
  /**
   * Nearest read preference
   * @member
   * @type {ReadPreference}
   */
  ReadPreference$h.nearest = new ReadPreference$h('nearest');

  var read_preference = ReadPreference$h;

  // shared state names
  const STATE_CLOSING$1 = 'closing';
  const STATE_CLOSED$1 = 'closed';
  const STATE_CONNECTING$1 = 'connecting';
  const STATE_CONNECTED$1 = 'connected';

  // An enumeration of topology types we know about
  const TopologyType$3 = {
    Single: 'Single',
    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',
    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',
    Sharded: 'Sharded',
    Unknown: 'Unknown'
  };

  // An enumeration of server types we know about
  const ServerType$3 = {
    Standalone: 'Standalone',
    Mongos: 'Mongos',
    PossiblePrimary: 'PossiblePrimary',
    RSPrimary: 'RSPrimary',
    RSSecondary: 'RSSecondary',
    RSArbiter: 'RSArbiter',
    RSOther: 'RSOther',
    RSGhost: 'RSGhost',
    Unknown: 'Unknown'
  };

  // helper to get a server's type that works for both legacy and unified topologies
  function serverType(server) {
    let description = server.s.description || server.s.serverDescription;
    if (description.topologyType === TopologyType$3.Single) return description.servers[0].type;
    return description.type;
  }

  const TOPOLOGY_DEFAULTS = {
    useUnifiedTopology: true,
    localThresholdMS: 15,
    serverSelectionTimeoutMS: 30000,
    heartbeatFrequencyMS: 10000,
    minHeartbeatFrequencyMS: 500
  };

  function drainTimerQueue$1(queue) {
    queue.forEach(clearTimeout);
    queue.clear();
  }

  function clearAndRemoveTimerFrom$1(timer, timers) {
    clearTimeout(timer);
    return timers.delete(timer);
  }

  var common$2 = {
    STATE_CLOSING: STATE_CLOSING$1,
    STATE_CLOSED: STATE_CLOSED$1,
    STATE_CONNECTING: STATE_CONNECTING$1,
    STATE_CONNECTED: STATE_CONNECTED$1,
    TOPOLOGY_DEFAULTS,
    TopologyType: TopologyType$3,
    ServerType: ServerType$3,
    serverType,
    drainTimerQueue: drainTimerQueue$1,
    clearAndRemoveTimerFrom: clearAndRemoveTimerFrom$1
  };

  const ServerType$2 = require('./common').ServerType;
  const ServerDescription$1 = require('./server_description').ServerDescription;
  const WIRE_CONSTANTS = require('../wireprotocol/constants');
  const TopologyType$2 = require('./common').TopologyType;

  // contstants related to compatability checks
  const MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;
  const MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;
  const MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;
  const MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;

  // Representation of a deployment of servers
  class TopologyDescription$2 {
    /**
     * Create a TopologyDescription
     *
     * @param {string} topologyType
     * @param {Map<string, ServerDescription>} serverDescriptions the a map of address to ServerDescription
     * @param {string} setName
     * @param {number} maxSetVersion
     * @param {ObjectId} maxElectionId
     */
    constructor(
      topologyType,
      serverDescriptions,
      setName,
      maxSetVersion,
      maxElectionId,
      commonWireVersion,
      options
    ) {
      options = options || {};

      // TODO: consider assigning all these values to a temporary value `s` which
      //       we use `Object.freeze` on, ensuring the internal state of this type
      //       is immutable.
      this.type = topologyType || TopologyType$2.Unknown;
      this.setName = setName || null;
      this.maxSetVersion = maxSetVersion || null;
      this.maxElectionId = maxElectionId || null;
      this.servers = serverDescriptions || new Map();
      this.stale = false;
      this.compatible = true;
      this.compatibilityError = null;
      this.logicalSessionTimeoutMinutes = null;
      this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 0;
      this.localThresholdMS = options.localThresholdMS || 0;
      this.commonWireVersion = commonWireVersion || null;

      // save this locally, but don't display when printing the instance out
      Object.defineProperty(this, 'options', { value: options, enumberable: false });

      // determine server compatibility
      for (const serverDescription of this.servers.values()) {
        if (serverDescription.type === ServerType$2.Unknown) continue;

        if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {
          this.compatible = false;
          this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;
        }

        if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {
          this.compatible = false;
          this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;
          break;
        }
      }

      // Whenever a client updates the TopologyDescription from an ismaster response, it MUST set
      // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes
      // value among ServerDescriptions of all data-bearing server types. If any have a null
      // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be
      // set to null.
      this.logicalSessionTimeoutMinutes = null;
      for (const addressServerTuple of this.servers) {
        const server = addressServerTuple[1];
        if (server.isReadable) {
          if (server.logicalSessionTimeoutMinutes == null) {
            // If any of the servers have a null logicalSessionsTimeout, then the whole topology does
            this.logicalSessionTimeoutMinutes = null;
            break;
          }

          if (this.logicalSessionTimeoutMinutes == null) {
            // First server with a non null logicalSessionsTimeout
            this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;
            continue;
          }

          // Always select the smaller of the:
          // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout
          this.logicalSessionTimeoutMinutes = Math.min(
            this.logicalSessionTimeoutMinutes,
            server.logicalSessionTimeoutMinutes
          );
        }
      }
    }

    /**
     * Returns a new TopologyDescription based on the SrvPollingEvent
     * @param {SrvPollingEvent} ev The event
     */
    updateFromSrvPollingEvent(ev) {
      const newAddresses = ev.addresses();
      const serverDescriptions = new Map(this.servers);
      for (const server of this.servers) {
        if (newAddresses.has(server[0])) {
          newAddresses.delete(server[0]);
        } else {
          serverDescriptions.delete(server[0]);
        }
      }

      if (serverDescriptions.size === this.servers.size && newAddresses.size === 0) {
        return this;
      }

      for (const address of newAddresses) {
        serverDescriptions.set(address, new ServerDescription$1(address));
      }

      return new TopologyDescription$2(
        this.type,
        serverDescriptions,
        this.setName,
        this.maxSetVersion,
        this.maxElectionId,
        this.commonWireVersion,
        this.options,
        null
      );
    }

    /**
     * Returns a copy of this description updated with a given ServerDescription
     *
     * @param {ServerDescription} serverDescription
     */
    update(serverDescription) {
      const address = serverDescription.address;
      // NOTE: there are a number of prime targets for refactoring here
      //       once we support destructuring assignments

      // potentially mutated values
      let topologyType = this.type;
      let setName = this.setName;
      let maxSetVersion = this.maxSetVersion;
      let maxElectionId = this.maxElectionId;
      let commonWireVersion = this.commonWireVersion;

      if (serverDescription.setName && setName && serverDescription.setName !== setName) {
        serverDescription = new ServerDescription$1(address, null);
      }

      const serverType = serverDescription.type;
      let serverDescriptions = new Map(this.servers);

      // update common wire version
      if (serverDescription.maxWireVersion !== 0) {
        if (commonWireVersion == null) {
          commonWireVersion = serverDescription.maxWireVersion;
        } else {
          commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);
        }
      }

      // update the actual server description
      serverDescriptions.set(address, serverDescription);

      if (topologyType === TopologyType$2.Single) {
        // once we are defined as single, that never changes
        return new TopologyDescription$2(
          TopologyType$2.Single,
          serverDescriptions,
          setName,
          maxSetVersion,
          maxElectionId,
          commonWireVersion,
          this.options
        );
      }

      if (topologyType === TopologyType$2.Unknown) {
        if (serverType === ServerType$2.Standalone && this.servers.size !== 1) {
          serverDescriptions.delete(address);
        } else {
          topologyType = topologyTypeForServerType(serverType);
        }
      }

      if (topologyType === TopologyType$2.Sharded) {
        if ([ServerType$2.Mongos, ServerType$2.Unknown].indexOf(serverType) === -1) {
          serverDescriptions.delete(address);
        }
      }

      if (topologyType === TopologyType$2.ReplicaSetNoPrimary) {
        if ([ServerType$2.Standalone, ServerType$2.Mongos].indexOf(serverType) >= 0) {
          serverDescriptions.delete(address);
        }

        if (serverType === ServerType$2.RSPrimary) {
          const result = updateRsFromPrimary(
            serverDescriptions,
            setName,
            serverDescription,
            maxSetVersion,
            maxElectionId
          );

          (topologyType = result[0]),
            (setName = result[1]),
            (maxSetVersion = result[2]),
            (maxElectionId = result[3]);
        } else if (
          [ServerType$2.RSSecondary, ServerType$2.RSArbiter, ServerType$2.RSOther].indexOf(serverType) >= 0
        ) {
          const result = updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription);
          (topologyType = result[0]), (setName = result[1]);
        }
      }

      if (topologyType === TopologyType$2.ReplicaSetWithPrimary) {
        if ([ServerType$2.Standalone, ServerType$2.Mongos].indexOf(serverType) >= 0) {
          serverDescriptions.delete(address);
          topologyType = checkHasPrimary(serverDescriptions);
        } else if (serverType === ServerType$2.RSPrimary) {
          const result = updateRsFromPrimary(
            serverDescriptions,
            setName,
            serverDescription,
            maxSetVersion,
            maxElectionId
          );

          (topologyType = result[0]),
            (setName = result[1]),
            (maxSetVersion = result[2]),
            (maxElectionId = result[3]);
        } else if (
          [ServerType$2.RSSecondary, ServerType$2.RSArbiter, ServerType$2.RSOther].indexOf(serverType) >= 0
        ) {
          topologyType = updateRsWithPrimaryFromMember(
            serverDescriptions,
            setName,
            serverDescription
          );
        } else {
          topologyType = checkHasPrimary(serverDescriptions);
        }
      }

      return new TopologyDescription$2(
        topologyType,
        serverDescriptions,
        setName,
        maxSetVersion,
        maxElectionId,
        commonWireVersion,
        this.options
      );
    }

    get error() {
      const descriptionsWithError = Array.from(this.servers.values()).filter(sd => sd.error);
      if (descriptionsWithError.length > 0) {
        return descriptionsWithError[0].error;
      }
      return undefined;
    }

    /**
     * Determines if the topology description has any known servers
     */
    get hasKnownServers() {
      return Array.from(this.servers.values()).some(sd => sd.type !== ServerType$2.Unknown);
    }

    /**
     * Determines if this topology description has a data-bearing server available.
     */
    get hasDataBearingServers() {
      return Array.from(this.servers.values()).some(sd => sd.isDataBearing);
    }

    /**
     * Determines if the topology has a definition for the provided address
     *
     * @param {String} address
     * @return {Boolean} Whether the topology knows about this server
     */
    hasServer(address) {
      return this.servers.has(address);
    }
  }

  function topologyTypeForServerType(serverType) {
    if (serverType === ServerType$2.Standalone) {
      return TopologyType$2.Single;
    }

    if (serverType === ServerType$2.Mongos) {
      return TopologyType$2.Sharded;
    }

    if (serverType === ServerType$2.RSPrimary) {
      return TopologyType$2.ReplicaSetWithPrimary;
    }

    if (serverType === ServerType$2.RSGhost || serverType === ServerType$2.Unknown) {
      return TopologyType$2.Unknown;
    }

    return TopologyType$2.ReplicaSetNoPrimary;
  }

  function compareObjectId(oid1, oid2) {
    if (oid1 == null) {
      return -1;
    }

    if (oid2 == null) {
      return 1;
    }

    if (oid1.id instanceof Buffer$9 && oid2.id instanceof Buffer$9) {
      const oid1Buffer = oid1.id;
      const oid2Buffer = oid2.id;
      return oid1Buffer.compare(oid2Buffer);
    }

    const oid1String = oid1.toString();
    const oid2String = oid2.toString();
    return oid1String.localeCompare(oid2String);
  }

  function updateRsFromPrimary(
    serverDescriptions,
    setName,
    serverDescription,
    maxSetVersion,
    maxElectionId
  ) {
    setName = setName || serverDescription.setName;
    if (setName !== serverDescription.setName) {
      serverDescriptions.delete(serverDescription.address);
      return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];
    }

    const electionId = serverDescription.electionId ? serverDescription.electionId : null;
    if (serverDescription.setVersion && electionId) {
      if (maxSetVersion && maxElectionId) {
        if (
          maxSetVersion > serverDescription.setVersion ||
          compareObjectId(maxElectionId, electionId) > 0
        ) {
          // this primary is stale, we must remove it
          serverDescriptions.set(
            serverDescription.address,
            new ServerDescription$1(serverDescription.address)
          );

          return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];
        }
      }

      maxElectionId = serverDescription.electionId;
    }

    if (
      serverDescription.setVersion != null &&
      (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)
    ) {
      maxSetVersion = serverDescription.setVersion;
    }

    // We've heard from the primary. Is it the same primary as before?
    for (const address of serverDescriptions.keys()) {
      const server = serverDescriptions.get(address);

      if (server.type === ServerType$2.RSPrimary && server.address !== serverDescription.address) {
        // Reset old primary's type to Unknown.
        serverDescriptions.set(address, new ServerDescription$1(server.address));

        // There can only be one primary
        break;
      }
    }

    // Discover new hosts from this primary's response.
    serverDescription.allHosts.forEach(address => {
      if (!serverDescriptions.has(address)) {
        serverDescriptions.set(address, new ServerDescription$1(address));
      }
    });

    // Remove hosts not in the response.
    const currentAddresses = Array.from(serverDescriptions.keys());
    const responseAddresses = serverDescription.allHosts;
    currentAddresses
      .filter(addr => responseAddresses.indexOf(addr) === -1)
      .forEach(address => {
        serverDescriptions.delete(address);
      });

    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];
  }

  function updateRsWithPrimaryFromMember(serverDescriptions, setName, serverDescription) {
    if (setName == null) {
      throw new TypeError('setName is required');
    }

    if (
      setName !== serverDescription.setName ||
      (serverDescription.me && serverDescription.address !== serverDescription.me)
    ) {
      serverDescriptions.delete(serverDescription.address);
    }

    return checkHasPrimary(serverDescriptions);
  }

  function updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription) {
    let topologyType = TopologyType$2.ReplicaSetNoPrimary;

    setName = setName || serverDescription.setName;
    if (setName !== serverDescription.setName) {
      serverDescriptions.delete(serverDescription.address);
      return [topologyType, setName];
    }

    serverDescription.allHosts.forEach(address => {
      if (!serverDescriptions.has(address)) {
        serverDescriptions.set(address, new ServerDescription$1(address));
      }
    });

    if (serverDescription.me && serverDescription.address !== serverDescription.me) {
      serverDescriptions.delete(serverDescription.address);
    }

    return [topologyType, setName];
  }

  function checkHasPrimary(serverDescriptions) {
    for (const addr of serverDescriptions.keys()) {
      if (serverDescriptions.get(addr).type === ServerType$2.RSPrimary) {
        return TopologyType$2.ReplicaSetWithPrimary;
      }
    }

    return TopologyType$2.ReplicaSetNoPrimary;
  }

  module.exports = {
    TopologyDescription: TopologyDescription$2
  };

  var topology_description = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(topology_description);

  const MongoError$L = error$2.MongoError;
  const ServerType$1 = common$2.ServerType;
  const TopologyDescription$1 = require$$2$1.TopologyDescription;

  const MESSAGE_HEADER_SIZE$2 = 16;
  const COMPRESSION_DETAILS_SIZE$1 = 9; // originalOpcode + uncompressedSize, compressorID

  // OPCODE Numbers
  // Defined at https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#request-opcodes
  var opcodes$3 = {
    OP_REPLY: 1,
    OP_UPDATE: 2001,
    OP_INSERT: 2002,
    OP_QUERY: 2004,
    OP_GETMORE: 2005,
    OP_DELETE: 2006,
    OP_KILL_CURSORS: 2007,
    OP_COMPRESSED: 2012,
    OP_MSG: 2013
  };

  var getReadPreference$2 = function(cmd, options) {
    // Default to command version of the readPreference
    var readPreference = cmd.readPreference || new read_preference('primary');
    // If we have an option readPreference override the command one
    if (options.readPreference) {
      readPreference = options.readPreference;
    }

    if (typeof readPreference === 'string') {
      readPreference = new read_preference(readPreference);
    }

    if (!(readPreference instanceof read_preference)) {
      throw new MongoError$L('read preference must be a ReadPreference instance');
    }

    return readPreference;
  };

  // Parses the header of a wire protocol message
  var parseHeader$1 = function(message) {
    return {
      length: message.readInt32LE(0),
      requestId: message.readInt32LE(4),
      responseTo: message.readInt32LE(8),
      opCode: message.readInt32LE(12)
    };
  };

  function applyCommonQueryOptions$2(queryOptions, options) {
    Object.assign(queryOptions, {
      raw: typeof options.raw === 'boolean' ? options.raw : false,
      promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,
      promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,
      promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,
      monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : false,
      fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false
    });

    if (typeof options.socketTimeout === 'number') {
      queryOptions.socketTimeout = options.socketTimeout;
    }

    if (options.session) {
      queryOptions.session = options.session;
    }

    if (typeof options.documentsReturnedIn === 'string') {
      queryOptions.documentsReturnedIn = options.documentsReturnedIn;
    }

    return queryOptions;
  }

  function isSharded$3(topologyOrServer) {
    if (topologyOrServer.type === 'mongos') return true;
    if (topologyOrServer.description && topologyOrServer.description.type === ServerType$1.Mongos) {
      return true;
    }

    // NOTE: This is incredibly inefficient, and should be removed once command construction
    //       happens based on `Server` not `Topology`.
    if (topologyOrServer.description && topologyOrServer.description instanceof TopologyDescription$1) {
      const servers = Array.from(topologyOrServer.description.servers.values());
      return servers.some(server => server.type === ServerType$1.Mongos);
    }

    return false;
  }

  function databaseNamespace$2(ns) {
    return ns.split('.')[0];
  }
  function collectionNamespace$4(ns) {
    return ns
      .split('.')
      .slice(1)
      .join('.');
  }

  var shared$1 = {
    getReadPreference: getReadPreference$2,
    MESSAGE_HEADER_SIZE: MESSAGE_HEADER_SIZE$2,
    COMPRESSION_DETAILS_SIZE: COMPRESSION_DETAILS_SIZE$1,
    opcodes: opcodes$3,
    parseHeader: parseHeader$1,
    applyCommonQueryOptions: applyCommonQueryOptions$2,
    isSharded: isSharded$3,
    databaseNamespace: databaseNamespace$2,
    collectionNamespace: collectionNamespace$4
  };

  var inherits$7;
  if (typeof Object.create === 'function'){
    inherits$7 = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits$7 = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  var inherits$8 = inherits$7;

  var formatRegExp = /%[sdj%]/g;
  function format$1(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate$7(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global$1.process)) {
      return function() {
        return deprecate$7(fn, msg).apply(this, arguments);
      };
    }

    if (browser$1.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (browser$1.throwDeprecation) {
          throw new Error(msg);
        } else if (browser$1.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = browser$1.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format$1.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }

  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray$1(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty$1(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty$1(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray$1(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }

  function isBuffer(maybeBuf) {
    return Buffer$9.isBuffer(maybeBuf);
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  function log() {
    console.log('%s - %s', timestamp(), format$1.apply(null, arguments));
  }

  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  function hasOwnProperty$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var util$3 = {
    inherits: inherits$8,
    _extend: _extend,
    log: log,
    isBuffer: isBuffer,
    isPrimitive: isPrimitive,
    isFunction: isFunction,
    isError: isError,
    isDate: isDate,
    isObject: isObject,
    isRegExp: isRegExp,
    isUndefined: isUndefined,
    isSymbol: isSymbol,
    isString: isString,
    isNumber: isNumber,
    isNullOrUndefined: isNullOrUndefined,
    isNull: isNull,
    isBoolean: isBoolean,
    isArray: isArray$1,
    inspect: inspect,
    deprecate: deprecate$7,
    format: format$1,
    debuglog: debuglog
  };

  var util$4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    format: format$1,
    deprecate: deprecate$7,
    debuglog: debuglog,
    inspect: inspect,
    isArray: isArray$1,
    isBoolean: isBoolean,
    isNull: isNull,
    isNullOrUndefined: isNullOrUndefined,
    isNumber: isNumber,
    isString: isString,
    isSymbol: isSymbol,
    isUndefined: isUndefined,
    isRegExp: isRegExp,
    isObject: isObject,
    isDate: isDate,
    isError: isError,
    isFunction: isFunction,
    isPrimitive: isPrimitive,
    isBuffer: isBuffer,
    log: log,
    inherits: inherits$8,
    _extend: _extend,
    'default': util$3
  });

  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function (v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function (v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function () {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function () {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function (s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function (n) {
    if (this.length === 0) return Buffer$9.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer$9.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      p.data.copy(ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  // Copyright Joyent, Inc. and other Node contributors.
  var isBufferEncoding = Buffer$9.isEncoding
    || function(encoding) {
         switch (encoding && encoding.toLowerCase()) {
           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
           default: return false;
         }
       };


  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.
  function StringDecoder(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);
    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;
      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }

    // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
    this.charBuffer = new Buffer$9(6);
    // Number of bytes received for the current incomplete multi-byte character.
    this.charReceived = 0;
    // Number of bytes expected for the current incomplete multi-byte character.
    this.charLength = 0;
  }

  // write decodes the given buffer and returns it as JS string that is
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .
  StringDecoder.prototype.write = function(buffer) {
    var charStr = '';
    // if our last write ended with an incomplete multibyte character
    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = (buffer.length >= this.charLength - this.charReceived) ?
          this.charLength - this.charReceived :
          buffer.length;

      // add the new bytes to the char buffer
      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;

      if (this.charReceived < this.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      }

      // remove bytes belonging to the current character from the buffer
      buffer = buffer.slice(available, buffer.length);

      // get the character that was split
      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      var charCode = charStr.charCodeAt(charStr.length - 1);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }
      this.charReceived = this.charLength = 0;

      // if there are no more bytes in this buffer, just emit our char
      if (buffer.length === 0) {
        return charStr;
      }
      break;
    }

    // determine and set charLength / charReceived
    this.detectIncompleteChar(buffer);

    var end = buffer.length;
    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);

    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end);
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    }

    // or just emit the charStr
    return charStr;
  };

  // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.
  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = (buffer.length >= 3) ? 3 : buffer.length;

    // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.
    for (; i > 0; i--) {
      var c = buffer[buffer.length - i];

      // See http://en.wikipedia.org/wiki/UTF-8#Description

      // 110XXXXX
      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      }

      // 1110XXXX
      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      }

      // 11110XXX
      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }
    this.charReceived = i;
  };

  StringDecoder.prototype.end = function(buffer) {
    var res = '';
    if (buffer && buffer.length)
      res = this.write(buffer);

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }

  Readable$1.ReadableState = ReadableState;

  var debug = debuglog('stream');
  inherits$8(Readable$1, EventEmitter$9);

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') {
      return emitter.prependListener(event, fn);
    } else {
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
  }
  function listenerCount (emitter, type) {
    return emitter.listeners(type).length;
  }
  function ReadableState(options, stream) {

    options = options || {};

    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex$1) this.objectMode = this.objectMode || !!options.readableObjectMode;

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable$1(options) {

    if (!(this instanceof Readable$1)) return new Readable$1(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    if (options && typeof options.read === 'function') this._read = options.read;

    EventEmitter$9.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable$1.prototype.push = function (chunk, encoding) {
    var state = this._readableState;

    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer$9.from(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable$1.prototype.unshift = function (chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  Readable$1.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error('stream.unshift() after end event');
        stream.emit('error', _e);
      } else {
        var skipAdd;
        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }

        if (!addToFront) state.reading = false;

        // Don't add to the buffer if we've decoded to an empty string chunk and
        // we're not in object mode
        if (!skipAdd) {
          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

            if (state.needReadable) emitReadable(stream);
          }
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }

  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }

  // backwards compatibility.
  Readable$1.prototype.setEncoding = function (enc) {
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 8MB
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }

  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }

  // you can override either this method, or the async _read(n) below.
  Readable$1.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;

    if (n !== 0) state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0) state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true;

      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!Buffer$9.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }

  function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }

  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;else len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable$1.prototype._read = function (n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable$1.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false);

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      cleanedUp = true;

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }

    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
    }

    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);

    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
      if (state.awaitDrain === 0 && src.listeners('data').length) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable$1.prototype.unpipe = function (dest) {
    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;

      if (!dest) dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this);
      }return this;
    }

    // try to find the right one.
    var i = indexOf(state.pipes, dest);
    if (i === -1) return this;

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable$1.prototype.on = function (ev, fn) {
    var res = EventEmitter$9.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          nextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this);
        }
      }
    }

    return res;
  };
  Readable$1.prototype.addListener = Readable$1.prototype.on;

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable$1.prototype.resume = function () {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable$1.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while (state.flowing && stream.read() !== null) {}
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable$1.prototype.wrap = function (stream) {
    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function () {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) self.push(chunk);
      }

      self.push(null);
    });

    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk);

      // don't skip over falsy values in objectMode
      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function (ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function (n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };

  // exposed for testing purposes only.
  Readable$1._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;

    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }

    return ret;
  }

  // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }

  // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBuffer(n, list) {
    var ret = Buffer$9.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      nextTick(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  // A bit simpler than readable streams.
  Writable.WritableState = WritableState;
  inherits$8(Writable, EventEmitter$9);

  function nop() {}

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }

  function WritableState(options, stream) {
    Object.defineProperty(this, 'buffer', {
      get: deprecate$7(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
    options = options || {};

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex$1) this.objectMode = this.objectMode || !!options.writableObjectMode;

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function (er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.bufferedRequest = null;
    this.lastBufferedRequest = null;

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;

    // count buffered requests
    this.bufferedRequestCount = 0;

    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  function Writable(options) {

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex$1)) return new Writable(options);

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;

      if (typeof options.writev === 'function') this._writev = options.writev;
    }

    EventEmitter$9.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    nextTick(cb, er);
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    // Always throw error if a null is written
    // if we are not in object mode then throw
    // if it is not a buffer, string, or undefined.
    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (!Buffer$9.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    if (er) {
      stream.emit('error', er);
      nextTick(cb, er);
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (Buffer$9.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

    if (typeof cb !== 'function') cb = nop;

    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer$9.from(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);

    if (Buffer$9.isBuffer(chunk)) encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite$1(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite$1(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) nextTick(cb, er);else cb(er);

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
          nextTick(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
          afterWrite(stream, state, finished, cb);
        }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }

  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;

      var count = 0;
      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }

      doWrite$1(stream, state, true, state.length, buffer, '', holder.finish);

      // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite$1(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish(stream, state);
      }
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) nextTick(cb);else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
  }

  // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function (err) {
      var entry = _this.entry;
      _this.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }

  inherits$8(Duplex$1, Readable$1);

  var keys = Object.keys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex$1.prototype[method]) Duplex$1.prototype[method] = Writable.prototype[method];
  }
  function Duplex$1(options) {
    if (!(this instanceof Duplex$1)) return new Duplex$1(options);

    Readable$1.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false) this.readable = false;

    if (options && options.writable === false) this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    nextTick(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  // a transform stream is a readable/writable stream where you do
  inherits$8(Transform$1, Duplex$1);

  function TransformState(stream) {
    this.afterTransform = function (er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

    ts.writechunk = null;
    ts.writecb = null;

    if (data !== null && data !== undefined) stream.push(data);

    cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform$1(options) {
    if (!(this instanceof Transform$1)) return new Transform$1(options);

    Duplex$1.call(this, options);

    this._transformState = new TransformState(this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;

      if (typeof options.flush === 'function') this._flush = options.flush;
    }

    this.once('prefinish', function () {
      if (typeof this._flush === 'function') this._flush(function (er) {
        done(stream, er);
      });else done(stream);
    });
  }

  Transform$1.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex$1.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform$1.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('Not implemented');
  };

  Transform$1.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform$1.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  function done(stream, er) {
    if (er) return stream.emit('error', er);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length) throw new Error('Calling transform done when ws.length != 0');

    if (ts.transforming) throw new Error('Calling transform done when still transforming');

    return stream.push(null);
  }

  inherits$8(PassThrough$1, Transform$1);
  function PassThrough$1(options) {
    if (!(this instanceof PassThrough$1)) return new PassThrough$1(options);

    Transform$1.call(this, options);
  }

  PassThrough$1.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  inherits$8(Stream, EventEmitter$9);
  Stream.Readable = Readable$1;
  Stream.Writable = Writable;
  Stream.Duplex = Duplex$1;
  Stream.Transform = Transform$1;
  Stream.PassThrough = PassThrough$1;

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;

  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EventEmitter$9.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EventEmitter$9.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };

  var stream$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Stream,
    Readable: Readable$1,
    Writable: Writable,
    Duplex: Duplex$1,
    Transform: Transform$1,
    PassThrough: PassThrough$1,
    Stream: Stream
  });

  var msg$1 = {
    2:      'need dictionary',     /* Z_NEED_DICT       2  */
    1:      'stream end',          /* Z_STREAM_END      1  */
    0:      '',                    /* Z_OK              0  */
    '-1':   'file error',          /* Z_ERRNO         (-1) */
    '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
    '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
    '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
    '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
    '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
  };

  function ZStream() {
    /* next input byte */
    this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */
    this.avail_in = 0;
    /* total number of input bytes read so far */
    this.total_in = 0;
    /* next output byte should be put there */
    this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */
    this.avail_out = 0;
    /* total number of bytes output so far */
    this.total_out = 0;
    /* last error message, NULL if no error */
    this.msg = ''/*Z_NULL*/;
    /* not visible by applications */
    this.state = null;
    /* best guess about the data type: binary or text */
    this.data_type = 2/*Z_UNKNOWN*/;
    /* adler32 value of the uncompressed data */
    this.adler = 0;
  }

  function arraySet(dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  }


  var Buf8 = Uint8Array;
  var Buf16 = Uint16Array;
  var Buf32 = Int32Array;
  // Enable/Disable typed arrays use, for testing
  //

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  //var Z_FILTERED          = 1;
  //var Z_HUFFMAN_ONLY      = 2;
  //var Z_RLE               = 3;
  var Z_FIXED$2 = 4;
  //var Z_DEFAULT_STRATEGY  = 0;

  /* Possible values of the data_type field (though see inflate()) */
  var Z_BINARY$1 = 0;
  var Z_TEXT$1 = 1;
  //var Z_ASCII             = 1; // = Z_TEXT
  var Z_UNKNOWN$2 = 2;

  /*============================================================================*/


  function zero$1(buf) {
    var len = buf.length;
    while (--len >= 0) {
      buf[len] = 0;
    }
  }

  // From zutil.h

  var STORED_BLOCK = 0;
  var STATIC_TREES = 1;
  var DYN_TREES = 2;
  /* The three kinds of block type */

  var MIN_MATCH$1 = 3;
  var MAX_MATCH$1 = 258;
  /* The minimum and maximum match lengths */

  // From deflate.h
  /* ===========================================================================
   * Internal compression state.
   */

  var LENGTH_CODES$1 = 29;
  /* number of length codes, not counting the special END_BLOCK code */

  var LITERALS$1 = 256;
  /* number of literal bytes 0..255 */

  var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
  /* number of Literal or Length codes, including the END_BLOCK code */

  var D_CODES$1 = 30;
  /* number of distance codes */

  var BL_CODES$1 = 19;
  /* number of codes used to transfer the bit lengths */

  var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
  /* maximum heap size */

  var MAX_BITS$1 = 15;
  /* All codes must not exceed MAX_BITS bits */

  var Buf_size = 16;
  /* size of bit buffer in bi_buf */


  /* ===========================================================================
   * Constants
   */

  var MAX_BL_BITS = 7;
  /* Bit length codes must not exceed MAX_BL_BITS bits */

  var END_BLOCK = 256;
  /* end of block literal code */

  var REP_3_6 = 16;
  /* repeat previous bit length 3-6 times (2 bits of repeat count) */

  var REPZ_3_10 = 17;
  /* repeat a zero length 3-10 times  (3 bits of repeat count) */

  var REPZ_11_138 = 18;
  /* repeat a zero length 11-138 times  (7 bits of repeat count) */

  /* eslint-disable comma-spacing,array-bracket-spacing */
  var extra_lbits = /* extra bits for each length code */ [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

  var extra_dbits = /* extra bits for each distance code */ [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

  var extra_blbits = /* extra bits for each bit length code */ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

  var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
  /* eslint-enable comma-spacing,array-bracket-spacing */

  /* The lengths of the bit length codes are sent in order of decreasing
   * probability, to avoid transmitting the lengths for unused bit length codes.
   */

  /* ===========================================================================
   * Local data. These are initialized only once.
   */

  // We pre-fill arrays with 0 to avoid uninitialized gaps

  var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

  // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
  var static_ltree = new Array((L_CODES$1 + 2) * 2);
  zero$1(static_ltree);
  /* The static literal tree. Since the bit lengths are imposed, there is no
   * need for the L_CODES extra codes used during heap construction. However
   * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
   * below).
   */

  var static_dtree = new Array(D_CODES$1 * 2);
  zero$1(static_dtree);
  /* The static distance tree. (Actually a trivial tree since all codes use
   * 5 bits.)
   */

  var _dist_code = new Array(DIST_CODE_LEN);
  zero$1(_dist_code);
  /* Distance codes. The first 256 values correspond to the distances
   * 3 .. 258, the last 256 values correspond to the top 8 bits of
   * the 15 bit distances.
   */

  var _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
  zero$1(_length_code);
  /* length code for each normalized match length (0 == MIN_MATCH) */

  var base_length = new Array(LENGTH_CODES$1);
  zero$1(base_length);
  /* First normalized length for each code (0 = MIN_MATCH) */

  var base_dist = new Array(D_CODES$1);
  zero$1(base_dist);
  /* First normalized distance for each code (0 = distance of 1) */


  function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

    this.static_tree = static_tree; /* static tree or NULL */
    this.extra_bits = extra_bits; /* extra bits for each code or NULL */
    this.extra_base = extra_base; /* base index for extra_bits */
    this.elems = elems; /* max number of elements in the tree */
    this.max_length = max_length; /* max bit length for the codes */

    // show if `static_tree` has data or dummy - needed for monomorphic objects
    this.has_stree = static_tree && static_tree.length;
  }


  var static_l_desc;
  var static_d_desc;
  var static_bl_desc;


  function TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree; /* the dynamic tree */
    this.max_code = 0; /* largest code with non zero frequency */
    this.stat_desc = stat_desc; /* the corresponding static tree */
  }



  function d_code(dist) {
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  }


  /* ===========================================================================
   * Output a short LSB first on the stream.
   * IN assertion: there is enough room in pendingBuf.
   */
  function put_short(s, w) {
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
    s.pending_buf[s.pending++] = (w) & 0xff;
    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
  }


  /* ===========================================================================
   * Send a value on a given number of bits.
   * IN assertion: length <= 16 and value fits in length bits.
   */
  function send_bits(s, value, length) {
    if (s.bi_valid > (Buf_size - length)) {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      put_short(s, s.bi_buf);
      s.bi_buf = value >> (Buf_size - s.bi_valid);
      s.bi_valid += length - Buf_size;
    } else {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      s.bi_valid += length;
    }
  }


  function send_code(s, c, tree) {
    send_bits(s, tree[c * 2] /*.Code*/ , tree[c * 2 + 1] /*.Len*/ );
  }


  /* ===========================================================================
   * Reverse the first len bits of a code, using straightforward code (a faster
   * method would use a table)
   * IN assertion: 1 <= len <= 15
   */
  function bi_reverse(code, len) {
    var res = 0;
    do {
      res |= code & 1;
      code >>>= 1;
      res <<= 1;
    } while (--len > 0);
    return res >>> 1;
  }


  /* ===========================================================================
   * Flush the bit buffer, keeping at most 7 bits in it.
   */
  function bi_flush(s) {
    if (s.bi_valid === 16) {
      put_short(s, s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;

    } else if (s.bi_valid >= 8) {
      s.pending_buf[s.pending++] = s.bi_buf & 0xff;
      s.bi_buf >>= 8;
      s.bi_valid -= 8;
    }
  }


  /* ===========================================================================
   * Compute the optimal bit lengths for a tree and update the total bit length
   * for the current block.
   * IN assertion: the fields freq and dad are set, heap[heap_max] and
   *    above are the tree nodes sorted by increasing frequency.
   * OUT assertions: the field len is set to the optimal bit length, the
   *     array bl_count contains the frequencies for each bit length.
   *     The length opt_len is updated; static_len is also updated if stree is
   *     not null.
   */
  function gen_bitlen(s, desc) {
  //    deflate_state *s;
  //    tree_desc *desc;    /* the tree descriptor */
    var tree = desc.dyn_tree;
    var max_code = desc.max_code;
    var stree = desc.stat_desc.static_tree;
    var has_stree = desc.stat_desc.has_stree;
    var extra = desc.stat_desc.extra_bits;
    var base = desc.stat_desc.extra_base;
    var max_length = desc.stat_desc.max_length;
    var h; /* heap index */
    var n, m; /* iterate over the tree elements */
    var bits; /* bit length */
    var xbits; /* extra bits */
    var f; /* frequency */
    var overflow = 0; /* number of elements with bit length too large */

    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      s.bl_count[bits] = 0;
    }

    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

    for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
      n = s.heap[h];
      bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
      if (bits > max_length) {
        bits = max_length;
        overflow++;
      }
      tree[n * 2 + 1] /*.Len*/ = bits;
      /* We overwrite tree[n].Dad which is no longer needed */

      if (n > max_code) {
        continue;
      } /* not a leaf node */

      s.bl_count[bits]++;
      xbits = 0;
      if (n >= base) {
        xbits = extra[n - base];
      }
      f = tree[n * 2] /*.Freq*/ ;
      s.opt_len += f * (bits + xbits);
      if (has_stree) {
        s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
      }
    }
    if (overflow === 0) {
      return;
    }

    // Trace((stderr,"\nbit length overflow\n"));
    /* This happens for example on obj2 and pic of the Calgary corpus */

    /* Find the first bit length which could increase: */
    do {
      bits = max_length - 1;
      while (s.bl_count[bits] === 0) {
        bits--;
      }
      s.bl_count[bits]--; /* move one leaf down the tree */
      s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
      s.bl_count[max_length]--;
      /* The brother of the overflow item also moves one step up,
       * but this does not affect bl_count[max_length]
       */
      overflow -= 2;
    } while (overflow > 0);

    /* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */
    for (bits = max_length; bits !== 0; bits--) {
      n = s.bl_count[bits];
      while (n !== 0) {
        m = s.heap[--h];
        if (m > max_code) {
          continue;
        }
        if (tree[m * 2 + 1] /*.Len*/ !== bits) {
          // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
          s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/ ) * tree[m * 2] /*.Freq*/ ;
          tree[m * 2 + 1] /*.Len*/ = bits;
        }
        n--;
      }
    }
  }


  /* ===========================================================================
   * Generate the codes for a given tree and bit counts (which need not be
   * optimal).
   * IN assertion: the array bl_count contains the bit length statistics for
   * the given tree and the field len is set for all tree elements.
   * OUT assertion: the field code is set for all tree elements of non
   *     zero code length.
   */
  function gen_codes(tree, max_code, bl_count) {
  //    ct_data *tree;             /* the tree to decorate */
  //    int max_code;              /* largest code with non zero frequency */
  //    ushf *bl_count;            /* number of codes at each bit length */

    var next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
    var code = 0; /* running code value */
    var bits; /* bit index */
    var n; /* code index */

    /* The distribution counts are first used to generate the code values
     * without bit reversal.
     */
    for (bits = 1; bits <= MAX_BITS$1; bits++) {
      next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
    }
    /* Check that the bit counts in bl_count are consistent. The last code
     * must be all ones.
     */
    //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    //        "inconsistent bit counts");
    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

    for (n = 0; n <= max_code; n++) {
      var len = tree[n * 2 + 1] /*.Len*/ ;
      if (len === 0) {
        continue;
      }
      /* Now reverse the bits */
      tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

      //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
      //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
  }


  /* ===========================================================================
   * Initialize the various 'constant' tables.
   */
  function tr_static_init() {
    var n; /* iterates over tree elements */
    var bits; /* bit counter */
    var length; /* length value */
    var code; /* code value */
    var dist; /* distance index */
    var bl_count = new Array(MAX_BITS$1 + 1);
    /* number of codes at each bit length for an optimal tree */

    // do check in _tr_init()
    //if (static_init_done) return;

    /* For some embedded targets, global variables are not initialized: */
    /*#ifdef NO_INIT_GLOBAL_POINTERS
      static_l_desc.static_tree = static_ltree;
      static_l_desc.extra_bits = extra_lbits;
      static_d_desc.static_tree = static_dtree;
      static_d_desc.extra_bits = extra_dbits;
      static_bl_desc.extra_bits = extra_blbits;
    #endif*/

    /* Initialize the mapping length (0..255) -> length code (0..28) */
    length = 0;
    for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
      base_length[code] = length;
      for (n = 0; n < (1 << extra_lbits[code]); n++) {
        _length_code[length++] = code;
      }
    }
    //Assert (length == 256, "tr_static_init: length != 256");
    /* Note that the length 255 (match length 258) can be represented
     * in two different ways: code 284 + 5 bits or code 285, so we
     * overwrite length_code[255] to use the best encoding:
     */
    _length_code[length - 1] = code;

    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
    dist = 0;
    for (code = 0; code < 16; code++) {
      base_dist[code] = dist;
      for (n = 0; n < (1 << extra_dbits[code]); n++) {
        _dist_code[dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: dist != 256");
    dist >>= 7; /* from now on, all distances are divided by 128 */
    for (; code < D_CODES$1; code++) {
      base_dist[code] = dist << 7;
      for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
        _dist_code[256 + dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: 256+dist != 512");

    /* Construct the codes of the static literal tree */
    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      bl_count[bits] = 0;
    }

    n = 0;
    while (n <= 143) {
      static_ltree[n * 2 + 1] /*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    while (n <= 255) {
      static_ltree[n * 2 + 1] /*.Len*/ = 9;
      n++;
      bl_count[9]++;
    }
    while (n <= 279) {
      static_ltree[n * 2 + 1] /*.Len*/ = 7;
      n++;
      bl_count[7]++;
    }
    while (n <= 287) {
      static_ltree[n * 2 + 1] /*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    /* Codes 286 and 287 do not exist, but we must include them in the
     * tree construction to get a canonical Huffman tree (longest code
     * all ones)
     */
    gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

    /* The static distance tree is trivial: */
    for (n = 0; n < D_CODES$1; n++) {
      static_dtree[n * 2 + 1] /*.Len*/ = 5;
      static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
    }

    // Now data ready and we can init static trees
    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);

    //static_init_done = true;
  }


  /* ===========================================================================
   * Initialize a new block.
   */
  function init_block(s) {
    var n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES$1; n++) {
      s.dyn_ltree[n * 2] /*.Freq*/ = 0;
    }
    for (n = 0; n < D_CODES$1; n++) {
      s.dyn_dtree[n * 2] /*.Freq*/ = 0;
    }
    for (n = 0; n < BL_CODES$1; n++) {
      s.bl_tree[n * 2] /*.Freq*/ = 0;
    }

    s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
    s.opt_len = s.static_len = 0;
    s.last_lit = s.matches = 0;
  }


  /* ===========================================================================
   * Flush the bit buffer and align the output on a byte boundary
   */
  function bi_windup(s) {
    if (s.bi_valid > 8) {
      put_short(s, s.bi_buf);
    } else if (s.bi_valid > 0) {
      //put_byte(s, (Byte)s->bi_buf);
      s.pending_buf[s.pending++] = s.bi_buf;
    }
    s.bi_buf = 0;
    s.bi_valid = 0;
  }

  /* ===========================================================================
   * Copy a stored block, storing first the length and its
   * one's complement if requested.
   */
  function copy_block(s, buf, len, header) {
  //DeflateState *s;
  //charf    *buf;    /* the input data */
  //unsigned len;     /* its length */
  //int      header;  /* true if block header must be written */

    bi_windup(s); /* align on byte boundary */

    if (header) {
      put_short(s, len);
      put_short(s, ~len);
    }
    //  while (len--) {
    //    put_byte(s, *buf++);
    //  }
    arraySet(s.pending_buf, s.window, buf, len, s.pending);
    s.pending += len;
  }

  /* ===========================================================================
   * Compares to subtrees, using the tree depth as tie breaker when
   * the subtrees have equal frequency. This minimizes the worst case length.
   */
  function smaller(tree, n, m, depth) {
    var _n2 = n * 2;
    var _m2 = m * 2;
    return (tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||
      (tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m]));
  }

  /* ===========================================================================
   * Restore the heap property by moving down the tree starting at node k,
   * exchanging a node with the smallest of its two sons if necessary, stopping
   * when the heap property is re-established (each father smaller than its
   * two sons).
   */
  function pqdownheap(s, tree, k)
  //    deflate_state *s;
  //    ct_data *tree;  /* the tree to restore */
  //    int k;               /* node to move down */
  {
    var v = s.heap[k];
    var j = k << 1; /* left son of k */
    while (j <= s.heap_len) {
      /* Set j to the smallest of the two sons: */
      if (j < s.heap_len &&
        smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
        j++;
      }
      /* Exit if v is smaller than both sons */
      if (smaller(tree, v, s.heap[j], s.depth)) {
        break;
      }

      /* Exchange v with the smallest son */
      s.heap[k] = s.heap[j];
      k = j;

      /* And continue down the tree, setting j to the left son of k */
      j <<= 1;
    }
    s.heap[k] = v;
  }


  // inlined manually
  // var SMALLEST = 1;

  /* ===========================================================================
   * Send the block data compressed using the given Huffman trees
   */
  function compress_block(s, ltree, dtree)
  //    deflate_state *s;
  //    const ct_data *ltree; /* literal tree */
  //    const ct_data *dtree; /* distance tree */
  {
    var dist; /* distance of matched string */
    var lc; /* match length or unmatched char (if dist == 0) */
    var lx = 0; /* running index in l_buf */
    var code; /* the code to send */
    var extra; /* number of extra bits to send */

    if (s.last_lit !== 0) {
      do {
        dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
        lc = s.pending_buf[s.l_buf + lx];
        lx++;

        if (dist === 0) {
          send_code(s, lc, ltree); /* send a literal byte */
          //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        } else {
          /* Here, lc is the match length - MIN_MATCH */
          code = _length_code[lc];
          send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
          extra = extra_lbits[code];
          if (extra !== 0) {
            lc -= base_length[code];
            send_bits(s, lc, extra); /* send the extra length bits */
          }
          dist--; /* dist is now the match distance - 1 */
          code = d_code(dist);
          //Assert (code < D_CODES, "bad d_code");

          send_code(s, code, dtree); /* send the distance code */
          extra = extra_dbits[code];
          if (extra !== 0) {
            dist -= base_dist[code];
            send_bits(s, dist, extra); /* send the extra distance bits */
          }
        } /* literal or match pair ? */

        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
        //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
        //       "pendingBuf overflow");

      } while (lx < s.last_lit);
    }

    send_code(s, END_BLOCK, ltree);
  }


  /* ===========================================================================
   * Construct one Huffman tree and assigns the code bit strings and lengths.
   * Update the total bit length for the current block.
   * IN assertion: the field freq is set for all tree elements.
   * OUT assertions: the fields len and code are set to the optimal bit length
   *     and corresponding code. The length opt_len is updated; static_len is
   *     also updated if stree is not null. The field max_code is set.
   */
  function build_tree(s, desc)
  //    deflate_state *s;
  //    tree_desc *desc; /* the tree descriptor */
  {
    var tree = desc.dyn_tree;
    var stree = desc.stat_desc.static_tree;
    var has_stree = desc.stat_desc.has_stree;
    var elems = desc.stat_desc.elems;
    var n, m; /* iterate over heap elements */
    var max_code = -1; /* largest code with non zero frequency */
    var node; /* new node being created */

    /* Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s.heap_len = 0;
    s.heap_max = HEAP_SIZE$1;

    for (n = 0; n < elems; n++) {
      if (tree[n * 2] /*.Freq*/ !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;

      } else {
        tree[n * 2 + 1] /*.Len*/ = 0;
      }
    }

    /* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s.heap_len < 2) {
      node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
      tree[node * 2] /*.Freq*/ = 1;
      s.depth[node] = 0;
      s.opt_len--;

      if (has_stree) {
        s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
      }
      /* node is 0 or 1 so it does not have extra bits */
    }
    desc.max_code = max_code;

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */
    for (n = (s.heap_len >> 1 /*int /2*/ ); n >= 1; n--) {
      pqdownheap(s, tree, n);
    }

    /* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */
    node = elems; /* next internal node of the tree */
    do {
      //pqremove(s, tree, n);  /* n = node of least frequency */
      /*** pqremove ***/
      n = s.heap[1 /*SMALLEST*/ ];
      s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
      pqdownheap(s, tree, 1 /*SMALLEST*/ );
      /***/

      m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */

      s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
      s.heap[--s.heap_max] = m;

      /* Create a new node father of n and m */
      tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/ ;
      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
      tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

      /* and insert the new node in the heap */
      s.heap[1 /*SMALLEST*/ ] = node++;
      pqdownheap(s, tree, 1 /*SMALLEST*/ );

    } while (s.heap_len >= 2);

    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];

    /* At this point, the fields freq and dad are set. We can now
     * generate the bit lengths.
     */
    gen_bitlen(s, desc);

    /* The field len is now set, we can generate the bit codes */
    gen_codes(tree, max_code, s.bl_count);
  }


  /* ===========================================================================
   * Scan a literal or distance tree to determine the frequencies of the codes
   * in the bit length tree.
   */
  function scan_tree(s, tree, max_code)
  //    deflate_state *s;
  //    ct_data *tree;   /* the tree to be scanned */
  //    int max_code;    /* and its largest code of non zero frequency */
  {
    var n; /* iterates over all tree elements */
    var prevlen = -1; /* last emitted length */
    var curlen; /* length of current code */

    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

    var count = 0; /* repeat count of the current code */
    var max_count = 7; /* max repeat count */
    var min_count = 4; /* min repeat count */

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        s.bl_tree[curlen * 2] /*.Freq*/ += count;

      } else if (curlen !== 0) {

        if (curlen !== prevlen) {
          s.bl_tree[curlen * 2] /*.Freq*/ ++;
        }
        s.bl_tree[REP_3_6 * 2] /*.Freq*/ ++;

      } else if (count <= 10) {
        s.bl_tree[REPZ_3_10 * 2] /*.Freq*/ ++;

      } else {
        s.bl_tree[REPZ_11_138 * 2] /*.Freq*/ ++;
      }

      count = 0;
      prevlen = curlen;

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }


  /* ===========================================================================
   * Send a literal or distance tree in compressed form, using the codes in
   * bl_tree.
   */
  function send_tree(s, tree, max_code)
  //    deflate_state *s;
  //    ct_data *tree; /* the tree to be scanned */
  //    int max_code;       /* and its largest code of non zero frequency */
  {
    var n; /* iterates over all tree elements */
    var prevlen = -1; /* last emitted length */
    var curlen; /* length of current code */

    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

    var count = 0; /* repeat count of the current code */
    var max_count = 7; /* max repeat count */
    var min_count = 4; /* min repeat count */

    /* tree[max_code+1].Len = -1; */
    /* guard already set */
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        do {
          send_code(s, curlen, s.bl_tree);
        } while (--count !== 0);

      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          send_code(s, curlen, s.bl_tree);
          count--;
        }
        //Assert(count >= 3 && count <= 6, " 3_6?");
        send_code(s, REP_3_6, s.bl_tree);
        send_bits(s, count - 3, 2);

      } else if (count <= 10) {
        send_code(s, REPZ_3_10, s.bl_tree);
        send_bits(s, count - 3, 3);

      } else {
        send_code(s, REPZ_11_138, s.bl_tree);
        send_bits(s, count - 11, 7);
      }

      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }


  /* ===========================================================================
   * Construct the Huffman tree for the bit lengths and return the index in
   * bl_order of the last bit length code to send.
   */
  function build_bl_tree(s) {
    var max_blindex; /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

    /* Build the bit length tree: */
    build_tree(s, s.bl_desc);
    /* opt_len now includes the length of the tree representations, except
     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
     */

    /* Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     */
    for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
      if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
        break;
      }
    }
    /* Update opt_len to include the bit length tree and counts */
    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    //        s->opt_len, s->static_len));

    return max_blindex;
  }


  /* ===========================================================================
   * Send the header for a block using dynamic Huffman trees: the counts, the
   * lengths of the bit length codes, the literal tree and the distance tree.
   * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
   */
  function send_all_trees(s, lcodes, dcodes, blcodes)
  //    deflate_state *s;
  //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
  {
    var rank; /* index in bl_order */

    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    //        "too many codes");
    //Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes - 1, 5);
    send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
      //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
      send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/ , 3);
    }
    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
    //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
  }


  /* ===========================================================================
   * Check if the data type is TEXT or BINARY, using the following algorithm:
   * - TEXT if the two conditions below are satisfied:
   *    a) There are no non-portable control characters belonging to the
   *       "black list" (0..6, 14..25, 28..31).
   *    b) There is at least one printable character belonging to the
   *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
   * - BINARY otherwise.
   * - The following partially-portable control characters form a
   *   "gray list" that is ignored in this detection algorithm:
   *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
   * IN assertion: the fields Freq of dyn_ltree are set.
   */
  function detect_data_type(s) {
    /* black_mask is the bit mask of black-listed bytes
     * set bits 0..6, 14..25, and 28..31
     * 0xf3ffc07f = binary 11110011111111111100000001111111
     */
    var black_mask = 0xf3ffc07f;
    var n;

    /* Check for non-textual ("black-listed") bytes. */
    for (n = 0; n <= 31; n++, black_mask >>>= 1) {
      if ((black_mask & 1) && (s.dyn_ltree[n * 2] /*.Freq*/ !== 0)) {
        return Z_BINARY$1;
      }
    }

    /* Check for textual ("white-listed") bytes. */
    if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
      return Z_TEXT$1;
    }
    for (n = 32; n < LITERALS$1; n++) {
      if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
        return Z_TEXT$1;
      }
    }

    /* There are no "black-listed" or "white-listed" bytes:
     * this stream either is empty or has tolerated ("gray-listed") bytes only.
     */
    return Z_BINARY$1;
  }


  var static_init_done = false;

  /* ===========================================================================
   * Initialize the tree data structures for a new zlib stream.
   */
  function _tr_init(s) {

    if (!static_init_done) {
      tr_static_init();
      static_init_done = true;
    }

    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

    s.bi_buf = 0;
    s.bi_valid = 0;

    /* Initialize the first block of the first file: */
    init_block(s);
  }


  /* ===========================================================================
   * Send a stored block
   */
  function _tr_stored_block(s, buf, stored_len, last)
  //DeflateState *s;
  //charf *buf;       /* input block */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
    copy_block(s, buf, stored_len, true); /* with header */
  }


  /* ===========================================================================
   * Send one empty static block to give enough lookahead for inflate.
   * This takes 10 bits, of which 7 may remain in the bit buffer.
   */
  function _tr_align(s) {
    send_bits(s, STATIC_TREES << 1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
  }


  /* ===========================================================================
   * Determine the best encoding for the current block: dynamic trees, static
   * trees or store, and output the encoded block to the zip file.
   */
  function _tr_flush_block(s, buf, stored_len, last)
  //DeflateState *s;
  //charf *buf;       /* input block, or NULL if too old */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
    var max_blindex = 0; /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */
    if (s.level > 0) {

      /* Check if the file is binary or text */
      if (s.strm.data_type === Z_UNKNOWN$2) {
        s.strm.data_type = detect_data_type(s);
      }

      /* Construct the literal and distance trees */
      build_tree(s, s.l_desc);
      // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));

      build_tree(s, s.d_desc);
      // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));
      /* At this point, opt_len and static_len are the total bit lengths of
       * the compressed block data, excluding the tree representations.
       */

      /* Build the bit length tree for the above two trees, and get the index
       * in bl_order of the last bit length code to send.
       */
      max_blindex = build_bl_tree(s);

      /* Determine the best encoding. Compute the block lengths in bytes. */
      opt_lenb = (s.opt_len + 3 + 7) >>> 3;
      static_lenb = (s.static_len + 3 + 7) >>> 3;

      // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
      //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
      //        s->last_lit));

      if (static_lenb <= opt_lenb) {
        opt_lenb = static_lenb;
      }

    } else {
      // Assert(buf != (char*)0, "lost buf");
      opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
    }

    if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
      /* 4: two words for the lengths */

      /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
       * Otherwise we can't have processed more than WSIZE input bytes since
       * the last block flush, because compression would have been
       * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
       * transform a block into a stored block.
       */
      _tr_stored_block(s, buf, stored_len, last);

    } else if (s.strategy === Z_FIXED$2 || static_lenb === opt_lenb) {

      send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
      compress_block(s, static_ltree, static_dtree);

    } else {
      send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
      send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
      compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);

    if (last) {
      bi_windup(s);
    }
    // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
    //       s->compressed_len-7*last));
  }

  /* ===========================================================================
   * Save the match info and tally the frequency counts. Return true if
   * the current block must be flushed.
   */
  function _tr_tally(s, dist, lc)
  //    deflate_state *s;
  //    unsigned dist;  /* distance of matched string */
  //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
  {
    //var out_length, in_length, dcode;

    s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;
    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
    s.last_lit++;

    if (dist === 0) {
      /* lc is the unmatched char */
      s.dyn_ltree[lc * 2] /*.Freq*/ ++;
    } else {
      s.matches++;
      /* Here, lc is the match length - MIN_MATCH */
      dist--; /* dist = match distance - 1 */
      //Assert((ush)dist < (ush)MAX_DIST(s) &&
      //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
      //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

      s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2] /*.Freq*/ ++;
      s.dyn_dtree[d_code(dist) * 2] /*.Freq*/ ++;
    }

    // (!) This block is disabled in zlib defailts,
    // don't enable it for binary compatibility

    //#ifdef TRUNCATE_BLOCK
    //  /* Try to guess if it is profitable to stop the current block here */
    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
    //    /* Compute an upper bound for the compressed length */
    //    out_length = s.last_lit*8;
    //    in_length = s.strstart - s.block_start;
    //
    //    for (dcode = 0; dcode < D_CODES; dcode++) {
    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
    //    }
    //    out_length >>>= 3;
    //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
    //    //       s->last_lit, in_length, out_length,
    //    //       100L - out_length*100L/in_length));
    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
    //      return true;
    //    }
    //  }
    //#endif

    return (s.last_lit === s.lit_bufsize - 1);
    /* We avoid equality with lit_bufsize because of wraparound at 64K
     * on 16 bit machines and because stored blocks are restricted to
     * 64K-1 bytes.
     */
  }

  // Note: adler32 takes 12% for level 0 and 2% for level 6.
  // It doesn't worth to make additional optimizationa as in original.
  // Small size is preferable.

  function adler32(adler, buf, len, pos) {
    var s1 = (adler & 0xffff) |0,
        s2 = ((adler >>> 16) & 0xffff) |0,
        n = 0;

    while (len !== 0) {
      // Set limit ~ twice less than 5552, to keep
      // s2 in 31-bits, because we force signed ints.
      // in other case %= will fail.
      n = len > 2000 ? 2000 : len;
      len -= n;

      do {
        s1 = (s1 + buf[pos++]) |0;
        s2 = (s2 + s1) |0;
      } while (--n);

      s1 %= 65521;
      s2 %= 65521;
    }

    return (s1 | (s2 << 16)) |0;
  }

  // Note: we can't get significant speed boost here.
  // So write code to minimize size - no pregenerated tables
  // and array tools dependencies.


  // Use ordinary array, since untyped makes no boost here
  function makeTable() {
    var c, table = [];

    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
      }
      table[n] = c;
    }

    return table;
  }

  // Create table on load. Just 255 signed longs. Not a problem.
  var crcTable = makeTable();


  function crc32(crc, buf, len, pos) {
    var t = crcTable,
        end = pos + len;

    crc ^= -1;

    for (var i = pos; i < end; i++) {
      crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
    }

    return (crc ^ (-1)); // >>> 0;
  }

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  /* Allowed flush values; see deflate() and inflate() below for details */
  var Z_NO_FLUSH$1 = 0;
  var Z_PARTIAL_FLUSH$1 = 1;
  //var Z_SYNC_FLUSH    = 2;
  var Z_FULL_FLUSH$1 = 3;
  var Z_FINISH$2 = 4;
  var Z_BLOCK$2 = 5;
  //var Z_TREES         = 6;


  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */
  var Z_OK$2 = 0;
  var Z_STREAM_END$2 = 1;
  //var Z_NEED_DICT     = 2;
  //var Z_ERRNO         = -1;
  var Z_STREAM_ERROR$2 = -2;
  var Z_DATA_ERROR$2 = -3;
  //var Z_MEM_ERROR     = -4;
  var Z_BUF_ERROR$2 = -5;
  //var Z_VERSION_ERROR = -6;


  /* compression levels */
  //var Z_NO_COMPRESSION      = 0;
  //var Z_BEST_SPEED          = 1;
  //var Z_BEST_COMPRESSION    = 9;
  var Z_DEFAULT_COMPRESSION$1 = -1;


  var Z_FILTERED$1 = 1;
  var Z_HUFFMAN_ONLY$1 = 2;
  var Z_RLE$1 = 3;
  var Z_FIXED$1 = 4;

  /* Possible values of the data_type field (though see inflate()) */
  //var Z_BINARY              = 0;
  //var Z_TEXT                = 1;
  //var Z_ASCII               = 1; // = Z_TEXT
  var Z_UNKNOWN$1 = 2;


  /* The deflate compression method */
  var Z_DEFLATED$2 = 8;

  /*============================================================================*/


  var MAX_MEM_LEVEL = 9;


  var LENGTH_CODES = 29;
  /* number of length codes, not counting the special END_BLOCK code */
  var LITERALS = 256;
  /* number of literal bytes 0..255 */
  var L_CODES = LITERALS + 1 + LENGTH_CODES;
  /* number of Literal or Length codes, including the END_BLOCK code */
  var D_CODES = 30;
  /* number of distance codes */
  var BL_CODES = 19;
  /* number of codes used to transfer the bit lengths */
  var HEAP_SIZE = 2 * L_CODES + 1;
  /* maximum heap size */
  var MAX_BITS = 15;
  /* All codes must not exceed MAX_BITS bits */

  var MIN_MATCH = 3;
  var MAX_MATCH = 258;
  var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

  var PRESET_DICT = 0x20;

  var INIT_STATE = 42;
  var EXTRA_STATE = 69;
  var NAME_STATE = 73;
  var COMMENT_STATE = 91;
  var HCRC_STATE = 103;
  var BUSY_STATE = 113;
  var FINISH_STATE = 666;

  var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
  var BS_BLOCK_DONE = 2; /* block flush performed */
  var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
  var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

  var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

  function err(strm, errorCode) {
    strm.msg = msg$1[errorCode];
    return errorCode;
  }

  function rank(f) {
    return ((f) << 1) - ((f) > 4 ? 9 : 0);
  }

  function zero(buf) {
    var len = buf.length;
    while (--len >= 0) {
      buf[len] = 0;
    }
  }


  /* =========================================================================
   * Flush as much pending output as possible. All deflate() output goes
   * through this function so some applications may wish to modify it
   * to avoid allocating a large strm->output buffer and copying into it.
   * (See also read_buf()).
   */
  function flush_pending(strm) {
    var s = strm.state;

    //_tr_flush_bits(s);
    var len = s.pending;
    if (len > strm.avail_out) {
      len = strm.avail_out;
    }
    if (len === 0) {
      return;
    }

    arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) {
      s.pending_out = 0;
    }
  }


  function flush_block_only(s, last) {
    _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    flush_pending(s.strm);
  }


  function put_byte(s, b) {
    s.pending_buf[s.pending++] = b;
  }


  /* =========================================================================
   * Put a short in the pending buffer. The 16-bit value is put in MSB order.
   * IN assertion: the stream state is correct and there is enough room in
   * pending_buf.
   */
  function putShortMSB(s, b) {
    //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
    s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
  }


  /* ===========================================================================
   * Read a new buffer from the current input stream, update the adler32
   * and total number of bytes read.  All deflate() input goes through
   * this function so some applications may wish to modify it to avoid
   * allocating a large strm->input buffer and copying from it.
   * (See also flush_pending()).
   */
  function read_buf(strm, buf, start, size) {
    var len = strm.avail_in;

    if (len > size) {
      len = size;
    }
    if (len === 0) {
      return 0;
    }

    strm.avail_in -= len;

    // zmemcpy(buf, strm->next_in, len);
    arraySet(buf, strm.input, strm.next_in, len, start);
    if (strm.state.wrap === 1) {
      strm.adler = adler32(strm.adler, buf, len, start);
    } else if (strm.state.wrap === 2) {
      strm.adler = crc32(strm.adler, buf, len, start);
    }

    strm.next_in += len;
    strm.total_in += len;

    return len;
  }


  /* ===========================================================================
   * Set match_start to the longest match starting at the given string and
   * return its length. Matches shorter or equal to prev_length are discarded,
   * in which case the result is equal to prev_length and match_start is
   * garbage.
   * IN assertions: cur_match is the head of the hash chain for the current
   *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
   * OUT assertion: the match length is not greater than s->lookahead.
   */
  function longest_match(s, cur_match) {
    var chain_length = s.max_chain_length; /* max hash chain length */
    var scan = s.strstart; /* current string */
    var match; /* matched string */
    var len; /* length of current match */
    var best_len = s.prev_length; /* best match length so far */
    var nice_match = s.nice_match; /* stop if match long enough */
    var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;

    var _win = s.window; // shortcut

    var wmask = s.w_mask;
    var prev = s.prev;

    /* Stop when cur_match becomes <= limit. To simplify the code,
     * we prevent matches with the string of window index 0.
     */

    var strend = s.strstart + MAX_MATCH;
    var scan_end1 = _win[scan + best_len - 1];
    var scan_end = _win[scan + best_len];

    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
     * It is easy to get rid of this optimization if necessary.
     */
    // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

    /* Do not waste too much time if we already have a good match: */
    if (s.prev_length >= s.good_match) {
      chain_length >>= 2;
    }
    /* Do not look for matches beyond the end of the input. This is necessary
     * to make deflate deterministic.
     */
    if (nice_match > s.lookahead) {
      nice_match = s.lookahead;
    }

    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

    do {
      // Assert(cur_match < s->strstart, "no future");
      match = cur_match;

      /* Skip to next match if the match length cannot increase
       * or if the match length is less than 2.  Note that the checks below
       * for insufficient lookahead only occur occasionally for performance
       * reasons.  Therefore uninitialized memory will be accessed, and
       * conditional jumps will be made that depend on those values.
       * However the length of the match is limited to the lookahead, so
       * the output of deflate is not affected by the uninitialized values.
       */

      if (_win[match + best_len] !== scan_end ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match] !== _win[scan] ||
        _win[++match] !== _win[scan + 1]) {
        continue;
      }

      /* The check at best_len-1 can be removed because it will be made
       * again later. (This heuristic is not always a win.)
       * It is not necessary to compare scan[2] and match[2] since they
       * are always equal when the other bytes match, given that
       * the hash keys are equal and that HASH_BITS >= 8.
       */
      scan += 2;
      match++;
      // Assert(*scan == *match, "match[2]?");

      /* We check for insufficient lookahead only every 8th comparison;
       * the 256th check will be made at strstart+258.
       */
      do {
        /*jshint noempty:false*/
      } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        scan < strend);

      // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

      len = MAX_MATCH - (strend - scan);
      scan = strend - MAX_MATCH;

      if (len > best_len) {
        s.match_start = cur_match;
        best_len = len;
        if (len >= nice_match) {
          break;
        }
        scan_end1 = _win[scan + best_len - 1];
        scan_end = _win[scan + best_len];
      }
    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

    if (best_len <= s.lookahead) {
      return best_len;
    }
    return s.lookahead;
  }


  /* ===========================================================================
   * Fill the window when the lookahead becomes insufficient.
   * Updates strstart and lookahead.
   *
   * IN assertion: lookahead < MIN_LOOKAHEAD
   * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
   *    At least one byte has been read, or avail_in == 0; reads are
   *    performed for at least two bytes (required for the zip translate_eol
   *    option -- not supported here).
   */
  function fill_window(s) {
    var _w_size = s.w_size;
    var p, n, m, more, str;

    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

    do {
      more = s.window_size - s.lookahead - s.strstart;

      // JS ints have 32 bit, block below not needed
      /* Deal with !@#$% 64K limit: */
      //if (sizeof(int) <= 2) {
      //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
      //        more = wsize;
      //
      //  } else if (more == (unsigned)(-1)) {
      //        /* Very unlikely, but possible on 16 bit machine if
      //         * strstart == 0 && lookahead == 1 (input done a byte at time)
      //         */
      //        more--;
      //    }
      //}


      /* If the window is almost full and there is insufficient lookahead,
       * move the upper half to the lower one to make room in the upper half.
       */
      if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

        arraySet(s.window, s.window, _w_size, _w_size, 0);
        s.match_start -= _w_size;
        s.strstart -= _w_size;
        /* we now have strstart >= MAX_DIST */
        s.block_start -= _w_size;

        /* Slide the hash table (could be avoided with 32 bit values
         at the expense of memory usage). We slide even when level == 0
         to keep the hash table consistent if we switch back to level > 0
         later. (Using level 0 permanently is not an optimal usage of
         zlib, so we don't care about this pathological case.)
         */

        n = s.hash_size;
        p = n;
        do {
          m = s.head[--p];
          s.head[p] = (m >= _w_size ? m - _w_size : 0);
        } while (--n);

        n = _w_size;
        p = n;
        do {
          m = s.prev[--p];
          s.prev[p] = (m >= _w_size ? m - _w_size : 0);
          /* If n is not on any hash chain, prev[n] is garbage but
           * its value will never be used.
           */
        } while (--n);

        more += _w_size;
      }
      if (s.strm.avail_in === 0) {
        break;
      }

      /* If there was no sliding:
       *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
       *    more == window_size - lookahead - strstart
       * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
       * => more >= window_size - 2*WSIZE + 2
       * In the BIG_MEM or MMAP case (not yet supported),
       *   window_size == input_size + MIN_LOOKAHEAD  &&
       *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
       * Otherwise, window_size == 2*WSIZE so more >= 2.
       * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
       */
      //Assert(more >= 2, "more < 2");
      n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
      s.lookahead += n;

      /* Initialize the hash value now that we have some input: */
      if (s.lookahead + s.insert >= MIN_MATCH) {
        str = s.strstart - s.insert;
        s.ins_h = s.window[str];

        /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
        //#if MIN_MATCH != 3
        //        Call update_hash() MIN_MATCH-3 more times
        //#endif
        while (s.insert) {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
          s.insert--;
          if (s.lookahead + s.insert < MIN_MATCH) {
            break;
          }
        }
      }
      /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
       * but this is not important since only literal bytes will be emitted.
       */

    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

    /* If the WIN_INIT bytes after the end of the current data have never been
     * written, then zero those bytes in order to avoid memory check reports of
     * the use of uninitialized (or uninitialised as Julian writes) bytes by
     * the longest match routines.  Update the high water mark for the next
     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
     */
    //  if (s.high_water < s.window_size) {
    //    var curr = s.strstart + s.lookahead;
    //    var init = 0;
    //
    //    if (s.high_water < curr) {
    //      /* Previous high water mark below current data -- zero WIN_INIT
    //       * bytes or up to end of window, whichever is less.
    //       */
    //      init = s.window_size - curr;
    //      if (init > WIN_INIT)
    //        init = WIN_INIT;
    //      zmemzero(s->window + curr, (unsigned)init);
    //      s->high_water = curr + init;
    //    }
    //    else if (s->high_water < (ulg)curr + WIN_INIT) {
    //      /* High water mark at or above current data, but below current data
    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
    //       * to end of window, whichever is less.
    //       */
    //      init = (ulg)curr + WIN_INIT - s->high_water;
    //      if (init > s->window_size - s->high_water)
    //        init = s->window_size - s->high_water;
    //      zmemzero(s->window + s->high_water, (unsigned)init);
    //      s->high_water += init;
    //    }
    //  }
    //
    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
    //    "not enough room for search");
  }

  /* ===========================================================================
   * Copy without compression as much as possible from the input stream, return
   * the current block state.
   * This function does not insert new strings in the dictionary since
   * uncompressible data is probably not useful. This function is used
   * only for the level=0 compression option.
   * NOTE: this function should be optimized to avoid extra copying from
   * window to pending_buf.
   */
  function deflate_stored(s, flush) {
    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
     * to pending_buf_size, and each stored block has a 5 byte header:
     */
    var max_block_size = 0xffff;

    if (max_block_size > s.pending_buf_size - 5) {
      max_block_size = s.pending_buf_size - 5;
    }

    /* Copy as much as possible from input to output: */
    for (;;) {
      /* Fill the window as much as possible: */
      if (s.lookahead <= 1) {

        //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
        //  s->block_start >= (long)s->w_size, "slide too late");
        //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
        //        s.block_start >= s.w_size)) {
        //        throw  new Error("slide too late");
        //      }

        fill_window(s);
        if (s.lookahead === 0 && flush === Z_NO_FLUSH$1) {
          return BS_NEED_MORE;
        }

        if (s.lookahead === 0) {
          break;
        }
        /* flush the current block */
      }
      //Assert(s->block_start >= 0L, "block gone");
      //    if (s.block_start < 0) throw new Error("block gone");

      s.strstart += s.lookahead;
      s.lookahead = 0;

      /* Emit a stored block if pending_buf will be full: */
      var max_start = s.block_start + max_block_size;

      if (s.strstart === 0 || s.strstart >= max_start) {
        /* strstart == 0 is possible when wraparound on 16-bit machine */
        s.lookahead = s.strstart - max_start;
        s.strstart = max_start;
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/


      }
      /* Flush if we may have to slide, otherwise block_start may become
       * negative and the data will be gone:
       */
      if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }

    s.insert = 0;

    if (flush === Z_FINISH$2) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }

    if (s.strstart > s.block_start) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }

    return BS_NEED_MORE;
  }

  /* ===========================================================================
   * Compress as much as possible from the input stream, return the current
   * block state.
   * This function does not perform lazy evaluation of matches and inserts
   * new strings in the dictionary only for unmatched strings or for short
   * matches. It is used only for the fast compression options.
   */
  function deflate_fast(s, flush) {
    var hash_head; /* head of the hash chain */
    var bflush; /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break; /* flush the current block */
        }
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0 /*NIL*/ ;
      if (s.lookahead >= MIN_MATCH) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       * At this point we have always match_length < MIN_MATCH
       */
      if (hash_head !== 0 /*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */
      }
      if (s.match_length >= MIN_MATCH) {
        // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

        /*** _tr_tally_dist(s, s.strstart - s.match_start,
                       s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

        s.lookahead -= s.match_length;

        /* Insert new strings in the hash table only if the match length
         * is not too large. This saves time but degrades compression.
         */
        if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
          s.match_length--; /* string at strstart already in table */
          do {
            s.strstart++;
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
            /* strstart never exceeds WSIZE-MAX_MATCH, so there are
             * always MIN_MATCH bytes ahead.
             */
          } while (--s.match_length !== 0);
          s.strstart++;
        } else {
          s.strstart += s.match_length;
          s.match_length = 0;
          s.ins_h = s.window[s.strstart];
          /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

          //#if MIN_MATCH != 3
          //                Call UPDATE_HASH() MIN_MATCH-3 more times
          //#endif
          /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
           * matter since it will be recomputed at next deflate call.
           */
        }
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s.window[s.strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
    if (flush === Z_FINISH$2) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  }

  /* ===========================================================================
   * Same as above, but achieves better compression. We use a lazy
   * evaluation for matches: a match is finally adopted only if there is
   * no better match at the next window position.
   */
  function deflate_slow(s, flush) {
    var hash_head; /* head of hash chain */
    var bflush; /* set if current block must be flushed */

    var max_insert;

    /* Process the input block. */
    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        } /* flush the current block */
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0 /*NIL*/ ;
      if (s.lookahead >= MIN_MATCH) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       */
      s.prev_length = s.match_length;
      s.prev_match = s.match_start;
      s.match_length = MIN_MATCH - 1;

      if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD) /*MAX_DIST(s)*/ ) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */

        if (s.match_length <= 5 &&
          (s.strategy === Z_FILTERED$1 || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ ))) {

          /* If prev_match is also MIN_MATCH, match_start is garbage
           * but we will ignore the current match anyway.
           */
          s.match_length = MIN_MATCH - 1;
        }
      }
      /* If there was a match at the previous step and the current
       * match is not better, output the previous match:
       */
      if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
        max_insert = s.strstart + s.lookahead - MIN_MATCH;
        /* Do not insert strings in hash table beyond this. */

        //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

        /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                       s.prev_length - MIN_MATCH, bflush);***/
        bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
        /* Insert in hash table all strings up to the end of the match.
         * strstart-1 and strstart are already inserted. If there is not
         * enough lookahead, the last two strings are not inserted in
         * the hash table.
         */
        s.lookahead -= s.prev_length - 1;
        s.prev_length -= 2;
        do {
          if (++s.strstart <= max_insert) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
        } while (--s.prev_length !== 0);
        s.match_available = 0;
        s.match_length = MIN_MATCH - 1;
        s.strstart++;

        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }

      } else if (s.match_available) {
        /* If there was no match at the previous position, output a
         * single literal. If there was a match but the current match
         * is longer, truncate the previous match to a single literal.
         */
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

        if (bflush) {
          /*** FLUSH_BLOCK_ONLY(s, 0) ***/
          flush_block_only(s, false);
          /***/
        }
        s.strstart++;
        s.lookahead--;
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      } else {
        /* There is no previous match to compare with, wait for
         * the next step to decide.
         */
        s.match_available = 1;
        s.strstart++;
        s.lookahead--;
      }
    }
    //Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s.match_available) {
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      s.match_available = 0;
    }
    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
    if (flush === Z_FINISH$2) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }

    return BS_BLOCK_DONE;
  }


  /* ===========================================================================
   * For Z_RLE, simply look for runs of bytes, generate matches only of distance
   * one.  Do not maintain a hash table.  (It will be regenerated if this run of
   * deflate switches away from Z_RLE.)
   */
  function deflate_rle(s, flush) {
    var bflush; /* set if current block must be flushed */
    var prev; /* byte at distance one to match */
    var scan, strend; /* scan goes up to strend for length of run */

    var _win = s.window;

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the longest run, plus one for the unrolled loop.
       */
      if (s.lookahead <= MAX_MATCH) {
        fill_window(s);
        if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$1) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break;
        } /* flush the current block */
      }

      /* See how many times the previous byte repeats */
      s.match_length = 0;
      if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
        scan = s.strstart - 1;
        prev = _win[scan];
        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
          strend = s.strstart + MAX_MATCH;
          do {
            /*jshint noempty:false*/
          } while (prev === _win[++scan] && prev === _win[++scan] &&
            prev === _win[++scan] && prev === _win[++scan] &&
            prev === _win[++scan] && prev === _win[++scan] &&
            prev === _win[++scan] && prev === _win[++scan] &&
            scan < strend);
          s.match_length = MAX_MATCH - (strend - scan);
          if (s.match_length > s.lookahead) {
            s.match_length = s.lookahead;
          }
        }
        //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
      }

      /* Emit match if have run of MIN_MATCH or longer, else emit literal */
      if (s.match_length >= MIN_MATCH) {
        //check_match(s, s.strstart, s.strstart - 1, s.match_length);

        /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

        s.lookahead -= s.match_length;
        s.strstart += s.match_length;
        s.match_length = 0;
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$2) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  }

  /* ===========================================================================
   * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
   * (It will be regenerated if this run of deflate switches away from Huffman.)
   */
  function deflate_huff(s, flush) {
    var bflush; /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we have a literal to write. */
      if (s.lookahead === 0) {
        fill_window(s);
        if (s.lookahead === 0) {
          if (flush === Z_NO_FLUSH$1) {
            return BS_NEED_MORE;
          }
          break; /* flush the current block */
        }
      }

      /* Output a literal byte */
      s.match_length = 0;
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$2) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  }

  /* Values for max_lazy_match, good_match and max_chain_length, depending on
   * the desired pack level (0..9). The values given below have been tuned to
   * exclude worst case performance for pathological files. Better values may be
   * found for specific files.
   */
  function Config(good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
  }

  var configuration_table;

  configuration_table = [
    /*      good lazy nice chain */
    new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
    new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
    new Config(4, 5, 16, 8, deflate_fast), /* 2 */
    new Config(4, 6, 32, 32, deflate_fast), /* 3 */

    new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
    new Config(8, 16, 32, 32, deflate_slow), /* 5 */
    new Config(8, 16, 128, 128, deflate_slow), /* 6 */
    new Config(8, 32, 128, 256, deflate_slow), /* 7 */
    new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
    new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
  ];


  /* ===========================================================================
   * Initialize the "longest match" routines for a new zlib stream
   */
  function lm_init(s) {
    s.window_size = 2 * s.w_size;

    /*** CLEAR_HASH(s); ***/
    zero(s.head); // Fill with NIL (= 0);

    /* Set the default configuration parameters:
     */
    s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;

    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    s.ins_h = 0;
  }


  function DeflateState() {
    this.strm = null; /* pointer back to this zlib stream */
    this.status = 0; /* as the name implies */
    this.pending_buf = null; /* output still pending */
    this.pending_buf_size = 0; /* size of pending_buf */
    this.pending_out = 0; /* next pending byte to output to the stream */
    this.pending = 0; /* nb of bytes in the pending buffer */
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
    this.gzhead = null; /* gzip header information to write */
    this.gzindex = 0; /* where in extra, name, or comment */
    this.method = Z_DEFLATED$2; /* can only be DEFLATED */
    this.last_flush = -1; /* value of flush param for previous deflate call */

    this.w_size = 0; /* LZ77 window size (32K by default) */
    this.w_bits = 0; /* log2(w_size)  (8..16) */
    this.w_mask = 0; /* w_size - 1 */

    this.window = null;
    /* Sliding window. Input bytes are read into the second half of the window,
     * and move to the first half later to keep a dictionary of at least wSize
     * bytes. With this organization, matches are limited to a distance of
     * wSize-MAX_MATCH bytes, but this ensures that IO is always
     * performed with a length multiple of the block size.
     */

    this.window_size = 0;
    /* Actual size of window: 2*wSize, except when the user input buffer
     * is directly used as sliding window.
     */

    this.prev = null;
    /* Link to older string with same hash index. To limit the size of this
     * array to 64K, this link is maintained only for the last 32K strings.
     * An index in this array is thus a window index modulo 32K.
     */

    this.head = null; /* Heads of the hash chains or NIL. */

    this.ins_h = 0; /* hash index of string to be inserted */
    this.hash_size = 0; /* number of elements in hash table */
    this.hash_bits = 0; /* log2(hash_size) */
    this.hash_mask = 0; /* hash_size-1 */

    this.hash_shift = 0;
    /* Number of bits by which ins_h must be shifted at each input
     * step. It must be such that after MIN_MATCH steps, the oldest
     * byte no longer takes part in the hash key, that is:
     *   hash_shift * MIN_MATCH >= hash_bits
     */

    this.block_start = 0;
    /* Window position at the beginning of the current output block. Gets
     * negative when the window is moved backwards.
     */

    this.match_length = 0; /* length of best match */
    this.prev_match = 0; /* previous match */
    this.match_available = 0; /* set if previous match exists */
    this.strstart = 0; /* start of string to insert */
    this.match_start = 0; /* start of matching string */
    this.lookahead = 0; /* number of valid bytes ahead in window */

    this.prev_length = 0;
    /* Length of the best match at previous step. Matches not greater than this
     * are discarded. This is used in the lazy match evaluation.
     */

    this.max_chain_length = 0;
    /* To speed up deflation, hash chains are never searched beyond this
     * length.  A higher limit improves compression ratio but degrades the
     * speed.
     */

    this.max_lazy_match = 0;
    /* Attempt to find a better match only when the current match is strictly
     * smaller than this value. This mechanism is used only for compression
     * levels >= 4.
     */
    // That's alias to max_lazy_match, don't use directly
    //this.max_insert_length = 0;
    /* Insert new strings in the hash table only if the match length is not
     * greater than this length. This saves time but degrades compression.
     * max_insert_length is used only for compression levels <= 3.
     */

    this.level = 0; /* compression level (1..9) */
    this.strategy = 0; /* favor or force Huffman coding*/

    this.good_match = 0;
    /* Use a faster search when the previous match is longer than this */

    this.nice_match = 0; /* Stop searching when current match exceeds this */

    /* used by c: */

    /* Didn't use ct_data typedef below to suppress compiler warning */

    // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

    // Use flat array of DOUBLE size, with interleaved fata,
    // because JS does not support effective
    this.dyn_ltree = new Buf16(HEAP_SIZE * 2);
    this.dyn_dtree = new Buf16((2 * D_CODES + 1) * 2);
    this.bl_tree = new Buf16((2 * BL_CODES + 1) * 2);
    zero(this.dyn_ltree);
    zero(this.dyn_dtree);
    zero(this.bl_tree);

    this.l_desc = null; /* desc. for literal tree */
    this.d_desc = null; /* desc. for distance tree */
    this.bl_desc = null; /* desc. for bit length tree */

    //ush bl_count[MAX_BITS+1];
    this.bl_count = new Buf16(MAX_BITS + 1);
    /* number of codes at each bit length for an optimal tree */

    //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
    this.heap = new Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */
    zero(this.heap);

    this.heap_len = 0; /* number of elements in the heap */
    this.heap_max = 0; /* element of largest frequency */
    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
     * The same heap array is used to build all
     */

    this.depth = new Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
    zero(this.depth);
    /* Depth of each subtree used as tie breaker for trees of equal frequency
     */

    this.l_buf = 0; /* buffer index for literals or lengths */

    this.lit_bufsize = 0;
    /* Size of match buffer for literals/lengths.  There are 4 reasons for
     * limiting lit_bufsize to 64K:
     *   - frequencies can be kept in 16 bit counters
     *   - if compression is not successful for the first block, all input
     *     data is still in the window so we can still emit a stored block even
     *     when input comes from standard input.  (This can also be done for
     *     all blocks if lit_bufsize is not greater than 32K.)
     *   - if compression is not successful for a file smaller than 64K, we can
     *     even emit a stored file instead of a stored block (saving 5 bytes).
     *     This is applicable only for zip (not gzip or zlib).
     *   - creating new Huffman trees less frequently may not provide fast
     *     adaptation to changes in the input data statistics. (Take for
     *     example a binary file with poorly compressible code followed by
     *     a highly compressible string table.) Smaller buffer sizes give
     *     fast adaptation but have of course the overhead of transmitting
     *     trees more frequently.
     *   - I can't count above 4
     */

    this.last_lit = 0; /* running index in l_buf */

    this.d_buf = 0;
    /* Buffer index for distances. To simplify the code, d_buf and l_buf have
     * the same number of elements. To use different lengths, an extra flag
     * array would be necessary.
     */

    this.opt_len = 0; /* bit length of current block with optimal trees */
    this.static_len = 0; /* bit length of current block with static trees */
    this.matches = 0; /* number of string matches in current block */
    this.insert = 0; /* bytes at end of window left to insert */


    this.bi_buf = 0;
    /* Output buffer. bits are inserted starting at the bottom (least
     * significant bits).
     */
    this.bi_valid = 0;
    /* Number of valid bits in bi_buf.  All bits above the last valid bit
     * are always zero.
     */

    // Used for window memory init. We safely ignore it for JS. That makes
    // sense only for pointers and memory check tools.
    //this.high_water = 0;
    /* High water mark offset in window for initialized bytes -- bytes above
     * this are set to zero in order to avoid memory check warnings when
     * longest match routines access bytes past the input.  This is then
     * updated to the new high water mark.
     */
  }


  function deflateResetKeep(strm) {
    var s;

    if (!strm || !strm.state) {
      return err(strm, Z_STREAM_ERROR$2);
    }

    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN$1;

    s = strm.state;
    s.pending = 0;
    s.pending_out = 0;

    if (s.wrap < 0) {
      s.wrap = -s.wrap;
      /* was made negative by deflate(..., Z_FINISH); */
    }
    s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
    strm.adler = (s.wrap === 2) ?
      0 // crc32(0, Z_NULL, 0)
      :
      1; // adler32(0, Z_NULL, 0)
    s.last_flush = Z_NO_FLUSH$1;
    _tr_init(s);
    return Z_OK$2;
  }


  function deflateReset(strm) {
    var ret = deflateResetKeep(strm);
    if (ret === Z_OK$2) {
      lm_init(strm.state);
    }
    return ret;
  }


  function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
    if (!strm) { // === Z_NULL
      return Z_STREAM_ERROR$2;
    }
    var wrap = 1;

    if (level === Z_DEFAULT_COMPRESSION$1) {
      level = 6;
    }

    if (windowBits < 0) { /* suppress zlib wrapper */
      wrap = 0;
      windowBits = -windowBits;
    } else if (windowBits > 15) {
      wrap = 2; /* write gzip wrapper instead */
      windowBits -= 16;
    }


    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
      windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
      strategy < 0 || strategy > Z_FIXED$1) {
      return err(strm, Z_STREAM_ERROR$2);
    }


    if (windowBits === 8) {
      windowBits = 9;
    }
    /* until 256-byte window bug fixed */

    var s = new DeflateState();

    strm.state = s;
    s.strm = strm;

    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;

    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

    s.window = new Buf8(s.w_size * 2);
    s.head = new Buf16(s.hash_size);
    s.prev = new Buf16(s.w_size);

    // Don't need mem init magic for JS.
    //s.high_water = 0;  /* nothing written to s->window yet */

    s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

    s.pending_buf_size = s.lit_bufsize * 4;

    //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
    //s->pending_buf = (uchf *) overlay;
    s.pending_buf = new Buf8(s.pending_buf_size);

    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
    //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
    s.d_buf = 1 * s.lit_bufsize;

    //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
    s.l_buf = (1 + 2) * s.lit_bufsize;

    s.level = level;
    s.strategy = strategy;
    s.method = method;

    return deflateReset(strm);
  }


  function deflate$1(strm, flush) {
    var old_flush, s;
    var beg, val; // for gzip header write only

    if (!strm || !strm.state ||
      flush > Z_BLOCK$2 || flush < 0) {
      return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
    }

    s = strm.state;

    if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH$2)) {
      return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$2 : Z_STREAM_ERROR$2);
    }

    s.strm = strm; /* just in case */
    old_flush = s.last_flush;
    s.last_flush = flush;

    /* Write the header */
    if (s.status === INIT_STATE) {
      if (s.wrap === 2) {
        // GZIP header
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) { // s->gzhead == Z_NULL
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 :
            (s.strategy >= Z_HUFFMAN_ONLY$1 || s.level < 2 ?
              4 : 0));
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
        } else {
          put_byte(s, (s.gzhead.text ? 1 : 0) +
            (s.gzhead.hcrc ? 2 : 0) +
            (!s.gzhead.extra ? 0 : 4) +
            (!s.gzhead.name ? 0 : 8) +
            (!s.gzhead.comment ? 0 : 16)
          );
          put_byte(s, s.gzhead.time & 0xff);
          put_byte(s, (s.gzhead.time >> 8) & 0xff);
          put_byte(s, (s.gzhead.time >> 16) & 0xff);
          put_byte(s, (s.gzhead.time >> 24) & 0xff);
          put_byte(s, s.level === 9 ? 2 :
            (s.strategy >= Z_HUFFMAN_ONLY$1 || s.level < 2 ?
              4 : 0));
          put_byte(s, s.gzhead.os & 0xff);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 0xff);
            put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
          }
          if (s.gzhead.hcrc) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
          }
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      } else // DEFLATE header
      {
        var header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
        var level_flags = -1;

        if (s.strategy >= Z_HUFFMAN_ONLY$1 || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= (level_flags << 6);
        if (s.strstart !== 0) {
          header |= PRESET_DICT;
        }
        header += 31 - (header % 31);

        s.status = BUSY_STATE;
        putShortMSB(s, header);

        /* Save the adler32 of the preset dictionary: */
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
      }
    }

    //#ifdef GZIP
    if (s.status === EXTRA_STATE) {
      if (s.gzhead.extra /* != Z_NULL*/ ) {
        beg = s.pending; /* start of bytes to update crc */

        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              break;
            }
          }
          put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
          s.gzindex++;
        }
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE;
        }
      } else {
        s.status = NAME_STATE;
      }
    }
    if (s.status === NAME_STATE) {
      if (s.gzhead.name /* != Z_NULL*/ ) {
        beg = s.pending; /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.gzindex = 0;
          s.status = COMMENT_STATE;
        }
      } else {
        s.status = COMMENT_STATE;
      }
    }
    if (s.status === COMMENT_STATE) {
      if (s.gzhead.comment /* != Z_NULL*/ ) {
        beg = s.pending; /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.status = HCRC_STATE;
        }
      } else {
        s.status = HCRC_STATE;
      }
    }
    if (s.status === HCRC_STATE) {
      if (s.gzhead.hcrc) {
        if (s.pending + 2 > s.pending_buf_size) {
          flush_pending(strm);
        }
        if (s.pending + 2 <= s.pending_buf_size) {
          put_byte(s, strm.adler & 0xff);
          put_byte(s, (strm.adler >> 8) & 0xff);
          strm.adler = 0; //crc32(0L, Z_NULL, 0);
          s.status = BUSY_STATE;
        }
      } else {
        s.status = BUSY_STATE;
      }
    }
    //#endif

    /* Flush as much pending output as possible */
    if (s.pending !== 0) {
      flush_pending(strm);
      if (strm.avail_out === 0) {
        /* Since avail_out is 0, deflate will be called again with
         * more output space, but possibly with both pending and
         * avail_in equal to zero. There won't be anything to do,
         * but this is not an error situation so make sure we
         * return OK instead of BUF_ERROR at next call of deflate:
         */
        s.last_flush = -1;
        return Z_OK$2;
      }

      /* Make sure there is something to do and avoid duplicate consecutive
       * flushes. For repeated and useless calls with Z_FINISH, we keep
       * returning Z_STREAM_END instead of Z_BUF_ERROR.
       */
    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
      flush !== Z_FINISH$2) {
      return err(strm, Z_BUF_ERROR$2);
    }

    /* User must not provide more input after the first FINISH: */
    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
      return err(strm, Z_BUF_ERROR$2);
    }

    /* Start a new block or continue the current one.
     */
    if (strm.avail_in !== 0 || s.lookahead !== 0 ||
      (flush !== Z_NO_FLUSH$1 && s.status !== FINISH_STATE)) {
      var bstate = (s.strategy === Z_HUFFMAN_ONLY$1) ? deflate_huff(s, flush) :
        (s.strategy === Z_RLE$1 ? deflate_rle(s, flush) :
          configuration_table[s.level].func(s, flush));

      if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
        s.status = FINISH_STATE;
      }
      if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          /* avoid BUF_ERROR next call, see above */
        }
        return Z_OK$2;
        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
         * of deflate should use the same flush parameter to make sure
         * that the flush is complete. So we don't have to output an
         * empty block here, this will be done at next call. This also
         * ensures that for a very small output buffer, we emit at most
         * one empty block.
         */
      }
      if (bstate === BS_BLOCK_DONE) {
        if (flush === Z_PARTIAL_FLUSH$1) {
          _tr_align(s);
        } else if (flush !== Z_BLOCK$2) { /* FULL_FLUSH or SYNC_FLUSH */

          _tr_stored_block(s, 0, 0, false);
          /* For a full flush, this empty block will be recognized
           * as a special marker by inflate_sync().
           */
          if (flush === Z_FULL_FLUSH$1) {
            /*** CLEAR_HASH(s); ***/
            /* forget history */
            zero(s.head); // Fill with NIL (= 0);

            if (s.lookahead === 0) {
              s.strstart = 0;
              s.block_start = 0;
              s.insert = 0;
            }
          }
        }
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
          return Z_OK$2;
        }
      }
    }
    //Assert(strm->avail_out > 0, "bug2");
    //if (strm.avail_out <= 0) { throw new Error("bug2");}

    if (flush !== Z_FINISH$2) {
      return Z_OK$2;
    }
    if (s.wrap <= 0) {
      return Z_STREAM_END$2;
    }

    /* Write the trailer */
    if (s.wrap === 2) {
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      put_byte(s, (strm.adler >> 16) & 0xff);
      put_byte(s, (strm.adler >> 24) & 0xff);
      put_byte(s, strm.total_in & 0xff);
      put_byte(s, (strm.total_in >> 8) & 0xff);
      put_byte(s, (strm.total_in >> 16) & 0xff);
      put_byte(s, (strm.total_in >> 24) & 0xff);
    } else {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }

    flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s.wrap > 0) {
      s.wrap = -s.wrap;
    }
    /* write the trailer only once! */
    return s.pending !== 0 ? Z_OK$2 : Z_STREAM_END$2;
  }

  function deflateEnd(strm) {
    var status;

    if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/ ) {
      return Z_STREAM_ERROR$2;
    }

    status = strm.state.status;
    if (status !== INIT_STATE &&
      status !== EXTRA_STATE &&
      status !== NAME_STATE &&
      status !== COMMENT_STATE &&
      status !== HCRC_STATE &&
      status !== BUSY_STATE &&
      status !== FINISH_STATE
    ) {
      return err(strm, Z_STREAM_ERROR$2);
    }

    strm.state = null;

    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$2;
  }

  /* Not implemented
  exports.deflateBound = deflateBound;
  exports.deflateCopy = deflateCopy;
  exports.deflateParams = deflateParams;
  exports.deflatePending = deflatePending;
  exports.deflatePrime = deflatePrime;
  exports.deflateTune = deflateTune;
  */

  // See state defs from inflate.js
  var BAD$1 = 30;       /* got a data error -- remain here until reset */
  var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

  /*
     Decode literal, length, and distance codes and write out the resulting
     literal and match bytes until either not enough input or output is
     available, an end-of-block is encountered, or a data error is encountered.
     When large enough input and output buffers are supplied to inflate(), for
     example, a 16K input buffer and a 64K output buffer, more than 95% of the
     inflate execution time is spent in this routine.

     Entry assumptions:

          state.mode === LEN
          strm.avail_in >= 6
          strm.avail_out >= 258
          start >= strm.avail_out
          state.bits < 8

     On return, state.mode is one of:

          LEN -- ran out of enough output space or enough available input
          TYPE -- reached end of block code, inflate() to interpret next block
          BAD -- error in block data

     Notes:

      - The maximum input bits used by a length/distance pair is 15 bits for the
        length code, 5 bits for the length extra, 15 bits for the distance code,
        and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
        Therefore if strm.avail_in >= 6, then there is enough input to avoid
        checking for available input while decoding.

      - The maximum bytes that a single length/distance pair can output is 258
        bytes, which is the maximum length that can be coded.  inflate_fast()
        requires strm.avail_out >= 258 for each loop to avoid checking for
        output space.
   */
  function inflate_fast(strm, start) {
    var state;
    var _in;                    /* local strm.input */
    var last;                   /* have enough input while in < last */
    var _out;                   /* local strm.output */
    var beg;                    /* inflate()'s initial strm.output */
    var end;                    /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
    var dmax;                   /* maximum distance from zlib header */
  //#endif
    var wsize;                  /* window size or zero if not using window */
    var whave;                  /* valid bytes in the window */
    var wnext;                  /* window write index */
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    var s_window;               /* allocated sliding window, if wsize != 0 */
    var hold;                   /* local strm.hold */
    var bits;                   /* local strm.bits */
    var lcode;                  /* local strm.lencode */
    var dcode;                  /* local strm.distcode */
    var lmask;                  /* mask for first level of length codes */
    var dmask;                  /* mask for first level of distance codes */
    var here;                   /* retrieved table entry */
    var op;                     /* code bits, operation, extra bits, or */
                                /*  window position, window bytes to copy */
    var len;                    /* match length, unused bytes */
    var dist;                   /* match distance */
    var from;                   /* where to copy match from */
    var from_source;


    var input, output; // JS specific, because we have no pointers

    /* copy state to local variables */
    state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
    dmax = state.dmax;
  //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;


    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */

    top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }

      here = lcode[hold & lmask];

      dolen:
      for (;;) { // Goto emulation
        op = here >>> 24/*here.bits*/;
        hold >>>= op;
        bits -= op;
        op = (here >>> 16) & 0xff/*here.op*/;
        if (op === 0) {                          /* literal */
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          output[_out++] = here & 0xffff/*here.val*/;
        }
        else if (op & 16) {                     /* length base */
          len = here & 0xffff/*here.val*/;
          op &= 15;                           /* number of extra bits */
          if (op) {
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
            }
            len += hold & ((1 << op) - 1);
            hold >>>= op;
            bits -= op;
          }
          //Tracevv((stderr, "inflate:         length %u\n", len));
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = dcode[hold & dmask];

          dodist:
          for (;;) { // goto emulation
            op = here >>> 24/*here.bits*/;
            hold >>>= op;
            bits -= op;
            op = (here >>> 16) & 0xff/*here.op*/;

            if (op & 16) {                      /* distance base */
              dist = here & 0xffff/*here.val*/;
              op &= 15;                       /* number of extra bits */
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }
              dist += hold & ((1 << op) - 1);
  //#ifdef INFLATE_STRICT
              if (dist > dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD$1;
                break top;
              }
  //#endif
              hold >>>= op;
              bits -= op;
              //Tracevv((stderr, "inflate:         distance %u\n", dist));
              op = _out - beg;                /* max distance in output */
              if (dist > op) {                /* see if copy from window */
                op = dist - op;               /* distance back in window */
                if (op > whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD$1;
                    break top;
                  }

  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //                if (len <= op - whave) {
  //                  do {
  //                    output[_out++] = 0;
  //                  } while (--len);
  //                  continue top;
  //                }
  //                len -= op - whave;
  //                do {
  //                  output[_out++] = 0;
  //                } while (--op > whave);
  //                if (op === 0) {
  //                  from = _out - dist;
  //                  do {
  //                    output[_out++] = output[from++];
  //                  } while (--len);
  //                  continue top;
  //                }
  //#endif
                }
                from = 0; // window index
                from_source = s_window;
                if (wnext === 0) {           /* very common case */
                  from += wsize - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                else if (wnext < op) {      /* wrap around window */
                  from += wsize + wnext - op;
                  op -= wnext;
                  if (op < len) {         /* some from end of window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = 0;
                    if (wnext < len) {  /* some from start of window */
                      op = wnext;
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;      /* rest from output */
                      from_source = output;
                    }
                  }
                }
                else {                      /* contiguous in window */
                  from += wnext - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }
                if (len) {
                  output[_out++] = from_source[from++];
                  if (len > 1) {
                    output[_out++] = from_source[from++];
                  }
                }
              }
              else {
                from = _out - dist;          /* copy direct from output */
                do {                        /* minimum length is three */
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);
                if (len) {
                  output[_out++] = output[from++];
                  if (len > 1) {
                    output[_out++] = output[from++];
                  }
                }
              }
            }
            else if ((op & 64) === 0) {          /* 2nd level distance code */
              here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
              continue dodist;
            }
            else {
              strm.msg = 'invalid distance code';
              state.mode = BAD$1;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        }
        else if ((op & 64) === 0) {              /* 2nd level length code */
          here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
          continue dolen;
        }
        else if (op & 32) {                     /* end-of-block */
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.mode = TYPE$1;
          break top;
        }
        else {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD$1;
          break top;
        }

        break; // need to emulate goto via "continue"
      }
    } while (_in < last && _out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;

    /* update state and return */
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
    state.hold = hold;
    state.bits = bits;
    return;
  }

  var MAXBITS = 15;
  var ENOUGH_LENS$1 = 852;
  var ENOUGH_DISTS$1 = 592;
  //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

  var CODES$1 = 0;
  var LENS$1 = 1;
  var DISTS$1 = 2;

  var lbase = [ /* Length codes 257..285 base */
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ];

  var lext = [ /* Length codes 257..285 extra */
    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
  ];

  var dbase = [ /* Distance codes 0..29 base */
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
    8193, 12289, 16385, 24577, 0, 0
  ];

  var dext = [ /* Distance codes 0..29 extra */
    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
    28, 28, 29, 29, 64, 64
  ];

  function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
    var bits = opts.bits;
    //here = opts.here; /* table entry for duplication */

    var len = 0; /* a code's length in bits */
    var sym = 0; /* index of code symbols */
    var min = 0,
      max = 0; /* minimum and maximum code lengths */
    var root = 0; /* number of index bits for root table */
    var curr = 0; /* number of index bits for current table */
    var drop = 0; /* code bits to drop for sub-table */
    var left = 0; /* number of prefix codes available */
    var used = 0; /* code entries in table used */
    var huff = 0; /* Huffman code */
    var incr; /* for incrementing code, index */
    var fill; /* index for replicating entries */
    var low; /* low bits for current root entry */
    var mask; /* mask for low root bits */
    var next; /* next available space in table */
    var base = null; /* base value table to use */
    var base_index = 0;
    //  var shoextra;    /* extra bits table to use */
    var end; /* use base and extra for symbol > end */
    var count = new Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
    var offs = new Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
    var extra = null;
    var extra_index = 0;

    var here_bits, here_op, here_val;

    /*
     Process a set of code lengths to create a canonical Huffman code.  The
     code lengths are lens[0..codes-1].  Each length corresponds to the
     symbols 0..codes-1.  The Huffman code is generated by first sorting the
     symbols by length from short to long, and retaining the symbol order
     for codes with equal lengths.  Then the code starts with all zero bits
     for the first code of the shortest length, and the codes are integer
     increments for the same length, and zeros are appended as the length
     increases.  For the deflate format, these bits are stored backwards
     from their more natural integer increment ordering, and so when the
     decoding tables are built in the large loop below, the integer codes
     are incremented backwards.

     This routine assumes, but does not check, that all of the entries in
     lens[] are in the range 0..MAXBITS.  The caller must assure this.
     1..MAXBITS is interpreted as that code length.  zero means that that
     symbol does not occur in this code.

     The codes are sorted by computing a count of codes for each length,
     creating from that a table of starting indices for each length in the
     sorted table, and then entering the symbols in order in the sorted
     table.  The sorted table is work[], with that space being provided by
     the caller.

     The length counts are used for other purposes as well, i.e. finding
     the minimum and maximum length codes, determining if there are any
     codes at all, checking for a valid set of lengths, and looking ahead
     at length counts to determine sub-table sizes when building the
     decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }

    /* bound code lengths, force root to be within code lengths */
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) {
        break;
      }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) { /* no symbols to code at all */
      //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
      //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
      //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;


      //table.op[opts.table_index] = 64;
      //table.bits[opts.table_index] = 1;
      //table.val[opts.table_index++] = 0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;

      opts.bits = 1;
      return 0; /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) {
        break;
      }
    }
    if (root < min) {
      root = min;
    }

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      } /* over-subscribed */
    }
    if (left > 0 && (type === CODES$1 || max !== 1)) {
      return -1; /* incomplete set */
    }

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }

    /*
     Create and fill in decoding tables.  In this loop, the table being
     filled is at next and has curr index bits.  The code being used is huff
     with length len.  That code is converted to an index by dropping drop
     bits off of the bottom.  For codes where len is less than drop + curr,
     those top drop + curr - len bits are incremented through all values to
     fill the table with replicated entries.

     root is the number of index bits for the root table.  When len exceeds
     root, sub-tables are created pointed to by the root entry with an index
     of the low root bits of huff.  This is saved in low to check for when a
     new sub-table should be started.  drop is zero when the root table is
     being filled, and drop is root when sub-tables are being filled.

     When a new sub-table is needed, it is necessary to look ahead in the
     code lengths to determine what size sub-table is needed.  The length
     counts are used for this, and so count[] is decremented as codes are
     entered in the tables.

     used keeps track of how many table entries have been allocated from the
     provided *table space.  It is checked for LENS and DIST tables against
     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
     the initial root table size constants.  See the comments in inftrees.h
     for more information.

     sym increments through all symbols, and the loop terminates when
     all codes of length max, i.e. all codes, have been processed.  This
     routine permits incomplete codes, so another loop after this one fills
     in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === CODES$1) {
      base = extra = work; /* dummy value--not used */
      end = 19;

    } else if (type === LENS$1) {
      base = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;

    } else { /* DISTS */
      base = dbase;
      extra = dext;
      end = -1;
    }

    /* initialize opts for loop */
    huff = 0; /* starting code */
    sym = 0; /* starting code symbol */
    len = min; /* starting code length */
    next = table_index; /* current table to fill in */
    curr = root; /* current table index bits */
    drop = 0; /* current bits to drop from code for index */
    low = -1; /* trigger new sub-table when len > root */
    used = 1 << root; /* use root table entries */
    mask = used - 1; /* mask for comparing low */

    /* check available table space */
    if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
      (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
      return 1;
    }
    /* process all codes and make table entries */
    for (;;) {
      /* create table entry */
      here_bits = len - drop;
      if (work[sym] < end) {
        here_op = 0;
        here_val = work[sym];
      } else if (work[sym] > end) {
        here_op = extra[extra_index + work[sym]];
        here_val = base[base_index + work[sym]];
      } else {
        here_op = 32 + 64; /* end of block */
        here_val = 0;
      }

      /* replicate for those indices with low len bits equal to huff */
      incr = 1 << (len - drop);
      fill = 1 << curr;
      min = fill; /* save offset to next table */
      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;
      } while (fill !== 0);

      /* backwards increment the len-bit code huff */
      incr = 1 << (len - 1);
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }

      /* go to next symbol, update count, len */
      sym++;
      if (--count[len] === 0) {
        if (len === max) {
          break;
        }
        len = lens[lens_index + work[sym]];
      }

      /* create new sub-table if needed */
      if (len > root && (huff & mask) !== low) {
        /* if first time, transition to sub-tables */
        if (drop === 0) {
          drop = root;
        }

        /* increment past last table */
        next += min; /* here min is 1 << curr */

        /* determine length of next table */
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) {
            break;
          }
          curr++;
          left <<= 1;
        }

        /* check for enough space */
        used += 1 << curr;
        if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
          (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
          return 1;
        }

        /* point entry in root table to sub-table */
        low = huff & mask;
        /*table.op[low] = curr;
        table.bits[low] = root;
        table.val[low] = next - opts.table_index;*/
        table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;
      }
    }

    /* fill in remaining table entry if code is incomplete (guaranteed to have
     at most one remaining entry, since if the code is incomplete, the
     maximum code length that was allowed to get this far is one bit) */
    if (huff !== 0) {
      //table.op[next + huff] = 64;            /* invalid code marker */
      //table.bits[next + huff] = len - drop;
      //table.val[next + huff] = 0;
      table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;
    }

    /* set return parameters */
    //opts.table_index += used;
    opts.bits = root;
    return 0;
  }

  var CODES = 0;
  var LENS = 1;
  var DISTS = 2;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  /* Allowed flush values; see deflate() and inflate() below for details */
  //var Z_NO_FLUSH      = 0;
  //var Z_PARTIAL_FLUSH = 1;
  //var Z_SYNC_FLUSH    = 2;
  //var Z_FULL_FLUSH    = 3;
  var Z_FINISH$1 = 4;
  var Z_BLOCK$1 = 5;
  var Z_TREES$1 = 6;


  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */
  var Z_OK$1 = 0;
  var Z_STREAM_END$1 = 1;
  var Z_NEED_DICT$1 = 2;
  //var Z_ERRNO         = -1;
  var Z_STREAM_ERROR$1 = -2;
  var Z_DATA_ERROR$1 = -3;
  var Z_MEM_ERROR = -4;
  var Z_BUF_ERROR$1 = -5;
  //var Z_VERSION_ERROR = -6;

  /* The deflate compression method */
  var Z_DEFLATED$1 = 8;


  /* STATES ====================================================================*/
  /* ===========================================================================*/


  var HEAD = 1; /* i: waiting for magic header */
  var FLAGS = 2; /* i: waiting for method and flags (gzip) */
  var TIME = 3; /* i: waiting for modification time (gzip) */
  var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
  var EXLEN = 5; /* i: waiting for extra length (gzip) */
  var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
  var NAME = 7; /* i: waiting for end of file name (gzip) */
  var COMMENT = 8; /* i: waiting for end of comment (gzip) */
  var HCRC = 9; /* i: waiting for header crc (gzip) */
  var DICTID = 10; /* i: waiting for dictionary check value */
  var DICT = 11; /* waiting for inflateSetDictionary() call */
  var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
  var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
  var STORED = 14; /* i: waiting for stored size (length and complement) */
  var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
  var COPY = 16; /* i/o: waiting for input or output to copy stored block */
  var TABLE = 17; /* i: waiting for dynamic block table lengths */
  var LENLENS = 18; /* i: waiting for code length code lengths */
  var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
  var LEN_ = 20; /* i: same as LEN below, but only first time in */
  var LEN = 21; /* i: waiting for length/lit/eob code */
  var LENEXT = 22; /* i: waiting for length extra bits */
  var DIST = 23; /* i: waiting for distance code */
  var DISTEXT = 24; /* i: waiting for distance extra bits */
  var MATCH = 25; /* o: waiting for output space to copy string */
  var LIT = 26; /* o: waiting for output space to write literal */
  var CHECK = 27; /* i: waiting for 32-bit check value */
  var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
  var DONE = 29; /* finished check, done -- remain here until reset */
  var BAD = 30; /* got a data error -- remain here until reset */
  var MEM = 31; /* got an inflate() memory error -- remain here until reset */
  var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

  /* ===========================================================================*/



  var ENOUGH_LENS = 852;
  var ENOUGH_DISTS = 592;


  function zswap32(q) {
    return (((q >>> 24) & 0xff) +
      ((q >>> 8) & 0xff00) +
      ((q & 0xff00) << 8) +
      ((q & 0xff) << 24));
  }


  function InflateState() {
    this.mode = 0; /* current inflate mode */
    this.last = false; /* true if processing last block */
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
    this.havedict = false; /* true if dictionary provided */
    this.flags = 0; /* gzip header method and flags (0 if zlib) */
    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
    this.check = 0; /* protected copy of check value */
    this.total = 0; /* protected copy of output count */
    // TODO: may be {}
    this.head = null; /* where to save gzip header information */

    /* sliding window */
    this.wbits = 0; /* log base 2 of requested window size */
    this.wsize = 0; /* window size or zero if not using window */
    this.whave = 0; /* valid bytes in the window */
    this.wnext = 0; /* window write index */
    this.window = null; /* allocated sliding window, if needed */

    /* bit accumulator */
    this.hold = 0; /* input bit accumulator */
    this.bits = 0; /* number of bits in "in" */

    /* for string and stored block copying */
    this.length = 0; /* literal or length of data to copy */
    this.offset = 0; /* distance back to copy string from */

    /* for table and code decoding */
    this.extra = 0; /* extra bits needed */

    /* fixed and dynamic code tables */
    this.lencode = null; /* starting table for length/literal codes */
    this.distcode = null; /* starting table for distance codes */
    this.lenbits = 0; /* index bits for lencode */
    this.distbits = 0; /* index bits for distcode */

    /* dynamic table building */
    this.ncode = 0; /* number of code length code lengths */
    this.nlen = 0; /* number of length code lengths */
    this.ndist = 0; /* number of distance code lengths */
    this.have = 0; /* number of code lengths in lens[] */
    this.next = null; /* next available space in codes[] */

    this.lens = new Buf16(320); /* temporary storage for code lengths */
    this.work = new Buf16(288); /* work area for code table building */

    /*
     because we don't have pointers in js, we use lencode and distcode directly
     as buffers so we don't need codes
    */
    //this.codes = new Buf32(ENOUGH);       /* space for code tables */
    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
    this.distdyn = null; /* dynamic table for distance codes (JS specific) */
    this.sane = 0; /* if false, allow invalid distance too far */
    this.back = 0; /* bits back of last unprocessed length/lit */
    this.was = 0; /* initial length of match */
  }

  function inflateResetKeep(strm) {
    var state;

    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$1;
    }
    state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ''; /*Z_NULL*/
    if (state.wrap) { /* to support ill-conceived Java test suite */
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.dmax = 32768;
    state.head = null /*Z_NULL*/ ;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new Buf32(ENOUGH_LENS);
    state.distcode = state.distdyn = new Buf32(ENOUGH_DISTS);

    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return Z_OK$1;
  }

  function inflateReset(strm) {
    var state;

    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$1;
    }
    state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);

  }

  function inflateReset2(strm, windowBits) {
    var wrap;
    var state;

    /* get the state */
    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$1;
    }
    state = strm.state;

    /* extract wrap request from windowBits parameter */
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    } else {
      wrap = (windowBits >> 4) + 1;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }

    /* set number of window bits, free window if different */
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR$1;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }

    /* update state and reset the rest of it */
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  }

  function inflateInit2(strm, windowBits) {
    var ret;
    var state;

    if (!strm) {
      return Z_STREAM_ERROR$1;
    }
    //strm.msg = Z_NULL;                 /* in case we return an error */

    state = new InflateState();

    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.window = null /*Z_NULL*/ ;
    ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK$1) {
      strm.state = null /*Z_NULL*/ ;
    }
    return ret;
  }


  /*
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
   */
  var virgin = true;

  var lenfix, distfix; // We have no pointers in JS, so keep tables separate

  function fixedtables(state) {
    /* build fixed huffman tables if first call (may not be thread safe) */
    if (virgin) {
      var sym;

      lenfix = new Buf32(512);
      distfix = new Buf32(32);

      /* literal/length table */
      sym = 0;
      while (sym < 144) {
        state.lens[sym++] = 8;
      }
      while (sym < 256) {
        state.lens[sym++] = 9;
      }
      while (sym < 280) {
        state.lens[sym++] = 7;
      }
      while (sym < 288) {
        state.lens[sym++] = 8;
      }

      inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
        bits: 9
      });

      /* distance table */
      sym = 0;
      while (sym < 32) {
        state.lens[sym++] = 5;
      }

      inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
        bits: 5
      });

      /* do this just once */
      virgin = false;
    }

    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  }


  /*
   Update the window with the last wsize (normally 32K) bytes written before
   returning.  If window does not exist yet, create it.  This is only called
   when a window is already in use, or when output has been written during this
   inflate call, but the end of the deflate stream has not been reached yet.
   It is also called to create a window for dictionary data when a dictionary
   is loaded.

   Providing output buffers larger than 32K to inflate() should provide a speed
   advantage, since only the last 32K of output is copied to the sliding window
   upon return from inflate(), and since all distances after the first 32K of
   output will fall in the output data, making match copies simpler and faster.
   The advantage may be dependent on the size of the processor's data caches.
   */
  function updatewindow(strm, src, end, copy) {
    var dist;
    var state = strm.state;

    /* if it hasn't been done already, allocate space for the window */
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;

      state.window = new Buf8(state.wsize);
    }

    /* copy state->wsize or less output bytes into the circular window */
    if (copy >= state.wsize) {
      arraySet(state.window, src, end - state.wsize, state.wsize, 0);
      state.wnext = 0;
      state.whave = state.wsize;
    } else {
      dist = state.wsize - state.wnext;
      if (dist > copy) {
        dist = copy;
      }
      //zmemcpy(state->window + state->wnext, end - copy, dist);
      arraySet(state.window, src, end - copy, dist, state.wnext);
      copy -= dist;
      if (copy) {
        //zmemcpy(state->window, end - copy, copy);
        arraySet(state.window, src, end - copy, copy, 0);
        state.wnext = copy;
        state.whave = state.wsize;
      } else {
        state.wnext += dist;
        if (state.wnext === state.wsize) {
          state.wnext = 0;
        }
        if (state.whave < state.wsize) {
          state.whave += dist;
        }
      }
    }
    return 0;
  }

  function inflate$1(strm, flush) {
    var state;
    var input, output; // input/output buffers
    var next; /* next input INDEX */
    var put; /* next output INDEX */
    var have, left; /* available input and output */
    var hold; /* bit buffer */
    var bits; /* bits in bit buffer */
    var _in, _out; /* save starting available input and output */
    var copy; /* number of stored or match bytes to copy */
    var from; /* where to copy match bytes from */
    var from_source;
    var here = 0; /* current decoding table entry */
    var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //var last;                   /* parent table entry */
    var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    var len; /* length to copy for repeats, bits to drop */
    var ret; /* return code */
    var hbuf = new Buf8(4); /* buffer for gzip header crc calculation */
    var opts;

    var n; // temporary var for NEED_BITS

    var order = /* permutation of code lengths */ [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


    if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
      return Z_STREAM_ERROR$1;
    }

    state = strm.state;
    if (state.mode === TYPE) {
      state.mode = TYPEDO;
    } /* skip check */


    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---

    _in = have;
    _out = left;
    ret = Z_OK$1;

    inf_leave: // goto emulation
      for (;;) {
        switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          //=== NEEDBITS(16);
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 2) && hold === 0x8b1f) { /* gzip header */
            state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//

            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = FLAGS;
            break;
          }
          state.flags = 0; /* expect zlib header */
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) || /* check if zlib header allowed */
            (((hold & 0xff) /*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
            strm.msg = 'incorrect header check';
            state.mode = BAD;
            break;
          }
          if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED$1) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
          len = (hold & 0x0f) /*BITS(4)*/ + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          } else if (len > state.wbits) {
            strm.msg = 'invalid window size';
            state.mode = BAD;
            break;
          }
          state.dmax = 1 << len;
          //Tracev((stderr, "inflate:   zlib header ok\n"));
          strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
          state.mode = hold & 0x200 ? DICTID : TYPE;
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          break;
        case FLAGS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.flags = hold;
          if ((state.flags & 0xff) !== Z_DEFLATED$1) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          if (state.flags & 0xe000) {
            strm.msg = 'unknown header flags set';
            state.mode = BAD;
            break;
          }
          if (state.head) {
            state.head.text = ((hold >> 8) & 1);
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = TIME;
          /* falls through */
        case TIME:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC4(state.check, hold)
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            hbuf[2] = (hold >>> 16) & 0xff;
            hbuf[3] = (hold >>> 24) & 0xff;
            state.check = crc32(state.check, hbuf, 4, 0);
            //===
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = OS;
          /* falls through */
        case OS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.xflags = (hold & 0xff);
            state.head.os = (hold >> 8);
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = EXLEN;
          /* falls through */
        case EXLEN:
          if (state.flags & 0x0400) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          } else if (state.head) {
            state.head.extra = null /*Z_NULL*/ ;
          }
          state.mode = EXTRA;
          /* falls through */
        case EXTRA:
          if (state.flags & 0x0400) {
            copy = state.length;
            if (copy > have) {
              copy = have;
            }
            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  // Use untyped array for more conveniend processing later
                  state.head.extra = new Array(state.head.extra_len);
                }
                arraySet(
                  state.head.extra,
                  input,
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  copy,
                  /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                  len
                );
                //zmemcpy(state.head.extra + len, next,
                //        len + copy > state.head.extra_max ?
                //        state.head.extra_max - len : copy);
              }
              if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state.length -= copy;
            }
            if (state.length) {
              break inf_leave;
            }
          }
          state.length = 0;
          state.mode = NAME;
          /* falls through */
        case NAME:
          if (state.flags & 0x0800) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              // TODO: 2 or 1 bytes?
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/ )) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);

            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
          /* falls through */
        case COMMENT:
          if (state.flags & 0x1000) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/ )) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
          /* falls through */
        case HCRC:
          if (state.flags & 0x0200) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (hold !== (state.check & 0xffff)) {
              strm.msg = 'header crc mismatch';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          }
          if (state.head) {
            state.head.hcrc = ((state.flags >> 9) & 1);
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE;
          break;
        case DICTID:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          strm.adler = state.check = zswap32(hold);
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = DICT;
          /* falls through */
        case DICT:
          if (state.havedict === 0) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            return Z_NEED_DICT$1;
          }
          strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
          state.mode = TYPE;
          /* falls through */
        case TYPE:
          if (flush === Z_BLOCK$1 || flush === Z_TREES$1) {
            break inf_leave;
          }
          /* falls through */
        case TYPEDO:
          if (state.last) {
            //--- BYTEBITS() ---//
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            state.mode = CHECK;
            break;
          }
          //=== NEEDBITS(3); */
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.last = (hold & 0x01) /*BITS(1)*/ ;
          //--- DROPBITS(1) ---//
          hold >>>= 1;
          bits -= 1;
          //---//

          switch ((hold & 0x03) /*BITS(2)*/ ) {
          case 0:
            /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:
            /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_; /* decode codes */
            if (flush === Z_TREES$1) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:
            /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
          }
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break;
        case STORED:
          //--- BYTEBITS() ---// /* go to byte boundary */
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
            strm.msg = 'invalid stored block lengths';
            state.mode = BAD;
            break;
          }
          state.length = hold & 0xffff;
          //Tracev((stderr, "inflate:       stored length %u\n",
          //        state.length));
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = COPY_;
          if (flush === Z_TREES$1) {
            break inf_leave;
          }
          /* falls through */
        case COPY_:
          state.mode = COPY;
          /* falls through */
        case COPY:
          copy = state.length;
          if (copy) {
            if (copy > have) {
              copy = have;
            }
            if (copy > left) {
              copy = left;
            }
            if (copy === 0) {
              break inf_leave;
            }
            //--- zmemcpy(put, next, copy); ---
            arraySet(output, input, next, copy, put);
            //---//
            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          }
          //Tracev((stderr, "inflate:       stored end\n"));
          state.mode = TYPE;
          break;
        case TABLE:
          //=== NEEDBITS(14); */
          while (bits < 14) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
          //#ifndef PKZIP_BUG_WORKAROUND
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = 'too many length or distance symbols';
            state.mode = BAD;
            break;
          }
          //#endif
          //Tracev((stderr, "inflate:       table sizes ok\n"));
          state.have = 0;
          state.mode = LENLENS;
          /* falls through */
        case LENLENS:
          while (state.have < state.ncode) {
            //=== NEEDBITS(3);
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.lens[order[state.have++]] = (hold & 0x07); //BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          // We have separate tables & no pointers. 2 commented lines below not needed.
          //state.next = state.codes;
          //state.lencode = state.next;
          // Switch to use dynamic table
          state.lencode = state.lendyn;
          state.lenbits = 7;

          opts = {
            bits: state.lenbits
          };
          ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;

          if (ret) {
            strm.msg = 'invalid code lengths set';
            state.mode = BAD;
            break;
          }
          //Tracev((stderr, "inflate:       code lengths ok\n"));
          state.have = 0;
          state.mode = CODELENS;
          /* falls through */
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((here_bits) <= bits) {
                break;
              }
              //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_val < 16) {
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              state.lens[state.have++] = here_val;
            } else {
              if (here_val === 16) {
                //=== NEEDBITS(here.bits + 2);
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                if (state.have === 0) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                len = state.lens[state.have - 1];
                copy = 3 + (hold & 0x03); //BITS(2);
                //--- DROPBITS(2) ---//
                hold >>>= 2;
                bits -= 2;
                //---//
              } else if (here_val === 17) {
                //=== NEEDBITS(here.bits + 3);
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 3 + (hold & 0x07); //BITS(3);
                //--- DROPBITS(3) ---//
                hold >>>= 3;
                bits -= 3;
                //---//
              } else {
                //=== NEEDBITS(here.bits + 7);
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 11 + (hold & 0x7f); //BITS(7);
                //--- DROPBITS(7) ---//
                hold >>>= 7;
                bits -= 7;
                //---//
              }
              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }

          /* handle error breaks in while */
          if (state.mode === BAD) {
            break;
          }

          /* check for end-of-block code (better have one) */
          if (state.lens[256] === 0) {
            strm.msg = 'invalid code -- missing end-of-block';
            state.mode = BAD;
            break;
          }

          /* build code tables -- note: do not change the lenbits or distbits
             values here (9 and 6) without reading the comments in inftrees.h
             concerning the ENOUGH constants, which depend on those values */
          state.lenbits = 9;

          opts = {
            bits: state.lenbits
          };
          ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.lenbits = opts.bits;
          // state.lencode = state.next;

          if (ret) {
            strm.msg = 'invalid literal/lengths set';
            state.mode = BAD;
            break;
          }

          state.distbits = 6;
          //state.distcode.copy(state.codes);
          // Switch to use dynamic table
          state.distcode = state.distdyn;
          opts = {
            bits: state.distbits
          };
          ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.distbits = opts.bits;
          // state.distcode = state.next;

          if (ret) {
            strm.msg = 'invalid distances set';
            state.mode = BAD;
            break;
          }
          //Tracev((stderr, 'inflate:       codes ok\n'));
          state.mode = LEN_;
          if (flush === Z_TREES$1) {
            break inf_leave;
          }
          /* falls through */
        case LEN_:
          state.mode = LEN;
          /* falls through */
        case LEN:
          if (have >= 6 && left >= 258) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            inflate_fast(strm, _out);
            //--- LOAD() ---
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            //---

            if (state.mode === TYPE) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if (here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_op && (here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.lencode[last_val +
                ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((last_bits + here_bits) <= bits) {
                break;
              }
              //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.back = -1;
            state.mode = TYPE;
            break;
          }
          if (here_op & 64) {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
          /* falls through */
        case LENEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
          //Tracevv((stderr, "inflate:         length %u\n", state.length));
          state.was = state.length;
          state.mode = DIST;
          /* falls through */
        case DIST:
          for (;;) {
            here = state.distcode[hold & ((1 << state.distbits) - 1)]; /*BITS(state.distbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if ((here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.distcode[last_val +
                ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((last_bits + here_bits) <= bits) {
                break;
              }
              //--- PULLBYTE() ---//
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break;
          }
          state.offset = here_val;
          state.extra = (here_op) & 15;
          state.mode = DISTEXT;
          /* falls through */
        case DISTEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.offset += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
          //#ifdef INFLATE_STRICT
          if (state.offset > state.dmax) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
          //#endif
          //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
          state.mode = MATCH;
          /* falls through */
        case MATCH:
          if (left === 0) {
            break inf_leave;
          }
          copy = _out - left;
          if (state.offset > copy) { /* copy from window */
            copy = state.offset - copy;
            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
              }
              // (!) This block is disabled in zlib defailts,
              // don't enable it for binary compatibility
              //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
              //          Trace((stderr, "inflate.c too far\n"));
              //          copy -= state.whave;
              //          if (copy > state.length) { copy = state.length; }
              //          if (copy > left) { copy = left; }
              //          left -= copy;
              //          state.length -= copy;
              //          do {
              //            output[put++] = 0;
              //          } while (--copy);
              //          if (state.length === 0) { state.mode = LEN; }
              //          break;
              //#endif
            }
            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            } else {
              from = state.wnext - copy;
            }
            if (copy > state.length) {
              copy = state.length;
            }
            from_source = state.window;
          } else { /* copy from output */
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }
          if (copy > left) {
            copy = left;
          }
          left -= copy;
          state.length -= copy;
          do {
            output[put++] = from_source[from++];
          } while (--copy);
          if (state.length === 0) {
            state.mode = LEN;
          }
          break;
        case LIT:
          if (left === 0) {
            break inf_leave;
          }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              // Use '|' insdead of '+' to make sure that result is signed
              hold |= input[next++] << bits;
              bits += 8;
            }
            //===//
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (_out) {
              strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

            }
            _out = left;
            // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
            if ((state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = 'incorrect data check';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   check matches trailer\n"));
          }
          state.mode = LENGTH;
          /* falls through */
        case LENGTH:
          if (state.wrap && state.flags) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (hold !== (state.total & 0xffffffff)) {
              strm.msg = 'incorrect length check';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   length matches trailer\n"));
          }
          state.mode = DONE;
          /* falls through */
        case DONE:
          ret = Z_STREAM_END$1;
          break inf_leave;
        case BAD:
          ret = Z_DATA_ERROR$1;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR;
        case SYNC:
          /* falls through */
        default:
          return Z_STREAM_ERROR$1;
        }
      }

    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

    /*
       Return from inflate(), updating the total counts and the check value.
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */

    //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---

    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
        (state.mode < CHECK || flush !== Z_FINISH$1))) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap && _out) {
      strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
        (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) +
      (state.mode === TYPE ? 128 : 0) +
      (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
      ret = Z_BUF_ERROR$1;
    }
    return ret;
  }

  function inflateEnd(strm) {

    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/ ) {
      return Z_STREAM_ERROR$1;
    }

    var state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK$1;
  }

  /* Not implemented
  exports.inflateCopy = inflateCopy;
  exports.inflateGetDictionary = inflateGetDictionary;
  exports.inflateMark = inflateMark;
  exports.inflatePrime = inflatePrime;
  exports.inflateSync = inflateSync;
  exports.inflateSyncPoint = inflateSyncPoint;
  exports.inflateUndermine = inflateUndermine;
  */

  // import constants from './constants';


  // zlib modes
  var NONE = 0;
  var DEFLATE = 1;
  var INFLATE = 2;
  var GZIP = 3;
  var GUNZIP = 4;
  var DEFLATERAW = 5;
  var INFLATERAW = 6;
  var UNZIP = 7;
  var Z_NO_FLUSH=         0,
    Z_PARTIAL_FLUSH=    1,
    Z_SYNC_FLUSH=    2,
    Z_FULL_FLUSH=       3,
    Z_FINISH=       4,
    Z_BLOCK=           5,
    Z_TREES=            6,

    /* Return codes for the compression/decompression functions. Negative values
    * are errors, positive values are used for special but normal events.
    */
    Z_OK=               0,
    Z_STREAM_END=       1,
    Z_NEED_DICT=      2,
    Z_ERRNO=       -1,
    Z_STREAM_ERROR=   -2,
    Z_DATA_ERROR=    -3,
    //Z_MEM_ERROR:     -4,
    Z_BUF_ERROR=    -5,
    //Z_VERSION_ERROR: -6,

    /* compression levels */
    Z_NO_COMPRESSION=         0,
    Z_BEST_SPEED=             1,
    Z_BEST_COMPRESSION=       9,
    Z_DEFAULT_COMPRESSION=   -1,


    Z_FILTERED=               1,
    Z_HUFFMAN_ONLY=           2,
    Z_RLE=                    3,
    Z_FIXED=                  4,
    Z_DEFAULT_STRATEGY=       0,

    /* Possible values of the data_type field (though see inflate()) */
    Z_BINARY=                 0,
    Z_TEXT=                   1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN=                2,

    /* The deflate compression method */
    Z_DEFLATED=               8;
  function Zlib$1(mode) {
    if (mode < DEFLATE || mode > UNZIP)
      throw new TypeError('Bad argument');

    this.mode = mode;
    this.init_done = false;
    this.write_in_progress = false;
    this.pending_close = false;
    this.windowBits = 0;
    this.level = 0;
    this.memLevel = 0;
    this.strategy = 0;
    this.dictionary = null;
  }

  Zlib$1.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
    this.windowBits = windowBits;
    this.level = level;
    this.memLevel = memLevel;
    this.strategy = strategy;
    // dictionary not supported.

    if (this.mode === GZIP || this.mode === GUNZIP)
      this.windowBits += 16;

    if (this.mode === UNZIP)
      this.windowBits += 32;

    if (this.mode === DEFLATERAW || this.mode === INFLATERAW)
      this.windowBits = -this.windowBits;

    this.strm = new ZStream();
    var status;
    switch (this.mode) {
    case DEFLATE:
    case GZIP:
    case DEFLATERAW:
      status = deflateInit2(
        this.strm,
        this.level,
        Z_DEFLATED,
        this.windowBits,
        this.memLevel,
        this.strategy
      );
      break;
    case INFLATE:
    case GUNZIP:
    case INFLATERAW:
    case UNZIP:
      status  = inflateInit2(
        this.strm,
        this.windowBits
      );
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
    }

    if (status !== Z_OK) {
      this._error(status);
      return;
    }

    this.write_in_progress = false;
    this.init_done = true;
  };

  Zlib$1.prototype.params = function() {
    throw new Error('deflateParams Not supported');
  };

  Zlib$1.prototype._writeCheck = function() {
    if (!this.init_done)
      throw new Error('write before init');

    if (this.mode === NONE)
      throw new Error('already finalized');

    if (this.write_in_progress)
      throw new Error('write already in progress');

    if (this.pending_close)
      throw new Error('close is pending');
  };

  Zlib$1.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
    this._writeCheck();
    this.write_in_progress = true;

    var self = this;
    browser$1.nextTick(function() {
      self.write_in_progress = false;
      var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
      self.callback(res[0], res[1]);

      if (self.pending_close)
        self.close();
    });

    return this;
  };

  // set method for Node buffers, used by pako
  function bufferSet(data, offset) {
    for (var i = 0; i < data.length; i++) {
      this[offset + i] = data[i];
    }
  }

  Zlib$1.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
    this._writeCheck();
    return this._write(flush, input, in_off, in_len, out, out_off, out_len);
  };

  Zlib$1.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
    this.write_in_progress = true;

    if (flush !== Z_NO_FLUSH &&
        flush !== Z_PARTIAL_FLUSH &&
        flush !== Z_SYNC_FLUSH &&
        flush !== Z_FULL_FLUSH &&
        flush !== Z_FINISH &&
        flush !== Z_BLOCK) {
      throw new Error('Invalid flush value');
    }

    if (input == null) {
      input = new Buffer$9(0);
      in_len = 0;
      in_off = 0;
    }

    if (out._set)
      out.set = out._set;
    else
      out.set = bufferSet;

    var strm = this.strm;
    strm.avail_in = in_len;
    strm.input = input;
    strm.next_in = in_off;
    strm.avail_out = out_len;
    strm.output = out;
    strm.next_out = out_off;
    var status;
    switch (this.mode) {
    case DEFLATE:
    case GZIP:
    case DEFLATERAW:
      status = deflate$1(strm, flush);
      break;
    case UNZIP:
    case INFLATE:
    case GUNZIP:
    case INFLATERAW:
      status = inflate$1(strm, flush);
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
    }

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this._error(status);
    }

    this.write_in_progress = false;
    return [strm.avail_in, strm.avail_out];
  };

  Zlib$1.prototype.close = function() {
    if (this.write_in_progress) {
      this.pending_close = true;
      return;
    }

    this.pending_close = false;

    if (this.mode === DEFLATE || this.mode === GZIP || this.mode === DEFLATERAW) {
      deflateEnd(this.strm);
    } else {
      inflateEnd(this.strm);
    }

    this.mode = NONE;
  };
  var status;
  Zlib$1.prototype.reset = function() {
    switch (this.mode) {
    case DEFLATE:
    case DEFLATERAW:
      status = deflateReset(this.strm);
      break;
    case INFLATE:
    case INFLATERAW:
      status = inflateReset(this.strm);
      break;
    }

    if (status !== Z_OK) {
      this._error(status);
    }
  };

  Zlib$1.prototype._error = function(status) {
    this.onerror(msg$1[status] + ': ' + this.strm.msg, status);

    this.write_in_progress = false;
    if (this.pending_close)
      this.close();
  };

  var _binding = /*#__PURE__*/Object.freeze({
    __proto__: null,
    NONE: NONE,
    DEFLATE: DEFLATE,
    INFLATE: INFLATE,
    GZIP: GZIP,
    GUNZIP: GUNZIP,
    DEFLATERAW: DEFLATERAW,
    INFLATERAW: INFLATERAW,
    UNZIP: UNZIP,
    Z_NO_FLUSH: Z_NO_FLUSH,
    Z_PARTIAL_FLUSH: Z_PARTIAL_FLUSH,
    Z_SYNC_FLUSH: Z_SYNC_FLUSH,
    Z_FULL_FLUSH: Z_FULL_FLUSH,
    Z_FINISH: Z_FINISH,
    Z_BLOCK: Z_BLOCK,
    Z_TREES: Z_TREES,
    Z_OK: Z_OK,
    Z_STREAM_END: Z_STREAM_END,
    Z_NEED_DICT: Z_NEED_DICT,
    Z_ERRNO: Z_ERRNO,
    Z_STREAM_ERROR: Z_STREAM_ERROR,
    Z_DATA_ERROR: Z_DATA_ERROR,
    Z_BUF_ERROR: Z_BUF_ERROR,
    Z_NO_COMPRESSION: Z_NO_COMPRESSION,
    Z_BEST_SPEED: Z_BEST_SPEED,
    Z_BEST_COMPRESSION: Z_BEST_COMPRESSION,
    Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION,
    Z_FILTERED: Z_FILTERED,
    Z_HUFFMAN_ONLY: Z_HUFFMAN_ONLY,
    Z_RLE: Z_RLE,
    Z_FIXED: Z_FIXED,
    Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY,
    Z_BINARY: Z_BINARY,
    Z_TEXT: Z_TEXT,
    Z_UNKNOWN: Z_UNKNOWN,
    Z_DEFLATED: Z_DEFLATED,
    Zlib: Zlib$1
  });

  function assert (a, msg) {
    if (!a) {
      throw new Error(msg);
    }
  }
  var binding = {};
  Object.keys(_binding).forEach(function (key) {
    binding[key] = _binding[key];
  });
  // zlib doesn't provide these, so kludge them in following the same
  // const naming scheme zlib uses.
  binding.Z_MIN_WINDOWBITS = 8;
  binding.Z_MAX_WINDOWBITS = 15;
  binding.Z_DEFAULT_WINDOWBITS = 15;

  // fewer than 64 bytes per chunk is stupid.
  // technically it could work with as few as 8, but even 64 bytes
  // is absurdly low.  Usually a MB or more is best.
  binding.Z_MIN_CHUNK = 64;
  binding.Z_MAX_CHUNK = Infinity;
  binding.Z_DEFAULT_CHUNK = (16 * 1024);

  binding.Z_MIN_MEMLEVEL = 1;
  binding.Z_MAX_MEMLEVEL = 9;
  binding.Z_DEFAULT_MEMLEVEL = 8;

  binding.Z_MIN_LEVEL = -1;
  binding.Z_MAX_LEVEL = 9;
  binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;


  // translation table for return codes.
  var codes = {
    Z_OK: binding.Z_OK,
    Z_STREAM_END: binding.Z_STREAM_END,
    Z_NEED_DICT: binding.Z_NEED_DICT,
    Z_ERRNO: binding.Z_ERRNO,
    Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
    Z_DATA_ERROR: binding.Z_DATA_ERROR,
    Z_MEM_ERROR: binding.Z_MEM_ERROR,
    Z_BUF_ERROR: binding.Z_BUF_ERROR,
    Z_VERSION_ERROR: binding.Z_VERSION_ERROR
  };

  Object.keys(codes).forEach(function(k) {
    codes[codes[k]] = k;
  });

  function createDeflate(o) {
    return new Deflate(o);
  }

  function createInflate(o) {
    return new Inflate(o);
  }

  function createDeflateRaw(o) {
    return new DeflateRaw(o);
  }

  function createInflateRaw(o) {
    return new InflateRaw(o);
  }

  function createGzip(o) {
    return new Gzip(o);
  }

  function createGunzip(o) {
    return new Gunzip(o);
  }

  function createUnzip(o) {
    return new Unzip(o);
  }


  // Convenience methods.
  // compress/decompress a string or buffer in one step.
  function deflate(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Deflate(opts), buffer, callback);
  }

  function deflateSync(buffer, opts) {
    return zlibBufferSync(new Deflate(opts), buffer);
  }

  function gzip(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gzip(opts), buffer, callback);
  }

  function gzipSync(buffer, opts) {
    return zlibBufferSync(new Gzip(opts), buffer);
  }

  function deflateRaw(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new DeflateRaw(opts), buffer, callback);
  }

  function deflateRawSync(buffer, opts) {
    return zlibBufferSync(new DeflateRaw(opts), buffer);
  }

  function unzip(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Unzip(opts), buffer, callback);
  }

  function unzipSync(buffer, opts) {
    return zlibBufferSync(new Unzip(opts), buffer);
  }

  function inflate(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Inflate(opts), buffer, callback);
  }

  function inflateSync(buffer, opts) {
    return zlibBufferSync(new Inflate(opts), buffer);
  }

  function gunzip(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new Gunzip(opts), buffer, callback);
  }

  function gunzipSync(buffer, opts) {
    return zlibBufferSync(new Gunzip(opts), buffer);
  }

  function inflateRaw(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    return zlibBuffer(new InflateRaw(opts), buffer, callback);
  }

  function inflateRawSync(buffer, opts) {
    return zlibBufferSync(new InflateRaw(opts), buffer);
  }

  function zlibBuffer(engine, buffer, callback) {
    var buffers = [];
    var nread = 0;

    engine.on('error', onError);
    engine.on('end', onEnd);

    engine.end(buffer);
    flow();

    function flow() {
      var chunk;
      while (null !== (chunk = engine.read())) {
        buffers.push(chunk);
        nread += chunk.length;
      }
      engine.once('readable', flow);
    }

    function onError(err) {
      engine.removeListener('end', onEnd);
      engine.removeListener('readable', flow);
      callback(err);
    }

    function onEnd() {
      var buf = Buffer$9.concat(buffers, nread);
      buffers = [];
      callback(null, buf);
      engine.close();
    }
  }

  function zlibBufferSync(engine, buffer) {
    if (typeof buffer === 'string')
      buffer = new Buffer$9(buffer);
    if (!Buffer$9.isBuffer(buffer))
      throw new TypeError('Not a string or buffer');

    var flushFlag = binding.Z_FINISH;

    return engine._processChunk(buffer, flushFlag);
  }

  // generic zlib
  // minimal 2-byte header
  function Deflate(opts) {
    if (!(this instanceof Deflate)) return new Deflate(opts);
    Zlib.call(this, opts, binding.DEFLATE);
  }

  function Inflate(opts) {
    if (!(this instanceof Inflate)) return new Inflate(opts);
    Zlib.call(this, opts, binding.INFLATE);
  }



  // gzip - bigger header, same deflate compression
  function Gzip(opts) {
    if (!(this instanceof Gzip)) return new Gzip(opts);
    Zlib.call(this, opts, binding.GZIP);
  }

  function Gunzip(opts) {
    if (!(this instanceof Gunzip)) return new Gunzip(opts);
    Zlib.call(this, opts, binding.GUNZIP);
  }



  // raw - no header
  function DeflateRaw(opts) {
    if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
    Zlib.call(this, opts, binding.DEFLATERAW);
  }

  function InflateRaw(opts) {
    if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
    Zlib.call(this, opts, binding.INFLATERAW);
  }


  // auto-detect header.
  function Unzip(opts) {
    if (!(this instanceof Unzip)) return new Unzip(opts);
    Zlib.call(this, opts, binding.UNZIP);
  }


  // the Zlib class they all inherit from
  // This thing manages the queue of requests, and returns
  // true or false if there is anything in the queue when
  // you call the .write() method.

  function Zlib(opts, mode) {
    this._opts = opts = opts || {};
    this._chunkSize = opts.chunkSize || binding.Z_DEFAULT_CHUNK;

    Transform$1.call(this, opts);

    if (opts.flush) {
      if (opts.flush !== binding.Z_NO_FLUSH &&
          opts.flush !== binding.Z_PARTIAL_FLUSH &&
          opts.flush !== binding.Z_SYNC_FLUSH &&
          opts.flush !== binding.Z_FULL_FLUSH &&
          opts.flush !== binding.Z_FINISH &&
          opts.flush !== binding.Z_BLOCK) {
        throw new Error('Invalid flush flag: ' + opts.flush);
      }
    }
    this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

    if (opts.chunkSize) {
      if (opts.chunkSize < binding.Z_MIN_CHUNK ||
          opts.chunkSize > binding.Z_MAX_CHUNK) {
        throw new Error('Invalid chunk size: ' + opts.chunkSize);
      }
    }

    if (opts.windowBits) {
      if (opts.windowBits < binding.Z_MIN_WINDOWBITS ||
          opts.windowBits > binding.Z_MAX_WINDOWBITS) {
        throw new Error('Invalid windowBits: ' + opts.windowBits);
      }
    }

    if (opts.level) {
      if (opts.level < binding.Z_MIN_LEVEL ||
          opts.level > binding.Z_MAX_LEVEL) {
        throw new Error('Invalid compression level: ' + opts.level);
      }
    }

    if (opts.memLevel) {
      if (opts.memLevel < binding.Z_MIN_MEMLEVEL ||
          opts.memLevel > binding.Z_MAX_MEMLEVEL) {
        throw new Error('Invalid memLevel: ' + opts.memLevel);
      }
    }

    if (opts.strategy) {
      if (opts.strategy != binding.Z_FILTERED &&
          opts.strategy != binding.Z_HUFFMAN_ONLY &&
          opts.strategy != binding.Z_RLE &&
          opts.strategy != binding.Z_FIXED &&
          opts.strategy != binding.Z_DEFAULT_STRATEGY) {
        throw new Error('Invalid strategy: ' + opts.strategy);
      }
    }

    if (opts.dictionary) {
      if (!Buffer$9.isBuffer(opts.dictionary)) {
        throw new Error('Invalid dictionary: it should be a Buffer instance');
      }
    }

    this._binding = new binding.Zlib(mode);

    var self = this;
    this._hadError = false;
    this._binding.onerror = function(message, errno) {
      // there is no way to cleanly recover.
      // continuing only obscures problems.
      self._binding = null;
      self._hadError = true;

      var error = new Error(message);
      error.errno = errno;
      error.code = binding.codes[errno];
      self.emit('error', error);
    };

    var level = binding.Z_DEFAULT_COMPRESSION;
    if (typeof opts.level === 'number') level = opts.level;

    var strategy = binding.Z_DEFAULT_STRATEGY;
    if (typeof opts.strategy === 'number') strategy = opts.strategy;

    this._binding.init(opts.windowBits || binding.Z_DEFAULT_WINDOWBITS,
                       level,
                       opts.memLevel || binding.Z_DEFAULT_MEMLEVEL,
                       strategy,
                       opts.dictionary);

    this._buffer = new Buffer$9(this._chunkSize);
    this._offset = 0;
    this._closed = false;
    this._level = level;
    this._strategy = strategy;

    this.once('end', this.close);
  }

  inherits$8(Zlib, Transform$1);

  Zlib.prototype.params = function(level, strategy, callback) {
    if (level < binding.Z_MIN_LEVEL ||
        level > binding.Z_MAX_LEVEL) {
      throw new RangeError('Invalid compression level: ' + level);
    }
    if (strategy != binding.Z_FILTERED &&
        strategy != binding.Z_HUFFMAN_ONLY &&
        strategy != binding.Z_RLE &&
        strategy != binding.Z_FIXED &&
        strategy != binding.Z_DEFAULT_STRATEGY) {
      throw new TypeError('Invalid strategy: ' + strategy);
    }

    if (this._level !== level || this._strategy !== strategy) {
      var self = this;
      this.flush(binding.Z_SYNC_FLUSH, function() {
        self._binding.params(level, strategy);
        if (!self._hadError) {
          self._level = level;
          self._strategy = strategy;
          if (callback) callback();
        }
      });
    } else {
      browser$1.nextTick(callback);
    }
  };

  Zlib.prototype.reset = function() {
    return this._binding.reset();
  };

  // This is the _flush function called by the transform class,
  // internally, when the last chunk has been written.
  Zlib.prototype._flush = function(callback) {
    this._transform(new Buffer$9(0), '', callback);
  };

  Zlib.prototype.flush = function(kind, callback) {
    var ws = this._writableState;

    if (typeof kind === 'function' || (kind === void 0 && !callback)) {
      callback = kind;
      kind = binding.Z_FULL_FLUSH;
    }

    if (ws.ended) {
      if (callback)
        browser$1.nextTick(callback);
    } else if (ws.ending) {
      if (callback)
        this.once('end', callback);
    } else if (ws.needDrain) {
      var self = this;
      this.once('drain', function() {
        self.flush(callback);
      });
    } else {
      this._flushFlag = kind;
      this.write(new Buffer$9(0), '', callback);
    }
  };

  Zlib.prototype.close = function(callback) {
    if (callback)
      browser$1.nextTick(callback);

    if (this._closed)
      return;

    this._closed = true;

    this._binding.close();

    var self = this;
    browser$1.nextTick(function() {
      self.emit('close');
    });
  };

  Zlib.prototype._transform = function(chunk, encoding, cb) {
    var flushFlag;
    var ws = this._writableState;
    var ending = ws.ending || ws.ended;
    var last = ending && (!chunk || ws.length === chunk.length);

    if (!chunk === null && !Buffer$9.isBuffer(chunk))
      return cb(new Error('invalid input'));

    // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
    // If it's explicitly flushing at some other time, then we use
    // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
    // goodness.
    if (last)
      flushFlag = binding.Z_FINISH;
    else {
      flushFlag = this._flushFlag;
      // once we've flushed the last of the queue, stop flushing and
      // go back to the normal behavior.
      if (chunk.length >= ws.length) {
        this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
      }
    }

    this._processChunk(chunk, flushFlag, cb);
  };

  Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
    var availInBefore = chunk && chunk.length;
    var availOutBefore = this._chunkSize - this._offset;
    var inOff = 0;

    var self = this;

    var async = typeof cb === 'function';

    if (!async) {
      var buffers = [];
      var nread = 0;

      var error;
      this.on('error', function(er) {
        error = er;
      });

      do {
        var res = this._binding.writeSync(flushFlag,
                                          chunk, // in
                                          inOff, // in_off
                                          availInBefore, // in_len
                                          this._buffer, // out
                                          this._offset, //out_off
                                          availOutBefore); // out_len
      } while (!this._hadError && callback(res[0], res[1]));

      if (this._hadError) {
        throw error;
      }

      var buf = Buffer$9.concat(buffers, nread);
      this.close();

      return buf;
    }

    var req = this._binding.write(flushFlag,
                                  chunk, // in
                                  inOff, // in_off
                                  availInBefore, // in_len
                                  this._buffer, // out
                                  this._offset, //out_off
                                  availOutBefore); // out_len

    req.buffer = chunk;
    req.callback = callback;

    function callback(availInAfter, availOutAfter) {
      if (self._hadError)
        return;

      var have = availOutBefore - availOutAfter;
      assert(have >= 0, 'have should not go down');

      if (have > 0) {
        var out = self._buffer.slice(self._offset, self._offset + have);
        self._offset += have;
        // serve some output to the consumer.
        if (async) {
          self.push(out);
        } else {
          buffers.push(out);
          nread += out.length;
        }
      }

      // exhausted the output buffer, or used all the input create a new one.
      if (availOutAfter === 0 || self._offset >= self._chunkSize) {
        availOutBefore = self._chunkSize;
        self._offset = 0;
        self._buffer = new Buffer$9(self._chunkSize);
      }

      if (availOutAfter === 0) {
        // Not actually done.  Need to reprocess.
        // Also, update the availInBefore to the availInAfter value,
        // so that if we have to hit it a third (fourth, etc.) time,
        // it'll have the correct byte counts.
        inOff += (availInBefore - availInAfter);
        availInBefore = availInAfter;

        if (!async)
          return true;

        var newReq = self._binding.write(flushFlag,
                                         chunk,
                                         inOff,
                                         availInBefore,
                                         self._buffer,
                                         self._offset,
                                         self._chunkSize);
        newReq.callback = callback; // this same function
        newReq.buffer = chunk;
        return;
      }

      if (!async)
        return false;

      // finished with the chunk.
      cb();
    }
  };

  inherits$8(Deflate, Zlib);
  inherits$8(Inflate, Zlib);
  inherits$8(Gzip, Zlib);
  inherits$8(Gunzip, Zlib);
  inherits$8(DeflateRaw, Zlib);
  inherits$8(InflateRaw, Zlib);
  inherits$8(Unzip, Zlib);
  var zlib$1 = {
    codes: codes,
    createDeflate: createDeflate,
    createInflate: createInflate,
    createDeflateRaw: createDeflateRaw,
    createInflateRaw: createInflateRaw,
    createGzip: createGzip,
    createGunzip: createGunzip,
    createUnzip: createUnzip,
    deflate: deflate,
    deflateSync: deflateSync,
    gzip: gzip,
    gzipSync: gzipSync,
    deflateRaw: deflateRaw,
    deflateRawSync: deflateRawSync,
    unzip: unzip,
    unzipSync: unzipSync,
    inflate: inflate,
    inflateSync: inflateSync,
    gunzip: gunzip,
    gunzipSync: gunzipSync,
    inflateRaw: inflateRaw,
    inflateRawSync: inflateRawSync,
    Deflate: Deflate,
    Inflate: Inflate,
    Gzip: Gzip,
    Gunzip: Gunzip,
    DeflateRaw: DeflateRaw,
    InflateRaw: InflateRaw,
    Unzip: Unzip,
    Zlib: Zlib
  };

  var zlib$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    codes: codes,
    createDeflate: createDeflate,
    createInflate: createInflate,
    createDeflateRaw: createDeflateRaw,
    createInflateRaw: createInflateRaw,
    createGzip: createGzip,
    createGunzip: createGunzip,
    createUnzip: createUnzip,
    deflate: deflate,
    deflateSync: deflateSync,
    gzip: gzip,
    gzipSync: gzipSync,
    deflateRaw: deflateRaw,
    deflateRawSync: deflateRawSync,
    unzip: unzip,
    unzipSync: unzipSync,
    inflate: inflate,
    inflateSync: inflateSync,
    gunzip: gunzip,
    gunzipSync: gunzipSync,
    inflateRaw: inflateRaw,
    inflateRawSync: inflateRawSync,
    Deflate: Deflate,
    Inflate: Inflate,
    Gzip: Gzip,
    Gunzip: Gunzip,
    DeflateRaw: DeflateRaw,
    InflateRaw: InflateRaw,
    Unzip: Unzip,
    Zlib: Zlib,
    'default': zlib$1
  });

  var zlib = /*@__PURE__*/getAugmentedNamespace(zlib$2);

  const Snappy = utils$2.retrieveSnappy();


  const compressorIDs$1 = {
    snappy: 1,
    zlib: 2
  };

  const uncompressibleCommands$1 = new Set([
    'ismaster',
    'saslStart',
    'saslContinue',
    'getnonce',
    'authenticate',
    'createUser',
    'updateUser',
    'copydbSaslStart',
    'copydbgetnonce',
    'copydb'
  ]);

  // Facilitate compressing a message using an agreed compressor
  function compress$1(self, dataToBeCompressed, callback) {
    switch (self.options.agreedCompressor) {
      case 'snappy':
        Snappy.compress(dataToBeCompressed, callback);
        break;
      case 'zlib':
        // Determine zlibCompressionLevel
        var zlibOptions = {};
        if (self.options.zlibCompressionLevel) {
          zlibOptions.level = self.options.zlibCompressionLevel;
        }
        zlib.deflate(dataToBeCompressed, zlibOptions, callback);
        break;
      default:
        throw new Error(
          'Attempt to compress message using unknown compressor "' +
            self.options.agreedCompressor +
            '".'
        );
    }
  }

  // Decompress a message using the given compressor
  function decompress$1(compressorID, compressedData, callback) {
    if (compressorID < 0 || compressorID > compressorIDs$1.length) {
      throw new Error(
        'Server sent message compressed using an unsupported compressor. (Received compressor ID ' +
          compressorID +
          ')'
      );
    }
    switch (compressorID) {
      case compressorIDs$1.snappy:
        Snappy.uncompress(compressedData, callback);
        break;
      case compressorIDs$1.zlib:
        zlib.inflate(compressedData, callback);
        break;
      default:
        callback(null, compressedData);
    }
  }

  var compression = {
    compressorIDs: compressorIDs$1,
    uncompressibleCommands: uncompressibleCommands$1,
    compress: compress$1,
    decompress: decompress$1
  };

  var buffer = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

  var safeBuffer = createCommonjsModule(function (module, exports) {
  /* eslint-disable node/no-deprecated-api */

  var Buffer = buffer.Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }

  SafeBuffer.prototype = Object.create(Buffer.prototype);

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return buffer.SlowBuffer(size)
  };
  });

  var retrieveBSON$8 = utils$2.retrieveBSON;
  var BSON$c = retrieveBSON$8();
  var Long$4 = BSON$c.Long;
  const Buffer$7 = safeBuffer.Buffer;

  // Incrementing request id
  var _requestId$1 = 0;

  // Wire command operation ids
  var opcodes$2 = shared$1.opcodes;

  // Query flags
  var OPTS_TAILABLE_CURSOR = 2;
  var OPTS_SLAVE = 4;
  var OPTS_OPLOG_REPLAY = 8;
  var OPTS_NO_CURSOR_TIMEOUT = 16;
  var OPTS_AWAIT_DATA = 32;
  var OPTS_EXHAUST = 64;
  var OPTS_PARTIAL = 128;

  // Response flags
  var CURSOR_NOT_FOUND = 1;
  var QUERY_FAILURE = 2;
  var SHARD_CONFIG_STALE = 4;
  var AWAIT_CAPABLE = 8;

  /**************************************************************
   * QUERY
   **************************************************************/
  var Query$3 = function(bson, ns, query, options) {
    var self = this;
    // Basic options needed to be passed in
    if (ns == null) throw new Error('ns must be specified for query');
    if (query == null) throw new Error('query must be specified for query');

    // Validate that we are not passing 0x00 in the collection name
    if (ns.indexOf('\x00') !== -1) {
      throw new Error('namespace cannot contain a null character');
    }

    // Basic options
    this.bson = bson;
    this.ns = ns;
    this.query = query;

    // Additional options
    this.numberToSkip = options.numberToSkip || 0;
    this.numberToReturn = options.numberToReturn || 0;
    this.returnFieldSelector = options.returnFieldSelector || null;
    this.requestId = Query$3.getRequestId();

    // special case for pre-3.2 find commands, delete ASAP
    this.pre32Limit = options.pre32Limit;

    // Serialization option
    this.serializeFunctions =
      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    this.ignoreUndefined =
      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;
    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;
    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : true;
    this.batchSize = self.numberToReturn;

    // Flags
    this.tailable = false;
    this.slaveOk = typeof options.slaveOk === 'boolean' ? options.slaveOk : false;
    this.oplogReplay = false;
    this.noCursorTimeout = false;
    this.awaitData = false;
    this.exhaust = false;
    this.partial = false;
  };

  //
  // Assign a new request Id
  Query$3.prototype.incRequestId = function() {
    this.requestId = _requestId$1++;
  };

  //
  // Assign a new request Id
  Query$3.nextRequestId = function() {
    return _requestId$1 + 1;
  };

  //
  // Uses a single allocated buffer for the process, avoiding multiple memory allocations
  Query$3.prototype.toBin = function() {
    var self = this;
    var buffers = [];
    var projection = null;

    // Set up the flags
    var flags = 0;
    if (this.tailable) {
      flags |= OPTS_TAILABLE_CURSOR;
    }

    if (this.slaveOk) {
      flags |= OPTS_SLAVE;
    }

    if (this.oplogReplay) {
      flags |= OPTS_OPLOG_REPLAY;
    }

    if (this.noCursorTimeout) {
      flags |= OPTS_NO_CURSOR_TIMEOUT;
    }

    if (this.awaitData) {
      flags |= OPTS_AWAIT_DATA;
    }

    if (this.exhaust) {
      flags |= OPTS_EXHAUST;
    }

    if (this.partial) {
      flags |= OPTS_PARTIAL;
    }

    // If batchSize is different to self.numberToReturn
    if (self.batchSize !== self.numberToReturn) self.numberToReturn = self.batchSize;

    // Allocate write protocol header buffer
    var header = Buffer$7.alloc(
      4 * 4 + // Header
      4 + // Flags
      Buffer$7.byteLength(self.ns) +
      1 + // namespace
      4 + // numberToSkip
        4 // numberToReturn
    );

    // Add header to buffers
    buffers.push(header);

    // Serialize the query
    var query = self.bson.serialize(this.query, {
      checkKeys: this.checkKeys,
      serializeFunctions: this.serializeFunctions,
      ignoreUndefined: this.ignoreUndefined
    });

    // Add query document
    buffers.push(query);

    if (self.returnFieldSelector && Object.keys(self.returnFieldSelector).length > 0) {
      // Serialize the projection document
      projection = self.bson.serialize(this.returnFieldSelector, {
        checkKeys: this.checkKeys,
        serializeFunctions: this.serializeFunctions,
        ignoreUndefined: this.ignoreUndefined
      });
      // Add projection document
      buffers.push(projection);
    }

    // Total message size
    var totalLength = header.length + query.length + (projection ? projection.length : 0);

    // Set up the index
    var index = 4;

    // Write total document length
    header[3] = (totalLength >> 24) & 0xff;
    header[2] = (totalLength >> 16) & 0xff;
    header[1] = (totalLength >> 8) & 0xff;
    header[0] = totalLength & 0xff;

    // Write header information requestId
    header[index + 3] = (this.requestId >> 24) & 0xff;
    header[index + 2] = (this.requestId >> 16) & 0xff;
    header[index + 1] = (this.requestId >> 8) & 0xff;
    header[index] = this.requestId & 0xff;
    index = index + 4;

    // Write header information responseTo
    header[index + 3] = (0 >> 24) & 0xff;
    header[index + 2] = (0 >> 16) & 0xff;
    header[index + 1] = (0 >> 8) & 0xff;
    header[index] = 0 & 0xff;
    index = index + 4;

    // Write header information OP_QUERY
    header[index + 3] = (opcodes$2.OP_QUERY >> 24) & 0xff;
    header[index + 2] = (opcodes$2.OP_QUERY >> 16) & 0xff;
    header[index + 1] = (opcodes$2.OP_QUERY >> 8) & 0xff;
    header[index] = opcodes$2.OP_QUERY & 0xff;
    index = index + 4;

    // Write header information flags
    header[index + 3] = (flags >> 24) & 0xff;
    header[index + 2] = (flags >> 16) & 0xff;
    header[index + 1] = (flags >> 8) & 0xff;
    header[index] = flags & 0xff;
    index = index + 4;

    // Write collection name
    index = index + header.write(this.ns, index, 'utf8') + 1;
    header[index - 1] = 0;

    // Write header information flags numberToSkip
    header[index + 3] = (this.numberToSkip >> 24) & 0xff;
    header[index + 2] = (this.numberToSkip >> 16) & 0xff;
    header[index + 1] = (this.numberToSkip >> 8) & 0xff;
    header[index] = this.numberToSkip & 0xff;
    index = index + 4;

    // Write header information flags numberToReturn
    header[index + 3] = (this.numberToReturn >> 24) & 0xff;
    header[index + 2] = (this.numberToReturn >> 16) & 0xff;
    header[index + 1] = (this.numberToReturn >> 8) & 0xff;
    header[index] = this.numberToReturn & 0xff;
    index = index + 4;

    // Return the buffers
    return buffers;
  };

  Query$3.getRequestId = function() {
    return ++_requestId$1;
  };

  /**************************************************************
   * GETMORE
   **************************************************************/
  var GetMore$1 = function(bson, ns, cursorId, opts) {
    opts = opts || {};
    this.numberToReturn = opts.numberToReturn || 0;
    this.requestId = _requestId$1++;
    this.bson = bson;
    this.ns = ns;
    this.cursorId = cursorId;
  };

  //
  // Uses a single allocated buffer for the process, avoiding multiple memory allocations
  GetMore$1.prototype.toBin = function() {
    var length = 4 + Buffer$7.byteLength(this.ns) + 1 + 4 + 8 + 4 * 4;
    // Create command buffer
    var index = 0;
    // Allocate buffer
    var _buffer = Buffer$7.alloc(length);

    // Write header information
    // index = write32bit(index, _buffer, length);
    _buffer[index + 3] = (length >> 24) & 0xff;
    _buffer[index + 2] = (length >> 16) & 0xff;
    _buffer[index + 1] = (length >> 8) & 0xff;
    _buffer[index] = length & 0xff;
    index = index + 4;

    // index = write32bit(index, _buffer, requestId);
    _buffer[index + 3] = (this.requestId >> 24) & 0xff;
    _buffer[index + 2] = (this.requestId >> 16) & 0xff;
    _buffer[index + 1] = (this.requestId >> 8) & 0xff;
    _buffer[index] = this.requestId & 0xff;
    index = index + 4;

    // index = write32bit(index, _buffer, 0);
    _buffer[index + 3] = (0 >> 24) & 0xff;
    _buffer[index + 2] = (0 >> 16) & 0xff;
    _buffer[index + 1] = (0 >> 8) & 0xff;
    _buffer[index] = 0 & 0xff;
    index = index + 4;

    // index = write32bit(index, _buffer, OP_GETMORE);
    _buffer[index + 3] = (opcodes$2.OP_GETMORE >> 24) & 0xff;
    _buffer[index + 2] = (opcodes$2.OP_GETMORE >> 16) & 0xff;
    _buffer[index + 1] = (opcodes$2.OP_GETMORE >> 8) & 0xff;
    _buffer[index] = opcodes$2.OP_GETMORE & 0xff;
    index = index + 4;

    // index = write32bit(index, _buffer, 0);
    _buffer[index + 3] = (0 >> 24) & 0xff;
    _buffer[index + 2] = (0 >> 16) & 0xff;
    _buffer[index + 1] = (0 >> 8) & 0xff;
    _buffer[index] = 0 & 0xff;
    index = index + 4;

    // Write collection name
    index = index + _buffer.write(this.ns, index, 'utf8') + 1;
    _buffer[index - 1] = 0;

    // Write batch size
    // index = write32bit(index, _buffer, numberToReturn);
    _buffer[index + 3] = (this.numberToReturn >> 24) & 0xff;
    _buffer[index + 2] = (this.numberToReturn >> 16) & 0xff;
    _buffer[index + 1] = (this.numberToReturn >> 8) & 0xff;
    _buffer[index] = this.numberToReturn & 0xff;
    index = index + 4;

    // Write cursor id
    // index = write32bit(index, _buffer, cursorId.getLowBits());
    _buffer[index + 3] = (this.cursorId.getLowBits() >> 24) & 0xff;
    _buffer[index + 2] = (this.cursorId.getLowBits() >> 16) & 0xff;
    _buffer[index + 1] = (this.cursorId.getLowBits() >> 8) & 0xff;
    _buffer[index] = this.cursorId.getLowBits() & 0xff;
    index = index + 4;

    // index = write32bit(index, _buffer, cursorId.getHighBits());
    _buffer[index + 3] = (this.cursorId.getHighBits() >> 24) & 0xff;
    _buffer[index + 2] = (this.cursorId.getHighBits() >> 16) & 0xff;
    _buffer[index + 1] = (this.cursorId.getHighBits() >> 8) & 0xff;
    _buffer[index] = this.cursorId.getHighBits() & 0xff;
    index = index + 4;

    // Return buffer
    return _buffer;
  };

  /**************************************************************
   * KILLCURSOR
   **************************************************************/
  var KillCursor$1 = function(bson, ns, cursorIds) {
    this.ns = ns;
    this.requestId = _requestId$1++;
    this.cursorIds = cursorIds;
  };

  //
  // Uses a single allocated buffer for the process, avoiding multiple memory allocations
  KillCursor$1.prototype.toBin = function() {
    var length = 4 + 4 + 4 * 4 + this.cursorIds.length * 8;

    // Create command buffer
    var index = 0;
    var _buffer = Buffer$7.alloc(length);

    // Write header information
    // index = write32bit(index, _buffer, length);
    _buffer[index + 3] = (length >> 24) & 0xff;
    _buffer[index + 2] = (length >> 16) & 0xff;
    _buffer[index + 1] = (length >> 8) & 0xff;
    _buffer[index] = length & 0xff;
    index = index + 4;

    // index = write32bit(index, _buffer, requestId);
    _buffer[index + 3] = (this.requestId >> 24) & 0xff;
    _buffer[index + 2] = (this.requestId >> 16) & 0xff;
    _buffer[index + 1] = (this.requestId >> 8) & 0xff;
    _buffer[index] = this.requestId & 0xff;
    index = index + 4;

    // index = write32bit(index, _buffer, 0);
    _buffer[index + 3] = (0 >> 24) & 0xff;
    _buffer[index + 2] = (0 >> 16) & 0xff;
    _buffer[index + 1] = (0 >> 8) & 0xff;
    _buffer[index] = 0 & 0xff;
    index = index + 4;

    // index = write32bit(index, _buffer, OP_KILL_CURSORS);
    _buffer[index + 3] = (opcodes$2.OP_KILL_CURSORS >> 24) & 0xff;
    _buffer[index + 2] = (opcodes$2.OP_KILL_CURSORS >> 16) & 0xff;
    _buffer[index + 1] = (opcodes$2.OP_KILL_CURSORS >> 8) & 0xff;
    _buffer[index] = opcodes$2.OP_KILL_CURSORS & 0xff;
    index = index + 4;

    // index = write32bit(index, _buffer, 0);
    _buffer[index + 3] = (0 >> 24) & 0xff;
    _buffer[index + 2] = (0 >> 16) & 0xff;
    _buffer[index + 1] = (0 >> 8) & 0xff;
    _buffer[index] = 0 & 0xff;
    index = index + 4;

    // Write batch size
    // index = write32bit(index, _buffer, this.cursorIds.length);
    _buffer[index + 3] = (this.cursorIds.length >> 24) & 0xff;
    _buffer[index + 2] = (this.cursorIds.length >> 16) & 0xff;
    _buffer[index + 1] = (this.cursorIds.length >> 8) & 0xff;
    _buffer[index] = this.cursorIds.length & 0xff;
    index = index + 4;

    // Write all the cursor ids into the array
    for (var i = 0; i < this.cursorIds.length; i++) {
      // Write cursor id
      // index = write32bit(index, _buffer, cursorIds[i].getLowBits());
      _buffer[index + 3] = (this.cursorIds[i].getLowBits() >> 24) & 0xff;
      _buffer[index + 2] = (this.cursorIds[i].getLowBits() >> 16) & 0xff;
      _buffer[index + 1] = (this.cursorIds[i].getLowBits() >> 8) & 0xff;
      _buffer[index] = this.cursorIds[i].getLowBits() & 0xff;
      index = index + 4;

      // index = write32bit(index, _buffer, cursorIds[i].getHighBits());
      _buffer[index + 3] = (this.cursorIds[i].getHighBits() >> 24) & 0xff;
      _buffer[index + 2] = (this.cursorIds[i].getHighBits() >> 16) & 0xff;
      _buffer[index + 1] = (this.cursorIds[i].getHighBits() >> 8) & 0xff;
      _buffer[index] = this.cursorIds[i].getHighBits() & 0xff;
      index = index + 4;
    }

    // Return buffer
    return _buffer;
  };

  var Response$1 = function(bson, message, msgHeader, msgBody, opts) {
    opts = opts || { promoteLongs: true, promoteValues: true, promoteBuffers: false };
    this.parsed = false;
    this.raw = message;
    this.data = msgBody;
    this.bson = bson;
    this.opts = opts;

    // Read the message header
    this.length = msgHeader.length;
    this.requestId = msgHeader.requestId;
    this.responseTo = msgHeader.responseTo;
    this.opCode = msgHeader.opCode;
    this.fromCompressed = msgHeader.fromCompressed;

    // Read the message body
    this.responseFlags = msgBody.readInt32LE(0);
    this.cursorId = new Long$4(msgBody.readInt32LE(4), msgBody.readInt32LE(8));
    this.startingFrom = msgBody.readInt32LE(12);
    this.numberReturned = msgBody.readInt32LE(16);

    // Preallocate document array
    this.documents = new Array(this.numberReturned);

    // Flag values
    this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;
    this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;
    this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;
    this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;
    this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;
    this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;
    this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;
  };

  Response$1.prototype.isParsed = function() {
    return this.parsed;
  };

  Response$1.prototype.parse = function(options) {
    // Don't parse again if not needed
    if (this.parsed) return;
    options = options || {};

    // Allow the return of raw documents instead of parsing
    var raw = options.raw || false;
    var documentsReturnedIn = options.documentsReturnedIn || null;
    var promoteLongs =
      typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;
    var promoteValues =
      typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;
    var promoteBuffers =
      typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : this.opts.promoteBuffers;
    var bsonSize, _options;

    // Set up the options
    _options = {
      promoteLongs: promoteLongs,
      promoteValues: promoteValues,
      promoteBuffers: promoteBuffers
    };

    // Position within OP_REPLY at which documents start
    // (See https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#wire-op-reply)
    this.index = 20;

    //
    // Parse Body
    //
    for (var i = 0; i < this.numberReturned; i++) {
      bsonSize =
        this.data[this.index] |
        (this.data[this.index + 1] << 8) |
        (this.data[this.index + 2] << 16) |
        (this.data[this.index + 3] << 24);

      // If we have raw results specified slice the return document
      if (raw) {
        this.documents[i] = this.data.slice(this.index, this.index + bsonSize);
      } else {
        this.documents[i] = this.bson.deserialize(
          this.data.slice(this.index, this.index + bsonSize),
          _options
        );
      }

      // Adjust the index
      this.index = this.index + bsonSize;
    }

    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {
      const fieldsAsRaw = {};
      fieldsAsRaw[documentsReturnedIn] = true;
      _options.fieldsAsRaw = fieldsAsRaw;

      const doc = this.bson.deserialize(this.documents[0], _options);
      this.documents = [doc];
    }

    // Set parsed
    this.parsed = true;
  };

  var commands = {
    Query: Query$3,
    GetMore: GetMore$1,
    Response: Response$1,
    KillCursor: KillCursor$1
  };

  // Implementation of OP_MSG spec:
  // https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst
  //
  // struct Section {
  //   uint8 payloadType;
  //   union payload {
  //       document  document; // payloadType == 0
  //       struct sequence { // payloadType == 1
  //           int32      size;
  //           cstring    identifier;
  //           document*  documents;
  //       };
  //   };
  // };

  // struct OP_MSG {
  //   struct MsgHeader {
  //       int32  messageLength;
  //       int32  requestID;
  //       int32  responseTo;
  //       int32  opCode = 2013;
  //   };
  //   uint32      flagBits;
  //   Section+    sections;
  //   [uint32     checksum;]
  // };

  const Buffer$6 = safeBuffer.Buffer;
  const opcodes$1 = shared$1.opcodes;
  const databaseNamespace$1 = shared$1.databaseNamespace;

  const MongoError$K = error$2.MongoError;

  // Incrementing request id
  let _requestId = 0;

  // Msg Flags
  const OPTS_CHECKSUM_PRESENT = 1;
  const OPTS_MORE_TO_COME = 2;
  const OPTS_EXHAUST_ALLOWED = 1 << 16;

  class Msg$2 {
    constructor(bson, ns, command, options) {
      // Basic options needed to be passed in
      if (command == null) throw new Error('query must be specified for query');

      // Basic options
      this.bson = bson;
      this.ns = ns;
      this.command = command;
      this.command.$db = databaseNamespace$1(ns);

      if (options.readPreference && options.readPreference.mode !== read_preference.PRIMARY) {
        this.command.$readPreference = options.readPreference.toJSON();
      }

      // Ensure empty options
      this.options = options || {};

      // Additional options
      this.requestId = options.requestId ? options.requestId : Msg$2.getRequestId();

      // Serialization option
      this.serializeFunctions =
        typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
      this.ignoreUndefined =
        typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;
      this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;
      this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;

      // flags
      this.checksumPresent = false;
      this.moreToCome = options.moreToCome || false;
      this.exhaustAllowed =
        typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;
    }

    toBin() {
      const buffers = [];
      let flags = 0;

      if (this.checksumPresent) {
        flags |= OPTS_CHECKSUM_PRESENT;
      }

      if (this.moreToCome) {
        flags |= OPTS_MORE_TO_COME;
      }

      if (this.exhaustAllowed) {
        flags |= OPTS_EXHAUST_ALLOWED;
      }

      const header = Buffer$6.alloc(
        4 * 4 + // Header
          4 // Flags
      );

      buffers.push(header);

      let totalLength = header.length;
      const command = this.command;
      totalLength += this.makeDocumentSegment(buffers, command);

      header.writeInt32LE(totalLength, 0); // messageLength
      header.writeInt32LE(this.requestId, 4); // requestID
      header.writeInt32LE(0, 8); // responseTo
      header.writeInt32LE(opcodes$1.OP_MSG, 12); // opCode
      header.writeUInt32LE(flags, 16); // flags
      return buffers;
    }

    makeDocumentSegment(buffers, document) {
      const payloadTypeBuffer = Buffer$6.alloc(1);
      payloadTypeBuffer[0] = 0;

      const documentBuffer = this.serializeBson(document);
      buffers.push(payloadTypeBuffer);
      buffers.push(documentBuffer);

      return payloadTypeBuffer.length + documentBuffer.length;
    }

    serializeBson(document) {
      return this.bson.serialize(document, {
        checkKeys: this.checkKeys,
        serializeFunctions: this.serializeFunctions,
        ignoreUndefined: this.ignoreUndefined
      });
    }
  }

  Msg$2.getRequestId = function() {
    _requestId = (_requestId + 1) & 0x7fffffff;
    return _requestId;
  };

  class BinMsg$1 {
    constructor(bson, message, msgHeader, msgBody, opts) {
      opts = opts || { promoteLongs: true, promoteValues: true, promoteBuffers: false };
      this.parsed = false;
      this.raw = message;
      this.data = msgBody;
      this.bson = bson;
      this.opts = opts;

      // Read the message header
      this.length = msgHeader.length;
      this.requestId = msgHeader.requestId;
      this.responseTo = msgHeader.responseTo;
      this.opCode = msgHeader.opCode;
      this.fromCompressed = msgHeader.fromCompressed;

      // Read response flags
      this.responseFlags = msgBody.readInt32LE(0);
      this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;
      this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;
      this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;
      this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;
      this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;
      this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;

      this.documents = [];
    }

    isParsed() {
      return this.parsed;
    }

    parse(options) {
      // Don't parse again if not needed
      if (this.parsed) return;
      options = options || {};

      this.index = 4;
      // Allow the return of raw documents instead of parsing
      const raw = options.raw || false;
      const documentsReturnedIn = options.documentsReturnedIn || null;
      const promoteLongs =
        typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;
      const promoteValues =
        typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;
      const promoteBuffers =
        typeof options.promoteBuffers === 'boolean'
          ? options.promoteBuffers
          : this.opts.promoteBuffers;

      // Set up the options
      const _options = {
        promoteLongs: promoteLongs,
        promoteValues: promoteValues,
        promoteBuffers: promoteBuffers
      };

      while (this.index < this.data.length) {
        const payloadType = this.data.readUInt8(this.index++);
        if (payloadType === 1) {
          // It was decided that no driver makes use of payload type 1
          throw new MongoError$K('OP_MSG Payload Type 1 detected unsupported protocol');
        } else if (payloadType === 0) {
          const bsonSize = this.data.readUInt32LE(this.index);
          const bin = this.data.slice(this.index, this.index + bsonSize);
          this.documents.push(raw ? bin : this.bson.deserialize(bin, _options));

          this.index += bsonSize;
        }
      }

      if (this.documents.length === 1 && documentsReturnedIn != null && raw) {
        const fieldsAsRaw = {};
        fieldsAsRaw[documentsReturnedIn] = true;
        _options.fieldsAsRaw = fieldsAsRaw;

        const doc = this.bson.deserialize(this.documents[0], _options);
        this.documents = [doc];
      }

      this.parsed = true;
    }
  }

  var msg = { Msg: Msg$2, BinMsg: BinMsg$1 };

  var f$6 = require('util').format,
    MongoError$J = require('../error').MongoError;

  // Filters for classes
  var classFilters = {};
  var filteredClasses = {};
  var level = null;
  // Save the process id
  var pid = browser$1.pid;
  // current logger
  var currentLogger = null;

  /**
   * @callback Logger~loggerCallback
   * @param {string} msg message being logged
   * @param {object} state an object containing more metadata about the logging message
   */

  /**
   * Creates a new Logger instance
   * @class
   * @param {string} className The Class name associated with the logging instance
   * @param {object} [options=null] Optional settings.
   * @param {Logger~loggerCallback} [options.logger=null] Custom logger function;
   * @param {string} [options.loggerLevel=error] Override default global log level.
   */
  var Logger$5 = function(className, options) {
    if (!(this instanceof Logger$5)) return new Logger$5(className, options);
    options = options || {};

    // Current reference
    this.className = className;

    // Current logger
    if (options.logger) {
      currentLogger = options.logger;
    } else if (currentLogger == null) {
      // eslint-disable-next-line no-console
      currentLogger = console.log;
    }

    // Set level of logging, default is error
    if (options.loggerLevel) {
      level = options.loggerLevel || 'error';
    }

    // Add all class names
    if (filteredClasses[this.className] == null) classFilters[this.className] = true;
  };

  /**
   * Log a message at the debug level
   * @method
   * @param {string} message The message to log
   * @param {object} object additional meta data to log
   * @return {null}
   */
  Logger$5.prototype.debug = function(message, object) {
    if (
      this.isDebug() &&
      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||
        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))
    ) {
      var dateTime = new Date().getTime();
      var msg = f$6('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);
      var state = {
        type: 'debug',
        message: message,
        className: this.className,
        pid: pid,
        date: dateTime
      };
      if (object) state.meta = object;
      currentLogger(msg, state);
    }
  };

  /**
   * Log a message at the warn level
   * @method
   * @param {string} message The message to log
   * @param {object} object additional meta data to log
   * @return {null}
   */
  (Logger$5.prototype.warn = function(message, object) {
    if (
      this.isWarn() &&
      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||
        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))
    ) {
      var dateTime = new Date().getTime();
      var msg = f$6('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);
      var state = {
        type: 'warn',
        message: message,
        className: this.className,
        pid: pid,
        date: dateTime
      };
      if (object) state.meta = object;
      currentLogger(msg, state);
    }
  }),
    /**
     * Log a message at the info level
     * @method
     * @param {string} message The message to log
     * @param {object} object additional meta data to log
     * @return {null}
     */
    (Logger$5.prototype.info = function(message, object) {
      if (
        this.isInfo() &&
        ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||
          (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))
      ) {
        var dateTime = new Date().getTime();
        var msg = f$6('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);
        var state = {
          type: 'info',
          message: message,
          className: this.className,
          pid: pid,
          date: dateTime
        };
        if (object) state.meta = object;
        currentLogger(msg, state);
      }
    }),
    /**
     * Log a message at the error level
     * @method
     * @param {string} message The message to log
     * @param {object} object additional meta data to log
     * @return {null}
     */
    (Logger$5.prototype.error = function(message, object) {
      if (
        this.isError() &&
        ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||
          (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))
      ) {
        var dateTime = new Date().getTime();
        var msg = f$6('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);
        var state = {
          type: 'error',
          message: message,
          className: this.className,
          pid: pid,
          date: dateTime
        };
        if (object) state.meta = object;
        currentLogger(msg, state);
      }
    }),
    /**
     * Is the logger set at info level
     * @method
     * @return {boolean}
     */
    (Logger$5.prototype.isInfo = function() {
      return level === 'info' || level === 'debug';
    }),
    /**
     * Is the logger set at error level
     * @method
     * @return {boolean}
     */
    (Logger$5.prototype.isError = function() {
      return level === 'error' || level === 'info' || level === 'debug';
    }),
    /**
     * Is the logger set at error level
     * @method
     * @return {boolean}
     */
    (Logger$5.prototype.isWarn = function() {
      return level === 'error' || level === 'warn' || level === 'info' || level === 'debug';
    }),
    /**
     * Is the logger set at debug level
     * @method
     * @return {boolean}
     */
    (Logger$5.prototype.isDebug = function() {
      return level === 'debug';
    });

  /**
   * Resets the logger to default settings, error and no filtered classes
   * @method
   * @return {null}
   */
  Logger$5.reset = function() {
    level = 'error';
    filteredClasses = {};
  };

  /**
   * Get the current logger function
   * @method
   * @return {Logger~loggerCallback}
   */
  Logger$5.currentLogger = function() {
    return currentLogger;
  };

  /**
   * Set the current logger function
   * @method
   * @param {Logger~loggerCallback} logger Logger function.
   * @return {null}
   */
  Logger$5.setCurrentLogger = function(logger) {
    if (typeof logger !== 'function') throw new MongoError$J('current logger must be a function');
    currentLogger = logger;
  };

  /**
   * Set what classes to log.
   * @method
   * @param {string} type The type of filter (currently only class)
   * @param {string[]} values The filters to apply
   * @return {null}
   */
  Logger$5.filter = function(type, values) {
    if (type === 'class' && Array.isArray(values)) {
      filteredClasses = {};

      values.forEach(function(x) {
        filteredClasses[x] = true;
      });
    }
  };

  /**
   * Set the current log level
   * @method
   * @param {string} level Set current log level (debug, info, error)
   * @return {null}
   */
  Logger$5.setLevel = function(_level) {
    if (_level !== 'info' && _level !== 'error' && _level !== 'debug' && _level !== 'warn') {
      throw new Error(f$6('%s is an illegal logging level', _level));
    }

    level = _level;
  };

  module.exports = Logger$5;

  var logger = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  /**
   * Creates a new CommandResult instance
   * @class
   * @param {object} result CommandResult object
   * @param {Connection} connection A connection instance associated with this result
   * @return {CommandResult} A cursor instance
   */
  var CommandResult$1 = function(result, connection, message) {
    this.result = result;
    this.connection = connection;
    this.message = message;
  };

  /**
   * Convert CommandResult to JSON
   * @method
   * @return {object}
   */
  CommandResult$1.prototype.toJSON = function() {
    let result = Object.assign({}, this, this.result);
    delete result.message;
    return result;
  };

  /**
   * Convert CommandResult to String representation
   * @method
   * @return {string}
   */
  CommandResult$1.prototype.toString = function() {
    return JSON.stringify(this.toJSON());
  };

  var command_result = CommandResult$1;

  var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(events$1);

  var crypto$1 = /*@__PURE__*/getAugmentedNamespace(empty$1);

  var require$$7$1 = /*@__PURE__*/getAugmentedNamespace(logger);

  const EventEmitter$8 = require$$0$1.EventEmitter;

  const debugOptions$3 = utils$2.debugOptions;
  const parseHeader = shared$1.parseHeader;
  const decompress = compression.decompress;
  const Response = commands.Response;
  const BinMsg = msg.BinMsg;
  const MongoNetworkError$8 = error$2.MongoNetworkError;
  const MongoNetworkTimeoutError = error$2.MongoNetworkTimeoutError;
  const MongoError$I = error$2.MongoError;

  const OP_COMPRESSED = shared$1.opcodes.OP_COMPRESSED;
  const OP_MSG = shared$1.opcodes.OP_MSG;
  const MESSAGE_HEADER_SIZE$1 = shared$1.MESSAGE_HEADER_SIZE;
  const Buffer$5 = safeBuffer.Buffer;
  const Query$2 = commands.Query;


  let _id$1 = 0;

  const DEFAULT_MAX_BSON_MESSAGE_SIZE = 1024 * 1024 * 16 * 4;
  const DEBUG_FIELDS = [
    'host',
    'port',
    'size',
    'keepAlive',
    'keepAliveInitialDelay',
    'noDelay',
    'connectionTimeout',
    'socketTimeout',
    'ssl',
    'ca',
    'crl',
    'cert',
    'rejectUnauthorized',
    'promoteLongs',
    'promoteValues',
    'promoteBuffers',
    'checkServerIdentity'
  ];

  let connectionAccountingSpy = undefined;
  let connectionAccounting = false;
  let connections = {};

  /**
   * A class representing a single connection to a MongoDB server
   *
   * @fires Connection#connect
   * @fires Connection#close
   * @fires Connection#error
   * @fires Connection#timeout
   * @fires Connection#parseError
   * @fires Connection#message
   */
  class Connection extends EventEmitter$8 {
    /**
     * Creates a new Connection instance
     *
     * **NOTE**: Internal class, do not instantiate directly
     *
     * @param {Socket} socket The socket this connection wraps
     * @param {Object} options Various settings
     * @param {object} options.bson An implementation of bson serialize and deserialize
     * @param {string} [options.host='localhost'] The host the socket is connected to
     * @param {number} [options.port=27017] The port used for the socket connection
     * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
     * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled
     * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting
     * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
     * @param {boolean} [options.promoteLongs] Convert Long values from the db into Numbers if they fit into 53 bits
     * @param {boolean} [options.promoteValues] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
     * @param {boolean} [options.promoteBuffers] Promotes Binary BSON values to native Node Buffers.
     * @param {number} [options.maxBsonMessageSize=0x4000000] Largest possible size of a BSON message (for legacy purposes)
     */
    constructor(socket, options) {
      super();

      options = options || {};
      if (!options.bson) {
        throw new TypeError('must pass in valid bson parser');
      }

      this.id = _id$1++;
      this.options = options;
      this.logger = require$$7$1('Connection', options);
      this.bson = options.bson;
      this.tag = options.tag;
      this.maxBsonMessageSize = options.maxBsonMessageSize || DEFAULT_MAX_BSON_MESSAGE_SIZE;

      this.port = options.port || 27017;
      this.host = options.host || 'localhost';
      this.socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 0;

      // These values are inspected directly in tests, but maybe not necessary to keep around
      this.keepAlive = typeof options.keepAlive === 'boolean' ? options.keepAlive : true;
      this.keepAliveInitialDelay =
        typeof options.keepAliveInitialDelay === 'number' ? options.keepAliveInitialDelay : 120000;
      this.connectionTimeout =
        typeof options.connectionTimeout === 'number' ? options.connectionTimeout : 30000;
      if (this.keepAliveInitialDelay > this.socketTimeout) {
        this.keepAliveInitialDelay = Math.round(this.socketTimeout / 2);
      }

      // Debug information
      if (this.logger.isDebug()) {
        this.logger.debug(
          `creating connection ${this.id} with options [${JSON.stringify(
          debugOptions$3(DEBUG_FIELDS, options)
        )}]`
        );
      }

      // Response options
      this.responseOptions = {
        promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,
        promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,
        promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false
      };

      // Flushing
      this.flushing = false;
      this.queue = [];

      // Internal state
      this.writeStream = null;
      this.destroyed = false;
      this.timedOut = false;

      // Create hash method
      const hash = crypto$1.createHash('sha1');
      hash.update(this.address);
      this.hashedName = hash.digest('hex');

      // All operations in flight on the connection
      this.workItems = [];

      // setup socket
      this.socket = socket;
      this.socket.once('error', errorHandler(this));
      this.socket.once('timeout', timeoutHandler(this));
      this.socket.once('close', closeHandler(this));
      this.socket.on('data', dataHandler(this));

      if (connectionAccounting) {
        addConnection(this.id, this);
      }
    }

    setSocketTimeout(value) {
      if (this.socket) {
        this.socket.setTimeout(value);
      }
    }

    resetSocketTimeout() {
      if (this.socket) {
        this.socket.setTimeout(this.socketTimeout);
      }
    }

    static enableConnectionAccounting(spy) {
      if (spy) {
        connectionAccountingSpy = spy;
      }

      connectionAccounting = true;
      connections = {};
    }

    static disableConnectionAccounting() {
      connectionAccounting = false;
      connectionAccountingSpy = undefined;
    }

    static connections() {
      return connections;
    }

    get address() {
      return `${this.host}:${this.port}`;
    }

    /**
     * Unref this connection
     * @method
     * @return {boolean}
     */
    unref() {
      if (this.socket == null) {
        this.once('connect', () => this.socket.unref());
        return;
      }

      this.socket.unref();
    }

    /**
     * Flush all work Items on this connection
     *
     * @param {*} err The error to propagate to the flushed work items
     */
    flush(err) {
      while (this.workItems.length > 0) {
        const workItem = this.workItems.shift();
        if (workItem.cb) {
          workItem.cb(err);
        }
      }
    }

    /**
     * Destroy connection
     * @method
     */
    destroy(options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      options = Object.assign({ force: false }, options);

      if (connectionAccounting) {
        deleteConnection(this.id);
      }

      if (this.socket == null) {
        this.destroyed = true;
        return;
      }

      if (options.force || this.timedOut) {
        this.socket.destroy();
        this.destroyed = true;
        if (typeof callback === 'function') callback(null, null);
        return;
      }

      this.socket.end(err => {
        this.destroyed = true;
        if (typeof callback === 'function') callback(err, null);
      });
    }

    /**
     * Write to connection
     * @method
     * @param {Command} command Command to write out need to implement toBin and toBinUnified
     */
    write(buffer) {
      // Debug Log
      if (this.logger.isDebug()) {
        if (!Array.isArray(buffer)) {
          this.logger.debug(`writing buffer [${buffer.toString('hex')}] to ${this.address}`);
        } else {
          for (let i = 0; i < buffer.length; i++)
            this.logger.debug(`writing buffer [${buffer[i].toString('hex')}] to ${this.address}`);
        }
      }

      // Double check that the connection is not destroyed
      if (this.socket.destroyed === false) {
        // Write out the command
        if (!Array.isArray(buffer)) {
          this.socket.write(buffer, 'binary');
          return true;
        }

        // Iterate over all buffers and write them in order to the socket
        for (let i = 0; i < buffer.length; i++) {
          this.socket.write(buffer[i], 'binary');
        }

        return true;
      }

      // Connection is destroyed return write failed
      return false;
    }

    /**
     * Return id of connection as a string
     * @method
     * @return {string}
     */
    toString() {
      return '' + this.id;
    }

    /**
     * Return json object of connection
     * @method
     * @return {object}
     */
    toJSON() {
      return { id: this.id, host: this.host, port: this.port };
    }

    /**
     * Is the connection connected
     * @method
     * @return {boolean}
     */
    isConnected() {
      if (this.destroyed) return false;
      return !this.socket.destroyed && this.socket.writable;
    }

    /**
     * @ignore
     */
    command(ns, command, options, callback) {
      if (typeof options === 'function') (callback = options), (options = {});

      const conn = this;
      const socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 0;
      const bson = conn.options.bson;
      const query = new Query$2(bson, ns, command, {
        numberToSkip: 0,
        numberToReturn: 1
      });

      const noop = () => {};
      function _callback(err, result) {
        callback(err, result);
        callback = noop;
      }

      function errorHandler(err) {
        conn.resetSocketTimeout();
        CONNECTION_ERROR_EVENTS.forEach(eventName => conn.removeListener(eventName, errorHandler));
        conn.removeListener('message', messageHandler);

        if (err == null) {
          err = new MongoError$I(`runCommand failed for connection to '${conn.address}'`);
        }

        // ignore all future errors
        conn.on('error', noop);
        _callback(err);
      }

      function messageHandler(msg) {
        if (msg.responseTo !== query.requestId) {
          return;
        }

        conn.resetSocketTimeout();
        CONNECTION_ERROR_EVENTS.forEach(eventName => conn.removeListener(eventName, errorHandler));
        conn.removeListener('message', messageHandler);

        msg.parse({ promoteValues: true });

        const response = msg.documents[0];
        if (response.ok === 0 || response.$err || response.errmsg || response.code) {
          _callback(new MongoError$I(response));
          return;
        }

        _callback(undefined, new command_result(response, this, msg));
      }

      conn.setSocketTimeout(socketTimeout);
      CONNECTION_ERROR_EVENTS.forEach(eventName => conn.once(eventName, errorHandler));
      conn.on('message', messageHandler);
      conn.write(query.toBin());
    }
  }

  const CONNECTION_ERROR_EVENTS = ['error', 'close', 'timeout', 'parseError'];

  function deleteConnection(id) {
    // console.log("=== deleted connection " + id + " :: " + (connections[id] ? connections[id].port : ''))
    delete connections[id];

    if (connectionAccountingSpy) {
      connectionAccountingSpy.deleteConnection(id);
    }
  }

  function addConnection(id, connection) {
    // console.log("=== added connection " + id + " :: " + connection.port)
    connections[id] = connection;

    if (connectionAccountingSpy) {
      connectionAccountingSpy.addConnection(id, connection);
    }
  }

  //
  // Connection handlers
  function errorHandler(conn) {
    return function(err) {
      if (connectionAccounting) deleteConnection(conn.id);
      // Debug information
      if (conn.logger.isDebug()) {
        conn.logger.debug(
          `connection ${conn.id} for [${conn.address}] errored out with [${JSON.stringify(err)}]`
        );
      }

      conn.emit('error', new MongoNetworkError$8(err), conn);
    };
  }

  function timeoutHandler(conn) {
    return function() {
      if (connectionAccounting) deleteConnection(conn.id);

      if (conn.logger.isDebug()) {
        conn.logger.debug(`connection ${conn.id} for [${conn.address}] timed out`);
      }

      conn.timedOut = true;
      conn.emit(
        'timeout',
        new MongoNetworkTimeoutError(`connection ${conn.id} to ${conn.address} timed out`, {
          beforeHandshake: conn.ismaster == null
        }),
        conn
      );
    };
  }

  function closeHandler(conn) {
    return function(hadError) {
      if (connectionAccounting) deleteConnection(conn.id);

      if (conn.logger.isDebug()) {
        conn.logger.debug(`connection ${conn.id} with for [${conn.address}] closed`);
      }

      if (!hadError) {
        conn.emit(
          'close',
          new MongoNetworkError$8(`connection ${conn.id} to ${conn.address} closed`),
          conn
        );
      }
    };
  }

  // Handle a message once it is received
  function processMessage(conn, message) {
    const msgHeader = parseHeader(message);
    if (msgHeader.opCode !== OP_COMPRESSED) {
      const ResponseConstructor = msgHeader.opCode === OP_MSG ? BinMsg : Response;
      conn.emit(
        'message',
        new ResponseConstructor(
          conn.bson,
          message,
          msgHeader,
          message.slice(MESSAGE_HEADER_SIZE$1),
          conn.responseOptions
        ),
        conn
      );

      return;
    }

    msgHeader.fromCompressed = true;
    let index = MESSAGE_HEADER_SIZE$1;
    msgHeader.opCode = message.readInt32LE(index);
    index += 4;
    msgHeader.length = message.readInt32LE(index);
    index += 4;
    const compressorID = message[index];
    index++;

    decompress(compressorID, message.slice(index), (err, decompressedMsgBody) => {
      if (err) {
        conn.emit('error', err);
        return;
      }

      if (decompressedMsgBody.length !== msgHeader.length) {
        conn.emit(
          'error',
          new MongoError$I(
            'Decompressing a compressed message from the server failed. The message is corrupt.'
          )
        );

        return;
      }

      const ResponseConstructor = msgHeader.opCode === OP_MSG ? BinMsg : Response;
      conn.emit(
        'message',
        new ResponseConstructor(
          conn.bson,
          message,
          msgHeader,
          decompressedMsgBody,
          conn.responseOptions
        ),
        conn
      );
    });
  }

  function dataHandler(conn) {
    return function(data) {
      // Parse until we are done with the data
      while (data.length > 0) {
        // If we still have bytes to read on the current message
        if (conn.bytesRead > 0 && conn.sizeOfMessage > 0) {
          // Calculate the amount of remaining bytes
          const remainingBytesToRead = conn.sizeOfMessage - conn.bytesRead;
          // Check if the current chunk contains the rest of the message
          if (remainingBytesToRead > data.length) {
            // Copy the new data into the exiting buffer (should have been allocated when we know the message size)
            data.copy(conn.buffer, conn.bytesRead);
            // Adjust the number of bytes read so it point to the correct index in the buffer
            conn.bytesRead = conn.bytesRead + data.length;

            // Reset state of buffer
            data = Buffer$5.alloc(0);
          } else {
            // Copy the missing part of the data into our current buffer
            data.copy(conn.buffer, conn.bytesRead, 0, remainingBytesToRead);
            // Slice the overflow into a new buffer that we will then re-parse
            data = data.slice(remainingBytesToRead);

            // Emit current complete message
            const emitBuffer = conn.buffer;
            // Reset state of buffer
            conn.buffer = null;
            conn.sizeOfMessage = 0;
            conn.bytesRead = 0;
            conn.stubBuffer = null;

            processMessage(conn, emitBuffer);
          }
        } else {
          // Stub buffer is kept in case we don't get enough bytes to determine the
          // size of the message (< 4 bytes)
          if (conn.stubBuffer != null && conn.stubBuffer.length > 0) {
            // If we have enough bytes to determine the message size let's do it
            if (conn.stubBuffer.length + data.length > 4) {
              // Prepad the data
              const newData = Buffer$5.alloc(conn.stubBuffer.length + data.length);
              conn.stubBuffer.copy(newData, 0);
              data.copy(newData, conn.stubBuffer.length);
              // Reassign for parsing
              data = newData;

              // Reset state of buffer
              conn.buffer = null;
              conn.sizeOfMessage = 0;
              conn.bytesRead = 0;
              conn.stubBuffer = null;
            } else {
              // Add the the bytes to the stub buffer
              const newStubBuffer = Buffer$5.alloc(conn.stubBuffer.length + data.length);
              // Copy existing stub buffer
              conn.stubBuffer.copy(newStubBuffer, 0);
              // Copy missing part of the data
              data.copy(newStubBuffer, conn.stubBuffer.length);
              // Exit parsing loop
              data = Buffer$5.alloc(0);
            }
          } else {
            if (data.length > 4) {
              // Retrieve the message size
              const sizeOfMessage = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24);
              // If we have a negative sizeOfMessage emit error and return
              if (sizeOfMessage < 0 || sizeOfMessage > conn.maxBsonMessageSize) {
                const errorObject = {
                  err: 'socketHandler',
                  trace: '',
                  bin: conn.buffer,
                  parseState: {
                    sizeOfMessage: sizeOfMessage,
                    bytesRead: conn.bytesRead,
                    stubBuffer: conn.stubBuffer
                  }
                };
                // We got a parse Error fire it off then keep going
                conn.emit('parseError', errorObject, conn);
                return;
              }

              // Ensure that the size of message is larger than 0 and less than the max allowed
              if (
                sizeOfMessage > 4 &&
                sizeOfMessage < conn.maxBsonMessageSize &&
                sizeOfMessage > data.length
              ) {
                conn.buffer = Buffer$5.alloc(sizeOfMessage);
                // Copy all the data into the buffer
                data.copy(conn.buffer, 0);
                // Update bytes read
                conn.bytesRead = data.length;
                // Update sizeOfMessage
                conn.sizeOfMessage = sizeOfMessage;
                // Ensure stub buffer is null
                conn.stubBuffer = null;
                // Exit parsing loop
                data = Buffer$5.alloc(0);
              } else if (
                sizeOfMessage > 4 &&
                sizeOfMessage < conn.maxBsonMessageSize &&
                sizeOfMessage === data.length
              ) {
                const emitBuffer = data;
                // Reset state of buffer
                conn.buffer = null;
                conn.sizeOfMessage = 0;
                conn.bytesRead = 0;
                conn.stubBuffer = null;
                // Exit parsing loop
                data = Buffer$5.alloc(0);
                // Emit the message
                processMessage(conn, emitBuffer);
              } else if (sizeOfMessage <= 4 || sizeOfMessage > conn.maxBsonMessageSize) {
                const errorObject = {
                  err: 'socketHandler',
                  trace: null,
                  bin: data,
                  parseState: {
                    sizeOfMessage: sizeOfMessage,
                    bytesRead: 0,
                    buffer: null,
                    stubBuffer: null
                  }
                };
                // We got a parse Error fire it off then keep going
                conn.emit('parseError', errorObject, conn);

                // Clear out the state of the parser
                conn.buffer = null;
                conn.sizeOfMessage = 0;
                conn.bytesRead = 0;
                conn.stubBuffer = null;
                // Exit parsing loop
                data = Buffer$5.alloc(0);
              } else {
                const emitBuffer = data.slice(0, sizeOfMessage);
                // Reset state of buffer
                conn.buffer = null;
                conn.sizeOfMessage = 0;
                conn.bytesRead = 0;
                conn.stubBuffer = null;
                // Copy rest of message
                data = data.slice(sizeOfMessage);
                // Emit the message
                processMessage(conn, emitBuffer);
              }
            } else {
              // Create a buffer that contains the space for the non-complete message
              conn.stubBuffer = Buffer$5.alloc(data.length);
              // Copy the data to the stub buffer
              data.copy(conn.stubBuffer, 0);
              // Exit parsing loop
              data = Buffer$5.alloc(0);
            }
          }
        }
      }
    };
  }

  /**
   * A server connect event, used to verify that the connection is up and running
   *
   * @event Connection#connect
   * @type {Connection}
   */

  /**
   * The server connection closed, all pool connections closed
   *
   * @event Connection#close
   * @type {Connection}
   */

  /**
   * The server connection caused an error, all pool connections closed
   *
   * @event Connection#error
   * @type {Connection}
   */

  /**
   * The server connection timed out, all pool connections closed
   *
   * @event Connection#timeout
   * @type {Connection}
   */

  /**
   * The driver experienced an invalid message, all pool connections closed
   *
   * @event Connection#parseError
   * @type {Connection}
   */

  /**
   * An event emitted each time the connection receives a parsed message from the wire
   *
   * @event Connection#message
   * @type {Connection}
   */

  var connection = Connection;

  const inherits$6 = require('util').inherits;
  const EventEmitter$7 = require('events').EventEmitter;
  const MongoError$H = require('../error').MongoError;
  const MongoTimeoutError = require('../error').MongoTimeoutError;
  const MongoWriteConcernError$2 = require('../error').MongoWriteConcernError;
  const Logger$4 = require('./logger');
  const f$5 = require('util').format;
  const Msg$1 = require('./msg').Msg;
  const CommandResult = require('./command_result');
  const MESSAGE_HEADER_SIZE = require('../wireprotocol/shared').MESSAGE_HEADER_SIZE;
  const COMPRESSION_DETAILS_SIZE = require('../wireprotocol/shared').COMPRESSION_DETAILS_SIZE;
  const opcodes = require('../wireprotocol/shared').opcodes;
  const compress = require('../wireprotocol/compression').compress;
  const compressorIDs = require('../wireprotocol/compression').compressorIDs;
  const uncompressibleCommands = require('../wireprotocol/compression').uncompressibleCommands;
  const apm$1 = require('./apm');
  const Buffer$4 = require('safe-buffer').Buffer;
  const connect$4 = require('./connect');
  const updateSessionFromResponse$1 = require('../sessions').updateSessionFromResponse;
  const eachAsync$1 = require('../utils').eachAsync;
  const makeStateMachine$1 = require('../utils').makeStateMachine;
  const now$3 = require('../../utils').now;

  const DISCONNECTED$2 = 'disconnected';
  const CONNECTING$2 = 'connecting';
  const CONNECTED$2 = 'connected';
  const DRAINING = 'draining';
  const DESTROYING$1 = 'destroying';
  const DESTROYED$2 = 'destroyed';
  const stateTransition$3 = makeStateMachine$1({
    [DISCONNECTED$2]: [CONNECTING$2, DRAINING, DISCONNECTED$2],
    [CONNECTING$2]: [CONNECTING$2, CONNECTED$2, DRAINING, DISCONNECTED$2],
    [CONNECTED$2]: [CONNECTED$2, DISCONNECTED$2, DRAINING],
    [DRAINING]: [DRAINING, DESTROYING$1, DESTROYED$2],
    [DESTROYING$1]: [DESTROYING$1, DESTROYED$2],
    [DESTROYED$2]: [DESTROYED$2]
  });

  const CONNECTION_EVENTS = new Set([
    'error',
    'close',
    'timeout',
    'parseError',
    'connect',
    'message'
  ]);

  var _id = 0;

  /**
   * Creates a new Pool instance
   * @class
   * @param {string} options.host The server host
   * @param {number} options.port The server port
   * @param {number} [options.size=5] Max server connection pool size
   * @param {number} [options.minSize=0] Minimum server connection pool size
   * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection
   * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times
   * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries
   * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
   * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled
   * @param {boolean} [options.noDelay=true] TCP Connection no delay
   * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting
   * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
   * @param {number} [options.monitoringSocketTimeout=0] TCP Socket timeout setting for replicaset monitoring socket
   * @param {boolean} [options.ssl=false] Use SSL for connection
   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.
   * @param {Buffer} [options.ca] SSL Certificate store binary buffer
   * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer
   * @param {Buffer} [options.cert] SSL Certificate binary buffer
   * @param {Buffer} [options.key] SSL Key file binary buffer
   * @param {string} [options.passphrase] SSL Certificate pass phrase
   * @param {boolean} [options.rejectUnauthorized=false] Reject unauthorized server certificates
   * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.
   * @fires Pool#connect
   * @fires Pool#close
   * @fires Pool#error
   * @fires Pool#timeout
   * @fires Pool#parseError
   * @return {Pool} A cursor instance
   */
  var Pool$1 = function(topology, options) {
    // Add event listener
    EventEmitter$7.call(this);

    // Store topology for later use
    this.topology = topology;

    this.s = {
      state: DISCONNECTED$2,
      cancellationToken: new EventEmitter$7()
    };

    // we don't care how many connections are listening for cancellation
    this.s.cancellationToken.setMaxListeners(Infinity);

    // Add the options
    this.options = Object.assign(
      {
        // Host and port settings
        host: 'localhost',
        port: 27017,
        // Pool default max size
        size: 5,
        // Pool default min size
        minSize: 0,
        // socket settings
        connectionTimeout: 30000,
        socketTimeout: 0,
        keepAlive: true,
        keepAliveInitialDelay: 120000,
        noDelay: true,
        // SSL Settings
        ssl: false,
        checkServerIdentity: true,
        ca: null,
        crl: null,
        cert: null,
        key: null,
        passphrase: null,
        rejectUnauthorized: false,
        promoteLongs: true,
        promoteValues: true,
        promoteBuffers: false,
        // Reconnection options
        reconnect: true,
        reconnectInterval: 1000,
        reconnectTries: 30,
        // Enable domains
        domainsEnabled: false,
        // feature flag for determining if we are running with the unified topology or not
        legacyCompatMode: true
      },
      options
    );

    // Identification information
    this.id = _id++;
    // Current reconnect retries
    this.retriesLeft = this.options.reconnectTries;
    this.reconnectId = null;
    this.reconnectError = null;
    // No bson parser passed in
    if (
      !options.bson ||
      (options.bson &&
        (typeof options.bson.serialize !== 'function' ||
          typeof options.bson.deserialize !== 'function'))
    ) {
      throw new Error('must pass in valid bson parser');
    }

    // Logger instance
    this.logger = Logger$4('Pool', options);
    // Connections
    this.availableConnections = [];
    this.inUseConnections = [];
    this.connectingConnections = 0;
    // Currently executing
    this.executing = false;
    // Operation work queue
    this.queue = [];

    // Number of consecutive timeouts caught
    this.numberOfConsecutiveTimeouts = 0;
    // Current pool Index
    this.connectionIndex = 0;

    // event handlers
    const pool = this;
    this._messageHandler = messageHandler(this);
    this._connectionCloseHandler = function(err) {
      const connection = this;
      connectionFailureHandler(pool, 'close', err, connection);
    };

    this._connectionErrorHandler = function(err) {
      const connection = this;
      connectionFailureHandler(pool, 'error', err, connection);
    };

    this._connectionTimeoutHandler = function(err) {
      const connection = this;
      connectionFailureHandler(pool, 'timeout', err, connection);
    };

    this._connectionParseErrorHandler = function(err) {
      const connection = this;
      connectionFailureHandler(pool, 'parseError', err, connection);
    };
  };

  inherits$6(Pool$1, EventEmitter$7);

  Object.defineProperty(Pool$1.prototype, 'size', {
    enumerable: true,
    get: function() {
      return this.options.size;
    }
  });

  Object.defineProperty(Pool$1.prototype, 'minSize', {
    enumerable: true,
    get: function() {
      return this.options.minSize;
    }
  });

  Object.defineProperty(Pool$1.prototype, 'connectionTimeout', {
    enumerable: true,
    get: function() {
      return this.options.connectionTimeout;
    }
  });

  Object.defineProperty(Pool$1.prototype, 'socketTimeout', {
    enumerable: true,
    get: function() {
      return this.options.socketTimeout;
    }
  });

  Object.defineProperty(Pool$1.prototype, 'state', {
    enumerable: true,
    get: function() {
      return this.s.state;
    }
  });

  // clears all pool state
  function resetPoolState(pool) {
    pool.inUseConnections = [];
    pool.availableConnections = [];
    pool.connectingConnections = 0;
    pool.executing = false;
    pool.numberOfConsecutiveTimeouts = 0;
    pool.connectionIndex = 0;
    pool.retriesLeft = pool.options.reconnectTries;
    pool.reconnectId = null;
  }

  function connectionFailureHandler(pool, event, err, conn) {
    if (conn) {
      if (conn._connectionFailHandled) {
        return;
      }

      conn._connectionFailHandled = true;
      conn.destroy();

      // Remove the connection
      removeConnection(pool, conn);

      // flush remaining work items
      conn.flush(err);
    }

    // Did we catch a timeout, increment the numberOfConsecutiveTimeouts
    if (event === 'timeout') {
      pool.numberOfConsecutiveTimeouts = pool.numberOfConsecutiveTimeouts + 1;

      // Have we timed out more than reconnectTries in a row ?
      // Force close the pool as we are trying to connect to tcp sink hole
      if (pool.numberOfConsecutiveTimeouts > pool.options.reconnectTries) {
        pool.numberOfConsecutiveTimeouts = 0;
        // Destroy all connections and pool
        pool.destroy(true);
        // Emit close event
        return pool.emit('close', pool);
      }
    }

    // No more socket available propegate the event
    if (pool.socketCount() === 0) {
      if (pool.state !== DESTROYED$2 && pool.state !== DESTROYING$1 && pool.state !== DRAINING) {
        if (pool.options.reconnect) {
          stateTransition$3(pool, DISCONNECTED$2);
        }
      }

      // Do not emit error events, they are always close events
      // do not trigger the low level error handler in node
      event = event === 'error' ? 'close' : event;
      pool.emit(event, err);
    }

    // Start reconnection attempts
    if (!pool.reconnectId && pool.options.reconnect) {
      pool.reconnectError = err;
      pool.reconnectId = setTimeout(attemptReconnect(pool), pool.options.reconnectInterval);
    }

    // Do we need to do anything to maintain the minimum pool size
    const totalConnections = totalConnectionCount(pool);
    if (totalConnections < pool.minSize) {
      createConnection(pool);
    }
  }

  function attemptReconnect(pool, callback) {
    return function() {
      pool.emit('attemptReconnect', pool);

      if (pool.state === DESTROYED$2 || pool.state === DESTROYING$1) {
        if (typeof callback === 'function') {
          callback(new MongoError$H('Cannot create connection when pool is destroyed'));
        }

        return;
      }

      pool.retriesLeft = pool.retriesLeft - 1;
      if (pool.retriesLeft <= 0) {
        pool.destroy();

        const error = new MongoTimeoutError(
          `failed to reconnect after ${pool.options.reconnectTries} attempts with interval ${pool.options.reconnectInterval} ms`,
          pool.reconnectError
        );

        pool.emit('reconnectFailed', error);
        if (typeof callback === 'function') {
          callback(error);
        }

        return;
      }

      // clear the reconnect id on retry
      pool.reconnectId = null;

      // now retry creating a connection
      createConnection(pool, (err, conn) => {
        if (err == null) {
          pool.reconnectId = null;
          pool.retriesLeft = pool.options.reconnectTries;
          pool.emit('reconnect', pool);
        }

        if (typeof callback === 'function') {
          callback(err, conn);
        }
      });
    };
  }

  function moveConnectionBetween(connection, from, to) {
    var index = from.indexOf(connection);
    // Move the connection from connecting to available
    if (index !== -1) {
      from.splice(index, 1);
      to.push(connection);
    }
  }

  function messageHandler(self) {
    return function(message, connection) {
      // workItem to execute
      var workItem = null;

      // Locate the workItem
      for (var i = 0; i < connection.workItems.length; i++) {
        if (connection.workItems[i].requestId === message.responseTo) {
          // Get the callback
          workItem = connection.workItems[i];
          // Remove from list of workItems
          connection.workItems.splice(i, 1);
        }
      }

      if (workItem && workItem.monitoring) {
        moveConnectionBetween(connection, self.inUseConnections, self.availableConnections);
      }

      // Reset timeout counter
      self.numberOfConsecutiveTimeouts = 0;

      // Reset the connection timeout if we modified it for
      // this operation
      if (workItem && workItem.socketTimeout) {
        connection.resetSocketTimeout();
      }

      // Log if debug enabled
      if (self.logger.isDebug()) {
        self.logger.debug(
          f$5(
            'message [%s] received from %s:%s',
            message.raw.toString('hex'),
            self.options.host,
            self.options.port
          )
        );
      }

      function handleOperationCallback(self, cb, err, result) {
        // No domain enabled
        if (!self.options.domainsEnabled) {
          return browser$1.nextTick(function() {
            return cb(err, result);
          });
        }

        // Domain enabled just call the callback
        cb(err, result);
      }

      // Keep executing, ensure current message handler does not stop execution
      if (!self.executing) {
        browser$1.nextTick(function() {
          _execute(self)();
        });
      }

      // Time to dispatch the message if we have a callback
      if (workItem && !workItem.immediateRelease) {
        try {
          // Parse the message according to the provided options
          message.parse(workItem);
        } catch (err) {
          return handleOperationCallback(self, workItem.cb, new MongoError$H(err));
        }

        if (message.documents[0]) {
          const document = message.documents[0];
          const session = workItem.session;
          if (session) {
            updateSessionFromResponse$1(session, document);
          }

          if (self.topology && document.$clusterTime) {
            self.topology.clusterTime = document.$clusterTime;
          }
        }

        // Establish if we have an error
        if (workItem.command && message.documents[0]) {
          const responseDoc = message.documents[0];

          if (responseDoc.writeConcernError) {
            const err = new MongoWriteConcernError$2(responseDoc.writeConcernError, responseDoc);
            return handleOperationCallback(self, workItem.cb, err);
          }

          if (responseDoc.ok === 0 || responseDoc.$err || responseDoc.errmsg || responseDoc.code) {
            return handleOperationCallback(self, workItem.cb, new MongoError$H(responseDoc));
          }
        }

        // Add the connection details
        message.hashedName = connection.hashedName;

        // Return the documents
        handleOperationCallback(
          self,
          workItem.cb,
          null,
          new CommandResult(workItem.fullResult ? message : message.documents[0], connection, message)
        );
      }
    };
  }

  /**
   * Return the total socket count in the pool.
   * @method
   * @return {Number} The number of socket available.
   */
  Pool$1.prototype.socketCount = function() {
    return this.availableConnections.length + this.inUseConnections.length;
    // + this.connectingConnections.length;
  };

  function totalConnectionCount(pool) {
    return (
      pool.availableConnections.length + pool.inUseConnections.length + pool.connectingConnections
    );
  }

  /**
   * Return all pool connections
   * @method
   * @return {Connection[]} The pool connections
   */
  Pool$1.prototype.allConnections = function() {
    return this.availableConnections.concat(this.inUseConnections);
  };

  /**
   * Get a pool connection (round-robin)
   * @method
   * @return {Connection}
   */
  Pool$1.prototype.get = function() {
    return this.allConnections()[0];
  };

  /**
   * Is the pool connected
   * @method
   * @return {boolean}
   */
  Pool$1.prototype.isConnected = function() {
    // We are in a destroyed state
    if (this.state === DESTROYED$2 || this.state === DESTROYING$1) {
      return false;
    }

    // Get connections
    var connections = this.availableConnections.concat(this.inUseConnections);

    // Check if we have any connected connections
    for (var i = 0; i < connections.length; i++) {
      if (connections[i].isConnected()) return true;
    }

    // Not connected
    return false;
  };

  /**
   * Was the pool destroyed
   * @method
   * @return {boolean}
   */
  Pool$1.prototype.isDestroyed = function() {
    return this.state === DESTROYED$2 || this.state === DESTROYING$1;
  };

  /**
   * Is the pool in a disconnected state
   * @method
   * @return {boolean}
   */
  Pool$1.prototype.isDisconnected = function() {
    return this.state === DISCONNECTED$2;
  };

  /**
   * Connect pool
   */
  Pool$1.prototype.connect = function(callback) {
    if (this.state !== DISCONNECTED$2) {
      throw new MongoError$H('connection in unlawful state ' + this.state);
    }

    stateTransition$3(this, CONNECTING$2);
    createConnection(this, (err, conn) => {
      if (err) {
        if (typeof callback === 'function') {
          this.destroy();
          callback(err);
          return;
        }

        if (this.state === CONNECTING$2) {
          this.emit('error', err);
        }

        this.destroy();
        return;
      }

      stateTransition$3(this, CONNECTED$2);

      // create min connections
      if (this.minSize) {
        for (let i = 0; i < this.minSize; i++) {
          createConnection(this);
        }
      }

      if (typeof callback === 'function') {
        callback(null, conn);
      } else {
        this.emit('connect', this, conn);
      }
    });
  };

  /**
   * Authenticate using a specified mechanism
   * @param {authResultCallback} callback A callback function
   */
  Pool$1.prototype.auth = function(credentials, callback) {
    if (typeof callback === 'function') callback(null, null);
  };

  /**
   * Logout all users against a database
   * @param {authResultCallback} callback A callback function
   */
  Pool$1.prototype.logout = function(dbName, callback) {
    if (typeof callback === 'function') callback(null, null);
  };

  /**
   * Unref the pool
   * @method
   */
  Pool$1.prototype.unref = function() {
    // Get all the known connections
    var connections = this.availableConnections.concat(this.inUseConnections);

    connections.forEach(function(c) {
      c.unref();
    });
  };

  // Destroy the connections
  function destroy(self, connections, options, callback) {
    stateTransition$3(self, DESTROYING$1);

    // indicate that in-flight connections should cancel
    self.s.cancellationToken.emit('cancel');

    eachAsync$1(
      connections,
      (conn, cb) => {
        for (const eventName of CONNECTION_EVENTS) {
          conn.removeAllListeners(eventName);
        }

        // ignore any errors during destruction
        conn.on('error', () => {});

        conn.destroy(options, cb);
      },
      err => {
        if (err) {
          if (typeof callback === 'function') callback(err, null);
          return;
        }

        resetPoolState(self);
        self.queue = [];

        stateTransition$3(self, DESTROYED$2);
        if (typeof callback === 'function') callback(null, null);
      }
    );
  }

  /**
   * Destroy pool
   * @method
   */
  Pool$1.prototype.destroy = function(force, callback) {
    var self = this;
    if (typeof force === 'function') {
      callback = force;
      force = false;
    }

    // Do not try again if the pool is already dead
    if (this.state === DESTROYED$2 || self.state === DESTROYING$1) {
      if (typeof callback === 'function') callback(null, null);
      return;
    }

    // Set state to draining
    stateTransition$3(this, DRAINING);

    // Are we force closing
    if (force) {
      // Get all the known connections
      var connections = self.availableConnections.concat(self.inUseConnections);

      // Flush any remaining work items with
      // an error
      while (self.queue.length > 0) {
        var workItem = self.queue.shift();
        if (typeof workItem.cb === 'function') {
          workItem.cb(new MongoError$H('Pool was force destroyed'));
        }
      }

      // Destroy the topology
      return destroy(self, connections, { force: true }, callback);
    }

    // Clear out the reconnect if set
    if (this.reconnectId) {
      clearTimeout(this.reconnectId);
    }

    // Wait for the operations to drain before we close the pool
    function checkStatus() {
      if (self.state === DESTROYED$2 || self.state === DESTROYING$1) {
        if (typeof callback === 'function') {
          callback();
        }

        return;
      }

      flushMonitoringOperations(self.queue);

      if (self.queue.length === 0) {
        // Get all the known connections
        var connections = self.availableConnections.concat(self.inUseConnections);

        // Check if we have any in flight operations
        for (var i = 0; i < connections.length; i++) {
          // There is an operation still in flight, reschedule a
          // check waiting for it to drain
          if (connections[i].workItems.length > 0) {
            return setTimeout(checkStatus, 1);
          }
        }

        destroy(self, connections, { force: false }, callback);
      } else {
        // Ensure we empty the queue
        _execute(self)();
        // Set timeout
        setTimeout(checkStatus, 1);
      }
    }

    // Initiate drain of operations
    checkStatus();
  };

  /**
   * Reset all connections of this pool
   *
   * @param {function} [callback]
   */
  Pool$1.prototype.reset = function(callback) {
    if (this.s.state !== CONNECTED$2) {
      if (typeof callback === 'function') {
        callback(new MongoError$H('pool is not connected, reset aborted'));
      }

      return;
    }

    // signal in-flight connections should be cancelled
    this.s.cancellationToken.emit('cancel');

    // destroy existing connections
    const connections = this.availableConnections.concat(this.inUseConnections);
    eachAsync$1(
      connections,
      (conn, cb) => {
        for (const eventName of CONNECTION_EVENTS) {
          conn.removeAllListeners(eventName);
        }

        conn.destroy({ force: true }, cb);
      },
      err => {
        if (err) {
          if (typeof callback === 'function') {
            callback(err, null);
            return;
          }
        }

        resetPoolState(this);

        // create a new connection, this will ultimately trigger execution
        createConnection(this, () => {
          if (typeof callback === 'function') {
            callback(null, null);
          }
        });
      }
    );
  };

  // Prepare the buffer that Pool.prototype.write() uses to send to the server
  function serializeCommand(self, command, callback) {
    const originalCommandBuffer = command.toBin();

    // Check whether we and the server have agreed to use a compressor
    const shouldCompress = !!self.options.agreedCompressor;
    if (!shouldCompress || !canCompress(command)) {
      return callback(null, originalCommandBuffer);
    }

    // Transform originalCommandBuffer into OP_COMPRESSED
    const concatenatedOriginalCommandBuffer = Buffer$4.concat(originalCommandBuffer);
    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);

    // Extract information needed for OP_COMPRESSED from the uncompressed message
    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);

    // Compress the message body
    compress(self, messageToBeCompressed, function(err, compressedMessage) {
      if (err) return callback(err, null);

      // Create the msgHeader of OP_COMPRESSED
      const msgHeader = Buffer$4.alloc(MESSAGE_HEADER_SIZE);
      msgHeader.writeInt32LE(
        MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length,
        0
      ); // messageLength
      msgHeader.writeInt32LE(command.requestId, 4); // requestID
      msgHeader.writeInt32LE(0, 8); // responseTo (zero)
      msgHeader.writeInt32LE(opcodes.OP_COMPRESSED, 12); // opCode

      // Create the compression details of OP_COMPRESSED
      const compressionDetails = Buffer$4.alloc(COMPRESSION_DETAILS_SIZE);
      compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode
      compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader
      compressionDetails.writeUInt8(compressorIDs[self.options.agreedCompressor], 8); // compressorID

      return callback(null, [msgHeader, compressionDetails, compressedMessage]);
    });
  }

  /**
   * Write a message to MongoDB
   * @method
   * @return {Connection}
   */
  Pool$1.prototype.write = function(command, options, cb) {
    var self = this;
    // Ensure we have a callback
    if (typeof options === 'function') {
      cb = options;
    }

    // Always have options
    options = options || {};

    // We need to have a callback function unless the message returns no response
    if (!(typeof cb === 'function') && !options.noResponse) {
      throw new MongoError$H('write method must provide a callback');
    }

    // Pool was destroyed error out
    if (this.state === DESTROYED$2 || this.state === DESTROYING$1) {
      cb(new MongoError$H('pool destroyed'));
      return;
    }

    if (this.state === DRAINING) {
      cb(new MongoError$H('pool is draining, new operations prohibited'));
      return;
    }

    if (this.options.domainsEnabled && browser$1.domain && typeof cb === 'function') {
      // if we have a domain bind to it
      var oldCb = cb;
      cb = browser$1.domain.bind(function() {
        // v8 - argumentsToArray one-liner
        var args = new Array(arguments.length);
        for (var i = 0; i < arguments.length; i++) {
          args[i] = arguments[i];
        }
        // bounce off event loop so domain switch takes place
        browser$1.nextTick(function() {
          oldCb.apply(null, args);
        });
      });
    }

    // Do we have an operation
    var operation = {
      cb: cb,
      raw: false,
      promoteLongs: true,
      promoteValues: true,
      promoteBuffers: false,
      fullResult: false
    };

    // Set the options for the parsing
    operation.promoteLongs = typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true;
    operation.promoteValues =
      typeof options.promoteValues === 'boolean' ? options.promoteValues : true;
    operation.promoteBuffers =
      typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false;
    operation.raw = typeof options.raw === 'boolean' ? options.raw : false;
    operation.immediateRelease =
      typeof options.immediateRelease === 'boolean' ? options.immediateRelease : false;
    operation.documentsReturnedIn = options.documentsReturnedIn;
    operation.command = typeof options.command === 'boolean' ? options.command : false;
    operation.fullResult = typeof options.fullResult === 'boolean' ? options.fullResult : false;
    operation.noResponse = typeof options.noResponse === 'boolean' ? options.noResponse : false;
    operation.session = options.session || null;

    // Optional per operation socketTimeout
    operation.socketTimeout = options.socketTimeout;
    operation.monitoring = options.monitoring;

    // Get the requestId
    operation.requestId = command.requestId;

    // If command monitoring is enabled we need to modify the callback here
    if (self.options.monitorCommands) {
      this.emit('commandStarted', new apm$1.CommandStartedEvent(this, command));

      operation.started = now$3();
      operation.cb = (err, reply) => {
        if (err) {
          self.emit(
            'commandFailed',
            new apm$1.CommandFailedEvent(this, command, err, operation.started)
          );
        } else {
          if (reply && reply.result && (reply.result.ok === 0 || reply.result.$err)) {
            self.emit(
              'commandFailed',
              new apm$1.CommandFailedEvent(this, command, reply.result, operation.started)
            );
          } else {
            self.emit(
              'commandSucceeded',
              new apm$1.CommandSucceededEvent(this, command, reply, operation.started)
            );
          }
        }

        if (typeof cb === 'function') cb(err, reply);
      };
    }

    // Prepare the operation buffer
    serializeCommand(self, command, (err, serializedBuffers) => {
      if (err) throw err;

      // Set the operation's buffer to the serialization of the commands
      operation.buffer = serializedBuffers;

      // If we have a monitoring operation schedule as the very first operation
      // Otherwise add to back of queue
      if (options.monitoring) {
        self.queue.unshift(operation);
      } else {
        self.queue.push(operation);
      }

      // Attempt to execute the operation
      if (!self.executing) {
        browser$1.nextTick(function() {
          _execute(self)();
        });
      }
    });
  };

  // Return whether a command contains an uncompressible command term
  // Will return true if command contains no uncompressible command terms
  function canCompress(command) {
    const commandDoc = command instanceof Msg$1 ? command.command : command.query;
    const commandName = Object.keys(commandDoc)[0];
    return !uncompressibleCommands.has(commandName);
  }

  // Remove connection method
  function remove(connection, connections) {
    for (var i = 0; i < connections.length; i++) {
      if (connections[i] === connection) {
        connections.splice(i, 1);
        return true;
      }
    }
  }

  function removeConnection(self, connection) {
    if (remove(connection, self.availableConnections)) return;
    if (remove(connection, self.inUseConnections)) return;
  }

  function createConnection(pool, callback) {
    if (pool.state === DESTROYED$2 || pool.state === DESTROYING$1) {
      if (typeof callback === 'function') {
        callback(new MongoError$H('Cannot create connection when pool is destroyed'));
      }

      return;
    }

    pool.connectingConnections++;
    connect$4(pool.options, pool.s.cancellationToken, (err, connection) => {
      pool.connectingConnections--;

      if (err) {
        if (pool.logger.isDebug()) {
          pool.logger.debug(`connection attempt failed with error [${JSON.stringify(err)}]`);
        }

        // check if reconnect is enabled, and attempt retry if so
        if (!pool.reconnectId && pool.options.reconnect) {
          if (pool.state === CONNECTING$2 && pool.options.legacyCompatMode) {
            callback(err);
            return;
          }

          pool.reconnectError = err;
          pool.reconnectId = setTimeout(
            attemptReconnect(pool, callback),
            pool.options.reconnectInterval
          );

          return;
        }

        if (typeof callback === 'function') {
          callback(err);
        }

        return;
      }

      // the pool might have been closed since we started creating the connection
      if (pool.state === DESTROYED$2 || pool.state === DESTROYING$1) {
        if (typeof callback === 'function') {
          callback(new MongoError$H('Pool was destroyed after connection creation'));
        }

        connection.destroy();
        return;
      }

      // otherwise, connect relevant event handlers and add it to our available connections
      connection.on('error', pool._connectionErrorHandler);
      connection.on('close', pool._connectionCloseHandler);
      connection.on('timeout', pool._connectionTimeoutHandler);
      connection.on('parseError', pool._connectionParseErrorHandler);
      connection.on('message', pool._messageHandler);

      pool.availableConnections.push(connection);

      // if a callback was provided, return the connection
      if (typeof callback === 'function') {
        callback(null, connection);
      }

      // immediately execute any waiting work
      _execute(pool)();
    });
  }

  function flushMonitoringOperations(queue) {
    for (var i = 0; i < queue.length; i++) {
      if (queue[i].monitoring) {
        var workItem = queue[i];
        queue.splice(i, 1);
        workItem.cb(
          new MongoError$H({ message: 'no connection available for monitoring', driver: true })
        );
      }
    }
  }

  function _execute(self) {
    return function() {
      if (self.state === DESTROYED$2) return;
      // Already executing, skip
      if (self.executing) return;
      // Set pool as executing
      self.executing = true;

      // New pool connections are in progress, wait them to finish
      // before executing any more operation to ensure distribution of
      // operations
      if (self.connectingConnections > 0) {
        self.executing = false;
        return;
      }

      // As long as we have available connections
      // eslint-disable-next-line
      while (true) {
        // Total availble connections
        const totalConnections = totalConnectionCount(self);

        // No available connections available, flush any monitoring ops
        if (self.availableConnections.length === 0) {
          // Flush any monitoring operations
          flushMonitoringOperations(self.queue);

          // Try to create a new connection to execute stuck operation
          if (totalConnections < self.options.size && self.queue.length > 0) {
            createConnection(self);
          }

          break;
        }

        // No queue break
        if (self.queue.length === 0) {
          break;
        }

        var connection = null;
        const connections = self.availableConnections.filter(conn => conn.workItems.length === 0);

        // No connection found that has no work on it, just pick one for pipelining
        if (connections.length === 0) {
          connection =
            self.availableConnections[self.connectionIndex++ % self.availableConnections.length];
        } else {
          connection = connections[self.connectionIndex++ % connections.length];
        }

        // Is the connection connected
        if (!connection.isConnected()) {
          // Remove the disconnected connection
          removeConnection(self, connection);
          // Flush any monitoring operations in the queue, failing fast
          flushMonitoringOperations(self.queue);
          break;
        }

        // Get the next work item
        var workItem = self.queue.shift();

        // If we are monitoring we need to use a connection that is not
        // running another operation to avoid socket timeout changes
        // affecting an existing operation
        if (workItem.monitoring) {
          var foundValidConnection = false;

          for (let i = 0; i < self.availableConnections.length; i++) {
            // If the connection is connected
            // And there are no pending workItems on it
            // Then we can safely use it for monitoring.
            if (
              self.availableConnections[i].isConnected() &&
              self.availableConnections[i].workItems.length === 0
            ) {
              foundValidConnection = true;
              connection = self.availableConnections[i];
              break;
            }
          }

          // No safe connection found, attempt to grow the connections
          // if possible and break from the loop
          if (!foundValidConnection) {
            // Put workItem back on the queue
            self.queue.unshift(workItem);

            // Attempt to grow the pool if it's not yet maxsize
            if (totalConnections < self.options.size && self.queue.length > 0) {
              // Create a new connection
              createConnection(self);
            }

            // Re-execute the operation
            setTimeout(() => _execute(self)(), 10);
            break;
          }
        }

        // Don't execute operation until we have a full pool
        if (totalConnections < self.options.size) {
          // Connection has work items, then put it back on the queue
          // and create a new connection
          if (connection.workItems.length > 0) {
            // Lets put the workItem back on the list
            self.queue.unshift(workItem);
            // Create a new connection
            createConnection(self);
            // Break from the loop
            break;
          }
        }

        // Get actual binary commands
        var buffer = workItem.buffer;

        // If we are monitoring take the connection of the availableConnections
        if (workItem.monitoring) {
          moveConnectionBetween(connection, self.availableConnections, self.inUseConnections);
        }

        // Track the executing commands on the mongo server
        // as long as there is an expected response
        if (!workItem.noResponse) {
          connection.workItems.push(workItem);
        }

        // We have a custom socketTimeout
        if (!workItem.immediateRelease && typeof workItem.socketTimeout === 'number') {
          connection.setSocketTimeout(workItem.socketTimeout);
        }

        // Capture if write was successful
        var writeSuccessful = true;

        // Put operation on the wire
        if (Array.isArray(buffer)) {
          for (let i = 0; i < buffer.length; i++) {
            writeSuccessful = connection.write(buffer[i]);
          }
        } else {
          writeSuccessful = connection.write(buffer);
        }

        // if the command is designated noResponse, call the callback immeditely
        if (workItem.noResponse && typeof workItem.cb === 'function') {
          workItem.cb(null, null);
        }

        if (writeSuccessful === false) {
          // If write not successful put back on queue
          self.queue.unshift(workItem);
          // Remove the disconnected connection
          removeConnection(self, connection);
          // Flush any monitoring operations in the queue, failing fast
          flushMonitoringOperations(self.queue);
          break;
        }
      }

      self.executing = false;
    };
  }

  // Make execution loop available for testing
  Pool$1._execute = _execute;

  /**
   * A server connect event, used to verify that the connection is up and running
   *
   * @event Pool#connect
   * @type {Pool}
   */

  /**
   * A server reconnect event, used to verify that pool reconnected.
   *
   * @event Pool#reconnect
   * @type {Pool}
   */

  /**
   * The server connection closed, all pool connections closed
   *
   * @event Pool#close
   * @type {Pool}
   */

  /**
   * The server connection caused an error, all pool connections closed
   *
   * @event Pool#error
   * @type {Pool}
   */

  /**
   * The server connection timed out, all pool connections closed
   *
   * @event Pool#timeout
   * @type {Pool}
   */

  /**
   * The driver experienced an invalid message, all pool connections closed
   *
   * @event Pool#parseError
   * @type {Pool}
   */

  /**
   * The driver attempted to reconnect
   *
   * @event Pool#attemptReconnect
   * @type {Pool}
   */

  /**
   * The driver exhausted all reconnect attempts
   *
   * @event Pool#reconnectFailed
   * @type {Pool}
   */

  module.exports = Pool$1;

  var pool = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  /**
   * The **ReadConcern** class is a class that represents a MongoDB ReadConcern.
   * @class
   * @property {string} level The read concern level
   * @see https://docs.mongodb.com/manual/reference/read-concern/index.html
   */
  class ReadConcern$2 {
    /**
     * Constructs a ReadConcern from the read concern properties.
     * @param {string} [level] The read concern level ({'local'|'available'|'majority'|'linearizable'|'snapshot'})
     */
    constructor(level) {
      if (level != null) {
        this.level = level;
      }
    }

    /**
     * Construct a ReadConcern given an options object.
     *
     * @param {object} options The options object from which to extract the write concern.
     * @return {ReadConcern}
     */
    static fromOptions(options) {
      if (options == null) {
        return;
      }

      if (options.readConcern) {
        if (options.readConcern instanceof ReadConcern$2) {
          return options.readConcern;
        }

        return new ReadConcern$2(options.readConcern.level);
      }

      if (options.level) {
        return new ReadConcern$2(options.level);
      }
    }

    static get MAJORITY() {
      return 'majority';
    }

    static get AVAILABLE() {
      return 'available';
    }

    static get LINEARIZABLE() {
      return 'linearizable';
    }

    static get SNAPSHOT() {
      return 'snapshot';
    }
  }

  var read_concern = ReadConcern$2;

  const kWriteConcernKeys = new Set(['w', 'wtimeout', 'j', 'journal', 'fsync']);
  let utils;

  /**
   * The **WriteConcern** class is a class that represents a MongoDB WriteConcern.
   * @class
   * @property {(number|string)} w The write concern
   * @property {number} wtimeout The write concern timeout
   * @property {boolean} j The journal write concern
   * @property {boolean} fsync The file sync write concern
   * @see https://docs.mongodb.com/manual/reference/write-concern/index.html
   */
  class WriteConcern$2 {
    /**
     * Constructs a WriteConcern from the write concern properties.
     * @param {(number|string)} [w] The write concern
     * @param {number} [wtimeout] The write concern timeout
     * @param {boolean} [j] The journal write concern
     * @param {boolean} [fsync] The file sync write concern
     */
    constructor(w, wtimeout, j, fsync) {
      if (w != null) {
        this.w = w;
      }
      if (wtimeout != null) {
        this.wtimeout = wtimeout;
      }
      if (j != null) {
        this.j = j;
      }
      if (fsync != null) {
        this.fsync = fsync;
      }
    }

    /**
     * Construct a WriteConcern given an options object.
     *
     * @param {object} [options] The options object from which to extract the write concern.
     * @param {(number|string)} [options.w] **Deprecated** Use `options.writeConcern` instead
     * @param {number} [options.wtimeout] **Deprecated** Use `options.writeConcern` instead
     * @param {boolean} [options.j] **Deprecated** Use `options.writeConcern` instead
     * @param {boolean} [options.fsync] **Deprecated** Use `options.writeConcern` instead
     * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
     * @return {WriteConcern}
     */
    static fromOptions(options) {
      if (
        options == null ||
        (options.writeConcern == null &&
          options.w == null &&
          options.wtimeout == null &&
          options.j == null &&
          options.journal == null &&
          options.fsync == null)
      ) {
        return;
      }

      if (options.writeConcern) {
        if (typeof options.writeConcern === 'string') {
          return new WriteConcern$2(options.writeConcern);
        }

        if (!Object.keys(options.writeConcern).some(key => kWriteConcernKeys.has(key))) {
          return;
        }

        return new WriteConcern$2(
          options.writeConcern.w,
          options.writeConcern.wtimeout,
          options.writeConcern.j || options.writeConcern.journal,
          options.writeConcern.fsync
        );
      }

      // this is down here to prevent circular dependency
      if (!utils) utils = require$$1$1;

      utils.emitWarningOnce(
        `Top-level use of w, wtimeout, j, and fsync is deprecated. Use writeConcern instead.`
      );
      return new WriteConcern$2(
        options.w,
        options.wtimeout,
        options.j || options.journal,
        options.fsync
      );
    }
  }

  var write_concern = WriteConcern$2;

  const MongoError$G = error$2.MongoError;




  let TxnState$1;
  let stateMachine;

  (() => {
    const NO_TRANSACTION = 'NO_TRANSACTION';
    const STARTING_TRANSACTION = 'STARTING_TRANSACTION';
    const TRANSACTION_IN_PROGRESS = 'TRANSACTION_IN_PROGRESS';
    const TRANSACTION_COMMITTED = 'TRANSACTION_COMMITTED';
    const TRANSACTION_COMMITTED_EMPTY = 'TRANSACTION_COMMITTED_EMPTY';
    const TRANSACTION_ABORTED = 'TRANSACTION_ABORTED';

    TxnState$1 = {
      NO_TRANSACTION,
      STARTING_TRANSACTION,
      TRANSACTION_IN_PROGRESS,
      TRANSACTION_COMMITTED,
      TRANSACTION_COMMITTED_EMPTY,
      TRANSACTION_ABORTED
    };

    stateMachine = {
      [NO_TRANSACTION]: [NO_TRANSACTION, STARTING_TRANSACTION],
      [STARTING_TRANSACTION]: [
        TRANSACTION_IN_PROGRESS,
        TRANSACTION_COMMITTED,
        TRANSACTION_COMMITTED_EMPTY,
        TRANSACTION_ABORTED
      ],
      [TRANSACTION_IN_PROGRESS]: [
        TRANSACTION_IN_PROGRESS,
        TRANSACTION_COMMITTED,
        TRANSACTION_ABORTED
      ],
      [TRANSACTION_COMMITTED]: [
        TRANSACTION_COMMITTED,
        TRANSACTION_COMMITTED_EMPTY,
        STARTING_TRANSACTION,
        NO_TRANSACTION
      ],
      [TRANSACTION_ABORTED]: [STARTING_TRANSACTION, NO_TRANSACTION],
      [TRANSACTION_COMMITTED_EMPTY]: [TRANSACTION_COMMITTED_EMPTY, NO_TRANSACTION]
    };
  })();

  /**
   * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties
   * of the data read from replica sets and replica set shards.
   * @typedef {Object} ReadConcern
   * @property {'local'|'available'|'majority'|'linearizable'|'snapshot'} level The readConcern Level
   * @see https://docs.mongodb.com/manual/reference/read-concern/
   */

  /**
   * A MongoDB WriteConcern, which describes the level of acknowledgement
   * requested from MongoDB for write operations.
   * @typedef {Object} WriteConcern
   * @property {number|'majority'|string} [w=1] requests acknowledgement that the write operation has
   * propagated to a specified number of mongod hosts
   * @property {boolean} [j=false] requests acknowledgement from MongoDB that the write operation has
   * been written to the journal
   * @property {number} [wtimeout] a time limit, in milliseconds, for the write concern
   * @see https://docs.mongodb.com/manual/reference/write-concern/
   */

  /**
   * Configuration options for a transaction.
   * @typedef {Object} TransactionOptions
   * @property {ReadConcern} [readConcern] A default read concern for commands in this transaction
   * @property {WriteConcern} [writeConcern] A default writeConcern for commands in this transaction
   * @property {ReadPreference} [readPreference] A default read preference for commands in this transaction
   */

  /**
   * A class maintaining state related to a server transaction. Internal Only
   * @ignore
   */
  class Transaction$1 {
    /**
     * Create a transaction
     *
     * @ignore
     * @param {TransactionOptions} [options] Optional settings
     */
    constructor(options) {
      options = options || {};

      this.state = TxnState$1.NO_TRANSACTION;
      this.options = {};

      const writeConcern = write_concern.fromOptions(options);
      if (writeConcern) {
        if (writeConcern.w <= 0) {
          throw new MongoError$G('Transactions do not support unacknowledged write concern');
        }

        this.options.writeConcern = writeConcern;
      }

      if (options.readConcern) {
        this.options.readConcern = read_concern.fromOptions(options);
      }

      if (options.readPreference) {
        this.options.readPreference = read_preference.fromOptions(options);
      }

      if (options.maxCommitTimeMS) {
        this.options.maxTimeMS = options.maxCommitTimeMS;
      }

      // TODO: This isn't technically necessary
      this._pinnedServer = undefined;
      this._recoveryToken = undefined;
    }

    get server() {
      return this._pinnedServer;
    }

    get recoveryToken() {
      return this._recoveryToken;
    }

    get isPinned() {
      return !!this.server;
    }

    /**
     * @ignore
     * @return Whether this session is presently in a transaction
     */
    get isActive() {
      return (
        [TxnState$1.STARTING_TRANSACTION, TxnState$1.TRANSACTION_IN_PROGRESS].indexOf(this.state) !== -1
      );
    }

    /**
     * Transition the transaction in the state machine
     * @ignore
     * @param {TxnState} state The new state to transition to
     */
    transition(nextState) {
      const nextStates = stateMachine[this.state];
      if (nextStates && nextStates.indexOf(nextState) !== -1) {
        this.state = nextState;
        if (this.state === TxnState$1.NO_TRANSACTION || this.state === TxnState$1.STARTING_TRANSACTION) {
          this.unpinServer();
        }
        return;
      }

      throw new MongoError$G(
        `Attempted illegal state transition from [${this.state}] to [${nextState}]`
      );
    }

    pinServer(server) {
      if (this.isActive) {
        this._pinnedServer = server;
      }
    }

    unpinServer() {
      this._pinnedServer = undefined;
    }
  }

  function isTransactionCommand$2(command) {
    return !!(command.commitTransaction || command.abortTransaction);
  }

  var transactions = { TxnState: TxnState$1, Transaction: Transaction$1, isTransactionCommand: isTransactionCommand$2 };

  var require$$2 = /*@__PURE__*/getAugmentedNamespace(utils$3);

  const TopologyType$1 = common$2.TopologyType;
  const MongoError$F = error$2.MongoError;
  const isRetryableWriteError = error$2.isRetryableWriteError;
  const maxWireVersion$e = require$$2.maxWireVersion;
  const MongoNetworkError$7 = error$2.MongoNetworkError;
  const MMAPv1_RETRY_WRITES_ERROR_CODE = 20;

  /**
   * Emit event if it exists
   * @method
   */
  function emitSDAMEvent$2(self, event, description) {
    if (self.listeners(event).length > 0) {
      self.emit(event, description);
    }
  }

  function createCompressionInfo$2(options) {
    if (!options.compression || !options.compression.compressors) {
      return [];
    }

    // Check that all supplied compressors are valid
    options.compression.compressors.forEach(function(compressor) {
      if (compressor !== 'snappy' && compressor !== 'zlib') {
        throw new Error('compressors must be at least one of snappy or zlib');
      }
    });

    return options.compression.compressors;
  }

  function clone(object) {
    return JSON.parse(JSON.stringify(object));
  }

  var getPreviousDescription = function(self) {
    if (!self.s.serverDescription) {
      self.s.serverDescription = {
        address: self.name,
        arbiters: [],
        hosts: [],
        passives: [],
        type: 'Unknown'
      };
    }

    return self.s.serverDescription;
  };

  var emitServerDescriptionChanged = function(self, description) {
    if (self.listeners('serverDescriptionChanged').length > 0) {
      // Emit the server description changed events
      self.emit('serverDescriptionChanged', {
        topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,
        address: self.name,
        previousDescription: getPreviousDescription(self),
        newDescription: description
      });

      self.s.serverDescription = description;
    }
  };

  var getPreviousTopologyDescription = function(self) {
    if (!self.s.topologyDescription) {
      self.s.topologyDescription = {
        topologyType: 'Unknown',
        servers: [
          {
            address: self.name,
            arbiters: [],
            hosts: [],
            passives: [],
            type: 'Unknown'
          }
        ]
      };
    }

    return self.s.topologyDescription;
  };

  var emitTopologyDescriptionChanged$1 = function(self, description) {
    if (self.listeners('topologyDescriptionChanged').length > 0) {
      // Emit the server description changed events
      self.emit('topologyDescriptionChanged', {
        topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,
        address: self.name,
        previousDescription: getPreviousTopologyDescription(self),
        newDescription: description
      });

      self.s.serverDescription = description;
    }
  };

  var changedIsMaster = function(self, currentIsmaster, ismaster) {
    var currentType = getTopologyType(self, currentIsmaster);
    var newType = getTopologyType(self, ismaster);
    if (newType !== currentType) return true;
    return false;
  };

  var getTopologyType = function(self, ismaster) {
    if (!ismaster) {
      ismaster = self.ismaster;
    }

    if (!ismaster) return 'Unknown';
    if (ismaster.ismaster && ismaster.msg === 'isdbgrid') return 'Mongos';
    if (ismaster.ismaster && !ismaster.hosts) return 'Standalone';
    if (ismaster.ismaster) return 'RSPrimary';
    if (ismaster.secondary) return 'RSSecondary';
    if (ismaster.arbiterOnly) return 'RSArbiter';
    return 'Unknown';
  };

  var inquireServerState = function(self) {
    return function(callback) {
      if (self.s.state === 'destroyed') return;
      // Record response time
      var start = new Date().getTime();

      // emitSDAMEvent
      emitSDAMEvent$2(self, 'serverHeartbeatStarted', { connectionId: self.name });

      // Attempt to execute ismaster command
      self.command('admin.$cmd', { ismaster: true }, { monitoring: true }, function(err, r) {
        if (!err) {
          // Legacy event sender
          self.emit('ismaster', r, self);

          // Calculate latencyMS
          var latencyMS = new Date().getTime() - start;

          // Server heart beat event
          emitSDAMEvent$2(self, 'serverHeartbeatSucceeded', {
            durationMS: latencyMS,
            reply: r.result,
            connectionId: self.name
          });

          // Did the server change
          if (changedIsMaster(self, self.s.ismaster, r.result)) {
            // Emit server description changed if something listening
            emitServerDescriptionChanged(self, {
              address: self.name,
              arbiters: [],
              hosts: [],
              passives: [],
              type: !self.s.inTopology ? 'Standalone' : getTopologyType(self)
            });
          }

          // Updat ismaster view
          self.s.ismaster = r.result;

          // Set server response time
          self.s.isMasterLatencyMS = latencyMS;
        } else {
          emitSDAMEvent$2(self, 'serverHeartbeatFailed', {
            durationMS: latencyMS,
            failure: err,
            connectionId: self.name
          });
        }

        // Peforming an ismaster monitoring callback operation
        if (typeof callback === 'function') {
          return callback(err, r);
        }

        // Perform another sweep
        self.s.inquireServerStateTimeout = setTimeout(inquireServerState(self), self.s.haInterval);
      });
    };
  };

  //
  // Clone the options
  var cloneOptions$1 = function(options) {
    var opts = {};
    for (var name in options) {
      opts[name] = options[name];
    }
    return opts;
  };

  function Interval$1(fn, time) {
    var timer = false;

    this.start = function() {
      if (!this.isRunning()) {
        timer = setInterval(fn, time);
      }

      return this;
    };

    this.stop = function() {
      clearInterval(timer);
      timer = false;
      return this;
    };

    this.isRunning = function() {
      return timer !== false;
    };
  }

  function Timeout$1(fn, time) {
    var timer = false;
    var func = () => {
      if (timer) {
        clearTimeout(timer);
        timer = false;

        fn();
      }
    };

    this.start = function() {
      if (!this.isRunning()) {
        timer = setTimeout(func, time);
      }
      return this;
    };

    this.stop = function() {
      clearTimeout(timer);
      timer = false;
      return this;
    };

    this.isRunning = function() {
      return timer !== false;
    };
  }

  function diff$1(previous, current) {
    // Difference document
    var diff = {
      servers: []
    };

    // Previous entry
    if (!previous) {
      previous = { servers: [] };
    }

    // Check if we have any previous servers missing in the current ones
    for (var i = 0; i < previous.servers.length; i++) {
      var found = false;

      for (var j = 0; j < current.servers.length; j++) {
        if (current.servers[j].address.toLowerCase() === previous.servers[i].address.toLowerCase()) {
          found = true;
          break;
        }
      }

      if (!found) {
        // Add to the diff
        diff.servers.push({
          address: previous.servers[i].address,
          from: previous.servers[i].type,
          to: 'Unknown'
        });
      }
    }

    // Check if there are any severs that don't exist
    for (j = 0; j < current.servers.length; j++) {
      found = false;

      // Go over all the previous servers
      for (i = 0; i < previous.servers.length; i++) {
        if (previous.servers[i].address.toLowerCase() === current.servers[j].address.toLowerCase()) {
          found = true;
          break;
        }
      }

      // Add the server to the diff
      if (!found) {
        diff.servers.push({
          address: current.servers[j].address,
          from: 'Unknown',
          to: current.servers[j].type
        });
      }
    }

    // Got through all the servers
    for (i = 0; i < previous.servers.length; i++) {
      var prevServer = previous.servers[i];

      // Go through all current servers
      for (j = 0; j < current.servers.length; j++) {
        var currServer = current.servers[j];

        // Matching server
        if (prevServer.address.toLowerCase() === currServer.address.toLowerCase()) {
          // We had a change in state
          if (prevServer.type !== currServer.type) {
            diff.servers.push({
              address: prevServer.address,
              from: prevServer.type,
              to: currServer.type
            });
          }
        }
      }
    }

    // Return difference
    return diff;
  }

  /**
   * Shared function to determine clusterTime for a given topology
   *
   * @param {*} topology
   * @param {*} clusterTime
   */
  function resolveClusterTime$3(topology, $clusterTime) {
    if (topology.clusterTime == null) {
      topology.clusterTime = $clusterTime;
    } else {
      if ($clusterTime.clusterTime.greaterThan(topology.clusterTime.clusterTime)) {
        topology.clusterTime = $clusterTime;
      }
    }
  }

  // NOTE: this is a temporary move until the topologies can be more formally refactored
  //       to share code.
  const SessionMixins$3 = {
    endSessions: function(sessions, callback) {
      if (!Array.isArray(sessions)) {
        sessions = [sessions];
      }

      // TODO:
      //   When connected to a sharded cluster the endSessions command
      //   can be sent to any mongos. When connected to a replica set the
      //   endSessions command MUST be sent to the primary if the primary
      //   is available, otherwise it MUST be sent to any available secondary.
      //   Is it enough to use: ReadPreference.primaryPreferred ?
      this.command(
        'admin.$cmd',
        { endSessions: sessions },
        { readPreference: read_preference.primaryPreferred },
        () => {
          // intentionally ignored, per spec
          if (typeof callback === 'function') callback();
        }
      );
    }
  };

  function topologyType(topology) {
    if (topology.description) {
      return topology.description.type;
    }

    if (topology.type === 'mongos') {
      return TopologyType$1.Sharded;
    } else if (topology.type === 'replset') {
      return TopologyType$1.ReplicaSetWithPrimary;
    }

    return TopologyType$1.Single;
  }

  const RETRYABLE_WIRE_VERSION = 6;

  /**
   * Determines whether the provided topology supports retryable writes
   *
   * @param {Mongos|Replset} topology
   */
  const isRetryableWritesSupported$3 = function(topology) {
    const maxWireVersion = topology.lastIsMaster().maxWireVersion;
    if (maxWireVersion < RETRYABLE_WIRE_VERSION) {
      return false;
    }

    if (!topology.logicalSessionTimeoutMinutes) {
      return false;
    }

    if (topologyType(topology) === TopologyType$1.Single) {
      return false;
    }

    return true;
  };

  const MMAPv1_RETRY_WRITES_ERROR_MESSAGE =
    'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';

  function getMMAPError$3(err) {
    if (err.code !== MMAPv1_RETRY_WRITES_ERROR_CODE || !err.errmsg.includes('Transaction numbers')) {
      return err;
    }

    // According to the retryable writes spec, we must replace the error message in this case.
    // We need to replace err.message so the thrown message is correct and we need to replace err.errmsg to meet the spec requirement.
    const newErr = new MongoError$F({
      message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,
      errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,
      originalError: err
    });
    return newErr;
  }

  // NOTE: only used for legacy topology types
  function legacyIsRetryableWriteError$2(err, topology) {
    if (!(err instanceof MongoError$F)) {
      return false;
    }

    // if pre-4.4 server, then add error label if its a retryable write error
    if (
      isRetryableWritesSupported$3(topology) &&
      (err instanceof MongoNetworkError$7 ||
        (maxWireVersion$e(topology) < 9 && isRetryableWriteError(err)))
    ) {
      err.addErrorLabel('RetryableWriteError');
    }

    return err.hasErrorLabel('RetryableWriteError');
  }

  var shared = {
    SessionMixins: SessionMixins$3,
    resolveClusterTime: resolveClusterTime$3,
    inquireServerState,
    getTopologyType,
    emitServerDescriptionChanged,
    emitTopologyDescriptionChanged: emitTopologyDescriptionChanged$1,
    cloneOptions: cloneOptions$1,
    createCompressionInfo: createCompressionInfo$2,
    clone,
    diff: diff$1,
    Interval: Interval$1,
    Timeout: Timeout$1,
    isRetryableWritesSupported: isRetryableWritesSupported$3,
    getMMAPError: getMMAPError$3,
    topologyType,
    legacyIsRetryableWriteError: legacyIsRetryableWriteError$2
  };

  const retrieveBSON$7 = utils$2.retrieveBSON;

  const BSON$b = retrieveBSON$7();
  const Binary$3 = BSON$b.Binary;
  const uuidV4 = require$$2.uuidV4;
  const MongoError$E = error$2.MongoError;
  const isRetryableError$1 = error$2.isRetryableError;
  const MongoNetworkError$6 = error$2.MongoNetworkError;
  const MongoWriteConcernError$1 = error$2.MongoWriteConcernError;
  const Transaction = transactions.Transaction;
  const TxnState = transactions.TxnState;
  const isPromiseLike$1 = require$$2.isPromiseLike;

  const maybePromise$4 = require$$1$1.maybePromise;
  const isTransactionCommand$1 = transactions.isTransactionCommand;
  const resolveClusterTime$2 = shared.resolveClusterTime;
  const isSharded$2 = shared$1.isSharded;
  const maxWireVersion$d = require$$2.maxWireVersion;
  const now$2 = require$$1$1.now;
  const calculateDurationInMs$2 = require$$1$1.calculateDurationInMs;
  const minWireVersionForShardedTransactions = 8;

  function assertAlive(session, callback) {
    if (session.serverSession == null) {
      const error = new MongoError$E('Cannot use a session that has ended');
      if (typeof callback === 'function') {
        callback(error, null);
        return false;
      }

      throw error;
    }

    return true;
  }

  /**
   * Options to pass when creating a Client Session
   * @typedef {Object} SessionOptions
   * @property {boolean} [causalConsistency=true] Whether causal consistency should be enabled on this session
   * @property {TransactionOptions} [defaultTransactionOptions] The default TransactionOptions to use for transactions started on this session.
   */

  /**
   * A BSON document reflecting the lsid of a {@link ClientSession}
   * @typedef {Object} SessionId
   */

  const kServerSession = Symbol('serverSession');

  /**
   * A class representing a client session on the server
   * WARNING: not meant to be instantiated directly.
   * @class
   * @hideconstructor
   */
  class ClientSession$2 extends require$$0$1 {
    /**
     * Create a client session.
     * WARNING: not meant to be instantiated directly
     *
     * @param {Topology} topology The current client's topology (Internal Class)
     * @param {ServerSessionPool} sessionPool The server session pool (Internal Class)
     * @param {SessionOptions} [options] Optional settings
     * @param {Object} [clientOptions] Optional settings provided when creating a client in the porcelain driver
     */
    constructor(topology, sessionPool, options, clientOptions) {
      super();

      if (topology == null) {
        throw new Error('ClientSession requires a topology');
      }

      if (sessionPool == null || !(sessionPool instanceof ServerSessionPool$2)) {
        throw new Error('ClientSession requires a ServerSessionPool');
      }

      options = options || {};
      clientOptions = clientOptions || {};

      this.topology = topology;
      this.sessionPool = sessionPool;
      this.hasEnded = false;
      this.clientOptions = clientOptions;
      this[kServerSession] = undefined;

      this.supports = {
        causalConsistency:
          typeof options.causalConsistency !== 'undefined' ? options.causalConsistency : true
      };

      this.clusterTime = options.initialClusterTime;

      this.operationTime = null;
      this.explicit = !!options.explicit;
      this.owner = options.owner;
      this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);
      this.transaction = new Transaction();
    }

    /**
     * The server id associated with this session
     * @type {SessionId}
     */
    get id() {
      return this.serverSession.id;
    }

    get serverSession() {
      if (this[kServerSession] == null) {
        this[kServerSession] = this.sessionPool.acquire();
      }

      return this[kServerSession];
    }

    /**
     * Ends this session on the server
     *
     * @param {Object} [options] Optional settings. Currently reserved for future use
     * @param {Function} [callback] Optional callback for completion of this operation
     */
    endSession(options, callback) {
      if (typeof options === 'function') (callback = options), (options = {});
      options = options || {};

      const session = this;
      return maybePromise$4(this, callback, done => {
        if (session.hasEnded) {
          return done();
        }

        function completeEndSession() {
          // release the server session back to the pool
          session.sessionPool.release(session.serverSession);
          session[kServerSession] = undefined;

          // mark the session as ended, and emit a signal
          session.hasEnded = true;
          session.emit('ended', session);

          // spec indicates that we should ignore all errors for `endSessions`
          done();
        }

        if (session.serverSession && session.inTransaction()) {
          session.abortTransaction(err => {
            if (err) return done(err);
            completeEndSession();
          });

          return;
        }

        completeEndSession();
      });
    }

    /**
     * Advances the operationTime for a ClientSession.
     *
     * @param {Timestamp} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to
     */
    advanceOperationTime(operationTime) {
      if (this.operationTime == null) {
        this.operationTime = operationTime;
        return;
      }

      if (operationTime.greaterThan(this.operationTime)) {
        this.operationTime = operationTime;
      }
    }

    /**
     * Used to determine if this session equals another
     * @param {ClientSession} session
     * @return {boolean} true if the sessions are equal
     */
    equals(session) {
      if (!(session instanceof ClientSession$2)) {
        return false;
      }

      return this.id.id.buffer.equals(session.id.id.buffer);
    }

    /**
     * Increment the transaction number on the internal ServerSession
     */
    incrementTransactionNumber() {
      this.serverSession.txnNumber++;
    }

    /**
     * @returns {boolean} whether this session is currently in a transaction or not
     */
    inTransaction() {
      return this.transaction.isActive;
    }

    /**
     * Starts a new transaction with the given options.
     *
     * @param {TransactionOptions} options Options for the transaction
     */
    startTransaction(options) {
      assertAlive(this);
      if (this.inTransaction()) {
        throw new MongoError$E('Transaction already in progress');
      }

      const topologyMaxWireVersion = maxWireVersion$d(this.topology);
      if (
        isSharded$2(this.topology) &&
        topologyMaxWireVersion != null &&
        topologyMaxWireVersion < minWireVersionForShardedTransactions
      ) {
        throw new MongoError$E('Transactions are not supported on sharded clusters in MongoDB < 4.2.');
      }

      // increment txnNumber
      this.incrementTransactionNumber();

      // create transaction state
      this.transaction = new Transaction(
        Object.assign({}, this.clientOptions, options || this.defaultTransactionOptions)
      );

      this.transaction.transition(TxnState.STARTING_TRANSACTION);
    }

    /**
     * Commits the currently active transaction in this session.
     *
     * @param {Function} [callback] optional callback for completion of this operation
     * @return {Promise} A promise is returned if no callback is provided
     */
    commitTransaction(callback) {
      return maybePromise$4(this, callback, done => endTransaction(this, 'commitTransaction', done));
    }

    /**
     * Aborts the currently active transaction in this session.
     *
     * @param {Function} [callback] optional callback for completion of this operation
     * @return {Promise} A promise is returned if no callback is provided
     */
    abortTransaction(callback) {
      return maybePromise$4(this, callback, done => endTransaction(this, 'abortTransaction', done));
    }

    /**
     * This is here to ensure that ClientSession is never serialized to BSON.
     * @ignore
     */
    toBSON() {
      throw new Error('ClientSession cannot be serialized to BSON.');
    }

    /**
     * A user provided function to be run within a transaction
     *
     * @callback WithTransactionCallback
     * @param {ClientSession} session The parent session of the transaction running the operation. This should be passed into each operation within the lambda.
     * @returns {Promise} The resulting Promise of operations run within this transaction
     */

    /**
     * Runs a provided lambda within a transaction, retrying either the commit operation
     * or entire transaction as needed (and when the error permits) to better ensure that
     * the transaction can complete successfully.
     *
     * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not
     * return a Promise will result in undefined behavior.
     *
     * @param {WithTransactionCallback} fn
     * @param {TransactionOptions} [options] Optional settings for the transaction
     */
    withTransaction(fn, options) {
      const startTime = now$2();
      return attemptTransaction(this, startTime, fn, options);
    }
  }

  const MAX_WITH_TRANSACTION_TIMEOUT = 120000;
  const UNSATISFIABLE_WRITE_CONCERN_CODE = 100;
  const UNKNOWN_REPL_WRITE_CONCERN_CODE = 79;
  const MAX_TIME_MS_EXPIRED_CODE = 50;
  const NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([
    'CannotSatisfyWriteConcern',
    'UnknownReplWriteConcern',
    'UnsatisfiableWriteConcern'
  ]);

  function hasNotTimedOut(startTime, max) {
    return calculateDurationInMs$2(startTime) < max;
  }

  function isUnknownTransactionCommitResult(err) {
    return (
      isMaxTimeMSExpiredError(err) ||
      (!NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName) &&
        err.code !== UNSATISFIABLE_WRITE_CONCERN_CODE &&
        err.code !== UNKNOWN_REPL_WRITE_CONCERN_CODE)
    );
  }

  function isMaxTimeMSExpiredError(err) {
    if (err == null) return false;
    return (
      err.code === MAX_TIME_MS_EXPIRED_CODE ||
      (err.writeConcernError && err.writeConcernError.code === MAX_TIME_MS_EXPIRED_CODE)
    );
  }

  function attemptTransactionCommit(session, startTime, fn, options) {
    return session.commitTransaction().catch(err => {
      if (
        err instanceof MongoError$E &&
        hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&
        !isMaxTimeMSExpiredError(err)
      ) {
        if (err.hasErrorLabel('UnknownTransactionCommitResult')) {
          return attemptTransactionCommit(session, startTime, fn, options);
        }

        if (err.hasErrorLabel('TransientTransactionError')) {
          return attemptTransaction(session, startTime, fn, options);
        }
      }

      throw err;
    });
  }

  const USER_EXPLICIT_TXN_END_STATES = new Set([
    TxnState.NO_TRANSACTION,
    TxnState.TRANSACTION_COMMITTED,
    TxnState.TRANSACTION_ABORTED
  ]);

  function userExplicitlyEndedTransaction(session) {
    return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);
  }

  function attemptTransaction(session, startTime, fn, options) {
    session.startTransaction(options);

    let promise;
    try {
      promise = fn(session);
    } catch (err) {
      promise = Promise.reject(err);
    }

    if (!isPromiseLike$1(promise)) {
      session.abortTransaction();
      throw new TypeError('Function provided to `withTransaction` must return a Promise');
    }

    return promise
      .then(() => {
        if (userExplicitlyEndedTransaction(session)) {
          return;
        }

        return attemptTransactionCommit(session, startTime, fn, options);
      })
      .catch(err => {
        function maybeRetryOrThrow(err) {
          if (
            err instanceof MongoError$E &&
            err.hasErrorLabel('TransientTransactionError') &&
            hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)
          ) {
            return attemptTransaction(session, startTime, fn, options);
          }

          if (isMaxTimeMSExpiredError(err)) {
            err.addErrorLabel('UnknownTransactionCommitResult');
          }

          throw err;
        }

        if (session.transaction.isActive) {
          return session.abortTransaction().then(() => maybeRetryOrThrow(err));
        }

        return maybeRetryOrThrow(err);
      });
  }

  function endTransaction(session, commandName, callback) {
    if (!assertAlive(session, callback)) {
      // checking result in case callback was called
      return;
    }

    // handle any initial problematic cases
    let txnState = session.transaction.state;

    if (txnState === TxnState.NO_TRANSACTION) {
      callback(new MongoError$E('No transaction started'));
      return;
    }

    if (commandName === 'commitTransaction') {
      if (
        txnState === TxnState.STARTING_TRANSACTION ||
        txnState === TxnState.TRANSACTION_COMMITTED_EMPTY
      ) {
        // the transaction was never started, we can safely exit here
        session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);
        callback(null, null);
        return;
      }

      if (txnState === TxnState.TRANSACTION_ABORTED) {
        callback(new MongoError$E('Cannot call commitTransaction after calling abortTransaction'));
        return;
      }
    } else {
      if (txnState === TxnState.STARTING_TRANSACTION) {
        // the transaction was never started, we can safely exit here
        session.transaction.transition(TxnState.TRANSACTION_ABORTED);
        callback(null, null);
        return;
      }

      if (txnState === TxnState.TRANSACTION_ABORTED) {
        callback(new MongoError$E('Cannot call abortTransaction twice'));
        return;
      }

      if (
        txnState === TxnState.TRANSACTION_COMMITTED ||
        txnState === TxnState.TRANSACTION_COMMITTED_EMPTY
      ) {
        callback(new MongoError$E('Cannot call abortTransaction after calling commitTransaction'));
        return;
      }
    }

    // construct and send the command
    const command = { [commandName]: 1 };

    // apply a writeConcern if specified
    let writeConcern;
    if (session.transaction.options.writeConcern) {
      writeConcern = Object.assign({}, session.transaction.options.writeConcern);
    } else if (session.clientOptions && session.clientOptions.w) {
      writeConcern = { w: session.clientOptions.w };
    }

    if (txnState === TxnState.TRANSACTION_COMMITTED) {
      writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });
    }

    if (writeConcern) {
      Object.assign(command, { writeConcern });
    }

    if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {
      Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });
    }

    function commandHandler(e, r) {
      if (commandName === 'commitTransaction') {
        session.transaction.transition(TxnState.TRANSACTION_COMMITTED);

        if (
          e &&
          (e instanceof MongoNetworkError$6 ||
            e instanceof MongoWriteConcernError$1 ||
            isRetryableError$1(e) ||
            isMaxTimeMSExpiredError(e))
        ) {
          if (isUnknownTransactionCommitResult(e)) {
            e.addErrorLabel('UnknownTransactionCommitResult');

            // per txns spec, must unpin session in this case
            session.transaction.unpinServer();
          }
        }
      } else {
        session.transaction.transition(TxnState.TRANSACTION_ABORTED);
      }

      callback(e, r);
    }

    // The spec indicates that we should ignore all errors on `abortTransaction`
    function transactionError(err) {
      return commandName === 'commitTransaction' ? err : null;
    }

    if (
      // Assumption here that commandName is "commitTransaction" or "abortTransaction"
      session.transaction.recoveryToken &&
      supportsRecoveryToken(session)
    ) {
      command.recoveryToken = session.transaction.recoveryToken;
    }

    // send the command
    session.topology.command('admin.$cmd', command, { session }, (err, reply) => {
      if (err && isRetryableError$1(err)) {
        // SPEC-1185: apply majority write concern when retrying commitTransaction
        if (command.commitTransaction) {
          // per txns spec, must unpin session in this case
          session.transaction.unpinServer();

          command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {
            w: 'majority'
          });
        }

        return session.topology.command('admin.$cmd', command, { session }, (_err, _reply) =>
          commandHandler(transactionError(_err), _reply)
        );
      }

      commandHandler(transactionError(err), reply);
    });
  }

  function supportsRecoveryToken(session) {
    const topology = session.topology;
    return !!topology.s.options.useRecoveryToken;
  }

  /**
   * Reflects the existence of a session on the server. Can be reused by the session pool.
   * WARNING: not meant to be instantiated directly. For internal use only.
   * @ignore
   */
  class ServerSession {
    constructor() {
      this.id = { id: new Binary$3(uuidV4(), Binary$3.SUBTYPE_UUID) };
      this.lastUse = now$2();
      this.txnNumber = 0;
      this.isDirty = false;
    }

    /**
     * Determines if the server session has timed out.
     * @ignore
     * @param {Date} sessionTimeoutMinutes The server's "logicalSessionTimeoutMinutes"
     * @return {boolean} true if the session has timed out.
     */
    hasTimedOut(sessionTimeoutMinutes) {
      // Take the difference of the lastUse timestamp and now, which will result in a value in
      // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`
      const idleTimeMinutes = Math.round(
        ((calculateDurationInMs$2(this.lastUse) % 86400000) % 3600000) / 60000
      );

      return idleTimeMinutes > sessionTimeoutMinutes - 1;
    }
  }

  /**
   * Maintains a pool of Server Sessions.
   * For internal use only
   * @ignore
   */
  class ServerSessionPool$2 {
    constructor(topology) {
      if (topology == null) {
        throw new Error('ServerSessionPool requires a topology');
      }

      this.topology = topology;
      this.sessions = [];
    }

    /**
     * Ends all sessions in the session pool.
     * @ignore
     */
    endAllPooledSessions(callback) {
      if (this.sessions.length) {
        this.topology.endSessions(
          this.sessions.map(session => session.id),
          () => {
            this.sessions = [];
            if (typeof callback === 'function') {
              callback();
            }
          }
        );

        return;
      }

      if (typeof callback === 'function') {
        callback();
      }
    }

    /**
     * Acquire a Server Session from the pool.
     * Iterates through each session in the pool, removing any stale sessions
     * along the way. The first non-stale session found is removed from the
     * pool and returned. If no non-stale session is found, a new ServerSession
     * is created.
     * @ignore
     * @returns {ServerSession}
     */
    acquire() {
      const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;
      while (this.sessions.length) {
        const session = this.sessions.shift();
        if (!session.hasTimedOut(sessionTimeoutMinutes)) {
          return session;
        }
      }

      return new ServerSession();
    }

    /**
     * Release a session to the session pool
     * Adds the session back to the session pool if the session has not timed out yet.
     * This method also removes any stale sessions from the pool.
     * @ignore
     * @param {ServerSession} session The session to release to the pool
     */
    release(session) {
      const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;
      while (this.sessions.length) {
        const pooledSession = this.sessions[this.sessions.length - 1];
        if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {
          this.sessions.pop();
        } else {
          break;
        }
      }

      if (!session.hasTimedOut(sessionTimeoutMinutes)) {
        if (session.isDirty) {
          return;
        }

        // otherwise, readd this session to the session pool
        this.sessions.unshift(session);
      }
    }
  }

  // TODO: this should be codified in command construction
  // @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern
  function commandSupportsReadConcern$1(command, options) {
    if (
      command.aggregate ||
      command.count ||
      command.distinct ||
      command.find ||
      command.parallelCollectionScan ||
      command.geoNear ||
      command.geoSearch
    ) {
      return true;
    }

    if (
      command.mapReduce &&
      options &&
      options.out &&
      (options.out.inline === 1 || options.out === 'inline')
    ) {
      return true;
    }

    return false;
  }

  /**
   * Optionally decorate a command with sessions specific keys
   *
   * @ignore
   * @param {ClientSession} session the session tracking transaction state
   * @param {Object} command the command to decorate
   * @param {Object} topology the topology for tracking the cluster time
   * @param {Object} [options] Optional settings passed to calling operation
   * @return {MongoError|null} An error, if some error condition was met
   */
  function applySession$1(session, command, options) {
    if (session.hasEnded) {
      // TODO: merge this with `assertAlive`, did not want to throw a try/catch here
      return new MongoError$E('Cannot use a session that has ended');
    }

    // SPEC-1019: silently ignore explicit session with unacknowledged write for backwards compatibility
    if (options && options.writeConcern && options.writeConcern.w === 0) {
      return;
    }

    const serverSession = session.serverSession;
    serverSession.lastUse = now$2();
    command.lsid = serverSession.id;

    // first apply non-transaction-specific sessions data
    const inTransaction = session.inTransaction() || isTransactionCommand$1(command);
    const isRetryableWrite = options.willRetryWrite;
    const shouldApplyReadConcern = commandSupportsReadConcern$1(command, options);

    if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {
      command.txnNumber = BSON$b.Long.fromNumber(serverSession.txnNumber);
    }

    // now attempt to apply transaction-specific sessions data
    if (!inTransaction) {
      if (session.transaction.state !== TxnState.NO_TRANSACTION) {
        session.transaction.transition(TxnState.NO_TRANSACTION);
      }

      // TODO: the following should only be applied to read operation per spec.
      // for causal consistency
      if (session.supports.causalConsistency && session.operationTime && shouldApplyReadConcern) {
        command.readConcern = command.readConcern || {};
        Object.assign(command.readConcern, { afterClusterTime: session.operationTime });
      }

      return;
    }

    if (options.readPreference && !options.readPreference.equals(read_preference.primary)) {
      return new MongoError$E(
        `Read preference in a transaction must be primary, not: ${options.readPreference.mode}`
      );
    }

    // `autocommit` must always be false to differentiate from retryable writes
    command.autocommit = false;

    if (session.transaction.state === TxnState.STARTING_TRANSACTION) {
      session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);
      command.startTransaction = true;

      const readConcern =
        session.transaction.options.readConcern || session.clientOptions.readConcern;
      if (readConcern) {
        command.readConcern = readConcern;
      }

      if (session.supports.causalConsistency && session.operationTime) {
        command.readConcern = command.readConcern || {};
        Object.assign(command.readConcern, { afterClusterTime: session.operationTime });
      }
    }
  }

  function updateSessionFromResponse(session, document) {
    if (document.$clusterTime) {
      resolveClusterTime$2(session, document.$clusterTime);
    }

    if (document.operationTime && session && session.supports.causalConsistency) {
      session.advanceOperationTime(document.operationTime);
    }

    if (document.recoveryToken && session && session.inTransaction()) {
      session.transaction._recoveryToken = document.recoveryToken;
    }
  }

  var sessions = {
    ClientSession: ClientSession$2,
    ServerSession,
    ServerSessionPool: ServerSessionPool$2,
    TxnState,
    applySession: applySession$1,
    updateSessionFromResponse,
    commandSupportsReadConcern: commandSupportsReadConcern$1
  };

  const Query$1 = commands.Query;
  const Msg = msg.Msg;
  const MongoError$D = error$2.MongoError;
  const getReadPreference$1 = shared$1.getReadPreference;
  const isSharded$1 = shared$1.isSharded;
  const databaseNamespace = shared$1.databaseNamespace;
  const isTransactionCommand = transactions.isTransactionCommand;
  const applySession = sessions.applySession;
  const MongoNetworkError$5 = error$2.MongoNetworkError;
  const maxWireVersion$c = require$$2.maxWireVersion;

  function isClientEncryptionEnabled(server) {
    const wireVersion = maxWireVersion$c(server);
    return wireVersion && server.autoEncrypter;
  }

  function command$1(server, ns, cmd, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    if (cmd == null) {
      return callback(new MongoError$D(`command ${JSON.stringify(cmd)} does not return a cursor`));
    }

    if (!isClientEncryptionEnabled(server)) {
      _command(server, ns, cmd, options, callback);
      return;
    }

    const wireVersion = maxWireVersion$c(server);
    if (typeof wireVersion !== 'number' || wireVersion < 8) {
      callback(new MongoError$D('Auto-encryption requires a minimum MongoDB version of 4.2'));
      return;
    }

    _cryptCommand(server, ns, cmd, options, callback);
  }

  function _command(server, ns, cmd, options, callback) {
    const bson = server.s.bson;
    const pool = server.s.pool;
    const readPreference = getReadPreference$1(cmd, options);
    const shouldUseOpMsg = supportsOpMsg(server);
    const session = options.session;

    let clusterTime = server.clusterTime;
    let finalCmd = Object.assign({}, cmd);
    if (hasSessionSupport(server) && session) {
      if (
        session.clusterTime &&
        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)
      ) {
        clusterTime = session.clusterTime;
      }

      const err = applySession(session, finalCmd, options);
      if (err) {
        return callback(err);
      }
    }

    // if we have a known cluster time, gossip it
    if (clusterTime) {
      finalCmd.$clusterTime = clusterTime;
    }

    if (isSharded$1(server) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {
      finalCmd = {
        $query: finalCmd,
        $readPreference: readPreference.toJSON()
      };
    }

    const commandOptions = Object.assign(
      {
        command: true,
        numberToSkip: 0,
        numberToReturn: -1,
        checkKeys: false
      },
      options
    );

    // This value is not overridable
    commandOptions.slaveOk = readPreference.slaveOk();

    const cmdNs = `${databaseNamespace(ns)}.$cmd`;
    const message = shouldUseOpMsg
      ? new Msg(bson, cmdNs, finalCmd, commandOptions)
      : new Query$1(bson, cmdNs, finalCmd, commandOptions);

    const inTransaction = session && (session.inTransaction() || isTransactionCommand(finalCmd));
    const commandResponseHandler = inTransaction
      ? function(err) {
          // We need to add a TransientTransactionError errorLabel, as stated in the transaction spec.
          if (
            err &&
            err instanceof MongoNetworkError$5 &&
            !err.hasErrorLabel('TransientTransactionError')
          ) {
            err.addErrorLabel('TransientTransactionError');
          }

          if (
            !cmd.commitTransaction &&
            err &&
            err instanceof MongoError$D &&
            err.hasErrorLabel('TransientTransactionError')
          ) {
            session.transaction.unpinServer();
          }

          return callback.apply(null, arguments);
        }
      : callback;

    try {
      pool.write(message, commandOptions, commandResponseHandler);
    } catch (err) {
      commandResponseHandler(err);
    }
  }

  function hasSessionSupport(topology) {
    if (topology == null) return false;
    if (topology.description) {
      return topology.description.maxWireVersion >= 6;
    }

    return topology.ismaster == null ? false : topology.ismaster.maxWireVersion >= 6;
  }

  function supportsOpMsg(topologyOrServer) {
    const description = topologyOrServer.ismaster
      ? topologyOrServer.ismaster
      : topologyOrServer.description;

    if (description == null) {
      return false;
    }

    return description.maxWireVersion >= 6 && description.__nodejs_mock_server__ == null;
  }

  function _cryptCommand(server, ns, cmd, options, callback) {
    const autoEncrypter = server.autoEncrypter;
    function commandResponseHandler(err, response) {
      if (err || response == null) {
        callback(err, response);
        return;
      }

      autoEncrypter.decrypt(response.result, options, (err, decrypted) => {
        if (err) {
          callback(err, null);
          return;
        }

        response.result = decrypted;
        response.message.documents = [decrypted];
        callback(null, response);
      });
    }

    autoEncrypter.encrypt(ns, cmd, options, (err, encrypted) => {
      if (err) {
        callback(err, null);
        return;
      }

      _command(server, ns, encrypted, options, commandResponseHandler);
    });
  }

  var command_1 = command$1;

  const MongoError$C = error$2.MongoError;

  const ExplainVerbosity = {
    queryPlanner: 'queryPlanner',
    queryPlannerExtended: 'queryPlannerExtended',
    executionStats: 'executionStats',
    allPlansExecution: 'allPlansExecution'
  };

  /**
   * @class
   * @property {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'} verbosity The verbosity mode for the explain output.
   */
  class Explain$4 {
    /**
     * Constructs an Explain from the explain verbosity.
     *
     * For backwards compatibility, true is interpreted as "allPlansExecution"
     * and false as "queryPlanner". Prior to server version 3.6, aggregate()
     * ignores the verbosity parameter and executes in "queryPlanner".
     *
     * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity] The verbosity mode for the explain output.
     */
    constructor(verbosity) {
      if (typeof verbosity === 'boolean') {
        this.verbosity = verbosity ? 'allPlansExecution' : 'queryPlanner';
      } else {
        this.verbosity = verbosity;
      }
    }

    /**
     * Construct an Explain given an options object.
     *
     * @param {object} [options] The options object from which to extract the explain.
     * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output
     * @return {Explain}
     */
    static fromOptions(options) {
      if (options == null || options.explain === undefined) {
        return;
      }

      const explain = options.explain;
      if (typeof explain === 'boolean' || explain in ExplainVerbosity) {
        return new Explain$4(options.explain);
      }

      throw new MongoError$C(`explain must be one of ${Object.keys(ExplainVerbosity)} or a boolean`);
    }
  }

  var explain = { Explain: Explain$4 };

  const MongoError$B = error$2.MongoError;
  const collectionNamespace$3 = shared$1.collectionNamespace;

  const decorateWithExplain$2 = require$$1$1.decorateWithExplain;
  const Explain$3 = explain.Explain;

  function writeCommand(server, type, opsField, ns, ops, options, callback) {
    if (ops.length === 0) throw new MongoError$B(`${type} must contain at least one document`);
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options = options || {};
    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;
    const writeConcern = options.writeConcern;

    let writeCommand = {};
    writeCommand[type] = collectionNamespace$3(ns);
    writeCommand[opsField] = ops;
    writeCommand.ordered = ordered;

    if (writeConcern && Object.keys(writeConcern).length > 0) {
      writeCommand.writeConcern = writeConcern;
    }

    if (options.collation) {
      for (let i = 0; i < writeCommand[opsField].length; i++) {
        if (!writeCommand[opsField][i].collation) {
          writeCommand[opsField][i].collation = options.collation;
        }
      }
    }

    if (options.bypassDocumentValidation === true) {
      writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;
    }

    // If a command is to be explained, we need to reformat the command after
    // the other command properties are specified.
    const explain = Explain$3.fromOptions(options);
    if (explain) {
      writeCommand = decorateWithExplain$2(writeCommand, explain);
    }

    const commandOptions = Object.assign(
      {
        checkKeys: type === 'insert',
        numberToReturn: 1
      },
      options
    );

    command_1(server, ns, writeCommand, commandOptions, callback);
  }

  var write_command = writeCommand;

  const KillCursor = commands.KillCursor;
  const MongoError$A = error$2.MongoError;
  const MongoNetworkError$4 = error$2.MongoNetworkError;
  const collectionNamespace$2 = shared$1.collectionNamespace;
  const maxWireVersion$b = require$$2.maxWireVersion;
  const emitWarning$2 = require$$2.emitWarning;


  function killCursors(server, ns, cursorState, callback) {
    callback = typeof callback === 'function' ? callback : () => {};
    const cursorId = cursorState.cursorId;

    if (maxWireVersion$b(server) < 4) {
      const bson = server.s.bson;
      const pool = server.s.pool;
      const killCursor = new KillCursor(bson, ns, [cursorId]);
      const options = {
        immediateRelease: true,
        noResponse: true
      };

      if (typeof cursorState.session === 'object') {
        options.session = cursorState.session;
      }

      if (pool && pool.isConnected()) {
        try {
          pool.write(killCursor, options, callback);
        } catch (err) {
          if (typeof callback === 'function') {
            callback(err, null);
          } else {
            emitWarning$2(err);
          }
        }
      }

      return;
    }

    const killCursorCmd = {
      killCursors: collectionNamespace$2(ns),
      cursors: [cursorId]
    };

    const options = {};
    if (typeof cursorState.session === 'object') options.session = cursorState.session;

    command_1(server, ns, killCursorCmd, options, (err, result) => {
      if (err) {
        return callback(err);
      }

      const response = result.message;
      if (response.cursorNotFound) {
        return callback(new MongoNetworkError$4('cursor killed or timed out'), null);
      }

      if (!Array.isArray(response.documents) || response.documents.length === 0) {
        return callback(
          new MongoError$A(`invalid killCursors result returned for cursor id ${cursorId}`)
        );
      }

      callback(null, response.documents[0]);
    });
  }

  var kill_cursors = killCursors;

  const GetMore = commands.GetMore;
  const retrieveBSON$6 = utils$2.retrieveBSON;
  const MongoError$z = error$2.MongoError;
  const MongoNetworkError$3 = error$2.MongoNetworkError;
  const BSON$a = retrieveBSON$6();
  const Long$3 = BSON$a.Long;
  const collectionNamespace$1 = shared$1.collectionNamespace;
  const maxWireVersion$a = require$$2.maxWireVersion;
  const applyCommonQueryOptions$1 = shared$1.applyCommonQueryOptions;


  function getMore(server, ns, cursorState, batchSize, options, callback) {
    options = options || {};

    const wireVersion = maxWireVersion$a(server);
    function queryCallback(err, result) {
      if (err) return callback(err);
      const response = result.message;

      // If we have a timed out query or a cursor that was killed
      if (response.cursorNotFound) {
        return callback(new MongoNetworkError$3('cursor killed or timed out'), null);
      }

      if (wireVersion < 4) {
        const cursorId =
          typeof response.cursorId === 'number'
            ? Long$3.fromNumber(response.cursorId)
            : response.cursorId;

        cursorState.documents = response.documents;
        cursorState.cursorId = cursorId;

        callback(null, null, response.connection);
        return;
      }

      // We have an error detected
      if (response.documents[0].ok === 0) {
        return callback(new MongoError$z(response.documents[0]));
      }

      // Ensure we have a Long valid cursor id
      const cursorId =
        typeof response.documents[0].cursor.id === 'number'
          ? Long$3.fromNumber(response.documents[0].cursor.id)
          : response.documents[0].cursor.id;

      cursorState.documents = response.documents[0].cursor.nextBatch;
      cursorState.cursorId = cursorId;

      callback(null, response.documents[0], response.connection);
    }

    if (wireVersion < 4) {
      const bson = server.s.bson;
      const getMoreOp = new GetMore(bson, ns, cursorState.cursorId, { numberToReturn: batchSize });
      const queryOptions = applyCommonQueryOptions$1({}, cursorState);
      server.s.pool.write(getMoreOp, queryOptions, queryCallback);
      return;
    }

    const cursorId =
      cursorState.cursorId instanceof Long$3
        ? cursorState.cursorId
        : Long$3.fromNumber(cursorState.cursorId);

    const getMoreCmd = {
      getMore: cursorId,
      collection: collectionNamespace$1(ns),
      batchSize: Math.abs(batchSize)
    };

    if (cursorState.cmd.tailable && typeof cursorState.cmd.maxAwaitTimeMS === 'number') {
      getMoreCmd.maxTimeMS = cursorState.cmd.maxAwaitTimeMS;
    }

    const commandOptions = Object.assign(
      {
        returnFieldSelector: null,
        documentsReturnedIn: 'nextBatch'
      },
      options
    );

    if (cursorState.session) {
      commandOptions.session = cursorState.session;
    }

    command_1(server, ns, getMoreCmd, commandOptions, queryCallback);
  }

  var get_more = getMore;

  const Query = commands.Query;
  const MongoError$y = error$2.MongoError;
  const getReadPreference = shared$1.getReadPreference;
  const collectionNamespace = shared$1.collectionNamespace;
  const isSharded = shared$1.isSharded;
  const maxWireVersion$9 = require$$2.maxWireVersion;
  const applyCommonQueryOptions = shared$1.applyCommonQueryOptions;

  const decorateWithExplain$1 = require$$1$1.decorateWithExplain;
  const Explain$2 = explain.Explain;

  function query(server, ns, cmd, cursorState, options, callback) {
    options = options || {};
    if (cursorState.cursorId != null) {
      return callback();
    }

    if (cmd == null) {
      return callback(new MongoError$y(`command ${JSON.stringify(cmd)} does not return a cursor`));
    }

    if (maxWireVersion$9(server) < 4) {
      const query = prepareLegacyFindQuery(server, ns, cmd, cursorState, options);
      const queryOptions = applyCommonQueryOptions({}, cursorState);
      if (typeof query.documentsReturnedIn === 'string') {
        queryOptions.documentsReturnedIn = query.documentsReturnedIn;
      }

      server.s.pool.write(query, queryOptions, callback);
      return;
    }

    const readPreference = getReadPreference(cmd, options);
    let findCmd = prepareFindCommand(server, ns, cmd, cursorState);

    // If we have explain, we need to rewrite the find command
    // to wrap it in the explain command
    const explain = Explain$2.fromOptions(options);
    if (explain) {
      findCmd = decorateWithExplain$1(findCmd, explain);
    }

    // NOTE: This actually modifies the passed in cmd, and our code _depends_ on this
    //       side-effect. Change this ASAP
    cmd.virtual = false;

    const commandOptions = Object.assign(
      {
        documentsReturnedIn: 'firstBatch',
        numberToReturn: 1,
        slaveOk: readPreference.slaveOk()
      },
      options
    );

    if (cmd.readPreference) {
      commandOptions.readPreference = readPreference;
    }

    if (cursorState.session) {
      commandOptions.session = cursorState.session;
    }

    command_1(server, ns, findCmd, commandOptions, callback);
  }

  function prepareFindCommand(server, ns, cmd, cursorState) {
    cursorState.batchSize = cmd.batchSize || cursorState.batchSize;
    const findCmd = {
      find: collectionNamespace(ns)
    };

    if (cmd.query) {
      if (cmd.query['$query']) {
        findCmd.filter = cmd.query['$query'];
      } else {
        findCmd.filter = cmd.query;
      }
    }

    let sortValue = cmd.sort;
    if (Array.isArray(sortValue)) {
      const sortObject = {};

      if (sortValue.length > 0 && !Array.isArray(sortValue[0])) {
        let sortDirection = sortValue[1];
        if (sortDirection === 'asc') {
          sortDirection = 1;
        } else if (sortDirection === 'desc') {
          sortDirection = -1;
        }

        sortObject[sortValue[0]] = sortDirection;
      } else {
        for (let i = 0; i < sortValue.length; i++) {
          let sortDirection = sortValue[i][1];
          if (sortDirection === 'asc') {
            sortDirection = 1;
          } else if (sortDirection === 'desc') {
            sortDirection = -1;
          }

          sortObject[sortValue[i][0]] = sortDirection;
        }
      }

      sortValue = sortObject;
    }

    if (typeof cmd.allowDiskUse === 'boolean') {
      findCmd.allowDiskUse = cmd.allowDiskUse;
    }

    if (cmd.sort) findCmd.sort = sortValue;
    if (cmd.fields) findCmd.projection = cmd.fields;
    if (cmd.hint) findCmd.hint = cmd.hint;
    if (cmd.skip) findCmd.skip = cmd.skip;
    if (cmd.limit) findCmd.limit = cmd.limit;
    if (cmd.limit < 0) {
      findCmd.limit = Math.abs(cmd.limit);
      findCmd.singleBatch = true;
    }

    if (typeof cmd.batchSize === 'number') {
      if (cmd.batchSize < 0) {
        if (cmd.limit !== 0 && Math.abs(cmd.batchSize) < Math.abs(cmd.limit)) {
          findCmd.limit = Math.abs(cmd.batchSize);
        }

        findCmd.singleBatch = true;
      }

      findCmd.batchSize = Math.abs(cmd.batchSize);
    }

    if (cmd.comment) findCmd.comment = cmd.comment;
    if (cmd.maxScan) findCmd.maxScan = cmd.maxScan;
    if (cmd.maxTimeMS) findCmd.maxTimeMS = cmd.maxTimeMS;
    if (cmd.min) findCmd.min = cmd.min;
    if (cmd.max) findCmd.max = cmd.max;
    findCmd.returnKey = cmd.returnKey ? cmd.returnKey : false;
    findCmd.showRecordId = cmd.showDiskLoc ? cmd.showDiskLoc : false;
    if (cmd.snapshot) findCmd.snapshot = cmd.snapshot;
    if (cmd.tailable) findCmd.tailable = cmd.tailable;
    if (cmd.oplogReplay) findCmd.oplogReplay = cmd.oplogReplay;
    if (cmd.noCursorTimeout) findCmd.noCursorTimeout = cmd.noCursorTimeout;
    if (cmd.awaitData) findCmd.awaitData = cmd.awaitData;
    if (cmd.awaitdata) findCmd.awaitData = cmd.awaitdata;
    if (cmd.partial) findCmd.partial = cmd.partial;
    if (cmd.collation) findCmd.collation = cmd.collation;
    if (cmd.readConcern) findCmd.readConcern = cmd.readConcern;

    return findCmd;
  }

  function prepareLegacyFindQuery(server, ns, cmd, cursorState, options) {
    options = options || {};
    const bson = server.s.bson;
    const readPreference = getReadPreference(cmd, options);
    cursorState.batchSize = cmd.batchSize || cursorState.batchSize;

    let numberToReturn = 0;
    if (
      cursorState.limit < 0 ||
      (cursorState.limit !== 0 && cursorState.limit < cursorState.batchSize) ||
      (cursorState.limit > 0 && cursorState.batchSize === 0)
    ) {
      numberToReturn = cursorState.limit;
    } else {
      numberToReturn = cursorState.batchSize;
    }

    const numberToSkip = cursorState.skip || 0;

    const findCmd = {};
    if (isSharded(server) && readPreference) {
      findCmd['$readPreference'] = readPreference.toJSON();
    }

    if (cmd.sort) findCmd['$orderby'] = cmd.sort;
    if (cmd.hint) findCmd['$hint'] = cmd.hint;
    if (cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot;
    if (typeof cmd.returnKey !== 'undefined') findCmd['$returnKey'] = cmd.returnKey;
    if (cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan;
    if (cmd.min) findCmd['$min'] = cmd.min;
    if (cmd.max) findCmd['$max'] = cmd.max;
    if (typeof cmd.showDiskLoc !== 'undefined') findCmd['$showDiskLoc'] = cmd.showDiskLoc;
    if (cmd.comment) findCmd['$comment'] = cmd.comment;
    if (cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS;
    if (options.explain !== undefined) {
      // nToReturn must be 0 (match all) or negative (match N and close cursor)
      // nToReturn > 0 will give explain results equivalent to limit(0)
      numberToReturn = -Math.abs(cmd.limit || 0);
      findCmd['$explain'] = true;
    }

    findCmd['$query'] = cmd.query;
    if (cmd.readConcern && cmd.readConcern.level !== 'local') {
      throw new MongoError$y(
        `server find command does not support a readConcern level of ${cmd.readConcern.level}`
      );
    }

    if (cmd.readConcern) {
      cmd = Object.assign({}, cmd);
      delete cmd['readConcern'];
    }

    const serializeFunctions =
      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    const ignoreUndefined =
      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;

    const query = new Query(bson, ns, findCmd, {
      numberToSkip: numberToSkip,
      numberToReturn: numberToReturn,
      pre32Limit: typeof cmd.limit !== 'undefined' ? cmd.limit : undefined,
      checkKeys: false,
      returnFieldSelector: cmd.fields,
      serializeFunctions: serializeFunctions,
      ignoreUndefined: ignoreUndefined
    });

    if (typeof cmd.tailable === 'boolean') query.tailable = cmd.tailable;
    if (typeof cmd.oplogReplay === 'boolean') query.oplogReplay = cmd.oplogReplay;
    if (typeof cmd.noCursorTimeout === 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;
    if (typeof cmd.awaitData === 'boolean') query.awaitData = cmd.awaitData;
    if (typeof cmd.partial === 'boolean') query.partial = cmd.partial;

    query.slaveOk = readPreference.slaveOk();
    return query;
  }

  var query_1 = query;

  var wireprotocol = {
    insert: function insert(server, ns, ops, options, callback) {
      write_command(server, 'insert', 'documents', ns, ops, options, callback);
    },
    update: function update(server, ns, ops, options, callback) {
      write_command(server, 'update', 'updates', ns, ops, options, callback);
    },
    remove: function remove(server, ns, ops, options, callback) {
      write_command(server, 'delete', 'deletes', ns, ops, options, callback);
    },
    killCursors: kill_cursors,
    getMore: get_more,
    query: query_1,
    command: command_1
  };

  const Logger$3 = require('./connection/logger');
  const retrieveBSON$5 = require('./connection/utils').retrieveBSON;
  const MongoError$x = require('./error').MongoError;
  const MongoNetworkError$2 = require('./error').MongoNetworkError;
  const collationNotSupported$1 = require('./utils').collationNotSupported;
  const ReadPreference$g = require('./topologies/read_preference');
  const isUnifiedTopology$1 = require('./utils').isUnifiedTopology;
  const executeOperation$2 = require('../operations/execute_operation');
  const Readable = require('stream').Readable;
  const SUPPORTS = require('../utils').SUPPORTS;
  const MongoDBNamespace$7 = require('../utils').MongoDBNamespace;
  const mergeOptions$4 = require('../utils').mergeOptions;
  const OperationBase$9 = require('../operations/operation').OperationBase;

  const BSON$9 = retrieveBSON$5();
  const Long$2 = BSON$9.Long;

  // Possible states for a cursor
  const CursorState$5 = {
    INIT: 0,
    OPEN: 1,
    CLOSED: 2,
    GET_MORE: 3
  };

  //
  // Handle callback (including any exceptions thrown)
  function handleCallback$e(callback, err, result) {
    try {
      callback(err, result);
    } catch (err) {
      browser$1.nextTick(function() {
        throw err;
      });
    }
  }

  /**
   * This is a cursor results callback
   *
   * @callback resultCallback
   * @param {error} error An error object. Set to null if no error present
   * @param {object} document
   */

  /**
   * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB
   * allowing for iteration over the results returned from the underlying query.
   *
   * **CURSORS Cannot directly be instantiated**
   */

  /**
   * The core cursor class. All cursors in the driver build off of this one.
   *
   * @property {number} cursorBatchSize The current cursorBatchSize for the cursor
   * @property {number} cursorLimit The current cursorLimit for the cursor
   * @property {number} cursorSkip The current cursorSkip for the cursor
   */
  class CoreCursor$5 extends Readable {
    /**
     * Create a new core `Cursor` instance.
     * **NOTE** Not to be instantiated directly
     *
     * @param {object} topology The server topology instance.
     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
     * @param {{object}|Long} cmd The selector (can be a command or a cursorId)
     * @param {object} [options=null] Optional settings.
     * @param {object} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/| find command documentation} and {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
     * @param {array} [options.documents=[]] Initial documents list for cursor
     * @param {object} [options.transforms=null] Transform methods for the cursor results
     * @param {function} [options.transforms.query] Transform the value returned from the initial query
     * @param {function} [options.transforms.doc] Transform each document returned from Cursor.prototype._next
     */
    constructor(topology, ns, cmd, options) {
      super({ objectMode: true });
      options = options || {};

      if (ns instanceof OperationBase$9) {
        this.operation = ns;
        ns = this.operation.ns.toString();
        options = this.operation.options;
        cmd = this.operation.cmd ? this.operation.cmd : {};
      }

      // Cursor pool
      this.pool = null;
      // Cursor server
      this.server = null;

      // Do we have a not connected handler
      this.disconnectHandler = options.disconnectHandler;

      // Set local values
      this.bson = topology.s.bson;
      this.ns = ns;
      this.namespace = MongoDBNamespace$7.fromString(ns);
      this.cmd = cmd;
      this.options = options;
      this.topology = topology;

      // All internal state
      this.cursorState = {
        cursorId: null,
        cmd,
        documents: options.documents || [],
        cursorIndex: 0,
        dead: false,
        killed: false,
        init: false,
        notified: false,
        limit: options.limit || cmd.limit || 0,
        skip: options.skip || cmd.skip || 0,
        batchSize: options.batchSize || cmd.batchSize || 1000,
        currentLimit: 0,
        // Result field name if not a cursor (contains the array of results)
        transforms: options.transforms,
        raw: options.raw || (cmd && cmd.raw)
      };

      if (typeof options.session === 'object') {
        this.cursorState.session = options.session;
      }

      // Add promoteLong to cursor state
      const topologyOptions = topology.s.options;
      if (typeof topologyOptions.promoteLongs === 'boolean') {
        this.cursorState.promoteLongs = topologyOptions.promoteLongs;
      } else if (typeof options.promoteLongs === 'boolean') {
        this.cursorState.promoteLongs = options.promoteLongs;
      }

      // Add promoteValues to cursor state
      if (typeof topologyOptions.promoteValues === 'boolean') {
        this.cursorState.promoteValues = topologyOptions.promoteValues;
      } else if (typeof options.promoteValues === 'boolean') {
        this.cursorState.promoteValues = options.promoteValues;
      }

      // Add promoteBuffers to cursor state
      if (typeof topologyOptions.promoteBuffers === 'boolean') {
        this.cursorState.promoteBuffers = topologyOptions.promoteBuffers;
      } else if (typeof options.promoteBuffers === 'boolean') {
        this.cursorState.promoteBuffers = options.promoteBuffers;
      }

      if (topologyOptions.reconnect) {
        this.cursorState.reconnect = topologyOptions.reconnect;
      }

      // Logger
      this.logger = Logger$3('Cursor', topologyOptions);

      //
      // Did we pass in a cursor id
      if (typeof cmd === 'number') {
        this.cursorState.cursorId = Long$2.fromNumber(cmd);
        this.cursorState.lastCursorId = this.cursorState.cursorId;
      } else if (cmd instanceof Long$2) {
        this.cursorState.cursorId = cmd;
        this.cursorState.lastCursorId = cmd;
      }

      // TODO: remove as part of NODE-2104
      if (this.operation) {
        this.operation.cursorState = this.cursorState;
      }
    }

    setCursorBatchSize(value) {
      this.cursorState.batchSize = value;
    }

    cursorBatchSize() {
      return this.cursorState.batchSize;
    }

    setCursorLimit(value) {
      this.cursorState.limit = value;
    }

    cursorLimit() {
      return this.cursorState.limit;
    }

    setCursorSkip(value) {
      this.cursorState.skip = value;
    }

    cursorSkip() {
      return this.cursorState.skip;
    }

    /**
     * Retrieve the next document from the cursor
     * @method
     * @param {resultCallback} callback A callback function
     */
    _next(callback) {
      nextFunction(this, callback);
    }

    /**
     * Clone the cursor
     * @method
     * @return {Cursor}
     */
    clone() {
      const clonedOptions = mergeOptions$4({}, this.options);
      delete clonedOptions.session;
      return this.topology.cursor(this.ns, this.cmd, clonedOptions);
    }

    /**
     * Checks if the cursor is dead
     * @method
     * @return {boolean} A boolean signifying if the cursor is dead or not
     */
    isDead() {
      return this.cursorState.dead === true;
    }

    /**
     * Checks if the cursor was killed by the application
     * @method
     * @return {boolean} A boolean signifying if the cursor was killed by the application
     */
    isKilled() {
      return this.cursorState.killed === true;
    }

    /**
     * Checks if the cursor notified it's caller about it's death
     * @method
     * @return {boolean} A boolean signifying if the cursor notified the callback
     */
    isNotified() {
      return this.cursorState.notified === true;
    }

    /**
     * Returns current buffered documents length
     * @method
     * @return {number} The number of items in the buffered documents
     */
    bufferedCount() {
      return this.cursorState.documents.length - this.cursorState.cursorIndex;
    }

    /**
     * Returns current buffered documents
     * @method
     * @return {Array} An array of buffered documents
     */
    readBufferedDocuments(number) {
      const unreadDocumentsLength = this.cursorState.documents.length - this.cursorState.cursorIndex;
      const length = number < unreadDocumentsLength ? number : unreadDocumentsLength;
      let elements = this.cursorState.documents.slice(
        this.cursorState.cursorIndex,
        this.cursorState.cursorIndex + length
      );

      // Transform the doc with passed in transformation method if provided
      if (this.cursorState.transforms && typeof this.cursorState.transforms.doc === 'function') {
        // Transform all the elements
        for (let i = 0; i < elements.length; i++) {
          elements[i] = this.cursorState.transforms.doc(elements[i]);
        }
      }

      // Ensure we do not return any more documents than the limit imposed
      // Just return the number of elements up to the limit
      if (
        this.cursorState.limit > 0 &&
        this.cursorState.currentLimit + elements.length > this.cursorState.limit
      ) {
        elements = elements.slice(0, this.cursorState.limit - this.cursorState.currentLimit);
        this.kill();
      }

      // Adjust current limit
      this.cursorState.currentLimit = this.cursorState.currentLimit + elements.length;
      this.cursorState.cursorIndex = this.cursorState.cursorIndex + elements.length;

      // Return elements
      return elements;
    }

    /**
     * Resets local state for this cursor instance, and issues a `killCursors` command to the server
     *
     * @param {resultCallback} callback A callback function
     */
    kill(callback) {
      // Set cursor to dead
      this.cursorState.dead = true;
      this.cursorState.killed = true;
      // Remove documents
      this.cursorState.documents = [];

      // If no cursor id just return
      if (
        this.cursorState.cursorId == null ||
        this.cursorState.cursorId.isZero() ||
        this.cursorState.init === false
      ) {
        if (callback) callback(null, null);
        return;
      }

      this.server.killCursors(this.ns, this.cursorState, callback);
    }

    /**
     * Resets the cursor
     */
    rewind() {
      if (this.cursorState.init) {
        if (!this.cursorState.dead) {
          this.kill();
        }

        this.cursorState.currentLimit = 0;
        this.cursorState.init = false;
        this.cursorState.dead = false;
        this.cursorState.killed = false;
        this.cursorState.notified = false;
        this.cursorState.documents = [];
        this.cursorState.cursorId = null;
        this.cursorState.cursorIndex = 0;
      }
    }

    // Internal methods
    _read() {
      if ((this.s && this.s.state === CursorState$5.CLOSED) || this.isDead()) {
        return this.push(null);
      }

      // Get the next item
      this._next((err, result) => {
        if (err) {
          if (this.listeners('error') && this.listeners('error').length > 0) {
            this.emit('error', err);
          }
          if (!this.isDead()) this.close();

          // Emit end event
          this.emit('end');
          return this.emit('finish');
        }

        // If we provided a transformation method
        if (
          this.cursorState.streamOptions &&
          typeof this.cursorState.streamOptions.transform === 'function' &&
          result != null
        ) {
          return this.push(this.cursorState.streamOptions.transform(result));
        }

        // Return the result
        this.push(result);

        if (result === null && this.isDead()) {
          this.once('end', () => {
            this.close();
            this.emit('finish');
          });
        }
      });
    }

    _endSession(options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      options = options || {};

      const session = this.cursorState.session;

      if (session && (options.force || session.owner === this)) {
        this.cursorState.session = undefined;

        if (this.operation) {
          this.operation.clearSession();
        }

        session.endSession(callback);
        return true;
      }

      if (callback) {
        callback();
      }

      return false;
    }

    _getMore(callback) {
      if (this.logger.isDebug()) {
        this.logger.debug(`schedule getMore call for query [${JSON.stringify(this.query)}]`);
      }

      // Set the current batchSize
      let batchSize = this.cursorState.batchSize;
      if (
        this.cursorState.limit > 0 &&
        this.cursorState.currentLimit + batchSize > this.cursorState.limit
      ) {
        batchSize = this.cursorState.limit - this.cursorState.currentLimit;
      }

      const cursorState = this.cursorState;
      this.server.getMore(this.ns, cursorState, batchSize, this.options, (err, result, conn) => {
        // NOTE: `getMore` modifies `cursorState`, would be very ideal not to do so in the future
        if (err || (cursorState.cursorId && cursorState.cursorId.isZero())) {
          this._endSession();
        }

        callback(err, result, conn);
      });
    }

    _initializeCursor(callback) {
      const cursor = this;

      // NOTE: this goes away once cursors use `executeOperation`
      if (isUnifiedTopology$1(cursor.topology) && cursor.topology.shouldCheckForSessionSupport()) {
        cursor.topology.selectServer(ReadPreference$g.primaryPreferred, err => {
          if (err) {
            callback(err);
            return;
          }

          this._initializeCursor(callback);
        });

        return;
      }

      function done(err, result) {
        const cursorState = cursor.cursorState;
        if (err || (cursorState.cursorId && cursorState.cursorId.isZero())) {
          cursor._endSession();
        }

        if (
          cursorState.documents.length === 0 &&
          cursorState.cursorId &&
          cursorState.cursorId.isZero() &&
          !cursor.cmd.tailable &&
          !cursor.cmd.awaitData
        ) {
          return setCursorNotified(cursor, callback);
        }

        callback(err, result);
      }

      const queryCallback = (err, r) => {
        if (err) {
          return done(err);
        }

        const result = r.message;

        if (Array.isArray(result.documents) && result.documents.length === 1) {
          const document = result.documents[0];

          if (result.queryFailure) {
            return done(new MongoError$x(document), null);
          }

          // Check if we have a command cursor
          if (!cursor.cmd.find || (cursor.cmd.find && cursor.cmd.virtual === false)) {
            // We have an error document, return the error
            if (document.$err || document.errmsg) {
              return done(new MongoError$x(document), null);
            }

            // We have a cursor document
            if (document.cursor != null && typeof document.cursor !== 'string') {
              const id = document.cursor.id;
              // If we have a namespace change set the new namespace for getmores
              if (document.cursor.ns) {
                cursor.ns = document.cursor.ns;
              }
              // Promote id to long if needed
              cursor.cursorState.cursorId = typeof id === 'number' ? Long$2.fromNumber(id) : id;
              cursor.cursorState.lastCursorId = cursor.cursorState.cursorId;
              cursor.cursorState.operationTime = document.operationTime;

              // If we have a firstBatch set it
              if (Array.isArray(document.cursor.firstBatch)) {
                cursor.cursorState.documents = document.cursor.firstBatch; //.reverse();
              }

              // Return after processing command cursor
              return done(null, result);
            }
          }
        }

        // Otherwise fall back to regular find path
        const cursorId = result.cursorId || 0;
        cursor.cursorState.cursorId = cursorId instanceof Long$2 ? cursorId : Long$2.fromNumber(cursorId);
        cursor.cursorState.documents = result.documents;
        cursor.cursorState.lastCursorId = result.cursorId;

        // Transform the results with passed in transformation method if provided
        if (
          cursor.cursorState.transforms &&
          typeof cursor.cursorState.transforms.query === 'function'
        ) {
          cursor.cursorState.documents = cursor.cursorState.transforms.query(result);
        }

        done(null, result);
      };

      if (cursor.operation) {
        if (cursor.logger.isDebug()) {
          cursor.logger.debug(
            `issue initial query [${JSON.stringify(cursor.cmd)}] with flags [${JSON.stringify(
            cursor.query
          )}]`
          );
        }

        executeOperation$2(cursor.topology, cursor.operation, (err, result) => {
          if (err) {
            done(err);
            return;
          }

          cursor.server = cursor.operation.server;
          cursor.cursorState.init = true;

          // NOTE: this is a special internal method for cloning a cursor, consider removing
          if (cursor.cursorState.cursorId != null) {
            return done();
          }

          queryCallback(err, result);
        });

        return;
      }

      // Very explicitly choose what is passed to selectServer
      const serverSelectOptions = {};
      if (cursor.cursorState.session) {
        serverSelectOptions.session = cursor.cursorState.session;
      }

      if (cursor.operation) {
        serverSelectOptions.readPreference = cursor.operation.readPreference;
      } else if (cursor.options.readPreference) {
        serverSelectOptions.readPreference = cursor.options.readPreference;
      }

      return cursor.topology.selectServer(serverSelectOptions, (err, server) => {
        if (err) {
          const disconnectHandler = cursor.disconnectHandler;
          if (disconnectHandler != null) {
            return disconnectHandler.addObjectAndMethod(
              'cursor',
              cursor,
              'next',
              [callback],
              callback
            );
          }

          return callback(err);
        }

        cursor.server = server;
        cursor.cursorState.init = true;
        if (collationNotSupported$1(cursor.server, cursor.cmd)) {
          return callback(new MongoError$x(`server ${cursor.server.name} does not support collation`));
        }

        // NOTE: this is a special internal method for cloning a cursor, consider removing
        if (cursor.cursorState.cursorId != null) {
          return done();
        }

        if (cursor.logger.isDebug()) {
          cursor.logger.debug(
            `issue initial query [${JSON.stringify(cursor.cmd)}] with flags [${JSON.stringify(
            cursor.query
          )}]`
          );
        }

        if (cursor.cmd.find != null) {
          server.query(cursor.ns, cursor.cmd, cursor.cursorState, cursor.options, queryCallback);
          return;
        }

        const commandOptions = Object.assign({ session: cursor.cursorState.session }, cursor.options);
        server.command(cursor.ns, cursor.cmd, commandOptions, queryCallback);
      });
    }
  }

  if (SUPPORTS.ASYNC_ITERATOR) {
    CoreCursor$5.prototype[Symbol.asyncIterator] = require('../async/async_iterator').asyncIterator;
  }

  /**
   * Validate if the pool is dead and return error
   */
  function isConnectionDead(self, callback) {
    if (self.pool && self.pool.isDestroyed()) {
      self.cursorState.killed = true;
      const err = new MongoNetworkError$2(
        `connection to host ${self.pool.host}:${self.pool.port} was destroyed`
      );

      _setCursorNotifiedImpl(self, () => callback(err));
      return true;
    }

    return false;
  }

  /**
   * Validate if the cursor is dead but was not explicitly killed by user
   */
  function isCursorDeadButNotkilled(self, callback) {
    // Cursor is dead but not marked killed, return null
    if (self.cursorState.dead && !self.cursorState.killed) {
      self.cursorState.killed = true;
      setCursorNotified(self, callback);
      return true;
    }

    return false;
  }

  /**
   * Validate if the cursor is dead and was killed by user
   */
  function isCursorDeadAndKilled(self, callback) {
    if (self.cursorState.dead && self.cursorState.killed) {
      handleCallback$e(callback, new MongoError$x('cursor is dead'));
      return true;
    }

    return false;
  }

  /**
   * Validate if the cursor was killed by the user
   */
  function isCursorKilled(self, callback) {
    if (self.cursorState.killed) {
      setCursorNotified(self, callback);
      return true;
    }

    return false;
  }

  /**
   * Mark cursor as being dead and notified
   */
  function setCursorDeadAndNotified(self, callback) {
    self.cursorState.dead = true;
    setCursorNotified(self, callback);
  }

  /**
   * Mark cursor as being notified
   */
  function setCursorNotified(self, callback) {
    _setCursorNotifiedImpl(self, () => handleCallback$e(callback, null, null));
  }

  function _setCursorNotifiedImpl(self, callback) {
    self.cursorState.notified = true;
    self.cursorState.documents = [];
    self.cursorState.cursorIndex = 0;

    if (self.cursorState.session) {
      self._endSession(callback);
      return;
    }

    return callback();
  }

  function nextFunction(self, callback) {
    // We have notified about it
    if (self.cursorState.notified) {
      return callback(new Error('cursor is exhausted'));
    }

    // Cursor is killed return null
    if (isCursorKilled(self, callback)) return;

    // Cursor is dead but not marked killed, return null
    if (isCursorDeadButNotkilled(self, callback)) return;

    // We have a dead and killed cursor, attempting to call next should error
    if (isCursorDeadAndKilled(self, callback)) return;

    // We have just started the cursor
    if (!self.cursorState.init) {
      // Topology is not connected, save the call in the provided store to be
      // Executed at some point when the handler deems it's reconnected
      if (!self.topology.isConnected(self.options)) {
        // Only need this for single server, because repl sets and mongos
        // will always continue trying to reconnect
        if (self.topology._type === 'server' && !self.topology.s.options.reconnect) {
          // Reconnect is disabled, so we'll never reconnect
          return callback(new MongoError$x('no connection available'));
        }

        if (self.disconnectHandler != null) {
          if (self.topology.isDestroyed()) {
            // Topology was destroyed, so don't try to wait for it to reconnect
            return callback(new MongoError$x('Topology was destroyed'));
          }

          self.disconnectHandler.addObjectAndMethod('cursor', self, 'next', [callback], callback);
          return;
        }
      }

      self._initializeCursor((err, result) => {
        if (err || result === null) {
          callback(err, result);
          return;
        }

        nextFunction(self, callback);
      });

      return;
    }

    if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {
      // Ensure we kill the cursor on the server
      self.kill(() =>
        // Set cursor in dead and notified state
        setCursorDeadAndNotified(self, callback)
      );
    } else if (
      self.cursorState.cursorIndex === self.cursorState.documents.length &&
      !Long$2.ZERO.equals(self.cursorState.cursorId)
    ) {
      // Ensure an empty cursor state
      self.cursorState.documents = [];
      self.cursorState.cursorIndex = 0;

      // Check if topology is destroyed
      if (self.topology.isDestroyed())
        return callback(
          new MongoNetworkError$2('connection destroyed, not possible to instantiate cursor')
        );

      // Check if connection is dead and return if not possible to
      // execute a getMore on this connection
      if (isConnectionDead(self, callback)) return;

      // Execute the next get more
      self._getMore(function(err, doc, connection) {
        if (err) {
          return handleCallback$e(callback, err);
        }

        // Save the returned connection to ensure all getMore's fire over the same connection
        self.connection = connection;

        // Tailable cursor getMore result, notify owner about it
        // No attempt is made here to retry, this is left to the user of the
        // core module to handle to keep core simple
        if (
          self.cursorState.documents.length === 0 &&
          self.cmd.tailable &&
          Long$2.ZERO.equals(self.cursorState.cursorId)
        ) {
          // No more documents in the tailed cursor
          return handleCallback$e(
            callback,
            new MongoError$x({
              message: 'No more documents in tailed cursor',
              tailable: self.cmd.tailable,
              awaitData: self.cmd.awaitData
            })
          );
        } else if (
          self.cursorState.documents.length === 0 &&
          self.cmd.tailable &&
          !Long$2.ZERO.equals(self.cursorState.cursorId)
        ) {
          return nextFunction(self, callback);
        }

        if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {
          return setCursorDeadAndNotified(self, callback);
        }

        nextFunction(self, callback);
      });
    } else if (
      self.cursorState.documents.length === self.cursorState.cursorIndex &&
      self.cmd.tailable &&
      Long$2.ZERO.equals(self.cursorState.cursorId)
    ) {
      return handleCallback$e(
        callback,
        new MongoError$x({
          message: 'No more documents in tailed cursor',
          tailable: self.cmd.tailable,
          awaitData: self.cmd.awaitData
        })
      );
    } else if (
      self.cursorState.documents.length === self.cursorState.cursorIndex &&
      Long$2.ZERO.equals(self.cursorState.cursorId)
    ) {
      setCursorDeadAndNotified(self, callback);
    } else {
      if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {
        // Ensure we kill the cursor on the server
        self.kill(() =>
          // Set cursor in dead and notified state
          setCursorDeadAndNotified(self, callback)
        );

        return;
      }

      // Increment the current cursor limit
      self.cursorState.currentLimit += 1;

      // Get the document
      let doc = self.cursorState.documents[self.cursorState.cursorIndex++];

      // Doc overflow
      if (!doc || doc.$err) {
        // Ensure we kill the cursor on the server
        self.kill(() =>
          // Set cursor in dead and notified state
          setCursorDeadAndNotified(self, function() {
            handleCallback$e(callback, new MongoError$x(doc ? doc.$err : undefined));
          })
        );

        return;
      }

      // Transform the doc with passed in transformation method if provided
      if (self.cursorState.transforms && typeof self.cursorState.transforms.doc === 'function') {
        doc = self.cursorState.transforms.doc(doc);
      }

      // Return the document
      handleCallback$e(callback, null, doc);
    }
  }

  module.exports = {
    CursorState: CursorState$5,
    CoreCursor: CoreCursor$5
  };

  var cursor$2 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var util$2 = /*@__PURE__*/getAugmentedNamespace(util$4);

  var Pool = /*@__PURE__*/getAugmentedNamespace(pool);

  var require$$1 = /*@__PURE__*/getAugmentedNamespace(cursor$2);

  var inherits$5 = util$2.inherits,
    f$4 = util$2.format,
    EventEmitter$6 = require$$0$1.EventEmitter,
    debugOptions$2 = utils$2.debugOptions,
    retrieveBSON$4 = utils$2.retrieveBSON,
    MongoError$w = error$2.MongoError,
    MongoNetworkError$1 = error$2.MongoNetworkError,
    CoreCursor$4 = require$$1.CoreCursor,
    createCompressionInfo$1 = shared.createCompressionInfo,
    resolveClusterTime$1 = shared.resolveClusterTime,
    SessionMixins$2 = shared.SessionMixins,
    relayEvents$5 = require$$2.relayEvents;

  const collationNotSupported = require$$2.collationNotSupported;
  const makeClientMetadata$3 = require$$2.makeClientMetadata;

  // Used for filtering out fields for loggin
  var debugFields$2 = [
    'reconnect',
    'reconnectTries',
    'reconnectInterval',
    'emitError',
    'cursorFactory',
    'host',
    'port',
    'size',
    'keepAlive',
    'keepAliveInitialDelay',
    'noDelay',
    'connectionTimeout',
    'checkServerIdentity',
    'socketTimeout',
    'ssl',
    'ca',
    'crl',
    'cert',
    'key',
    'rejectUnauthorized',
    'promoteLongs',
    'promoteValues',
    'promoteBuffers',
    'servername'
  ];

  // Server instance id
  var id$2 = 0;
  var serverAccounting = false;
  var servers = {};
  var BSON$8 = retrieveBSON$4();

  function topologyId(server) {
    return server.s.parent == null ? server.id : server.s.parent.id;
  }

  /**
   * Creates a new Server instance
   * @class
   * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection
   * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times
   * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries
   * @param {number} [options.monitoring=true] Enable the server state monitoring (calling ismaster at monitoringInterval)
   * @param {number} [options.monitoringInterval=5000] The interval of calling ismaster when monitoring is enabled.
   * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors
   * @param {string} options.host The server host
   * @param {number} options.port The server port
   * @param {number} [options.size=5] Server connection pool size
   * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
   * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled
   * @param {boolean} [options.noDelay=true] TCP Connection no delay
   * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting
   * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
   * @param {boolean} [options.ssl=false] Use SSL for connection
   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.
   * @param {Buffer} [options.ca] SSL Certificate store binary buffer
   * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer
   * @param {Buffer} [options.cert] SSL Certificate binary buffer
   * @param {Buffer} [options.key] SSL Key file binary buffer
   * @param {string} [options.passphrase] SSL Certificate pass phrase
   * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates
   * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.
   * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
   * @param {string} [options.appname=null] Application name, passed in on ismaster call and logged in mongod server logs. Maximum size 128 bytes.
   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.
   * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology
   * @return {Server} A cursor instance
   * @fires Server#connect
   * @fires Server#close
   * @fires Server#error
   * @fires Server#timeout
   * @fires Server#parseError
   * @fires Server#reconnect
   * @fires Server#reconnectFailed
   * @fires Server#serverHeartbeatStarted
   * @fires Server#serverHeartbeatSucceeded
   * @fires Server#serverHeartbeatFailed
   * @fires Server#topologyOpening
   * @fires Server#topologyClosed
   * @fires Server#topologyDescriptionChanged
   * @property {string} type the topology type.
   * @property {string} parserType the parser type used (c++ or js).
   */
  var Server$6 = function(options) {
    options = options || {};

    // Add event listener
    EventEmitter$6.call(this);

    // Server instance id
    this.id = id$2++;

    // Internal state
    this.s = {
      // Options
      options: Object.assign({ metadata: makeClientMetadata$3(options) }, options),
      // Logger
      logger: require$$7$1('Server', options),
      // Factory overrides
      Cursor: options.cursorFactory || CoreCursor$4,
      // BSON instance
      bson:
        options.bson ||
        new BSON$8([
          BSON$8.Binary,
          BSON$8.Code,
          BSON$8.DBRef,
          BSON$8.Decimal128,
          BSON$8.Double,
          BSON$8.Int32,
          BSON$8.Long,
          BSON$8.Map,
          BSON$8.MaxKey,
          BSON$8.MinKey,
          BSON$8.ObjectId,
          BSON$8.BSONRegExp,
          BSON$8.Symbol,
          BSON$8.Timestamp
        ]),
      // Pool
      pool: null,
      // Disconnect handler
      disconnectHandler: options.disconnectHandler,
      // Monitor thread (keeps the connection alive)
      monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : true,
      // Is the server in a topology
      inTopology: !!options.parent,
      // Monitoring timeout
      monitoringInterval:
        typeof options.monitoringInterval === 'number' ? options.monitoringInterval : 5000,
      compression: { compressors: createCompressionInfo$1(options) },
      // Optional parent topology
      parent: options.parent
    };

    // If this is a single deployment we need to track the clusterTime here
    if (!this.s.parent) {
      this.s.clusterTime = null;
    }

    // Curent ismaster
    this.ismaster = null;
    // Current ping time
    this.lastIsMasterMS = -1;
    // The monitoringProcessId
    this.monitoringProcessId = null;
    // Initial connection
    this.initialConnect = true;
    // Default type
    this._type = 'server';

    // Max Stalleness values
    // last time we updated the ismaster state
    this.lastUpdateTime = 0;
    // Last write time
    this.lastWriteDate = 0;
    // Stalleness
    this.staleness = 0;
  };

  inherits$5(Server$6, EventEmitter$6);
  Object.assign(Server$6.prototype, SessionMixins$2);

  Object.defineProperty(Server$6.prototype, 'type', {
    enumerable: true,
    get: function() {
      return this._type;
    }
  });

  Object.defineProperty(Server$6.prototype, 'parserType', {
    enumerable: true,
    get: function() {
      return BSON$8.native ? 'c++' : 'js';
    }
  });

  Object.defineProperty(Server$6.prototype, 'logicalSessionTimeoutMinutes', {
    enumerable: true,
    get: function() {
      if (!this.ismaster) return null;
      return this.ismaster.logicalSessionTimeoutMinutes || null;
    }
  });

  Object.defineProperty(Server$6.prototype, 'clientMetadata', {
    enumerable: true,
    get: function() {
      return this.s.options.metadata;
    }
  });

  // In single server deployments we track the clusterTime directly on the topology, however
  // in Mongos and ReplSet deployments we instead need to delegate the clusterTime up to the
  // tracking objects so we can ensure we are gossiping the maximum time received from the
  // server.
  Object.defineProperty(Server$6.prototype, 'clusterTime', {
    enumerable: true,
    set: function(clusterTime) {
      const settings = this.s.parent ? this.s.parent : this.s;
      resolveClusterTime$1(settings, clusterTime);
    },
    get: function() {
      const settings = this.s.parent ? this.s.parent : this.s;
      return settings.clusterTime || null;
    }
  });

  Server$6.enableServerAccounting = function() {
    serverAccounting = true;
    servers = {};
  };

  Server$6.disableServerAccounting = function() {
    serverAccounting = false;
  };

  Server$6.servers = function() {
    return servers;
  };

  Object.defineProperty(Server$6.prototype, 'name', {
    enumerable: true,
    get: function() {
      return this.s.options.host + ':' + this.s.options.port;
    }
  });

  function disconnectHandler(self, type, ns, cmd, options, callback) {
    // Topology is not connected, save the call in the provided store to be
    // Executed at some point when the handler deems it's reconnected
    if (
      !self.s.pool.isConnected() &&
      self.s.options.reconnect &&
      self.s.disconnectHandler != null &&
      !options.monitoring
    ) {
      self.s.disconnectHandler.add(type, ns, cmd, options, callback);
      return true;
    }

    // If we have no connection error
    if (!self.s.pool.isConnected()) {
      callback(new MongoError$w(f$4('no connection available to server %s', self.name)));
      return true;
    }
  }

  function monitoringProcess(self) {
    return function() {
      // Pool was destroyed do not continue process
      if (self.s.pool.isDestroyed()) return;
      // Emit monitoring Process event
      self.emit('monitoring', self);
      // Perform ismaster call
      // Get start time
      var start = new Date().getTime();

      // Execute the ismaster query
      self.command(
        'admin.$cmd',
        { ismaster: true },
        {
          socketTimeout:
            typeof self.s.options.connectionTimeout !== 'number'
              ? 2000
              : self.s.options.connectionTimeout,
          monitoring: true
        },
        (err, result) => {
          // Set initial lastIsMasterMS
          self.lastIsMasterMS = new Date().getTime() - start;
          if (self.s.pool.isDestroyed()) return;
          // Update the ismaster view if we have a result
          if (result) {
            self.ismaster = result.result;
          }
          // Re-schedule the monitoring process
          self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);
        }
      );
    };
  }

  var eventHandler = function(self, event) {
    return function(err, conn) {
      // Log information of received information if in info mode
      if (self.s.logger.isInfo()) {
        var object = err instanceof MongoError$w ? JSON.stringify(err) : {};
        self.s.logger.info(
          f$4('server %s fired event %s out with message %s', self.name, event, object)
        );
      }

      // Handle connect event
      if (event === 'connect') {
        self.initialConnect = false;
        self.ismaster = conn.ismaster;
        self.lastIsMasterMS = conn.lastIsMasterMS;
        if (conn.agreedCompressor) {
          self.s.pool.options.agreedCompressor = conn.agreedCompressor;
        }

        if (conn.zlibCompressionLevel) {
          self.s.pool.options.zlibCompressionLevel = conn.zlibCompressionLevel;
        }

        if (conn.ismaster.$clusterTime) {
          const $clusterTime = conn.ismaster.$clusterTime;
          self.clusterTime = $clusterTime;
        }

        // It's a proxy change the type so
        // the wireprotocol will send $readPreference
        if (self.ismaster.msg === 'isdbgrid') {
          self._type = 'mongos';
        }

        // Have we defined self monitoring
        if (self.s.monitoring) {
          self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);
        }

        // Emit server description changed if something listening
        shared.emitServerDescriptionChanged(self, {
          address: self.name,
          arbiters: [],
          hosts: [],
          passives: [],
          type: shared.getTopologyType(self)
        });

        if (!self.s.inTopology) {
          // Emit topology description changed if something listening
          shared.emitTopologyDescriptionChanged(self, {
            topologyType: 'Single',
            servers: [
              {
                address: self.name,
                arbiters: [],
                hosts: [],
                passives: [],
                type: shared.getTopologyType(self)
              }
            ]
          });
        }

        // Log the ismaster if available
        if (self.s.logger.isInfo()) {
          self.s.logger.info(
            f$4('server %s connected with ismaster [%s]', self.name, JSON.stringify(self.ismaster))
          );
        }

        // Emit connect
        self.emit('connect', self);
      } else if (
        event === 'error' ||
        event === 'parseError' ||
        event === 'close' ||
        event === 'timeout' ||
        event === 'reconnect' ||
        event === 'attemptReconnect' ||
        event === 'reconnectFailed'
      ) {
        // Remove server instance from accounting
        if (
          serverAccounting &&
          ['close', 'timeout', 'error', 'parseError', 'reconnectFailed'].indexOf(event) !== -1
        ) {
          // Emit toplogy opening event if not in topology
          if (!self.s.inTopology) {
            self.emit('topologyOpening', { topologyId: self.id });
          }

          delete servers[self.id];
        }

        if (event === 'close') {
          // Closing emits a server description changed event going to unknown.
          shared.emitServerDescriptionChanged(self, {
            address: self.name,
            arbiters: [],
            hosts: [],
            passives: [],
            type: 'Unknown'
          });
        }

        // Reconnect failed return error
        if (event === 'reconnectFailed') {
          self.emit('reconnectFailed', err);
          // Emit error if any listeners
          if (self.listeners('error').length > 0) {
            self.emit('error', err);
          }
          // Terminate
          return;
        }

        // On first connect fail
        if (
          ['disconnected', 'connecting'].indexOf(self.s.pool.state) !== -1 &&
          self.initialConnect &&
          ['close', 'timeout', 'error', 'parseError'].indexOf(event) !== -1
        ) {
          self.initialConnect = false;
          return self.emit(
            'error',
            new MongoNetworkError$1(
              f$4('failed to connect to server [%s] on first connect [%s]', self.name, err)
            )
          );
        }

        // Reconnect event, emit the server
        if (event === 'reconnect') {
          // Reconnecting emits a server description changed event going from unknown to the
          // current server type.
          shared.emitServerDescriptionChanged(self, {
            address: self.name,
            arbiters: [],
            hosts: [],
            passives: [],
            type: shared.getTopologyType(self)
          });
          return self.emit(event, self);
        }

        // Emit the event
        self.emit(event, err);
      }
    };
  };

  /**
   * Initiate server connect
   */
  Server$6.prototype.connect = function(options) {
    var self = this;
    options = options || {};

    // Set the connections
    if (serverAccounting) servers[this.id] = this;

    // Do not allow connect to be called on anything that's not disconnected
    if (self.s.pool && !self.s.pool.isDisconnected() && !self.s.pool.isDestroyed()) {
      throw new MongoError$w(f$4('server instance in invalid state %s', self.s.pool.state));
    }

    // Create a pool
    self.s.pool = new Pool(this, Object.assign(self.s.options, options, { bson: this.s.bson }));

    // Set up listeners
    self.s.pool.on('close', eventHandler(self, 'close'));
    self.s.pool.on('error', eventHandler(self, 'error'));
    self.s.pool.on('timeout', eventHandler(self, 'timeout'));
    self.s.pool.on('parseError', eventHandler(self, 'parseError'));
    self.s.pool.on('connect', eventHandler(self, 'connect'));
    self.s.pool.on('reconnect', eventHandler(self, 'reconnect'));
    self.s.pool.on('reconnectFailed', eventHandler(self, 'reconnectFailed'));

    // Set up listeners for command monitoring
    relayEvents$5(self.s.pool, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);

    // Emit toplogy opening event if not in topology
    if (!self.s.inTopology) {
      this.emit('topologyOpening', { topologyId: topologyId(self) });
    }

    // Emit opening server event
    self.emit('serverOpening', { topologyId: topologyId(self), address: self.name });

    self.s.pool.connect();
  };

  /**
   * Authenticate the topology.
   * @method
   * @param {MongoCredentials} credentials The credentials for authentication we are using
   * @param {authResultCallback} callback A callback function
   */
  Server$6.prototype.auth = function(credentials, callback) {
    if (typeof callback === 'function') callback(null, null);
  };

  /**
   * Get the server description
   * @method
   * @return {object}
   */
  Server$6.prototype.getDescription = function() {
    var ismaster = this.ismaster || {};
    var description = {
      type: shared.getTopologyType(this),
      address: this.name
    };

    // Add fields if available
    if (ismaster.hosts) description.hosts = ismaster.hosts;
    if (ismaster.arbiters) description.arbiters = ismaster.arbiters;
    if (ismaster.passives) description.passives = ismaster.passives;
    if (ismaster.setName) description.setName = ismaster.setName;
    return description;
  };

  /**
   * Returns the last known ismaster document for this server
   * @method
   * @return {object}
   */
  Server$6.prototype.lastIsMaster = function() {
    return this.ismaster;
  };

  /**
   * Unref all connections belong to this server
   * @method
   */
  Server$6.prototype.unref = function() {
    this.s.pool.unref();
  };

  /**
   * Figure out if the server is connected
   * @method
   * @return {boolean}
   */
  Server$6.prototype.isConnected = function() {
    if (!this.s.pool) return false;
    return this.s.pool.isConnected();
  };

  /**
   * Figure out if the server instance was destroyed by calling destroy
   * @method
   * @return {boolean}
   */
  Server$6.prototype.isDestroyed = function() {
    if (!this.s.pool) return false;
    return this.s.pool.isDestroyed();
  };

  function basicWriteValidations(self) {
    if (!self.s.pool) return new MongoError$w('server instance is not connected');
    if (self.s.pool.isDestroyed()) return new MongoError$w('server instance pool was destroyed');
  }

  function basicReadValidations(self, options) {
    basicWriteValidations(self);

    if (options.readPreference && !(options.readPreference instanceof read_preference)) {
      throw new Error('readPreference must be an instance of ReadPreference');
    }
  }

  /**
   * Execute a command
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {object} cmd The command hash
   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {opResultCallback} callback A callback function
   */
  Server$6.prototype.command = function(ns, cmd, options, callback) {
    var self = this;
    if (typeof options === 'function') {
      (callback = options), (options = {}), (options = options || {});
    }

    var result = basicReadValidations(self, options);
    if (result) return callback(result);

    // Clone the options
    options = Object.assign({}, options, { wireProtocolCommand: false });

    // Debug log
    if (self.s.logger.isDebug())
      self.s.logger.debug(
        f$4(
          'executing command [%s] against %s',
          JSON.stringify({
            ns: ns,
            cmd: cmd,
            options: debugOptions$2(debugFields$2, options)
          }),
          self.name
        )
      );

    // If we are not connected or have a disconnectHandler specified
    if (disconnectHandler(self, 'command', ns, cmd, options, callback)) return;

    // error if collation not supported
    if (collationNotSupported(this, cmd)) {
      return callback(new MongoError$w(`server ${this.name} does not support collation`));
    }

    wireprotocol.command(self, ns, cmd, options, callback);
  };

  /**
   * Execute a query against the server
   *
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {object} cmd The command document for the query
   * @param {object} options Optional settings
   * @param {function} callback
   */
  Server$6.prototype.query = function(ns, cmd, cursorState, options, callback) {
    wireprotocol.query(this, ns, cmd, cursorState, options, callback);
  };

  /**
   * Execute a `getMore` against the server
   *
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {object} cursorState State data associated with the cursor calling this method
   * @param {object} options Optional settings
   * @param {function} callback
   */
  Server$6.prototype.getMore = function(ns, cursorState, batchSize, options, callback) {
    wireprotocol.getMore(this, ns, cursorState, batchSize, options, callback);
  };

  /**
   * Execute a `killCursors` command against the server
   *
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {object} cursorState State data associated with the cursor calling this method
   * @param {function} callback
   */
  Server$6.prototype.killCursors = function(ns, cursorState, callback) {
    wireprotocol.killCursors(this, ns, cursorState, callback);
  };

  /**
   * Insert one or more documents
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {array} ops An array of documents to insert
   * @param {boolean} [options.ordered=true] Execute in order or out of order
   * @param {object} [options.writeConcern={}] Write concern for the operation
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {opResultCallback} callback A callback function
   */
  Server$6.prototype.insert = function(ns, ops, options, callback) {
    var self = this;
    if (typeof options === 'function') {
      (callback = options), (options = {}), (options = options || {});
    }

    var result = basicWriteValidations(self);
    if (result) return callback(result);

    // If we are not connected or have a disconnectHandler specified
    if (disconnectHandler(self, 'insert', ns, ops, options, callback)) return;

    // Setup the docs as an array
    ops = Array.isArray(ops) ? ops : [ops];

    // Execute write
    return wireprotocol.insert(self, ns, ops, options, callback);
  };

  /**
   * Perform one or more update operations
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {array} ops An array of updates
   * @param {boolean} [options.ordered=true] Execute in order or out of order
   * @param {object} [options.writeConcern={}] Write concern for the operation
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {opResultCallback} callback A callback function
   */
  Server$6.prototype.update = function(ns, ops, options, callback) {
    var self = this;
    if (typeof options === 'function') {
      (callback = options), (options = {}), (options = options || {});
    }

    var result = basicWriteValidations(self);
    if (result) return callback(result);

    // If we are not connected or have a disconnectHandler specified
    if (disconnectHandler(self, 'update', ns, ops, options, callback)) return;

    // error if collation not supported
    if (collationNotSupported(this, options)) {
      return callback(new MongoError$w(`server ${this.name} does not support collation`));
    }

    // Setup the docs as an array
    ops = Array.isArray(ops) ? ops : [ops];
    // Execute write
    return wireprotocol.update(self, ns, ops, options, callback);
  };

  /**
   * Perform one or more remove operations
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {array} ops An array of removes
   * @param {boolean} [options.ordered=true] Execute in order or out of order
   * @param {object} [options.writeConcern={}] Write concern for the operation
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {opResultCallback} callback A callback function
   */
  Server$6.prototype.remove = function(ns, ops, options, callback) {
    var self = this;
    if (typeof options === 'function') {
      (callback = options), (options = {}), (options = options || {});
    }

    var result = basicWriteValidations(self);
    if (result) return callback(result);

    // If we are not connected or have a disconnectHandler specified
    if (disconnectHandler(self, 'remove', ns, ops, options, callback)) return;

    // error if collation not supported
    if (collationNotSupported(this, options)) {
      return callback(new MongoError$w(`server ${this.name} does not support collation`));
    }

    // Setup the docs as an array
    ops = Array.isArray(ops) ? ops : [ops];
    // Execute write
    return wireprotocol.remove(self, ns, ops, options, callback);
  };

  /**
   * Get a new cursor
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId
   * @param {object} [options] Options for the cursor
   * @param {object} [options.batchSize=0] Batchsize for the operation
   * @param {array} [options.documents=[]] Initial documents list for cursor
   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {object} [options.topology] The internal topology of the created cursor
   * @returns {Cursor}
   */
  Server$6.prototype.cursor = function(ns, cmd, options) {
    options = options || {};
    const topology = options.topology || this;

    // Set up final cursor type
    var FinalCursor = options.cursorFactory || this.s.Cursor;

    // Return the cursor
    return new FinalCursor(topology, ns, cmd, options);
  };

  /**
   * Compare two server instances
   * @method
   * @param {Server} server Server to compare equality against
   * @return {boolean}
   */
  Server$6.prototype.equals = function(server) {
    if (typeof server === 'string') return this.name.toLowerCase() === server.toLowerCase();
    if (server.name) return this.name.toLowerCase() === server.name.toLowerCase();
    return false;
  };

  /**
   * All raw connections
   * @method
   * @return {Connection[]}
   */
  Server$6.prototype.connections = function() {
    return this.s.pool.allConnections();
  };

  /**
   * Selects a server
   * @method
   * @param {function} selector Unused
   * @param {ReadPreference} [options.readPreference] Unused
   * @param {ClientSession} [options.session] Unused
   * @return {Server}
   */
  Server$6.prototype.selectServer = function(selector, options, callback) {
    if (typeof selector === 'function' && typeof callback === 'undefined')
      (callback = selector), (selector = undefined), (options = {});
    if (typeof options === 'function')
      (callback = options), (options = selector), (selector = undefined);

    callback(null, this);
  };

  var listeners = ['close', 'error', 'timeout', 'parseError', 'connect'];

  /**
   * Destroy the server connection
   * @method
   * @param {boolean} [options.emitClose=false] Emit close event on destroy
   * @param {boolean} [options.emitDestroy=false] Emit destroy event on destroy
   * @param {boolean} [options.force=false] Force destroy the pool
   */
  Server$6.prototype.destroy = function(options, callback) {
    if (this._destroyed) {
      if (typeof callback === 'function') callback(null, null);
      return;
    }

    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options = options || {};
    var self = this;

    // Set the connections
    if (serverAccounting) delete servers[this.id];

    // Destroy the monitoring process if any
    if (this.monitoringProcessId) {
      clearTimeout(this.monitoringProcessId);
    }

    // No pool, return
    if (!self.s.pool || this._destroyed) {
      this._destroyed = true;
      if (typeof callback === 'function') callback(null, null);
      return;
    }

    this._destroyed = true;

    // Emit close event
    if (options.emitClose) {
      self.emit('close', self);
    }

    // Emit destroy event
    if (options.emitDestroy) {
      self.emit('destroy', self);
    }

    // Remove all listeners
    listeners.forEach(function(event) {
      self.s.pool.removeAllListeners(event);
    });

    // Emit opening server event
    if (self.listeners('serverClosed').length > 0)
      self.emit('serverClosed', { topologyId: topologyId(self), address: self.name });

    // Emit toplogy opening event if not in topology
    if (self.listeners('topologyClosed').length > 0 && !self.s.inTopology) {
      self.emit('topologyClosed', { topologyId: topologyId(self) });
    }

    if (self.s.logger.isDebug()) {
      self.s.logger.debug(f$4('destroy called on server %s', self.name));
    }

    // Destroy the pool
    this.s.pool.destroy(options.force, callback);
  };

  /**
   * A server connect event, used to verify that the connection is up and running
   *
   * @event Server#connect
   * @type {Server}
   */

  /**
   * A server reconnect event, used to verify that the server topology has reconnected
   *
   * @event Server#reconnect
   * @type {Server}
   */

  /**
   * A server opening SDAM monitoring event
   *
   * @event Server#serverOpening
   * @type {object}
   */

  /**
   * A server closed SDAM monitoring event
   *
   * @event Server#serverClosed
   * @type {object}
   */

  /**
   * A server description SDAM change monitoring event
   *
   * @event Server#serverDescriptionChanged
   * @type {object}
   */

  /**
   * A topology open SDAM event
   *
   * @event Server#topologyOpening
   * @type {object}
   */

  /**
   * A topology closed SDAM event
   *
   * @event Server#topologyClosed
   * @type {object}
   */

  /**
   * A topology structure SDAM change event
   *
   * @event Server#topologyDescriptionChanged
   * @type {object}
   */

  /**
   * Server reconnect failed
   *
   * @event Server#reconnectFailed
   * @type {Error}
   */

  /**
   * Server connection pool closed
   *
   * @event Server#close
   * @type {object}
   */

  /**
   * Server connection pool caused an error
   *
   * @event Server#error
   * @type {Error}
   */

  /**
   * Server destroyed was called
   *
   * @event Server#destroy
   * @type {Server}
   */

  var server$1 = Server$6;

  const inherits$4 = require('util').inherits;
  const f$3 = require('util').format;
  const EventEmitter$5 = require('events').EventEmitter;
  const ReadPreference$f = require('./read_preference');
  const CoreCursor$3 = require('../cursor').CoreCursor;
  const retrieveBSON$3 = require('../connection/utils').retrieveBSON;
  const Logger$2 = require('../connection/logger');
  const MongoError$v = require('../error').MongoError;
  const Server$5 = require('./server');
  const ReplSetState = require('./replset_state');
  const Timeout = require('./shared').Timeout;
  const Interval = require('./shared').Interval;
  const SessionMixins$1 = require('./shared').SessionMixins;
  const isRetryableWritesSupported$2 = require('./shared').isRetryableWritesSupported;
  const relayEvents$4 = require('../utils').relayEvents;
  const BSON$7 = retrieveBSON$3();
  const getMMAPError$2 = require('./shared').getMMAPError;
  const makeClientMetadata$2 = require('../utils').makeClientMetadata;
  const legacyIsRetryableWriteError$1 = require('./shared').legacyIsRetryableWriteError;
  const now$1 = require('../../utils').now;
  const calculateDurationInMs$1 = require('../../utils').calculateDurationInMs;

  //
  // States
  var DISCONNECTED$1 = 'disconnected';
  var CONNECTING$1 = 'connecting';
  var CONNECTED$1 = 'connected';
  var UNREFERENCED$1 = 'unreferenced';
  var DESTROYED$1 = 'destroyed';

  function stateTransition$2(self, newState) {
    var legalTransitions = {
      disconnected: [CONNECTING$1, DESTROYED$1, DISCONNECTED$1],
      connecting: [CONNECTING$1, DESTROYED$1, CONNECTED$1, DISCONNECTED$1],
      connected: [CONNECTED$1, DISCONNECTED$1, DESTROYED$1, UNREFERENCED$1],
      unreferenced: [UNREFERENCED$1, DESTROYED$1],
      destroyed: [DESTROYED$1]
    };

    // Get current state
    var legalStates = legalTransitions[self.state];
    if (legalStates && legalStates.indexOf(newState) !== -1) {
      self.state = newState;
    } else {
      self.s.logger.error(
        f$3(
          'Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',
          self.id,
          self.state,
          newState,
          legalStates
        )
      );
    }
  }

  //
  // ReplSet instance id
  var id$1 = 1;
  var handlers$1 = ['connect', 'close', 'error', 'timeout', 'parseError'];

  /**
   * Creates a new Replset instance
   * @class
   * @param {array} seedlist A list of seeds for the replicaset
   * @param {boolean} options.setName The Replicaset set name
   * @param {boolean} [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset
   * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry
   * @param {boolean} [options.emitError=false] Server will emit errors events
   * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors
   * @param {number} [options.size=5] Server connection pool size
   * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
   * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled
   * @param {boolean} [options.noDelay=true] TCP Connection no delay
   * @param {number} [options.connectionTimeout=10000] TCP Connection timeout setting
   * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
   * @param {boolean} [options.ssl=false] Use SSL for connection
   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.
   * @param {Buffer} [options.ca] SSL Certificate store binary buffer
   * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer
   * @param {Buffer} [options.cert] SSL Certificate binary buffer
   * @param {Buffer} [options.key] SSL Key file binary buffer
   * @param {string} [options.passphrase] SSL Certificate pass phrase
   * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.
   * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates
   * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
   * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers
   * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for Replicaset member selection
   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.
   * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology
   * @return {ReplSet} A cursor instance
   * @fires ReplSet#connect
   * @fires ReplSet#ha
   * @fires ReplSet#joined
   * @fires ReplSet#left
   * @fires ReplSet#failed
   * @fires ReplSet#fullsetup
   * @fires ReplSet#all
   * @fires ReplSet#error
   * @fires ReplSet#serverHeartbeatStarted
   * @fires ReplSet#serverHeartbeatSucceeded
   * @fires ReplSet#serverHeartbeatFailed
   * @fires ReplSet#topologyOpening
   * @fires ReplSet#topologyClosed
   * @fires ReplSet#topologyDescriptionChanged
   * @property {string} type the topology type.
   * @property {string} parserType the parser type used (c++ or js).
   */
  var ReplSet$2 = function(seedlist, options) {
    var self = this;
    options = options || {};

    // Validate seedlist
    if (!Array.isArray(seedlist)) throw new MongoError$v('seedlist must be an array');
    // Validate list
    if (seedlist.length === 0) throw new MongoError$v('seedlist must contain at least one entry');
    // Validate entries
    seedlist.forEach(function(e) {
      if (typeof e.host !== 'string' || typeof e.port !== 'number')
        throw new MongoError$v('seedlist entry must contain a host and port');
    });

    // Add event listener
    EventEmitter$5.call(this);

    // Get replSet Id
    this.id = id$1++;

    // Get the localThresholdMS
    var localThresholdMS = options.localThresholdMS || 15;
    // Backward compatibility
    if (options.acceptableLatency) localThresholdMS = options.acceptableLatency;

    // Create a logger
    var logger = Logger$2('ReplSet', options);

    // Internal state
    this.s = {
      options: Object.assign({ metadata: makeClientMetadata$2(options) }, options),
      // BSON instance
      bson:
        options.bson ||
        new BSON$7([
          BSON$7.Binary,
          BSON$7.Code,
          BSON$7.DBRef,
          BSON$7.Decimal128,
          BSON$7.Double,
          BSON$7.Int32,
          BSON$7.Long,
          BSON$7.Map,
          BSON$7.MaxKey,
          BSON$7.MinKey,
          BSON$7.ObjectId,
          BSON$7.BSONRegExp,
          BSON$7.Symbol,
          BSON$7.Timestamp
        ]),
      // Factory overrides
      Cursor: options.cursorFactory || CoreCursor$3,
      // Logger instance
      logger: logger,
      // Seedlist
      seedlist: seedlist,
      // Replicaset state
      replicaSetState: new ReplSetState({
        id: this.id,
        setName: options.setName,
        acceptableLatency: localThresholdMS,
        heartbeatFrequencyMS: options.haInterval ? options.haInterval : 10000,
        logger: logger
      }),
      // Current servers we are connecting to
      connectingServers: [],
      // Ha interval
      haInterval: options.haInterval ? options.haInterval : 10000,
      // Minimum heartbeat frequency used if we detect a server close
      minHeartbeatFrequencyMS: 500,
      // Disconnect handler
      disconnectHandler: options.disconnectHandler,
      // Server selection index
      index: 0,
      // Connect function options passed in
      connectOptions: {},
      // Are we running in debug mode
      debug: typeof options.debug === 'boolean' ? options.debug : false
    };

    // Add handler for topology change
    this.s.replicaSetState.on('topologyDescriptionChanged', function(r) {
      self.emit('topologyDescriptionChanged', r);
    });

    // Log info warning if the socketTimeout < haInterval as it will cause
    // a lot of recycled connections to happen.
    if (
      this.s.logger.isWarn() &&
      this.s.options.socketTimeout !== 0 &&
      this.s.options.socketTimeout < this.s.haInterval
    ) {
      this.s.logger.warn(
        f$3(
          'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',
          this.s.options.socketTimeout,
          this.s.haInterval
        )
      );
    }

    // Add forwarding of events from state handler
    var types = ['joined', 'left'];
    types.forEach(function(x) {
      self.s.replicaSetState.on(x, function(t, s) {
        self.emit(x, t, s);
      });
    });

    // Connect stat
    this.initialConnectState = {
      connect: false,
      fullsetup: false,
      all: false
    };

    // Disconnected state
    this.state = DISCONNECTED$1;
    this.haTimeoutId = null;
    // Last ismaster
    this.ismaster = null;
    // Contains the intervalId
    this.intervalIds = [];

    // Highest clusterTime seen in responses from the current deployment
    this.clusterTime = null;
  };

  inherits$4(ReplSet$2, EventEmitter$5);
  Object.assign(ReplSet$2.prototype, SessionMixins$1);

  Object.defineProperty(ReplSet$2.prototype, 'type', {
    enumerable: true,
    get: function() {
      return 'replset';
    }
  });

  Object.defineProperty(ReplSet$2.prototype, 'parserType', {
    enumerable: true,
    get: function() {
      return BSON$7.native ? 'c++' : 'js';
    }
  });

  Object.defineProperty(ReplSet$2.prototype, 'logicalSessionTimeoutMinutes', {
    enumerable: true,
    get: function() {
      return this.s.replicaSetState.logicalSessionTimeoutMinutes || null;
    }
  });

  function rexecuteOperations(self) {
    // If we have a primary and a disconnect handler, execute
    // buffered operations
    if (self.s.replicaSetState.hasPrimaryAndSecondary() && self.s.disconnectHandler) {
      self.s.disconnectHandler.execute();
    } else if (self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler) {
      self.s.disconnectHandler.execute({ executePrimary: true });
    } else if (self.s.replicaSetState.hasSecondary() && self.s.disconnectHandler) {
      self.s.disconnectHandler.execute({ executeSecondary: true });
    }
  }

  function connectNewServers(self, servers, callback) {
    // No new servers
    if (servers.length === 0) {
      return callback();
    }

    // Count lefts
    var count = servers.length;
    var error = null;

    function done() {
      count = count - 1;
      if (count === 0) {
        callback(error);
      }
    }

    // Handle events
    var _handleEvent = function(self, event) {
      return function(err) {
        var _self = this;

        // Destroyed
        if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) {
          this.destroy({ force: true });
          return done();
        }

        if (event === 'connect') {
          // Update the state
          var result = self.s.replicaSetState.update(_self);
          // Update the state with the new server
          if (result) {
            // Primary lastIsMaster store it
            if (_self.lastIsMaster() && _self.lastIsMaster().ismaster) {
              self.ismaster = _self.lastIsMaster();
            }

            // Remove the handlers
            for (let i = 0; i < handlers$1.length; i++) {
              _self.removeAllListeners(handlers$1[i]);
            }

            // Add stable state handlers
            _self.on('error', handleEvent$1(self, 'error'));
            _self.on('close', handleEvent$1(self, 'close'));
            _self.on('timeout', handleEvent$1(self, 'timeout'));
            _self.on('parseError', handleEvent$1(self, 'parseError'));

            // Enalbe the monitoring of the new server
            monitorServer(_self.lastIsMaster().me, self, {});

            // Rexecute any stalled operation
            rexecuteOperations(self);
          } else {
            _self.destroy({ force: true });
          }
        } else if (event === 'error') {
          error = err;
        }

        // Rexecute any stalled operation
        rexecuteOperations(self);
        done();
      };
    };

    // Execute method
    function execute(_server, i) {
      setTimeout(function() {
        // Destroyed
        if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) {
          return;
        }

        // remove existing connecting server if it's failed to connect, otherwise
        // wait for that server to connect
        const existingServerIdx = self.s.connectingServers.findIndex(s => s.name === _server);
        if (existingServerIdx >= 0) {
          const connectingServer = self.s.connectingServers[existingServerIdx];
          connectingServer.destroy({ force: true });

          self.s.connectingServers.splice(existingServerIdx, 1);
          return done();
        }

        // Create a new server instance
        var server = new Server$5(
          Object.assign({}, self.s.options, {
            host: _server.split(':')[0],
            port: parseInt(_server.split(':')[1], 10),
            reconnect: false,
            monitoring: false,
            parent: self
          })
        );

        // Add temp handlers
        server.once('connect', _handleEvent(self, 'connect'));
        server.once('close', _handleEvent(self, 'close'));
        server.once('timeout', _handleEvent(self, 'timeout'));
        server.once('error', _handleEvent(self, 'error'));
        server.once('parseError', _handleEvent(self, 'parseError'));

        // SDAM Monitoring events
        server.on('serverOpening', e => self.emit('serverOpening', e));
        server.on('serverDescriptionChanged', e => self.emit('serverDescriptionChanged', e));
        server.on('serverClosed', e => self.emit('serverClosed', e));

        // Command Monitoring events
        relayEvents$4(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);

        self.s.connectingServers.push(server);
        server.connect(self.s.connectOptions);
      }, i);
    }

    // Create new instances
    for (var i = 0; i < servers.length; i++) {
      execute(servers[i], i);
    }
  }

  // Ping the server
  var pingServer = function(self, server, cb) {
    // Measure running time
    var start = new Date().getTime();

    // Emit the server heartbeat start
    emitSDAMEvent$1(self, 'serverHeartbeatStarted', { connectionId: server.name });

    // Execute ismaster
    // Set the socketTimeout for a monitoring message to a low number
    // Ensuring ismaster calls are timed out quickly
    server.command(
      'admin.$cmd',
      {
        ismaster: true
      },
      {
        monitoring: true,
        socketTimeout: self.s.options.connectionTimeout || 2000
      },
      function(err, r) {
        if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) {
          server.destroy({ force: true });
          return cb(err, r);
        }

        // Calculate latency
        var latencyMS = new Date().getTime() - start;

        // Set the last updatedTime
        server.lastUpdateTime = now$1();

        // We had an error, remove it from the state
        if (err) {
          // Emit the server heartbeat failure
          emitSDAMEvent$1(self, 'serverHeartbeatFailed', {
            durationMS: latencyMS,
            failure: err,
            connectionId: server.name
          });

          // Remove server from the state
          self.s.replicaSetState.remove(server);
        } else {
          // Update the server ismaster
          server.ismaster = r.result;

          // Check if we have a lastWriteDate convert it to MS
          // and store on the server instance for later use
          if (server.ismaster.lastWrite && server.ismaster.lastWrite.lastWriteDate) {
            server.lastWriteDate = server.ismaster.lastWrite.lastWriteDate.getTime();
          }

          // Do we have a brand new server
          if (server.lastIsMasterMS === -1) {
            server.lastIsMasterMS = latencyMS;
          } else if (server.lastIsMasterMS) {
            // After the first measurement, average RTT MUST be computed using an
            // exponentially-weighted moving average formula, with a weighting factor (alpha) of 0.2.
            // If the prior average is denoted old_rtt, then the new average (new_rtt) is
            // computed from a new RTT measurement (x) using the following formula:
            // alpha = 0.2
            // new_rtt = alpha * x + (1 - alpha) * old_rtt
            server.lastIsMasterMS = 0.2 * latencyMS + (1 - 0.2) * server.lastIsMasterMS;
          }

          if (self.s.replicaSetState.update(server)) {
            // Primary lastIsMaster store it
            if (server.lastIsMaster() && server.lastIsMaster().ismaster) {
              self.ismaster = server.lastIsMaster();
            }
          }

          // Server heart beat event
          emitSDAMEvent$1(self, 'serverHeartbeatSucceeded', {
            durationMS: latencyMS,
            reply: r.result,
            connectionId: server.name
          });
        }

        // Calculate the staleness for this server
        self.s.replicaSetState.updateServerMaxStaleness(server, self.s.haInterval);

        // Callback
        cb(err, r);
      }
    );
  };

  // Each server is monitored in parallel in their own timeout loop
  var monitorServer = function(host, self, options) {
    // If this is not the initial scan
    // Is this server already being monitoried, then skip monitoring
    if (!options.haInterval) {
      for (var i = 0; i < self.intervalIds.length; i++) {
        if (self.intervalIds[i].__host === host) {
          return;
        }
      }
    }

    // Get the haInterval
    var _process = options.haInterval ? Timeout : Interval;
    var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;

    // Create the interval
    var intervalId = new _process(function() {
      if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) {
        // clearInterval(intervalId);
        intervalId.stop();
        return;
      }

      // Do we already have server connection available for this host
      var _server = self.s.replicaSetState.get(host);

      // Check if we have a known server connection and reuse
      if (_server) {
        // Ping the server
        return pingServer(self, _server, function(err) {
          if (err) {
            // NOTE: should something happen here?
            return;
          }

          if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) {
            intervalId.stop();
            return;
          }

          // Filter out all called intervaliIds
          self.intervalIds = self.intervalIds.filter(function(intervalId) {
            return intervalId.isRunning();
          });

          // Initial sweep
          if (_process === Timeout) {
            if (
              self.state === CONNECTING$1 &&
              ((self.s.replicaSetState.hasSecondary() &&
                self.s.options.secondaryOnlyConnectionAllowed) ||
                self.s.replicaSetState.hasPrimary())
            ) {
              stateTransition$2(self, CONNECTED$1);

              // Emit connected sign
              browser$1.nextTick(function() {
                self.emit('connect', self);
              });

              // Start topology interval check
              topologyMonitor$1(self, {});
            }
          } else {
            if (
              self.state === DISCONNECTED$1 &&
              ((self.s.replicaSetState.hasSecondary() &&
                self.s.options.secondaryOnlyConnectionAllowed) ||
                self.s.replicaSetState.hasPrimary())
            ) {
              stateTransition$2(self, CONNECTED$1);

              // Rexecute any stalled operation
              rexecuteOperations(self);

              // Emit connected sign
              browser$1.nextTick(function() {
                self.emit('reconnect', self);
              });
            }
          }

          if (
            self.initialConnectState.connect &&
            !self.initialConnectState.fullsetup &&
            self.s.replicaSetState.hasPrimaryAndSecondary()
          ) {
            // Set initial connect state
            self.initialConnectState.fullsetup = true;
            self.initialConnectState.all = true;

            browser$1.nextTick(function() {
              self.emit('fullsetup', self);
              self.emit('all', self);
            });
          }
        });
      }
    }, _haInterval);

    // Start the interval
    intervalId.start();
    // Add the intervalId host name
    intervalId.__host = host;
    // Add the intervalId to our list of intervalIds
    self.intervalIds.push(intervalId);
  };

  function topologyMonitor$1(self, options) {
    if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) return;
    options = options || {};

    // Get the servers
    var servers = Object.keys(self.s.replicaSetState.set);

    // Get the haInterval
    var _process = options.haInterval ? Timeout : Interval;
    var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;

    if (_process === Timeout) {
      return connectNewServers(self, self.s.replicaSetState.unknownServers, function(err) {
        // Don't emit errors if the connection was already
        if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) {
          return;
        }

        if (!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) {
          if (err) {
            return self.emit('error', err);
          }

          self.emit(
            'error',
            new MongoError$v('no primary found in replicaset or invalid replica set name')
          );
          return self.destroy({ force: true });
        } else if (
          !self.s.replicaSetState.hasSecondary() &&
          self.s.options.secondaryOnlyConnectionAllowed
        ) {
          if (err) {
            return self.emit('error', err);
          }

          self.emit(
            'error',
            new MongoError$v('no secondary found in replicaset or invalid replica set name')
          );
          return self.destroy({ force: true });
        }

        for (var i = 0; i < servers.length; i++) {
          monitorServer(servers[i], self, options);
        }
      });
    } else {
      for (var i = 0; i < servers.length; i++) {
        monitorServer(servers[i], self, options);
      }
    }

    // Run the reconnect process
    function executeReconnect(self) {
      return function() {
        if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) {
          return;
        }

        connectNewServers(self, self.s.replicaSetState.unknownServers, function() {
          var monitoringFrequencey = self.s.replicaSetState.hasPrimary()
            ? _haInterval
            : self.s.minHeartbeatFrequencyMS;

          // Create a timeout
          self.intervalIds.push(new Timeout(executeReconnect(self), monitoringFrequencey).start());
        });
      };
    }

    // Decide what kind of interval to use
    var intervalTime = !self.s.replicaSetState.hasPrimary()
      ? self.s.minHeartbeatFrequencyMS
      : _haInterval;

    self.intervalIds.push(new Timeout(executeReconnect(self), intervalTime).start());
  }

  function addServerToList(list, server) {
    for (var i = 0; i < list.length; i++) {
      if (list[i].name.toLowerCase() === server.name.toLowerCase()) return true;
    }

    list.push(server);
  }

  function handleEvent$1(self, event) {
    return function() {
      if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) return;
      // Debug log
      if (self.s.logger.isDebug()) {
        self.s.logger.debug(
          f$3('handleEvent %s from server %s in replset with id %s', event, this.name, self.id)
        );
      }

      // Remove from the replicaset state
      self.s.replicaSetState.remove(this);

      // Are we in a destroyed state return
      if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) return;

      // If no primary and secondary available
      if (
        !self.s.replicaSetState.hasPrimary() &&
        !self.s.replicaSetState.hasSecondary() &&
        self.s.options.secondaryOnlyConnectionAllowed
      ) {
        stateTransition$2(self, DISCONNECTED$1);
      } else if (!self.s.replicaSetState.hasPrimary()) {
        stateTransition$2(self, DISCONNECTED$1);
      }

      addServerToList(self.s.connectingServers, this);
    };
  }

  function shouldTriggerConnect(self) {
    const isConnecting = self.state === CONNECTING$1;
    const hasPrimary = self.s.replicaSetState.hasPrimary();
    const hasSecondary = self.s.replicaSetState.hasSecondary();
    const secondaryOnlyConnectionAllowed = self.s.options.secondaryOnlyConnectionAllowed;
    const readPreferenceSecondary =
      self.s.connectOptions.readPreference &&
      self.s.connectOptions.readPreference.equals(ReadPreference$f.secondary);

    return (
      (isConnecting &&
        ((readPreferenceSecondary && hasSecondary) || (!readPreferenceSecondary && hasPrimary))) ||
      (hasSecondary && secondaryOnlyConnectionAllowed)
    );
  }

  function handleInitialConnectEvent$1(self, event) {
    return function() {
      var _this = this;
      // Debug log
      if (self.s.logger.isDebug()) {
        self.s.logger.debug(
          f$3(
            'handleInitialConnectEvent %s from server %s in replset with id %s',
            event,
            this.name,
            self.id
          )
        );
      }

      // Destroy the instance
      if (self.state === DESTROYED$1 || self.state === UNREFERENCED$1) {
        return this.destroy({ force: true });
      }

      // Check the type of server
      if (event === 'connect') {
        // Update the state
        var result = self.s.replicaSetState.update(_this);
        if (result === true) {
          // Primary lastIsMaster store it
          if (_this.lastIsMaster() && _this.lastIsMaster().ismaster) {
            self.ismaster = _this.lastIsMaster();
          }

          // Debug log
          if (self.s.logger.isDebug()) {
            self.s.logger.debug(
              f$3(
                'handleInitialConnectEvent %s from server %s in replset with id %s has state [%s]',
                event,
                _this.name,
                self.id,
                JSON.stringify(self.s.replicaSetState.set)
              )
            );
          }

          // Remove the handlers
          for (let i = 0; i < handlers$1.length; i++) {
            _this.removeAllListeners(handlers$1[i]);
          }

          // Add stable state handlers
          _this.on('error', handleEvent$1(self, 'error'));
          _this.on('close', handleEvent$1(self, 'close'));
          _this.on('timeout', handleEvent$1(self, 'timeout'));
          _this.on('parseError', handleEvent$1(self, 'parseError'));

          // Do we have a primary or primaryAndSecondary
          if (shouldTriggerConnect(self)) {
            // We are connected
            stateTransition$2(self, CONNECTED$1);

            // Set initial connect state
            self.initialConnectState.connect = true;
            // Emit connect event
            browser$1.nextTick(function() {
              self.emit('connect', self);
            });

            topologyMonitor$1(self, {});
          }
        } else if (result instanceof MongoError$v) {
          _this.destroy({ force: true });
          self.destroy({ force: true });
          return self.emit('error', result);
        } else {
          _this.destroy({ force: true });
        }
      } else {
        // Emit failure to connect
        self.emit('failed', this);

        addServerToList(self.s.connectingServers, this);
        // Remove from the state
        self.s.replicaSetState.remove(this);
      }

      if (
        self.initialConnectState.connect &&
        !self.initialConnectState.fullsetup &&
        self.s.replicaSetState.hasPrimaryAndSecondary()
      ) {
        // Set initial connect state
        self.initialConnectState.fullsetup = true;
        self.initialConnectState.all = true;

        browser$1.nextTick(function() {
          self.emit('fullsetup', self);
          self.emit('all', self);
        });
      }

      // Remove from the list from connectingServers
      for (var i = 0; i < self.s.connectingServers.length; i++) {
        if (self.s.connectingServers[i].equals(this)) {
          self.s.connectingServers.splice(i, 1);
        }
      }

      // Trigger topologyMonitor
      if (self.s.connectingServers.length === 0 && self.state === CONNECTING$1) {
        topologyMonitor$1(self, { haInterval: 1 });
      }
    };
  }

  function connectServers$1(self, servers) {
    // Update connectingServers
    self.s.connectingServers = self.s.connectingServers.concat(servers);

    // Index used to interleaf the server connects, avoiding
    // runtime issues on io constrained vm's
    var timeoutInterval = 0;

    function connect(server, timeoutInterval) {
      setTimeout(function() {
        // Add the server to the state
        if (self.s.replicaSetState.update(server)) {
          // Primary lastIsMaster store it
          if (server.lastIsMaster() && server.lastIsMaster().ismaster) {
            self.ismaster = server.lastIsMaster();
          }
        }

        // Add event handlers
        server.once('close', handleInitialConnectEvent$1(self, 'close'));
        server.once('timeout', handleInitialConnectEvent$1(self, 'timeout'));
        server.once('parseError', handleInitialConnectEvent$1(self, 'parseError'));
        server.once('error', handleInitialConnectEvent$1(self, 'error'));
        server.once('connect', handleInitialConnectEvent$1(self, 'connect'));

        // SDAM Monitoring events
        server.on('serverOpening', e => self.emit('serverOpening', e));
        server.on('serverDescriptionChanged', e => self.emit('serverDescriptionChanged', e));
        server.on('serverClosed', e => self.emit('serverClosed', e));

        // Command Monitoring events
        relayEvents$4(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);

        // Start connection
        server.connect(self.s.connectOptions);
      }, timeoutInterval);
    }

    // Start all the servers
    while (servers.length > 0) {
      connect(servers.shift(), timeoutInterval++);
    }
  }

  /**
   * Emit event if it exists
   * @method
   */
  function emitSDAMEvent$1(self, event, description) {
    if (self.listeners(event).length > 0) {
      self.emit(event, description);
    }
  }

  /**
   * Initiate server connect
   */
  ReplSet$2.prototype.connect = function(options) {
    var self = this;
    // Add any connect level options to the internal state
    this.s.connectOptions = options || {};

    // Set connecting state
    stateTransition$2(this, CONNECTING$1);

    // Create server instances
    var servers = this.s.seedlist.map(function(x) {
      return new Server$5(
        Object.assign({}, self.s.options, x, options, {
          reconnect: false,
          monitoring: false,
          parent: self
        })
      );
    });

    // Error out as high availability interval must be < than socketTimeout
    if (
      this.s.options.socketTimeout > 0 &&
      this.s.options.socketTimeout <= this.s.options.haInterval
    ) {
      return self.emit(
        'error',
        new MongoError$v(
          f$3(
            'haInterval [%s] MS must be set to less than socketTimeout [%s] MS',
            this.s.options.haInterval,
            this.s.options.socketTimeout
          )
        )
      );
    }

    // Emit the topology opening event
    emitSDAMEvent$1(this, 'topologyOpening', { topologyId: this.id });
    // Start all server connections
    connectServers$1(self, servers);
  };

  /**
   * Authenticate the topology.
   * @method
   * @param {MongoCredentials} credentials The credentials for authentication we are using
   * @param {authResultCallback} callback A callback function
   */
  ReplSet$2.prototype.auth = function(credentials, callback) {
    if (typeof callback === 'function') callback(null, null);
  };

  /**
   * Destroy the server connection
   * @param {boolean} [options.force=false] Force destroy the pool
   * @method
   */
  ReplSet$2.prototype.destroy = function(options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options = options || {};

    let destroyCount = this.s.connectingServers.length + 1; // +1 for the callback from `replicaSetState.destroy`
    const serverDestroyed = () => {
      destroyCount--;
      if (destroyCount > 0) {
        return;
      }

      // Emit toplogy closing event
      emitSDAMEvent$1(this, 'topologyClosed', { topologyId: this.id });

      if (typeof callback === 'function') {
        callback(null, null);
      }
    };

    if (this.state === DESTROYED$1) {
      if (typeof callback === 'function') callback(null, null);
      return;
    }

    // Transition state
    stateTransition$2(this, DESTROYED$1);

    // Clear out any monitoring process
    if (this.haTimeoutId) clearTimeout(this.haTimeoutId);

    // Clear out all monitoring
    for (var i = 0; i < this.intervalIds.length; i++) {
      this.intervalIds[i].stop();
    }

    // Reset list of intervalIds
    this.intervalIds = [];

    if (destroyCount === 0) {
      serverDestroyed();
      return;
    }

    // Destroy the replicaset
    this.s.replicaSetState.destroy(options, serverDestroyed);

    // Destroy all connecting servers
    this.s.connectingServers.forEach(function(x) {
      x.destroy(options, serverDestroyed);
    });
  };

  /**
   * Unref all connections belong to this server
   * @method
   */
  ReplSet$2.prototype.unref = function() {
    // Transition state
    stateTransition$2(this, UNREFERENCED$1);

    this.s.replicaSetState.allServers().forEach(function(x) {
      x.unref();
    });

    clearTimeout(this.haTimeoutId);
  };

  /**
   * Returns the last known ismaster document for this server
   * @method
   * @return {object}
   */
  ReplSet$2.prototype.lastIsMaster = function() {
    // If secondaryOnlyConnectionAllowed and no primary but secondary
    // return the secondaries ismaster result.
    if (
      this.s.options.secondaryOnlyConnectionAllowed &&
      !this.s.replicaSetState.hasPrimary() &&
      this.s.replicaSetState.hasSecondary()
    ) {
      return this.s.replicaSetState.secondaries[0].lastIsMaster();
    }

    return this.s.replicaSetState.primary
      ? this.s.replicaSetState.primary.lastIsMaster()
      : this.ismaster;
  };

  /**
   * All raw connections
   * @method
   * @return {Connection[]}
   */
  ReplSet$2.prototype.connections = function() {
    var servers = this.s.replicaSetState.allServers();
    var connections = [];
    for (var i = 0; i < servers.length; i++) {
      connections = connections.concat(servers[i].connections());
    }

    return connections;
  };

  /**
   * Figure out if the server is connected
   * @method
   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
   * @return {boolean}
   */
  ReplSet$2.prototype.isConnected = function(options) {
    options = options || {};

    // If we specified a read preference check if we are connected to something
    // than can satisfy this
    if (options.readPreference && options.readPreference.equals(ReadPreference$f.secondary)) {
      return this.s.replicaSetState.hasSecondary();
    }

    if (options.readPreference && options.readPreference.equals(ReadPreference$f.primary)) {
      return this.s.replicaSetState.hasPrimary();
    }

    if (options.readPreference && options.readPreference.equals(ReadPreference$f.primaryPreferred)) {
      return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();
    }

    if (options.readPreference && options.readPreference.equals(ReadPreference$f.secondaryPreferred)) {
      return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();
    }

    if (this.s.options.secondaryOnlyConnectionAllowed && this.s.replicaSetState.hasSecondary()) {
      return true;
    }

    return this.s.replicaSetState.hasPrimary();
  };

  /**
   * Figure out if the replicaset instance was destroyed by calling destroy
   * @method
   * @return {boolean}
   */
  ReplSet$2.prototype.isDestroyed = function() {
    return this.state === DESTROYED$1;
  };

  const SERVER_SELECTION_TIMEOUT_MS = 10000; // hardcoded `serverSelectionTimeoutMS` for legacy topology
  const SERVER_SELECTION_INTERVAL_MS = 1000; // time to wait between selection attempts
  /**
   * Selects a server
   *
   * @method
   * @param {function} selector Unused
   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
   * @param {ClientSession} [options.session] Unused
   * @param {function} callback
   */
  ReplSet$2.prototype.selectServer = function(selector, options, callback) {
    if (typeof selector === 'function' && typeof callback === 'undefined')
      (callback = selector), (selector = undefined), (options = {});
    if (typeof options === 'function') (callback = options), (options = selector);
    options = options || {};

    let readPreference;
    if (selector instanceof ReadPreference$f) {
      readPreference = selector;
    } else {
      readPreference = options.readPreference || ReadPreference$f.primary;
    }

    let lastError;
    const start = now$1();
    const _selectServer = () => {
      if (calculateDurationInMs$1(start) >= SERVER_SELECTION_TIMEOUT_MS) {
        if (lastError != null) {
          callback(lastError, null);
        } else {
          callback(new MongoError$v('Server selection timed out'));
        }

        return;
      }

      const server = this.s.replicaSetState.pickServer(readPreference);
      if (server == null) {
        setTimeout(_selectServer, SERVER_SELECTION_INTERVAL_MS);
        return;
      }

      if (!(server instanceof Server$5)) {
        lastError = server;
        setTimeout(_selectServer, SERVER_SELECTION_INTERVAL_MS);
        return;
      }

      if (this.s.debug) this.emit('pickedServer', options.readPreference, server);
      callback(null, server);
    };

    _selectServer();
  };

  /**
   * Get all connected servers
   * @method
   * @return {Server[]}
   */
  ReplSet$2.prototype.getServers = function() {
    return this.s.replicaSetState.allServers();
  };

  //
  // Execute write operation
  function executeWriteOperation$2(args, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // TODO: once we drop Node 4, use destructuring either here or in arguments.
    const self = args.self;
    const op = args.op;
    const ns = args.ns;
    const ops = args.ops;

    if (self.state === DESTROYED$1) {
      return callback(new MongoError$v(f$3('topology was destroyed')));
    }

    const willRetryWrite =
      !args.retrying &&
      !!options.retryWrites &&
      options.session &&
      isRetryableWritesSupported$2(self) &&
      !options.session.inTransaction() &&
      options.explain === undefined;

    if (!self.s.replicaSetState.hasPrimary()) {
      if (self.s.disconnectHandler) {
        // Not connected but we have a disconnecthandler
        return self.s.disconnectHandler.add(op, ns, ops, options, callback);
      } else if (!willRetryWrite) {
        // No server returned we had an error
        return callback(new MongoError$v('no primary server found'));
      }
    }

    const handler = (err, result) => {
      if (!err) return callback(null, result);
      if (!legacyIsRetryableWriteError$1(err, self)) {
        err = getMMAPError$2(err);
        return callback(err);
      }

      if (willRetryWrite) {
        const newArgs = Object.assign({}, args, { retrying: true });
        return executeWriteOperation$2(newArgs, options, callback);
      }

      // Per SDAM, remove primary from replicaset
      if (self.s.replicaSetState.primary) {
        self.s.replicaSetState.primary.destroy();
        self.s.replicaSetState.remove(self.s.replicaSetState.primary, { force: true });
      }

      return callback(err);
    };

    if (callback.operationId) {
      handler.operationId = callback.operationId;
    }

    // increment and assign txnNumber
    if (willRetryWrite) {
      options.session.incrementTransactionNumber();
      options.willRetryWrite = willRetryWrite;
    }

    self.s.replicaSetState.primary[op](ns, ops, options, handler);
  }

  /**
   * Insert one or more documents
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {array} ops An array of documents to insert
   * @param {boolean} [options.ordered=true] Execute in order or out of order
   * @param {object} [options.writeConcern={}] Write concern for the operation
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation
   * @param {opResultCallback} callback A callback function
   */
  ReplSet$2.prototype.insert = function(ns, ops, options, callback) {
    // Execute write operation
    executeWriteOperation$2({ self: this, op: 'insert', ns, ops }, options, callback);
  };

  /**
   * Perform one or more update operations
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {array} ops An array of updates
   * @param {boolean} [options.ordered=true] Execute in order or out of order
   * @param {object} [options.writeConcern={}] Write concern for the operation
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation
   * @param {opResultCallback} callback A callback function
   */
  ReplSet$2.prototype.update = function(ns, ops, options, callback) {
    // Execute write operation
    executeWriteOperation$2({ self: this, op: 'update', ns, ops }, options, callback);
  };

  /**
   * Perform one or more remove operations
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {array} ops An array of removes
   * @param {boolean} [options.ordered=true] Execute in order or out of order
   * @param {object} [options.writeConcern={}] Write concern for the operation
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation
   * @param {opResultCallback} callback A callback function
   */
  ReplSet$2.prototype.remove = function(ns, ops, options, callback) {
    // Execute write operation
    executeWriteOperation$2({ self: this, op: 'remove', ns, ops }, options, callback);
  };

  const RETRYABLE_WRITE_OPERATIONS$2 = ['findAndModify', 'insert', 'update', 'delete'];

  function isWriteCommand$2(command) {
    return RETRYABLE_WRITE_OPERATIONS$2.some(op => command[op]);
  }

  /**
   * Execute a command
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {object} cmd The command hash
   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
   * @param {Connection} [options.connection] Specify connection object to execute command against
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {opResultCallback} callback A callback function
   */
  ReplSet$2.prototype.command = function(ns, cmd, options, callback) {
    if (typeof options === 'function') {
      (callback = options), (options = {}), (options = options || {});
    }

    if (this.state === DESTROYED$1) return callback(new MongoError$v(f$3('topology was destroyed')));
    var self = this;

    // Establish readPreference
    var readPreference = options.readPreference ? options.readPreference : ReadPreference$f.primary;

    // If the readPreference is primary and we have no primary, store it
    if (
      readPreference.preference === 'primary' &&
      !this.s.replicaSetState.hasPrimary() &&
      this.s.disconnectHandler != null
    ) {
      return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
    } else if (
      readPreference.preference === 'secondary' &&
      !this.s.replicaSetState.hasSecondary() &&
      this.s.disconnectHandler != null
    ) {
      return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
    } else if (
      readPreference.preference !== 'primary' &&
      !this.s.replicaSetState.hasSecondary() &&
      !this.s.replicaSetState.hasPrimary() &&
      this.s.disconnectHandler != null
    ) {
      return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
    }

    // Pick a server
    var server = this.s.replicaSetState.pickServer(readPreference);
    // We received an error, return it
    if (!(server instanceof Server$5)) return callback(server);
    // Emit debug event
    if (self.s.debug) self.emit('pickedServer', ReadPreference$f.primary, server);

    // No server returned we had an error
    if (server == null) {
      return callback(
        new MongoError$v(
          f$3('no server found that matches the provided readPreference %s', readPreference)
        )
      );
    }

    const willRetryWrite =
      !options.retrying &&
      !!options.retryWrites &&
      options.session &&
      isRetryableWritesSupported$2(self) &&
      !options.session.inTransaction() &&
      isWriteCommand$2(cmd);

    const cb = (err, result) => {
      if (!err) return callback(null, result);
      if (!legacyIsRetryableWriteError$1(err, self)) {
        return callback(err);
      }

      if (willRetryWrite) {
        const newOptions = Object.assign({}, options, { retrying: true });
        return this.command(ns, cmd, newOptions, callback);
      }

      // Per SDAM, remove primary from replicaset
      if (this.s.replicaSetState.primary) {
        this.s.replicaSetState.primary.destroy();
        this.s.replicaSetState.remove(this.s.replicaSetState.primary, { force: true });
      }

      return callback(err);
    };

    // increment and assign txnNumber
    if (willRetryWrite) {
      options.session.incrementTransactionNumber();
      options.willRetryWrite = willRetryWrite;
    }

    // Execute the command
    server.command(ns, cmd, options, cb);
  };

  /**
   * Get a new cursor
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId
   * @param {object} [options] Options for the cursor
   * @param {object} [options.batchSize=0] Batchsize for the operation
   * @param {array} [options.documents=[]] Initial documents list for cursor
   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {object} [options.topology] The internal topology of the created cursor
   * @returns {Cursor}
   */
  ReplSet$2.prototype.cursor = function(ns, cmd, options) {
    options = options || {};
    const topology = options.topology || this;

    // Set up final cursor type
    var FinalCursor = options.cursorFactory || this.s.Cursor;

    // Return the cursor
    return new FinalCursor(topology, ns, cmd, options);
  };

  /**
   * A replset connect event, used to verify that the connection is up and running
   *
   * @event ReplSet#connect
   * @type {ReplSet}
   */

  /**
   * A replset reconnect event, used to verify that the topology reconnected
   *
   * @event ReplSet#reconnect
   * @type {ReplSet}
   */

  /**
   * A replset fullsetup event, used to signal that all topology members have been contacted.
   *
   * @event ReplSet#fullsetup
   * @type {ReplSet}
   */

  /**
   * A replset all event, used to signal that all topology members have been contacted.
   *
   * @event ReplSet#all
   * @type {ReplSet}
   */

  /**
   * A replset failed event, used to signal that initial replset connection failed.
   *
   * @event ReplSet#failed
   * @type {ReplSet}
   */

  /**
   * A server member left the replicaset
   *
   * @event ReplSet#left
   * @type {function}
   * @param {string} type The type of member that left (primary|secondary|arbiter)
   * @param {Server} server The server object that left
   */

  /**
   * A server member joined the replicaset
   *
   * @event ReplSet#joined
   * @type {function}
   * @param {string} type The type of member that joined (primary|secondary|arbiter)
   * @param {Server} server The server object that joined
   */

  /**
   * A server opening SDAM monitoring event
   *
   * @event ReplSet#serverOpening
   * @type {object}
   */

  /**
   * A server closed SDAM monitoring event
   *
   * @event ReplSet#serverClosed
   * @type {object}
   */

  /**
   * A server description SDAM change monitoring event
   *
   * @event ReplSet#serverDescriptionChanged
   * @type {object}
   */

  /**
   * A topology open SDAM event
   *
   * @event ReplSet#topologyOpening
   * @type {object}
   */

  /**
   * A topology closed SDAM event
   *
   * @event ReplSet#topologyClosed
   * @type {object}
   */

  /**
   * A topology structure SDAM change event
   *
   * @event ReplSet#topologyDescriptionChanged
   * @type {object}
   */

  /**
   * A topology serverHeartbeatStarted SDAM event
   *
   * @event ReplSet#serverHeartbeatStarted
   * @type {object}
   */

  /**
   * A topology serverHeartbeatFailed SDAM event
   *
   * @event ReplSet#serverHeartbeatFailed
   * @type {object}
   */

  /**
   * A topology serverHeartbeatSucceeded SDAM change event
   *
   * @event ReplSet#serverHeartbeatSucceeded
   * @type {object}
   */

  /**
   * An event emitted indicating a command was started, if command monitoring is enabled
   *
   * @event ReplSet#commandStarted
   * @type {object}
   */

  /**
   * An event emitted indicating a command succeeded, if command monitoring is enabled
   *
   * @event ReplSet#commandSucceeded
   * @type {object}
   */

  /**
   * An event emitted indicating a command failed, if command monitoring is enabled
   *
   * @event ReplSet#commandFailed
   * @type {object}
   */

  module.exports = ReplSet$2;

  var replset$1 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  const inherits$3 = util$2.inherits;
  const f$2 = util$2.format;
  const EventEmitter$4 = require$$0$1.EventEmitter;
  const CoreCursor$2 = require$$1.CoreCursor;

  const retrieveBSON$2 = utils$2.retrieveBSON;
  const MongoError$u = error$2.MongoError;

  const diff = shared.diff;
  const cloneOptions = shared.cloneOptions;
  const SessionMixins = shared.SessionMixins;
  const isRetryableWritesSupported$1 = shared.isRetryableWritesSupported;
  const relayEvents$3 = require$$2.relayEvents;
  const BSON$6 = retrieveBSON$2();
  const getMMAPError$1 = shared.getMMAPError;
  const makeClientMetadata$1 = require$$2.makeClientMetadata;
  const legacyIsRetryableWriteError = shared.legacyIsRetryableWriteError;

  /**
   * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is
   * used to construct connections.
   */

  //
  // States
  var DISCONNECTED = 'disconnected';
  var CONNECTING = 'connecting';
  var CONNECTED = 'connected';
  var UNREFERENCED = 'unreferenced';
  var DESTROYING = 'destroying';
  var DESTROYED = 'destroyed';

  function stateTransition$1(self, newState) {
    var legalTransitions = {
      disconnected: [CONNECTING, DESTROYING, DESTROYED, DISCONNECTED],
      connecting: [CONNECTING, DESTROYING, DESTROYED, CONNECTED, DISCONNECTED],
      connected: [CONNECTED, DISCONNECTED, DESTROYING, DESTROYED, UNREFERENCED],
      unreferenced: [UNREFERENCED, DESTROYING, DESTROYED],
      destroyed: [DESTROYED]
    };

    // Get current state
    var legalStates = legalTransitions[self.state];
    if (legalStates && legalStates.indexOf(newState) !== -1) {
      self.state = newState;
    } else {
      self.s.logger.error(
        f$2(
          'Mongos with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',
          self.id,
          self.state,
          newState,
          legalStates
        )
      );
    }
  }

  //
  // ReplSet instance id
  var id = 1;
  var handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];

  /**
   * Creates a new Mongos instance
   * @class
   * @param {array} seedlist A list of seeds for the replicaset
   * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry
   * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors
   * @param {number} [options.size=5] Server connection pool size
   * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
   * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled
   * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection
   * @param {boolean} [options.noDelay=true] TCP Connection no delay
   * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting
   * @param {number} [options.socketTimeout=0] TCP Socket timeout setting
   * @param {boolean} [options.ssl=false] Use SSL for connection
   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.
   * @param {Buffer} [options.ca] SSL Certificate store binary buffer
   * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer
   * @param {Buffer} [options.cert] SSL Certificate binary buffer
   * @param {Buffer} [options.key] SSL Key file binary buffer
   * @param {string} [options.passphrase] SSL Certificate pass phrase
   * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.
   * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates
   * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.
   * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology
   * @return {Mongos} A cursor instance
   * @fires Mongos#connect
   * @fires Mongos#reconnect
   * @fires Mongos#joined
   * @fires Mongos#left
   * @fires Mongos#failed
   * @fires Mongos#fullsetup
   * @fires Mongos#all
   * @fires Mongos#serverHeartbeatStarted
   * @fires Mongos#serverHeartbeatSucceeded
   * @fires Mongos#serverHeartbeatFailed
   * @fires Mongos#topologyOpening
   * @fires Mongos#topologyClosed
   * @fires Mongos#topologyDescriptionChanged
   * @property {string} type the topology type.
   * @property {string} parserType the parser type used (c++ or js).
   */
  var Mongos$2 = function(seedlist, options) {
    options = options || {};

    // Get replSet Id
    this.id = id++;

    // deduplicate seedlist
    if (Array.isArray(seedlist)) {
      seedlist = seedlist.reduce((seeds, seed) => {
        if (seeds.find(s => s.host === seed.host && s.port === seed.port)) {
          return seeds;
        }

        seeds.push(seed);
        return seeds;
      }, []);
    }

    // Internal state
    this.s = {
      options: Object.assign({ metadata: makeClientMetadata$1(options) }, options),
      // BSON instance
      bson:
        options.bson ||
        new BSON$6([
          BSON$6.Binary,
          BSON$6.Code,
          BSON$6.DBRef,
          BSON$6.Decimal128,
          BSON$6.Double,
          BSON$6.Int32,
          BSON$6.Long,
          BSON$6.Map,
          BSON$6.MaxKey,
          BSON$6.MinKey,
          BSON$6.ObjectId,
          BSON$6.BSONRegExp,
          BSON$6.Symbol,
          BSON$6.Timestamp
        ]),
      // Factory overrides
      Cursor: options.cursorFactory || CoreCursor$2,
      // Logger instance
      logger: require$$7$1('Mongos', options),
      // Seedlist
      seedlist: seedlist,
      // Ha interval
      haInterval: options.haInterval ? options.haInterval : 10000,
      // Disconnect handler
      disconnectHandler: options.disconnectHandler,
      // Server selection index
      index: 0,
      // Connect function options passed in
      connectOptions: {},
      // Are we running in debug mode
      debug: typeof options.debug === 'boolean' ? options.debug : false,
      // localThresholdMS
      localThresholdMS: options.localThresholdMS || 15
    };

    // Log info warning if the socketTimeout < haInterval as it will cause
    // a lot of recycled connections to happen.
    if (
      this.s.logger.isWarn() &&
      this.s.options.socketTimeout !== 0 &&
      this.s.options.socketTimeout < this.s.haInterval
    ) {
      this.s.logger.warn(
        f$2(
          'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',
          this.s.options.socketTimeout,
          this.s.haInterval
        )
      );
    }

    // Disconnected state
    this.state = DISCONNECTED;

    // Current proxies we are connecting to
    this.connectingProxies = [];
    // Currently connected proxies
    this.connectedProxies = [];
    // Disconnected proxies
    this.disconnectedProxies = [];
    // Index of proxy to run operations against
    this.index = 0;
    // High availability timeout id
    this.haTimeoutId = null;
    // Last ismaster
    this.ismaster = null;

    // Description of the Replicaset
    this.topologyDescription = {
      topologyType: 'Unknown',
      servers: []
    };

    // Highest clusterTime seen in responses from the current deployment
    this.clusterTime = null;

    // Add event listener
    EventEmitter$4.call(this);
  };

  inherits$3(Mongos$2, EventEmitter$4);
  Object.assign(Mongos$2.prototype, SessionMixins);

  Object.defineProperty(Mongos$2.prototype, 'type', {
    enumerable: true,
    get: function() {
      return 'mongos';
    }
  });

  Object.defineProperty(Mongos$2.prototype, 'parserType', {
    enumerable: true,
    get: function() {
      return BSON$6.native ? 'c++' : 'js';
    }
  });

  Object.defineProperty(Mongos$2.prototype, 'logicalSessionTimeoutMinutes', {
    enumerable: true,
    get: function() {
      if (!this.ismaster) return null;
      return this.ismaster.logicalSessionTimeoutMinutes || null;
    }
  });

  /**
   * Emit event if it exists
   * @method
   */
  function emitSDAMEvent(self, event, description) {
    if (self.listeners(event).length > 0) {
      self.emit(event, description);
    }
  }

  const SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];
  function destroyServer$1(server, options, callback) {
    options = options || {};
    SERVER_EVENTS.forEach(event => server.removeAllListeners(event));
    server.destroy(options, callback);
  }

  /**
   * Initiate server connect
   */
  Mongos$2.prototype.connect = function(options) {
    var self = this;
    // Add any connect level options to the internal state
    this.s.connectOptions = options || {};

    // Set connecting state
    stateTransition$1(this, CONNECTING);

    // Create server instances
    var servers = this.s.seedlist.map(function(x) {
      const server = new server$1(
        Object.assign({}, self.s.options, x, options, {
          reconnect: false,
          monitoring: false,
          parent: self
        })
      );

      relayEvents$3(server, self, ['serverDescriptionChanged']);
      return server;
    });

    // Emit the topology opening event
    emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });

    // Start all server connections
    connectProxies(self, servers);
  };

  /**
   * Authenticate the topology.
   * @method
   * @param {MongoCredentials} credentials The credentials for authentication we are using
   * @param {authResultCallback} callback A callback function
   */
  Mongos$2.prototype.auth = function(credentials, callback) {
    if (typeof callback === 'function') callback(null, null);
  };

  function handleEvent(self) {
    return function() {
      if (self.state === DESTROYED || self.state === DESTROYING) {
        return;
      }

      // Move to list of disconnectedProxies
      moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);
      // Emit the initial topology
      emitTopologyDescriptionChanged(self);
      // Emit the left signal
      self.emit('left', 'mongos', this);
      // Emit the sdam event
      self.emit('serverClosed', {
        topologyId: self.id,
        address: this.name
      });
    };
  }

  function handleInitialConnectEvent(self, event) {
    return function() {
      var _this = this;

      // Destroy the instance
      if (self.state === DESTROYED) {
        // Emit the initial topology
        emitTopologyDescriptionChanged(self);
        // Move from connectingProxies
        moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);
        return this.destroy();
      }

      // Check the type of server
      if (event === 'connect') {
        // Get last known ismaster
        self.ismaster = _this.lastIsMaster();

        // Is this not a proxy, remove t
        if (self.ismaster.msg === 'isdbgrid') {
          // Add to the connectd list
          for (let i = 0; i < self.connectedProxies.length; i++) {
            if (self.connectedProxies[i].name === _this.name) {
              // Move from connectingProxies
              moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);
              // Emit the initial topology
              emitTopologyDescriptionChanged(self);
              _this.destroy();
              return self.emit('failed', _this);
            }
          }

          // Remove the handlers
          for (let i = 0; i < handlers.length; i++) {
            _this.removeAllListeners(handlers[i]);
          }

          // Add stable state handlers
          _this.on('error', handleEvent(self));
          _this.on('close', handleEvent(self));
          _this.on('timeout', handleEvent(self));
          _this.on('parseError', handleEvent(self));

          // Move from connecting proxies connected
          moveServerFrom(self.connectingProxies, self.connectedProxies, _this);
          // Emit the joined event
          self.emit('joined', 'mongos', _this);
        } else {
          // Print warning if we did not find a mongos proxy
          if (self.s.logger.isWarn()) {
            var message = 'expected mongos proxy, but found replicaset member mongod for server %s';
            // We have a standalone server
            if (!self.ismaster.hosts) {
              message = 'expected mongos proxy, but found standalone mongod for server %s';
            }

            self.s.logger.warn(f$2(message, _this.name));
          }

          // This is not a mongos proxy, destroy and remove it completely
          _this.destroy(true);
          removeProxyFrom(self.connectingProxies, _this);
          // Emit the left event
          self.emit('left', 'server', _this);
          // Emit failed event
          self.emit('failed', _this);
        }
      } else {
        moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);
        // Emit the left event
        self.emit('left', 'mongos', this);
        // Emit failed event
        self.emit('failed', this);
      }

      // Emit the initial topology
      emitTopologyDescriptionChanged(self);

      // Trigger topologyMonitor
      if (self.connectingProxies.length === 0) {
        // Emit connected if we are connected
        if (self.connectedProxies.length > 0 && self.state === CONNECTING) {
          // Set the state to connected
          stateTransition$1(self, CONNECTED);
          // Emit the connect event
          self.emit('connect', self);
          self.emit('fullsetup', self);
          self.emit('all', self);
        } else if (self.disconnectedProxies.length === 0) {
          // Print warning if we did not find a mongos proxy
          if (self.s.logger.isWarn()) {
            self.s.logger.warn(
              f$2('no mongos proxies found in seed list, did you mean to connect to a replicaset')
            );
          }

          // Emit the error that no proxies were found
          return self.emit('error', new MongoError$u('no mongos proxies found in seed list'));
        }

        // Topology monitor
        topologyMonitor(self, { firstConnect: true });
      }
    };
  }

  function connectProxies(self, servers) {
    // Update connectingProxies
    self.connectingProxies = self.connectingProxies.concat(servers);

    // Index used to interleaf the server connects, avoiding
    // runtime issues on io constrained vm's
    var timeoutInterval = 0;

    function connect(server, timeoutInterval) {
      setTimeout(function() {
        // Emit opening server event
        self.emit('serverOpening', {
          topologyId: self.id,
          address: server.name
        });

        // Emit the initial topology
        emitTopologyDescriptionChanged(self);

        // Add event handlers
        server.once('close', handleInitialConnectEvent(self, 'close'));
        server.once('timeout', handleInitialConnectEvent(self, 'timeout'));
        server.once('parseError', handleInitialConnectEvent(self, 'parseError'));
        server.once('error', handleInitialConnectEvent(self, 'error'));
        server.once('connect', handleInitialConnectEvent(self, 'connect'));

        // Command Monitoring events
        relayEvents$3(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);

        // Start connection
        server.connect(self.s.connectOptions);
      }, timeoutInterval);
    }

    // Start all the servers
    servers.forEach(server => connect(server, timeoutInterval++));
  }

  function pickProxy(self, session) {
    // TODO: Destructure :)
    const transaction = session && session.transaction;

    if (transaction && transaction.server) {
      if (transaction.server.isConnected()) {
        return transaction.server;
      } else {
        transaction.unpinServer();
      }
    }

    // Get the currently connected Proxies
    var connectedProxies = self.connectedProxies.slice(0);

    // Set lower bound
    var lowerBoundLatency = Number.MAX_VALUE;

    // Determine the lower bound for the Proxies
    for (var i = 0; i < connectedProxies.length; i++) {
      if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {
        lowerBoundLatency = connectedProxies[i].lastIsMasterMS;
      }
    }

    // Filter out the possible servers
    connectedProxies = connectedProxies.filter(function(server) {
      if (
        server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS &&
        server.isConnected()
      ) {
        return true;
      }
    });

    let proxy;

    // We have no connectedProxies pick first of the connected ones
    if (connectedProxies.length === 0) {
      proxy = self.connectedProxies[0];
    } else {
      // Get proxy
      proxy = connectedProxies[self.index % connectedProxies.length];
      // Update the index
      self.index = (self.index + 1) % connectedProxies.length;
    }

    if (transaction && transaction.isActive && proxy && proxy.isConnected()) {
      transaction.pinServer(proxy);
    }

    // Return the proxy
    return proxy;
  }

  function moveServerFrom(from, to, proxy) {
    for (var i = 0; i < from.length; i++) {
      if (from[i].name === proxy.name) {
        from.splice(i, 1);
      }
    }

    for (i = 0; i < to.length; i++) {
      if (to[i].name === proxy.name) {
        to.splice(i, 1);
      }
    }

    to.push(proxy);
  }

  function removeProxyFrom(from, proxy) {
    for (var i = 0; i < from.length; i++) {
      if (from[i].name === proxy.name) {
        from.splice(i, 1);
      }
    }
  }

  function reconnectProxies(self, proxies, callback) {
    // Count lefts
    var count = proxies.length;

    // Handle events
    var _handleEvent = function(self, event) {
      return function() {
        var _self = this;
        count = count - 1;

        // Destroyed
        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {
          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);
          return this.destroy();
        }

        if (event === 'connect') {
          // Destroyed
          if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {
            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);
            return _self.destroy();
          }

          // Remove the handlers
          for (var i = 0; i < handlers.length; i++) {
            _self.removeAllListeners(handlers[i]);
          }

          // Add stable state handlers
          _self.on('error', handleEvent(self));
          _self.on('close', handleEvent(self));
          _self.on('timeout', handleEvent(self));
          _self.on('parseError', handleEvent(self));

          // Move to the connected servers
          moveServerFrom(self.connectingProxies, self.connectedProxies, _self);
          // Emit topology Change
          emitTopologyDescriptionChanged(self);
          // Emit joined event
          self.emit('joined', 'mongos', _self);
        } else {
          // Move from connectingProxies
          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);
          this.destroy();
        }

        // Are we done finish up callback
        if (count === 0) {
          callback();
        }
      };
    };

    // No new servers
    if (count === 0) {
      return callback();
    }

    // Execute method
    function execute(_server, i) {
      setTimeout(function() {
        // Destroyed
        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {
          return;
        }

        // Create a new server instance
        var server = new server$1(
          Object.assign({}, self.s.options, {
            host: _server.name.split(':')[0],
            port: parseInt(_server.name.split(':')[1], 10),
            reconnect: false,
            monitoring: false,
            parent: self
          })
        );

        destroyServer$1(_server, { force: true });
        removeProxyFrom(self.disconnectedProxies, _server);

        // Relay the server description change
        relayEvents$3(server, self, ['serverDescriptionChanged']);

        // Emit opening server event
        self.emit('serverOpening', {
          topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,
          address: server.name
        });

        // Add temp handlers
        server.once('connect', _handleEvent(self, 'connect'));
        server.once('close', _handleEvent(self, 'close'));
        server.once('timeout', _handleEvent(self, 'timeout'));
        server.once('error', _handleEvent(self, 'error'));
        server.once('parseError', _handleEvent(self, 'parseError'));

        // Command Monitoring events
        relayEvents$3(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);

        // Connect to proxy
        self.connectingProxies.push(server);
        server.connect(self.s.connectOptions);
      }, i);
    }

    // Create new instances
    for (var i = 0; i < proxies.length; i++) {
      execute(proxies[i], i);
    }
  }

  function topologyMonitor(self, options) {
    options = options || {};

    // no need to set up the monitor if we're already closed
    if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {
      return;
    }

    // Set momitoring timeout
    self.haTimeoutId = setTimeout(function() {
      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {
        return;
      }

      // If we have a primary and a disconnect handler, execute
      // buffered operations
      if (self.isConnected() && self.s.disconnectHandler) {
        self.s.disconnectHandler.execute();
      }

      // Get the connectingServers
      var proxies = self.connectedProxies.slice(0);
      // Get the count
      var count = proxies.length;

      // If the count is zero schedule a new fast
      function pingServer(_self, _server, cb) {
        // Measure running time
        var start = new Date().getTime();

        // Emit the server heartbeat start
        emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: _server.name });

        // Execute ismaster
        _server.command(
          'admin.$cmd',
          {
            ismaster: true
          },
          {
            monitoring: true,
            socketTimeout: self.s.options.connectionTimeout || 2000
          },
          function(err, r) {
            if (
              self.state === DESTROYED ||
              self.state === DESTROYING ||
              self.state === UNREFERENCED
            ) {
              // Move from connectingProxies
              moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);
              _server.destroy();
              return cb(err, r);
            }

            // Calculate latency
            var latencyMS = new Date().getTime() - start;

            // We had an error, remove it from the state
            if (err) {
              // Emit the server heartbeat failure
              emitSDAMEvent(self, 'serverHeartbeatFailed', {
                durationMS: latencyMS,
                failure: err,
                connectionId: _server.name
              });
              // Move from connected proxies to disconnected proxies
              moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);
            } else {
              // Update the server ismaster
              _server.ismaster = r.result;
              _server.lastIsMasterMS = latencyMS;

              // Server heart beat event
              emitSDAMEvent(self, 'serverHeartbeatSucceeded', {
                durationMS: latencyMS,
                reply: r.result,
                connectionId: _server.name
              });
            }

            cb(err, r);
          }
        );
      }

      // No proxies initiate monitor again
      if (proxies.length === 0) {
        // Emit close event if any listeners registered
        if (self.listeners('close').length > 0 && self.state === CONNECTING) {
          self.emit('error', new MongoError$u('no mongos proxy available'));
        } else {
          self.emit('close', self);
        }

        // Attempt to connect to any unknown servers
        return reconnectProxies(self, self.disconnectedProxies, function() {
          if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {
            return;
          }

          // Are we connected ? emit connect event
          if (self.state === CONNECTING && options.firstConnect) {
            self.emit('connect', self);
            self.emit('fullsetup', self);
            self.emit('all', self);
          } else if (self.isConnected()) {
            self.emit('reconnect', self);
          } else if (!self.isConnected() && self.listeners('close').length > 0) {
            self.emit('close', self);
          }

          // Perform topology monitor
          topologyMonitor(self);
        });
      }

      // Ping all servers
      for (var i = 0; i < proxies.length; i++) {
        pingServer(self, proxies[i], function() {
          count = count - 1;

          if (count === 0) {
            if (
              self.state === DESTROYED ||
              self.state === DESTROYING ||
              self.state === UNREFERENCED
            ) {
              return;
            }

            // Attempt to connect to any unknown servers
            reconnectProxies(self, self.disconnectedProxies, function() {
              if (
                self.state === DESTROYED ||
                self.state === DESTROYING ||
                self.state === UNREFERENCED
              ) {
                return;
              }

              // Perform topology monitor
              topologyMonitor(self);
            });
          }
        });
      }
    }, self.s.haInterval);
  }

  /**
   * Returns the last known ismaster document for this server
   * @method
   * @return {object}
   */
  Mongos$2.prototype.lastIsMaster = function() {
    return this.ismaster;
  };

  /**
   * Unref all connections belong to this server
   * @method
   */
  Mongos$2.prototype.unref = function() {
    // Transition state
    stateTransition$1(this, UNREFERENCED);
    // Get all proxies
    var proxies = this.connectedProxies.concat(this.connectingProxies);
    proxies.forEach(function(x) {
      x.unref();
    });

    clearTimeout(this.haTimeoutId);
  };

  /**
   * Destroy the server connection
   * @param {boolean} [options.force=false] Force destroy the pool
   * @method
   */
  Mongos$2.prototype.destroy = function(options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options = options || {};

    stateTransition$1(this, DESTROYING);
    if (this.haTimeoutId) {
      clearTimeout(this.haTimeoutId);
    }

    const proxies = this.connectedProxies.concat(this.connectingProxies);
    let serverCount = proxies.length;
    const serverDestroyed = () => {
      serverCount--;
      if (serverCount > 0) {
        return;
      }

      emitTopologyDescriptionChanged(this);
      emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });
      stateTransition$1(this, DESTROYED);
      if (typeof callback === 'function') {
        callback(null, null);
      }
    };

    if (serverCount === 0) {
      serverDestroyed();
      return;
    }

    // Destroy all connecting servers
    proxies.forEach(server => {
      // Emit the sdam event
      this.emit('serverClosed', {
        topologyId: this.id,
        address: server.name
      });

      destroyServer$1(server, options, serverDestroyed);
      moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);
    });
  };

  /**
   * Figure out if the server is connected
   * @method
   * @return {boolean}
   */
  Mongos$2.prototype.isConnected = function() {
    return this.connectedProxies.length > 0;
  };

  /**
   * Figure out if the server instance was destroyed by calling destroy
   * @method
   * @return {boolean}
   */
  Mongos$2.prototype.isDestroyed = function() {
    return this.state === DESTROYED;
  };

  //
  // Operations
  //

  function executeWriteOperation$1(args, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // TODO: once we drop Node 4, use destructuring either here or in arguments.
    const self = args.self;
    const op = args.op;
    const ns = args.ns;
    const ops = args.ops;

    // Pick a server
    let server = pickProxy(self, options.session);
    // No server found error out
    if (!server) return callback(new MongoError$u('no mongos proxy available'));

    const willRetryWrite =
      !args.retrying &&
      !!options.retryWrites &&
      options.session &&
      isRetryableWritesSupported$1(self) &&
      !options.session.inTransaction() &&
      options.explain === undefined;

    const handler = (err, result) => {
      if (!err) return callback(null, result);
      if (!legacyIsRetryableWriteError(err, self) || !willRetryWrite) {
        err = getMMAPError$1(err);
        return callback(err);
      }

      // Pick another server
      server = pickProxy(self, options.session);

      // No server found error out with original error
      if (!server) {
        return callback(err);
      }

      const newArgs = Object.assign({}, args, { retrying: true });
      return executeWriteOperation$1(newArgs, options, callback);
    };

    if (callback.operationId) {
      handler.operationId = callback.operationId;
    }

    // increment and assign txnNumber
    if (willRetryWrite) {
      options.session.incrementTransactionNumber();
      options.willRetryWrite = willRetryWrite;
    }

    // rerun the operation
    server[op](ns, ops, options, handler);
  }

  /**
   * Insert one or more documents
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {array} ops An array of documents to insert
   * @param {boolean} [options.ordered=true] Execute in order or out of order
   * @param {object} [options.writeConcern={}] Write concern for the operation
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation
   * @param {opResultCallback} callback A callback function
   */
  Mongos$2.prototype.insert = function(ns, ops, options, callback) {
    if (typeof options === 'function') {
      (callback = options), (options = {}), (options = options || {});
    }

    if (this.state === DESTROYED) {
      return callback(new MongoError$u(f$2('topology was destroyed')));
    }

    // Not connected but we have a disconnecthandler
    if (!this.isConnected() && this.s.disconnectHandler != null) {
      return this.s.disconnectHandler.add('insert', ns, ops, options, callback);
    }

    // No mongos proxy available
    if (!this.isConnected()) {
      return callback(new MongoError$u('no mongos proxy available'));
    }

    // Execute write operation
    executeWriteOperation$1({ self: this, op: 'insert', ns, ops }, options, callback);
  };

  /**
   * Perform one or more update operations
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {array} ops An array of updates
   * @param {boolean} [options.ordered=true] Execute in order or out of order
   * @param {object} [options.writeConcern={}] Write concern for the operation
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation
   * @param {opResultCallback} callback A callback function
   */
  Mongos$2.prototype.update = function(ns, ops, options, callback) {
    if (typeof options === 'function') {
      (callback = options), (options = {}), (options = options || {});
    }

    if (this.state === DESTROYED) {
      return callback(new MongoError$u(f$2('topology was destroyed')));
    }

    // Not connected but we have a disconnecthandler
    if (!this.isConnected() && this.s.disconnectHandler != null) {
      return this.s.disconnectHandler.add('update', ns, ops, options, callback);
    }

    // No mongos proxy available
    if (!this.isConnected()) {
      return callback(new MongoError$u('no mongos proxy available'));
    }

    // Execute write operation
    executeWriteOperation$1({ self: this, op: 'update', ns, ops }, options, callback);
  };

  /**
   * Perform one or more remove operations
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {array} ops An array of removes
   * @param {boolean} [options.ordered=true] Execute in order or out of order
   * @param {object} [options.writeConcern={}] Write concern for the operation
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation
   * @param {opResultCallback} callback A callback function
   */
  Mongos$2.prototype.remove = function(ns, ops, options, callback) {
    if (typeof options === 'function') {
      (callback = options), (options = {}), (options = options || {});
    }

    if (this.state === DESTROYED) {
      return callback(new MongoError$u(f$2('topology was destroyed')));
    }

    // Not connected but we have a disconnecthandler
    if (!this.isConnected() && this.s.disconnectHandler != null) {
      return this.s.disconnectHandler.add('remove', ns, ops, options, callback);
    }

    // No mongos proxy available
    if (!this.isConnected()) {
      return callback(new MongoError$u('no mongos proxy available'));
    }

    // Execute write operation
    executeWriteOperation$1({ self: this, op: 'remove', ns, ops }, options, callback);
  };

  const RETRYABLE_WRITE_OPERATIONS$1 = ['findAndModify', 'insert', 'update', 'delete'];

  function isWriteCommand$1(command) {
    return RETRYABLE_WRITE_OPERATIONS$1.some(op => command[op]);
  }

  /**
   * Execute a command
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {object} cmd The command hash
   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
   * @param {Connection} [options.connection] Specify connection object to execute command against
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {opResultCallback} callback A callback function
   */
  Mongos$2.prototype.command = function(ns, cmd, options, callback) {
    if (typeof options === 'function') {
      (callback = options), (options = {}), (options = options || {});
    }

    if (this.state === DESTROYED) {
      return callback(new MongoError$u(f$2('topology was destroyed')));
    }

    var self = this;

    // Pick a proxy
    var server = pickProxy(self, options.session);

    // Topology is not connected, save the call in the provided store to be
    // Executed at some point when the handler deems it's reconnected
    if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {
      return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
    }

    // No server returned we had an error
    if (server == null) {
      return callback(new MongoError$u('no mongos proxy available'));
    }

    // Cloned options
    var clonedOptions = cloneOptions(options);
    clonedOptions.topology = self;

    const willRetryWrite =
      !options.retrying &&
      options.retryWrites &&
      options.session &&
      isRetryableWritesSupported$1(self) &&
      !options.session.inTransaction() &&
      isWriteCommand$1(cmd);

    const cb = (err, result) => {
      if (!err) return callback(null, result);
      if (!legacyIsRetryableWriteError(err, self)) {
        return callback(err);
      }

      if (willRetryWrite) {
        const newOptions = Object.assign({}, clonedOptions, { retrying: true });
        return this.command(ns, cmd, newOptions, callback);
      }

      return callback(err);
    };

    // increment and assign txnNumber
    if (willRetryWrite) {
      clonedOptions.session.incrementTransactionNumber();
      clonedOptions.willRetryWrite = willRetryWrite;
    }

    // Execute the command
    server.command(ns, cmd, clonedOptions, cb);
  };

  /**
   * Get a new cursor
   * @method
   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId
   * @param {object} [options] Options for the cursor
   * @param {object} [options.batchSize=0] Batchsize for the operation
   * @param {array} [options.documents=[]] Initial documents list for cursor
   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session=null] Session to use for the operation
   * @param {object} [options.topology] The internal topology of the created cursor
   * @returns {Cursor}
   */
  Mongos$2.prototype.cursor = function(ns, cmd, options) {
    options = options || {};
    const topology = options.topology || this;

    // Set up final cursor type
    var FinalCursor = options.cursorFactory || this.s.Cursor;

    // Return the cursor
    return new FinalCursor(topology, ns, cmd, options);
  };

  /**
   * Selects a server
   *
   * @method
   * @param {function} selector Unused
   * @param {ReadPreference} [options.readPreference] Unused
   * @param {ClientSession} [options.session] Specify a session if it is being used
   * @param {function} callback
   */
  Mongos$2.prototype.selectServer = function(selector, options, callback) {
    if (typeof selector === 'function' && typeof callback === 'undefined')
      (callback = selector), (selector = undefined), (options = {});
    if (typeof options === 'function')
      (callback = options), (options = selector), (selector = undefined);
    options = options || {};

    const server = pickProxy(this, options.session);
    if (server == null) {
      callback(new MongoError$u('server selection failed'));
      return;
    }

    if (this.s.debug) this.emit('pickedServer', null, server);
    callback(null, server);
  };

  /**
   * All raw connections
   * @method
   * @return {Connection[]}
   */
  Mongos$2.prototype.connections = function() {
    var connections = [];

    for (var i = 0; i < this.connectedProxies.length; i++) {
      connections = connections.concat(this.connectedProxies[i].connections());
    }

    return connections;
  };

  function emitTopologyDescriptionChanged(self) {
    if (self.listeners('topologyDescriptionChanged').length > 0) {
      var topology = 'Unknown';
      if (self.connectedProxies.length > 0) {
        topology = 'Sharded';
      }

      // Generate description
      var description = {
        topologyType: topology,
        servers: []
      };

      // All proxies
      var proxies = self.disconnectedProxies.concat(self.connectingProxies);

      // Add all the disconnected proxies
      description.servers = description.servers.concat(
        proxies.map(function(x) {
          var description = x.getDescription();
          description.type = 'Unknown';
          return description;
        })
      );

      // Add all the connected proxies
      description.servers = description.servers.concat(
        self.connectedProxies.map(function(x) {
          var description = x.getDescription();
          description.type = 'Mongos';
          return description;
        })
      );

      // Get the diff
      var diffResult = diff(self.topologyDescription, description);

      // Create the result
      var result = {
        topologyId: self.id,
        previousDescription: self.topologyDescription,
        newDescription: description,
        diff: diffResult
      };

      // Emit the topologyDescription change
      if (diffResult.servers.length > 0) {
        self.emit('topologyDescriptionChanged', result);
      }

      // Set the new description
      self.topologyDescription = description;
    }
  }

  /**
   * A mongos connect event, used to verify that the connection is up and running
   *
   * @event Mongos#connect
   * @type {Mongos}
   */

  /**
   * A mongos reconnect event, used to verify that the mongos topology has reconnected
   *
   * @event Mongos#reconnect
   * @type {Mongos}
   */

  /**
   * A mongos fullsetup event, used to signal that all topology members have been contacted.
   *
   * @event Mongos#fullsetup
   * @type {Mongos}
   */

  /**
   * A mongos all event, used to signal that all topology members have been contacted.
   *
   * @event Mongos#all
   * @type {Mongos}
   */

  /**
   * A server member left the mongos list
   *
   * @event Mongos#left
   * @type {Mongos}
   * @param {string} type The type of member that left (mongos)
   * @param {Server} server The server object that left
   */

  /**
   * A server member joined the mongos list
   *
   * @event Mongos#joined
   * @type {Mongos}
   * @param {string} type The type of member that left (mongos)
   * @param {Server} server The server object that joined
   */

  /**
   * A server opening SDAM monitoring event
   *
   * @event Mongos#serverOpening
   * @type {object}
   */

  /**
   * A server closed SDAM monitoring event
   *
   * @event Mongos#serverClosed
   * @type {object}
   */

  /**
   * A server description SDAM change monitoring event
   *
   * @event Mongos#serverDescriptionChanged
   * @type {object}
   */

  /**
   * A topology open SDAM event
   *
   * @event Mongos#topologyOpening
   * @type {object}
   */

  /**
   * A topology closed SDAM event
   *
   * @event Mongos#topologyClosed
   * @type {object}
   */

  /**
   * A topology structure SDAM change event
   *
   * @event Mongos#topologyDescriptionChanged
   * @type {object}
   */

  /**
   * A topology serverHeartbeatStarted SDAM event
   *
   * @event Mongos#serverHeartbeatStarted
   * @type {object}
   */

  /**
   * A topology serverHeartbeatFailed SDAM event
   *
   * @event Mongos#serverHeartbeatFailed
   * @type {object}
   */

  /**
   * A topology serverHeartbeatSucceeded SDAM change event
   *
   * @event Mongos#serverHeartbeatSucceeded
   * @type {object}
   */

  /**
   * An event emitted indicating a command was started, if command monitoring is enabled
   *
   * @event Mongos#commandStarted
   * @type {object}
   */

  /**
   * An event emitted indicating a command succeeded, if command monitoring is enabled
   *
   * @event Mongos#commandSucceeded
   * @type {object}
   */

  /**
   * An event emitted indicating a command failed, if command monitoring is enabled
   *
   * @event Mongos#commandFailed
   * @type {object}
   */

  var mongos$1 = Mongos$2;

  const Denque$1 = require('denque');
  const EventEmitter$3 = require('events');
  const ServerDescription = require('./server_description').ServerDescription;
  const ServerType = require('./common').ServerType;
  const TopologyDescription = require('./topology_description').TopologyDescription;
  const TopologyType = require('./common').TopologyType;
  const events = require('./events');
  const Server$4 = require('./server').Server;
  const relayEvents$2 = require('../utils').relayEvents;
  const ReadPreference$e = require('../topologies/read_preference');
  const isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;
  const CoreCursor$1 = require('../cursor').CoreCursor;
  const deprecate$6 = require('util').deprecate;
  const BSON$5 = require('../connection/utils').retrieveBSON();
  const createCompressionInfo = require('../topologies/shared').createCompressionInfo;
  const ClientSession$1 = require('../sessions').ClientSession;
  const MongoError$t = require('../error').MongoError;
  const MongoServerSelectionError = require('../error').MongoServerSelectionError;
  const resolveClusterTime = require('../topologies/shared').resolveClusterTime;
  const SrvPoller = require('./srv_polling').SrvPoller;
  const getMMAPError = require('../topologies/shared').getMMAPError;
  const makeStateMachine = require('../utils').makeStateMachine;
  const eachAsync = require('../utils').eachAsync;
  const emitDeprecationWarning$1 = require('../../utils').emitDeprecationWarning;
  const ServerSessionPool$1 = require('../sessions').ServerSessionPool;
  const makeClientMetadata = require('../utils').makeClientMetadata;
  const CMAP_EVENT_NAMES$1 = require('../../cmap/events').CMAP_EVENT_NAMES;
  const compareTopologyVersion = require('./server_description').compareTopologyVersion;
  const emitWarning$1 = require('../../utils').emitWarning;

  const common$1 = require('./common');
  const drainTimerQueue = common$1.drainTimerQueue;
  const clearAndRemoveTimerFrom = common$1.clearAndRemoveTimerFrom;

  const serverSelection = require('./server_selection');
  const readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;
  const writableServerSelector = serverSelection.writableServerSelector;

  // Global state
  let globalTopologyCounter = 0;

  // events that we relay to the `Topology`
  const SERVER_RELAY_EVENTS = [
    'serverHeartbeatStarted',
    'serverHeartbeatSucceeded',
    'serverHeartbeatFailed',
    'commandStarted',
    'commandSucceeded',
    'commandFailed',

    // NOTE: Legacy events
    'monitoring'
  ].concat(CMAP_EVENT_NAMES$1);

  // all events we listen to from `Server` instances
  const LOCAL_SERVER_EVENTS = ['connect', 'descriptionReceived', 'close', 'ended'];

  const STATE_CLOSING = common$1.STATE_CLOSING;
  const STATE_CLOSED = common$1.STATE_CLOSED;
  const STATE_CONNECTING = common$1.STATE_CONNECTING;
  const STATE_CONNECTED = common$1.STATE_CONNECTED;
  const stateTransition = makeStateMachine({
    [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],
    [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],
    [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],
    [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]
  });

  const DEPRECATED_OPTIONS = new Set([
    'autoReconnect',
    'reconnectTries',
    'reconnectInterval',
    'bufferMaxEntries'
  ]);

  const kCancelled = Symbol('cancelled');
  const kWaitQueue = Symbol('waitQueue');

  /**
   * A container of server instances representing a connection to a MongoDB topology.
   *
   * @fires Topology#serverOpening
   * @fires Topology#serverClosed
   * @fires Topology#serverDescriptionChanged
   * @fires Topology#topologyOpening
   * @fires Topology#topologyClosed
   * @fires Topology#topologyDescriptionChanged
   * @fires Topology#serverHeartbeatStarted
   * @fires Topology#serverHeartbeatSucceeded
   * @fires Topology#serverHeartbeatFailed
   */
  class Topology$1 extends EventEmitter$3 {
    /**
     * Create a topology
     *
     * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to
     * @param {Object} [options] Optional settings
     * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers
     * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error
     * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled
     */
    constructor(seedlist, options) {
      super();
      if (typeof options === 'undefined' && typeof seedlist !== 'string') {
        options = seedlist;
        seedlist = [];

        // this is for legacy single server constructor support
        if (options.host) {
          seedlist.push({ host: options.host, port: options.port });
        }
      }

      seedlist = seedlist || [];
      if (typeof seedlist === 'string') {
        seedlist = parseStringSeedlist(seedlist);
      }

      options = Object.assign({}, common$1.TOPOLOGY_DEFAULTS, options);
      options = Object.freeze(
        Object.assign(options, {
          metadata: makeClientMetadata(options),
          compression: { compressors: createCompressionInfo(options) }
        })
      );

      DEPRECATED_OPTIONS.forEach(optionName => {
        if (options[optionName]) {
          emitDeprecationWarning$1(
            `The option \`${optionName}\` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6`,
            'DeprecationWarning'
          );
        }
      });

      const topologyType = topologyTypeFromSeedlist(seedlist, options);
      const topologyId = globalTopologyCounter++;
      const serverDescriptions = seedlist.reduce((result, seed) => {
        if (seed.domain_socket) seed.host = seed.domain_socket;
        const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;
        result.set(address, new ServerDescription(address));
        return result;
      }, new Map());

      this[kWaitQueue] = new Denque$1();
      this.s = {
        // the id of this topology
        id: topologyId,
        // passed in options
        options,
        // initial seedlist of servers to connect to
        seedlist: seedlist,
        // initial state
        state: STATE_CLOSED,
        // the topology description
        description: new TopologyDescription(
          topologyType,
          serverDescriptions,
          options.replicaSet,
          null,
          null,
          null,
          options
        ),
        serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,
        heartbeatFrequencyMS: options.heartbeatFrequencyMS,
        minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,
        // allow users to override the cursor factory
        Cursor: options.cursorFactory || CoreCursor$1,
        // the bson parser
        bson:
          options.bson ||
          new BSON$5([
            BSON$5.Binary,
            BSON$5.Code,
            BSON$5.DBRef,
            BSON$5.Decimal128,
            BSON$5.Double,
            BSON$5.Int32,
            BSON$5.Long,
            BSON$5.Map,
            BSON$5.MaxKey,
            BSON$5.MinKey,
            BSON$5.ObjectId,
            BSON$5.BSONRegExp,
            BSON$5.Symbol,
            BSON$5.Timestamp
          ]),
        // a map of server instances to normalized addresses
        servers: new Map(),
        // Server Session Pool
        sessionPool: new ServerSessionPool$1(this),
        // Active client sessions
        sessions: new Set(),
        // Promise library
        promiseLibrary: options.promiseLibrary || Promise,
        credentials: options.credentials,
        clusterTime: null,

        // timer management
        connectionTimers: new Set()
      };

      if (options.srvHost) {
        this.s.srvPoller =
          options.srvPoller ||
          new SrvPoller({
            heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,
            srvHost: options.srvHost, // TODO: GET THIS
            logger: options.logger,
            loggerLevel: options.loggerLevel
          });
        this.s.detectTopologyDescriptionChange = ev => {
          const previousType = ev.previousDescription.type;
          const newType = ev.newDescription.type;

          if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {
            this.s.handleSrvPolling = srvPollingHandler(this);
            this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);
            this.s.srvPoller.start();
          }
        };

        this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);
      }

      // NOTE: remove this when NODE-1709 is resolved
      this.setMaxListeners(Infinity);
    }

    /**
     * @return A `TopologyDescription` for this topology
     */
    get description() {
      return this.s.description;
    }

    get parserType() {
      return BSON$5.native ? 'c++' : 'js';
    }

    /**
     * Initiate server connect
     *
     * @param {Object} [options] Optional settings
     * @param {Array} [options.auth=null] Array of auth options to apply on connect
     * @param {function} [callback] An optional callback called once on the first connected server
     */
    connect(options, callback) {
      if (typeof options === 'function') (callback = options), (options = {});
      options = options || {};
      if (this.s.state === STATE_CONNECTED) {
        if (typeof callback === 'function') {
          callback();
        }

        return;
      }

      stateTransition(this, STATE_CONNECTING);

      // emit SDAM monitoring events
      this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id));

      // emit an event for the topology change
      this.emit(
        'topologyDescriptionChanged',
        new events.TopologyDescriptionChangedEvent(
          this.s.id,
          new TopologyDescription(TopologyType.Unknown), // initial is always Unknown
          this.s.description
        )
      );

      // connect all known servers, then attempt server selection to connect
      connectServers(this, Array.from(this.s.description.servers.values()));

      ReadPreference$e.translate(options);
      const readPreference = options.readPreference || ReadPreference$e.primary;
      const connectHandler = err => {
        if (err) {
          this.close();

          if (typeof callback === 'function') {
            callback(err);
          } else {
            this.emit('error', err);
          }

          return;
        }

        stateTransition(this, STATE_CONNECTED);
        this.emit('open', err, this);
        this.emit('connect', this);

        if (typeof callback === 'function') callback(err, this);
      };

      // TODO: NODE-2471
      if (this.s.credentials) {
        this.command('admin.$cmd', { ping: 1 }, { readPreference }, connectHandler);
        return;
      }

      this.selectServer(readPreferenceServerSelector(readPreference), options, connectHandler);
    }

    /**
     * Close this topology
     */
    close(options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      if (typeof options === 'boolean') {
        options = { force: options };
      }

      options = options || {};
      if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {
        if (typeof callback === 'function') {
          callback();
        }

        return;
      }

      stateTransition(this, STATE_CLOSING);

      drainWaitQueue(this[kWaitQueue], new MongoError$t('Topology closed'));
      drainTimerQueue(this.s.connectionTimers);

      if (this.s.srvPoller) {
        this.s.srvPoller.stop();
        if (this.s.handleSrvPolling) {
          this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);
          delete this.s.handleSrvPolling;
        }
      }

      if (this.s.detectTopologyDescriptionChange) {
        this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);
        delete this.s.detectTopologyDescriptionChange;
      }

      this.s.sessions.forEach(session => session.endSession());
      this.s.sessionPool.endAllPooledSessions(() => {
        eachAsync(
          Array.from(this.s.servers.values()),
          (server, cb) => destroyServer(server, this, options, cb),
          err => {
            this.s.servers.clear();

            // emit an event for close
            this.emit('topologyClosed', new events.TopologyClosedEvent(this.s.id));

            stateTransition(this, STATE_CLOSED);
            this.emit('close');

            if (typeof callback === 'function') {
              callback(err);
            }
          }
        );
      });
    }

    /**
     * Selects a server according to the selection predicate provided
     *
     * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window
     * @param {object} [options] Optional settings related to server selection
     * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error
     * @param {function} callback The callback used to indicate success or failure
     * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided
     */
    selectServer(selector, options, callback) {
      if (typeof options === 'function') {
        callback = options;
        if (typeof selector !== 'function') {
          options = selector;

          let readPreference;
          if (selector instanceof ReadPreference$e) {
            readPreference = selector;
          } else if (typeof selector === 'string') {
            readPreference = new ReadPreference$e(selector);
          } else {
            ReadPreference$e.translate(options);
            readPreference = options.readPreference || ReadPreference$e.primary;
          }

          selector = readPreferenceServerSelector(readPreference);
        } else {
          options = {};
        }
      }

      options = Object.assign(
        {},
        { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },
        options
      );

      const isSharded = this.description.type === TopologyType.Sharded;
      const session = options.session;
      const transaction = session && session.transaction;

      if (isSharded && transaction && transaction.server) {
        callback(undefined, transaction.server);
        return;
      }

      // support server selection by options with readPreference
      let serverSelector = selector;
      if (typeof selector === 'object') {
        const readPreference = selector.readPreference
          ? selector.readPreference
          : ReadPreference$e.primary;

        serverSelector = readPreferenceServerSelector(readPreference);
      }

      const waitQueueMember = {
        serverSelector,
        transaction,
        callback
      };

      const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;
      if (serverSelectionTimeoutMS) {
        waitQueueMember.timer = setTimeout(() => {
          waitQueueMember[kCancelled] = true;
          waitQueueMember.timer = undefined;
          const timeoutError = new MongoServerSelectionError(
            `Server selection timed out after ${serverSelectionTimeoutMS} ms`,
            this.description
          );

          waitQueueMember.callback(timeoutError);
        }, serverSelectionTimeoutMS);
      }

      this[kWaitQueue].push(waitQueueMember);
      processWaitQueue(this);
    }

    // Sessions related methods

    /**
     * @return Whether the topology should initiate selection to determine session support
     */
    shouldCheckForSessionSupport() {
      if (this.description.type === TopologyType.Single) {
        return !this.description.hasKnownServers;
      }

      return !this.description.hasDataBearingServers;
    }

    /**
     * @return Whether sessions are supported on the current topology
     */
    hasSessionSupport() {
      return this.description.logicalSessionTimeoutMinutes != null;
    }

    /**
     * Start a logical session
     */
    startSession(options, clientOptions) {
      const session = new ClientSession$1(this, this.s.sessionPool, options, clientOptions);
      session.once('ended', () => {
        this.s.sessions.delete(session);
      });

      this.s.sessions.add(session);
      return session;
    }

    /**
     * Send endSessions command(s) with the given session ids
     *
     * @param {Array} sessions The sessions to end
     * @param {function} [callback]
     */
    endSessions(sessions, callback) {
      if (!Array.isArray(sessions)) {
        sessions = [sessions];
      }

      this.command(
        'admin.$cmd',
        { endSessions: sessions },
        { readPreference: ReadPreference$e.primaryPreferred, noResponse: true },
        () => {
          // intentionally ignored, per spec
          if (typeof callback === 'function') callback();
        }
      );
    }

    /**
     * Update the internal TopologyDescription with a ServerDescription
     *
     * @param {object} serverDescription The server to update in the internal list of server descriptions
     */
    serverUpdateHandler(serverDescription) {
      if (!this.s.description.hasServer(serverDescription.address)) {
        return;
      }

      // ignore this server update if its from an outdated topologyVersion
      if (isStaleServerDescription(this.s.description, serverDescription)) {
        return;
      }

      // these will be used for monitoring events later
      const previousTopologyDescription = this.s.description;
      const previousServerDescription = this.s.description.servers.get(serverDescription.address);

      // Driver Sessions Spec: "Whenever a driver receives a cluster time from
      // a server it MUST compare it to the current highest seen cluster time
      // for the deployment. If the new cluster time is higher than the
      // highest seen cluster time it MUST become the new highest seen cluster
      // time. Two cluster times are compared using only the BsonTimestamp
      // value of the clusterTime embedded field."
      const clusterTime = serverDescription.$clusterTime;
      if (clusterTime) {
        resolveClusterTime(this, clusterTime);
      }

      // If we already know all the information contained in this updated description, then
      // we don't need to emit SDAM events, but still need to update the description, in order
      // to keep client-tracked attributes like last update time and round trip time up to date
      const equalDescriptions =
        previousServerDescription && previousServerDescription.equals(serverDescription);

      // first update the TopologyDescription
      this.s.description = this.s.description.update(serverDescription);
      if (this.s.description.compatibilityError) {
        this.emit('error', new MongoError$t(this.s.description.compatibilityError));
        return;
      }

      // emit monitoring events for this change
      if (!equalDescriptions) {
        this.emit(
          'serverDescriptionChanged',
          new events.ServerDescriptionChangedEvent(
            this.s.id,
            serverDescription.address,
            previousServerDescription,
            this.s.description.servers.get(serverDescription.address)
          )
        );
      }

      // update server list from updated descriptions
      updateServers(this, serverDescription);

      // attempt to resolve any outstanding server selection attempts
      if (this[kWaitQueue].length > 0) {
        processWaitQueue(this);
      }

      if (!equalDescriptions) {
        this.emit(
          'topologyDescriptionChanged',
          new events.TopologyDescriptionChangedEvent(
            this.s.id,
            previousTopologyDescription,
            this.s.description
          )
        );
      }
    }

    auth(credentials, callback) {
      if (typeof credentials === 'function') (callback = credentials), (credentials = null);
      if (typeof callback === 'function') callback(null, true);
    }

    logout(callback) {
      if (typeof callback === 'function') callback(null, true);
    }

    // Basic operation support. Eventually this should be moved into command construction
    // during the command refactor.

    /**
     * Insert one or more documents
     *
     * @param {String} ns The full qualified namespace for this operation
     * @param {Array} ops An array of documents to insert
     * @param {Boolean} [options.ordered=true] Execute in order or out of order
     * @param {Object} [options.writeConcern] Write concern for the operation
     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized
     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields
     * @param {ClientSession} [options.session] Session to use for the operation
     * @param {boolean} [options.retryWrites] Enable retryable writes for this operation
     * @param {opResultCallback} callback A callback function
     */
    insert(ns, ops, options, callback) {
      executeWriteOperation({ topology: this, op: 'insert', ns, ops }, options, callback);
    }

    /**
     * Perform one or more update operations
     *
     * @param {string} ns The fully qualified namespace for this operation
     * @param {array} ops An array of updates
     * @param {boolean} [options.ordered=true] Execute in order or out of order
     * @param {object} [options.writeConcern] Write concern for the operation
     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized
     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields
     * @param {ClientSession} [options.session] Session to use for the operation
     * @param {boolean} [options.retryWrites] Enable retryable writes for this operation
     * @param {opResultCallback} callback A callback function
     */
    update(ns, ops, options, callback) {
      executeWriteOperation({ topology: this, op: 'update', ns, ops }, options, callback);
    }

    /**
     * Perform one or more remove operations
     *
     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
     * @param {array} ops An array of removes
     * @param {boolean} [options.ordered=true] Execute in order or out of order
     * @param {object} [options.writeConcern={}] Write concern for the operation
     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
     * @param {ClientSession} [options.session=null] Session to use for the operation
     * @param {boolean} [options.retryWrites] Enable retryable writes for this operation
     * @param {opResultCallback} callback A callback function
     */
    remove(ns, ops, options, callback) {
      executeWriteOperation({ topology: this, op: 'remove', ns, ops }, options, callback);
    }

    /**
     * Execute a command
     *
     * @method
     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
     * @param {object} cmd The command hash
     * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
     * @param {Connection} [options.connection] Specify connection object to execute command against
     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
     * @param {ClientSession} [options.session=null] Session to use for the operation
     * @param {opResultCallback} callback A callback function
     */
    command(ns, cmd, options, callback) {
      if (typeof options === 'function') {
        (callback = options), (options = {}), (options = options || {});
      }

      ReadPreference$e.translate(options);
      const readPreference = options.readPreference || ReadPreference$e.primary;

      this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {
        if (err) {
          callback(err);
          return;
        }

        const willRetryWrite =
          !options.retrying &&
          !!options.retryWrites &&
          options.session &&
          isRetryableWritesSupported(this) &&
          !options.session.inTransaction() &&
          isWriteCommand(cmd);

        const cb = (err, result) => {
          if (!err) return callback(null, result);
          if (!shouldRetryOperation(err)) {
            return callback(err);
          }

          if (willRetryWrite) {
            const newOptions = Object.assign({}, options, { retrying: true });
            return this.command(ns, cmd, newOptions, callback);
          }

          return callback(err);
        };

        // increment and assign txnNumber
        if (willRetryWrite) {
          options.session.incrementTransactionNumber();
          options.willRetryWrite = willRetryWrite;
        }

        server.command(ns, cmd, options, cb);
      });
    }

    /**
     * Create a new cursor
     *
     * @method
     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)
     * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId
     * @param {object} [options] Options for the cursor
     * @param {object} [options.batchSize=0] Batchsize for the operation
     * @param {array} [options.documents=[]] Initial documents list for cursor
     * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it
     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.
     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
     * @param {ClientSession} [options.session=null] Session to use for the operation
     * @param {object} [options.topology] The internal topology of the created cursor
     * @returns {Cursor}
     */
    cursor(ns, cmd, options) {
      options = options || {};
      const topology = options.topology || this;
      const CursorClass = options.cursorFactory || this.s.Cursor;
      ReadPreference$e.translate(options);

      return new CursorClass(topology, ns, cmd, options);
    }

    get clientMetadata() {
      return this.s.options.metadata;
    }

    isConnected() {
      return this.s.state === STATE_CONNECTED;
    }

    isDestroyed() {
      return this.s.state === STATE_CLOSED;
    }

    unref() {
      emitWarning$1('not implemented: `unref`');
    }

    // NOTE: There are many places in code where we explicitly check the last isMaster
    //       to do feature support detection. This should be done any other way, but for
    //       now we will just return the first isMaster seen, which should suffice.
    lastIsMaster() {
      const serverDescriptions = Array.from(this.description.servers.values());
      if (serverDescriptions.length === 0) return {};

      const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];
      const result = sd || { maxWireVersion: this.description.commonWireVersion };
      return result;
    }

    get logicalSessionTimeoutMinutes() {
      return this.description.logicalSessionTimeoutMinutes;
    }

    get bson() {
      return this.s.bson;
    }
  }

  Object.defineProperty(Topology$1.prototype, 'clusterTime', {
    enumerable: true,
    get: function() {
      return this.s.clusterTime;
    },
    set: function(clusterTime) {
      this.s.clusterTime = clusterTime;
    }
  });

  // legacy aliases
  Topology$1.prototype.destroy = deprecate$6(
    Topology$1.prototype.close,
    'destroy() is deprecated, please use close() instead'
  );

  const RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];
  function isWriteCommand(command) {
    return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);
  }

  function isStaleServerDescription(topologyDescription, incomingServerDescription) {
    const currentServerDescription = topologyDescription.servers.get(
      incomingServerDescription.address
    );
    const currentTopologyVersion = currentServerDescription.topologyVersion;
    return (
      compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0
    );
  }

  /**
   * Destroys a server, and removes all event listeners from the instance
   *
   * @param {Server} server
   */
  function destroyServer(server, topology, options, callback) {
    options = options || {};
    LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));

    server.destroy(options, () => {
      topology.emit(
        'serverClosed',
        new events.ServerClosedEvent(topology.s.id, server.description.address)
      );

      SERVER_RELAY_EVENTS.forEach(event => server.removeAllListeners(event));
      if (typeof callback === 'function') {
        callback();
      }
    });
  }

  /**
   * Parses a basic seedlist in string form
   *
   * @param {string} seedlist The seedlist to parse
   */
  function parseStringSeedlist(seedlist) {
    return seedlist.split(',').map(seed => ({
      host: seed.split(':')[0],
      port: seed.split(':')[1] || 27017
    }));
  }

  function topologyTypeFromSeedlist(seedlist, options) {
    if (options.directConnection) {
      return TopologyType.Single;
    }

    const replicaSet = options.replicaSet || options.setName || options.rs_name;
    if (replicaSet == null) {
      return TopologyType.Unknown;
    }

    return TopologyType.ReplicaSetNoPrimary;
  }

  function randomSelection(array) {
    return array[Math.floor(Math.random() * array.length)];
  }

  function createAndConnectServer(topology, serverDescription, connectDelay) {
    topology.emit(
      'serverOpening',
      new events.ServerOpeningEvent(topology.s.id, serverDescription.address)
    );

    const server = new Server$4(serverDescription, topology.s.options, topology);
    relayEvents$2(server, topology, SERVER_RELAY_EVENTS);

    server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));

    if (connectDelay) {
      const connectTimer = setTimeout(() => {
        clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);
        server.connect();
      }, connectDelay);

      topology.s.connectionTimers.add(connectTimer);
      return server;
    }

    server.connect();
    return server;
  }

  /**
   * Create `Server` instances for all initially known servers, connect them, and assign
   * them to the passed in `Topology`.
   *
   * @param {Topology} topology The topology responsible for the servers
   * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect
   */
  function connectServers(topology, serverDescriptions) {
    topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {
      const server = createAndConnectServer(topology, serverDescription);
      servers.set(serverDescription.address, server);
      return servers;
    }, new Map());
  }

  function updateServers(topology, incomingServerDescription) {
    // update the internal server's description
    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {
      const server = topology.s.servers.get(incomingServerDescription.address);
      server.s.description = incomingServerDescription;
    }

    // add new servers for all descriptions we currently don't know about locally
    for (const serverDescription of topology.description.servers.values()) {
      if (!topology.s.servers.has(serverDescription.address)) {
        const server = createAndConnectServer(topology, serverDescription);
        topology.s.servers.set(serverDescription.address, server);
      }
    }

    // for all servers no longer known, remove their descriptions and destroy their instances
    for (const entry of topology.s.servers) {
      const serverAddress = entry[0];
      if (topology.description.hasServer(serverAddress)) {
        continue;
      }

      const server = topology.s.servers.get(serverAddress);
      topology.s.servers.delete(serverAddress);

      // prepare server for garbage collection
      destroyServer(server, topology);
    }
  }

  function executeWriteOperation(args, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // TODO: once we drop Node 4, use destructuring either here or in arguments.
    const topology = args.topology;
    const op = args.op;
    const ns = args.ns;
    const ops = args.ops;

    const willRetryWrite =
      !args.retrying &&
      !!options.retryWrites &&
      options.session &&
      isRetryableWritesSupported(topology) &&
      !options.session.inTransaction() &&
      options.explain === undefined;

    topology.selectServer(writableServerSelector(), options, (err, server) => {
      if (err) {
        callback(err, null);
        return;
      }

      const handler = (err, result) => {
        if (!err) return callback(null, result);
        if (!shouldRetryOperation(err)) {
          err = getMMAPError(err);
          return callback(err);
        }

        if (willRetryWrite) {
          const newArgs = Object.assign({}, args, { retrying: true });
          return executeWriteOperation(newArgs, options, callback);
        }

        return callback(err);
      };

      if (callback.operationId) {
        handler.operationId = callback.operationId;
      }

      // increment and assign txnNumber
      if (willRetryWrite) {
        options.session.incrementTransactionNumber();
        options.willRetryWrite = willRetryWrite;
      }

      // execute the write operation
      server[op](ns, ops, options, handler);
    });
  }

  function shouldRetryOperation(err) {
    return err instanceof MongoError$t && err.hasErrorLabel('RetryableWriteError');
  }

  function srvPollingHandler(topology) {
    return function handleSrvPolling(ev) {
      const previousTopologyDescription = topology.s.description;
      topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);
      if (topology.s.description === previousTopologyDescription) {
        // Nothing changed, so return
        return;
      }

      updateServers(topology);

      topology.emit(
        'topologyDescriptionChanged',
        new events.TopologyDescriptionChangedEvent(
          topology.s.id,
          previousTopologyDescription,
          topology.s.description
        )
      );
    };
  }

  function drainWaitQueue(queue, err) {
    while (queue.length) {
      const waitQueueMember = queue.shift();
      clearTimeout(waitQueueMember.timer);
      if (!waitQueueMember[kCancelled]) {
        waitQueueMember.callback(err);
      }
    }
  }

  function processWaitQueue(topology) {
    if (topology.s.state === STATE_CLOSED) {
      drainWaitQueue(topology[kWaitQueue], new MongoError$t('Topology is closed, please connect'));
      return;
    }

    const serverDescriptions = Array.from(topology.description.servers.values());
    const membersToProcess = topology[kWaitQueue].length;
    for (let i = 0; i < membersToProcess && topology[kWaitQueue].length; ++i) {
      const waitQueueMember = topology[kWaitQueue].shift();
      if (waitQueueMember[kCancelled]) {
        continue;
      }

      let selectedDescriptions;
      try {
        const serverSelector = waitQueueMember.serverSelector;
        selectedDescriptions = serverSelector
          ? serverSelector(topology.description, serverDescriptions)
          : serverDescriptions;
      } catch (e) {
        clearTimeout(waitQueueMember.timer);
        waitQueueMember.callback(e);
        continue;
      }

      if (selectedDescriptions.length === 0) {
        topology[kWaitQueue].push(waitQueueMember);
        continue;
      }

      const selectedServerDescription = randomSelection(selectedDescriptions);
      const selectedServer = topology.s.servers.get(selectedServerDescription.address);
      const transaction = waitQueueMember.transaction;
      const isSharded = topology.description.type === TopologyType.Sharded;
      if (isSharded && transaction && transaction.isActive) {
        transaction.pinServer(selectedServer);
      }

      clearTimeout(waitQueueMember.timer);
      waitQueueMember.callback(undefined, selectedServer);
    }

    if (topology[kWaitQueue].length > 0) {
      // ensure all server monitors attempt monitoring soon
      topology.s.servers.forEach(server => browser$1.nextTick(() => server.requestCheck()));
    }
  }

  /**
   * A server opening SDAM monitoring event
   *
   * @event Topology#serverOpening
   * @type {ServerOpeningEvent}
   */

  /**
   * A server closed SDAM monitoring event
   *
   * @event Topology#serverClosed
   * @type {ServerClosedEvent}
   */

  /**
   * A server description SDAM change monitoring event
   *
   * @event Topology#serverDescriptionChanged
   * @type {ServerDescriptionChangedEvent}
   */

  /**
   * A topology open SDAM event
   *
   * @event Topology#topologyOpening
   * @type {TopologyOpeningEvent}
   */

  /**
   * A topology closed SDAM event
   *
   * @event Topology#topologyClosed
   * @type {TopologyClosedEvent}
   */

  /**
   * A topology structure SDAM change event
   *
   * @event Topology#topologyDescriptionChanged
   * @type {TopologyDescriptionChangedEvent}
   */

  /**
   * A topology serverHeartbeatStarted SDAM event
   *
   * @event Topology#serverHeartbeatStarted
   * @type {ServerHeartbeatStartedEvent}
   */

  /**
   * A topology serverHeartbeatFailed SDAM event
   *
   * @event Topology#serverHeartbeatFailed
   * @type {ServerHearbeatFailedEvent}
   */

  /**
   * A topology serverHeartbeatSucceeded SDAM change event
   *
   * @event Topology#serverHeartbeatSucceeded
   * @type {ServerHeartbeatSucceededEvent}
   */

  /**
   * An event emitted indicating a command was started, if command monitoring is enabled
   *
   * @event Topology#commandStarted
   * @type {object}
   */

  /**
   * An event emitted indicating a command succeeded, if command monitoring is enabled
   *
   * @event Topology#commandSucceeded
   * @type {object}
   */

  /**
   * An event emitted indicating a command failed, if command monitoring is enabled
   *
   * @event Topology#commandFailed
   * @type {object}
   */

  module.exports = {
    Topology: Topology$1
  };

  var topology = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  // Resolves the default auth mechanism according to
  // https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst
  function getDefaultAuthMechanism(ismaster) {
    if (ismaster) {
      // If ismaster contains saslSupportedMechs, use scram-sha-256
      // if it is available, else scram-sha-1
      if (Array.isArray(ismaster.saslSupportedMechs)) {
        return ismaster.saslSupportedMechs.indexOf('SCRAM-SHA-256') >= 0
          ? 'scram-sha-256'
          : 'scram-sha-1';
      }

      // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1
      if (ismaster.maxWireVersion >= 3) {
        return 'scram-sha-1';
      }
    }

    // Default for wireprotocol < 3
    return 'mongocr';
  }

  /**
   * A representation of the credentials used by MongoDB
   * @class
   * @property {string} mechanism The method used to authenticate
   * @property {string} [username] The username used for authentication
   * @property {string} [password] The password used for authentication
   * @property {string} [source] The database that the user should authenticate against
   * @property {object} [mechanismProperties] Special properties used by some types of auth mechanisms
   */
  class MongoCredentials$2 {
    /**
     * Creates a new MongoCredentials object
     * @param {object} [options]
     * @param {string} [options.username] The username used for authentication
     * @param {string} [options.password] The password used for authentication
     * @param {string} [options.source] The database that the user should authenticate against
     * @param {string} [options.mechanism] The method used to authenticate
     * @param {object} [options.mechanismProperties] Special properties used by some types of auth mechanisms
     */
    constructor(options) {
      options = options || {};
      this.username = options.username;
      this.password = options.password;
      this.source = options.source || options.db;
      this.mechanism = options.mechanism || 'default';
      this.mechanismProperties = options.mechanismProperties || {};

      if (this.mechanism.match(/MONGODB-AWS/i)) {
        if (this.username == null && browser$1.env.AWS_ACCESS_KEY_ID) {
          this.username = browser$1.env.AWS_ACCESS_KEY_ID;
        }

        if (this.password == null && browser$1.env.AWS_SECRET_ACCESS_KEY) {
          this.password = browser$1.env.AWS_SECRET_ACCESS_KEY;
        }

        if (this.mechanismProperties.AWS_SESSION_TOKEN == null && browser$1.env.AWS_SESSION_TOKEN) {
          this.mechanismProperties.AWS_SESSION_TOKEN = browser$1.env.AWS_SESSION_TOKEN;
        }
      }

      Object.freeze(this.mechanismProperties);
      Object.freeze(this);
    }

    /**
     * Determines if two MongoCredentials objects are equivalent
     * @param {MongoCredentials} other another MongoCredentials object
     * @returns {boolean} true if the two objects are equal.
     */
    equals(other) {
      return (
        this.mechanism === other.mechanism &&
        this.username === other.username &&
        this.password === other.password &&
        this.source === other.source
      );
    }

    /**
     * If the authentication mechanism is set to "default", resolves the authMechanism
     * based on the server version and server supported sasl mechanisms.
     *
     * @param {Object} [ismaster] An ismaster response from the server
     * @returns {MongoCredentials}
     */
    resolveAuthMechanism(ismaster) {
      // If the mechanism is not "default", then it does not need to be resolved
      if (this.mechanism.match(/DEFAULT/i)) {
        return new MongoCredentials$2({
          username: this.username,
          password: this.password,
          source: this.source,
          mechanism: getDefaultAuthMechanism(ismaster),
          mechanismProperties: this.mechanismProperties
        });
      }

      return this;
    }
  }

  module.exports = { MongoCredentials: MongoCredentials$2 };

  var mongo_credentials = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  /**
   * Context used during authentication
   *
   * @property {Connection} connection The connection to authenticate
   * @property {MongoCredentials} credentials The credentials to use for authentication
   * @property {object} options The options passed to the `connect` method
   * @property {object?} response The response of the initial handshake
   * @property {Buffer?} nonce A random nonce generated for use in an authentication conversation
   */
  class AuthContext {
    constructor(connection, credentials, options) {
      this.connection = connection;
      this.credentials = credentials;
      this.options = options;
    }
  }

  class AuthProvider$6 {
    constructor(bson) {
      this.bson = bson;
    }

    /**
     * Prepare the handshake document before the initial handshake.
     *
     * @param {object} handshakeDoc The document used for the initial handshake on a connection
     * @param {AuthContext} authContext Context for authentication flow
     * @param {function} callback
     */
    prepare(handshakeDoc, context, callback) {
      callback(undefined, handshakeDoc);
    }

    /**
     * Authenticate
     *
     * @param {AuthContext} context A shared context for authentication flow
     * @param {authResultCallback} callback The callback to return the result from the authentication
     */
    auth(context, callback) {
      callback(new TypeError('`auth` method must be overridden by subclass'));
    }
  }

  /**
   * This is a result from an authentication provider
   *
   * @callback authResultCallback
   * @param {error} error An error object. Set to null if no error present
   * @param {boolean} result The result of the authentication process
   */

  var auth_provider = { AuthContext, AuthProvider: AuthProvider$6 };

  const AuthProvider$5 = auth_provider.AuthProvider;

  class MongoCR extends AuthProvider$5 {
    auth(authContext, callback) {
      const connection = authContext.connection;
      const credentials = authContext.credentials;
      const username = credentials.username;
      const password = credentials.password;
      const source = credentials.source;

      connection.command(`${source}.$cmd`, { getnonce: 1 }, (err, result) => {
        let nonce = null;
        let key = null;

        // Get nonce
        if (err == null) {
          const r = result.result;
          nonce = r.nonce;
          // Use node md5 generator
          let md5 = crypto$1.createHash('md5');
          // Generate keys used for authentication
          md5.update(username + ':mongo:' + password, 'utf8');
          const hash_password = md5.digest('hex');
          // Final key
          md5 = crypto$1.createHash('md5');
          md5.update(nonce + username + hash_password, 'utf8');
          key = md5.digest('hex');
        }

        const authenticateCommand = {
          authenticate: 1,
          user: username,
          nonce,
          key
        };

        connection.command(`${source}.$cmd`, authenticateCommand, callback);
      });
    }
  }

  var mongocr = MongoCR;

  const AuthProvider$4 = auth_provider.AuthProvider;

  class X509 extends AuthProvider$4 {
    prepare(handshakeDoc, authContext, callback) {
      const credentials = authContext.credentials;
      Object.assign(handshakeDoc, {
        speculativeAuthenticate: x509AuthenticateCommand(credentials)
      });

      callback(undefined, handshakeDoc);
    }

    auth(authContext, callback) {
      const connection = authContext.connection;
      const credentials = authContext.credentials;
      const response = authContext.response;
      if (response.speculativeAuthenticate) {
        return callback();
      }

      connection.command('$external.$cmd', x509AuthenticateCommand(credentials), callback);
    }
  }

  function x509AuthenticateCommand(credentials) {
    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };
    if (credentials.username) {
      Object.assign(command, { user: credentials.username });
    }

    return command;
  }

  var x509 = X509;

  const retrieveBSON$1 = utils$2.retrieveBSON;
  const AuthProvider$3 = auth_provider.AuthProvider;

  // TODO: can we get the Binary type from this.bson instead?
  const BSON$4 = retrieveBSON$1();
  const Binary$2 = BSON$4.Binary;

  class Plain extends AuthProvider$3 {
    auth(authContext, callback) {
      const connection = authContext.connection;
      const credentials = authContext.credentials;
      const username = credentials.username;
      const password = credentials.password;

      const payload = new Binary$2(`\x00${username}\x00${password}`);
      const command = {
        saslStart: 1,
        mechanism: 'PLAIN',
        payload: payload,
        autoAuthorize: 1
      };

      connection.command('$external.$cmd', command, callback);
    }
  }

  var plain = Plain;

  const dns = require('dns');

  const AuthProvider$2 = require('./auth_provider').AuthProvider;
  const retrieveKerberos = require('../utils').retrieveKerberos;
  const MongoError$s = require('../error').MongoError;

  let kerberos;

  class GSSAPI extends AuthProvider$2 {
    auth(authContext, callback) {
      const connection = authContext.connection;
      const credentials = authContext.credentials;
      if (credentials == null) return callback(new MongoError$s('credentials required'));
      const username = credentials.username;
      function externalCommand(command, cb) {
        return connection.command('$external.$cmd', command, cb);
      }
      makeKerberosClient(authContext, (err, client) => {
        if (err) return callback(err);
        if (client == null) return callback(new MongoError$s('gssapi client missing'));
        client.step('', (err, payload) => {
          if (err) return callback(err);
          externalCommand(saslStart(payload), (err, response) => {
            if (err) return callback(err);
            const result = response.result;
            negotiate(client, 10, result.payload, (err, payload) => {
              if (err) return callback(err);
              externalCommand(saslContinue(payload, result.conversationId), (err, response) => {
                if (err) return callback(err);
                const result = response.result;
                finalize(client, username, result.payload, (err, payload) => {
                  if (err) return callback(err);
                  externalCommand(
                    {
                      saslContinue: 1,
                      conversationId: result.conversationId,
                      payload
                    },
                    (err, result) => {
                      if (err) return callback(err);
                      callback(undefined, result);
                    }
                  );
                });
              });
            });
          });
        });
      });
    }
  }
  module.exports = GSSAPI;

  function makeKerberosClient(authContext, callback) {
    const host = authContext.options.host;
    const port = authContext.options.port;
    const credentials = authContext.credentials;
    if (!host || !port || !credentials) {
      return callback(
        new MongoError$s(
          `Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${
          credentials ? 'host' : 'credentials'
        }.`
        )
      );
    }
    if (kerberos == null) {
      try {
        kerberos = retrieveKerberos();
      } catch (e) {
        return callback(e);
      }
    }
    const username = credentials.username;
    const password = credentials.password;
    const mechanismProperties = credentials.mechanismProperties;
    const serviceName =
      mechanismProperties['gssapiservicename'] ||
      mechanismProperties['gssapiServiceName'] ||
      'mongodb';
    performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {
      if (err) return callback(err);
      const initOptions = {};
      if (password != null) {
        Object.assign(initOptions, { user: username, password: password });
      }
      kerberos.initializeClient(
        `${serviceName}${browser$1.platform === 'win32' ? '/' : '@'}${host}`,
        initOptions,
        (err, client) => {
          if (err) return callback(new MongoError$s(err));
          callback(null, client);
        }
      );
    });
  }

  function saslStart(payload) {
    return {
      saslStart: 1,
      mechanism: 'GSSAPI',
      payload,
      autoAuthorize: 1
    };
  }
  function saslContinue(payload, conversationId) {
    return {
      saslContinue: 1,
      conversationId,
      payload
    };
  }
  function negotiate(client, retries, payload, callback) {
    client.step(payload, (err, response) => {
      // Retries exhausted, raise error
      if (err && retries === 0) return callback(err);
      // Adjust number of retries and call step again
      if (err) return negotiate(client, retries - 1, payload, callback);
      // Return the payload
      callback(undefined, response || '');
    });
  }
  function finalize(client, user, payload, callback) {
    // GSS Client Unwrap
    client.unwrap(payload, (err, response) => {
      if (err) return callback(err);
      // Wrap the response
      client.wrap(response || '', { user }, (err, wrapped) => {
        if (err) return callback(err);
        // Return the payload
        callback(undefined, wrapped);
      });
    });
  }
  function performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {
    const canonicalizeHostName =
      typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean'
        ? mechanismProperties.gssapiCanonicalizeHostName
        : false;
    if (!canonicalizeHostName) return callback(undefined, host);
    // Attempt to resolve the host name
    dns.resolveCname(host, (err, r) => {
      if (err) return callback(err);
      // Get the first resolve host id
      if (Array.isArray(r) && r.length > 0) {
        return callback(undefined, r[0]);
      }
      callback(undefined, host);
    });
  }

  var gssapi = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var __dirname = '/Users/leonard.mehlig/Developer/mongodb-plugin-posthog/node_modules/saslprep/lib';

  const fs$2 = require('fs');
  const path = require('path');
  const bitfield = require('sparse-bitfield');

  /* eslint-disable-next-line security/detect-non-literal-fs-filename */
  const memory = fs$2.readFileSync(path.resolve(__dirname, '../code-points.mem'));
  let offset = 0;

  /**
   * Loads each code points sequence from buffer.
   * @returns {bitfield}
   */
  function read$1() {
    const size = memory.readUInt32BE(offset);
    offset += 4;

    const codepoints = memory.slice(offset, offset + size);
    offset += size;

    return bitfield({ buffer: codepoints });
  }

  const unassigned_code_points$1 = read$1();
  const commonly_mapped_to_nothing$1 = read$1();
  const non_ASCII_space_characters$1 = read$1();
  const prohibited_characters$1 = read$1();
  const bidirectional_r_al$1 = read$1();
  const bidirectional_l$1 = read$1();

  module.exports = {
    unassigned_code_points: unassigned_code_points$1,
    commonly_mapped_to_nothing: commonly_mapped_to_nothing$1,
    non_ASCII_space_characters: non_ASCII_space_characters$1,
    prohibited_characters: prohibited_characters$1,
    bidirectional_r_al: bidirectional_r_al$1,
    bidirectional_l: bidirectional_l$1,
  };

  var memoryCodePoints = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(memoryCodePoints);

  const {
    unassigned_code_points,
    commonly_mapped_to_nothing,
    non_ASCII_space_characters,
    prohibited_characters,
    bidirectional_r_al,
    bidirectional_l,
  } = require$$0;

  var saslprep_1 = saslprep$1;

  // 2.1.  Mapping

  /**
   * non-ASCII space characters [StringPrep, C.1.2] that can be
   * mapped to SPACE (U+0020)
   */
  const mapping2space = non_ASCII_space_characters;

  /**
   * the "commonly mapped to nothing" characters [StringPrep, B.1]
   * that can be mapped to nothing.
   */
  const mapping2nothing = commonly_mapped_to_nothing;

  // utils
  const getCodePoint = character => character.codePointAt(0);
  const first = x => x[0];
  const last = x => x[x.length - 1];

  /**
   * Convert provided string into an array of Unicode Code Points.
   * Based on https://stackoverflow.com/a/21409165/1556249
   * and https://www.npmjs.com/package/code-point-at.
   * @param {string} input
   * @returns {number[]}
   */
  function toCodePoints(input) {
    const codepoints = [];
    const size = input.length;

    for (let i = 0; i < size; i += 1) {
      const before = input.charCodeAt(i);

      if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {
        const next = input.charCodeAt(i + 1);

        if (next >= 0xdc00 && next <= 0xdfff) {
          codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);
          i += 1;
          continue;
        }
      }

      codepoints.push(before);
    }

    return codepoints;
  }

  /**
   * SASLprep.
   * @param {string} input
   * @param {Object} opts
   * @param {boolean} opts.allowUnassigned
   * @returns {string}
   */
  function saslprep$1(input, opts = {}) {
    if (typeof input !== 'string') {
      throw new TypeError('Expected string.');
    }

    if (input.length === 0) {
      return '';
    }

    // 1. Map
    const mapped_input = toCodePoints(input)
      // 1.1 mapping to space
      .map(character => (mapping2space.get(character) ? 0x20 : character))
      // 1.2 mapping to nothing
      .filter(character => !mapping2nothing.get(character));

    // 2. Normalize
    const normalized_input = String.fromCodePoint
      .apply(null, mapped_input)
      .normalize('NFKC');

    const normalized_map = toCodePoints(normalized_input);

    // 3. Prohibit
    const hasProhibited = normalized_map.some(character =>
      prohibited_characters.get(character)
    );

    if (hasProhibited) {
      throw new Error(
        'Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3'
      );
    }

    // Unassigned Code Points
    if (opts.allowUnassigned !== true) {
      const hasUnassigned = normalized_map.some(character =>
        unassigned_code_points.get(character)
      );

      if (hasUnassigned) {
        throw new Error(
          'Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5'
        );
      }
    }

    // 4. check bidi

    const hasBidiRAL = normalized_map.some(character =>
      bidirectional_r_al.get(character)
    );

    const hasBidiL = normalized_map.some(character =>
      bidirectional_l.get(character)
    );

    // 4.1 If a string contains any RandALCat character, the string MUST NOT
    // contain any LCat character.
    if (hasBidiRAL && hasBidiL) {
      throw new Error(
        'String must not contain RandALCat and LCat at the same time,' +
          ' see https://tools.ietf.org/html/rfc3454#section-6'
      );
    }

    /**
     * 4.2 If a string contains any RandALCat character, a RandALCat
     * character MUST be the first character of the string, and a
     * RandALCat character MUST be the last character of the string.
     */

    const isFirstBidiRAL = bidirectional_r_al.get(
      getCodePoint(first(normalized_input))
    );
    const isLastBidiRAL = bidirectional_r_al.get(
      getCodePoint(last(normalized_input))
    );

    if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {
      throw new Error(
        'Bidirectional RandALCat character must be the first and the last' +
          ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6'
      );
    }

    return normalized_input;
  }

  const Buffer$3 = safeBuffer.Buffer;
  const retrieveBSON = utils$2.retrieveBSON;
  const MongoError$r = error$2.MongoError;
  const AuthProvider$1 = auth_provider.AuthProvider;
  const emitWarningOnce$3 = require$$1$1.emitWarning;

  const BSON$3 = retrieveBSON();
  const Binary$1 = BSON$3.Binary;

  let saslprep;
  try {
    saslprep = saslprep_1;
  } catch (e) {
    // don't do anything;
  }

  class ScramSHA extends AuthProvider$1 {
    constructor(bson, cryptoMethod) {
      super(bson);
      this.cryptoMethod = cryptoMethod || 'sha1';
    }

    prepare(handshakeDoc, authContext, callback) {
      const cryptoMethod = this.cryptoMethod;
      if (cryptoMethod === 'sha256' && saslprep == null) {
        emitWarningOnce$3('Warning: no saslprep library specified. Passwords will not be sanitized');
      }

      crypto$1.randomBytes(24, (err, nonce) => {
        if (err) {
          return callback(err);
        }

        // store the nonce for later use
        Object.assign(authContext, { nonce });

        const credentials = authContext.credentials;
        const request = Object.assign({}, handshakeDoc, {
          speculativeAuthenticate: Object.assign(makeFirstMessage(cryptoMethod, credentials, nonce), {
            db: credentials.source
          })
        });

        callback(undefined, request);
      });
    }

    auth(authContext, callback) {
      const response = authContext.response;
      if (response && response.speculativeAuthenticate) {
        continueScramConversation(
          this.cryptoMethod,
          response.speculativeAuthenticate,
          authContext,
          callback
        );

        return;
      }

      executeScram(this.cryptoMethod, authContext, callback);
    }
  }

  function cleanUsername(username) {
    return username.replace('=', '=3D').replace(',', '=2C');
  }

  function clientFirstMessageBare(username, nonce) {
    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.
    // Since the username is not sasl-prep-d, we need to do this here.
    return Buffer$3.concat([
      Buffer$3.from('n=', 'utf8'),
      Buffer$3.from(username, 'utf8'),
      Buffer$3.from(',r=', 'utf8'),
      Buffer$3.from(nonce.toString('base64'), 'utf8')
    ]);
  }

  function makeFirstMessage(cryptoMethod, credentials, nonce) {
    const username = cleanUsername(credentials.username);
    const mechanism = cryptoMethod === 'sha1' ? 'SCRAM-SHA-1' : 'SCRAM-SHA-256';

    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.
    // Since the username is not sasl-prep-d, we need to do this here.
    return {
      saslStart: 1,
      mechanism,
      payload: new Binary$1(
        Buffer$3.concat([Buffer$3.from('n,,', 'utf8'), clientFirstMessageBare(username, nonce)])
      ),
      autoAuthorize: 1,
      options: { skipEmptyExchange: true }
    };
  }

  function executeScram(cryptoMethod, authContext, callback) {
    const connection = authContext.connection;
    const credentials = authContext.credentials;
    const nonce = authContext.nonce;
    const db = credentials.source;

    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);
    connection.command(`${db}.$cmd`, saslStartCmd, (_err, result) => {
      const err = resolveError(_err, result);
      if (err) {
        return callback(err);
      }

      continueScramConversation(cryptoMethod, result.result, authContext, callback);
    });
  }

  function continueScramConversation(cryptoMethod, response, authContext, callback) {
    const connection = authContext.connection;
    const credentials = authContext.credentials;
    const nonce = authContext.nonce;

    const db = credentials.source;
    const username = cleanUsername(credentials.username);
    const password = credentials.password;

    let processedPassword;
    if (cryptoMethod === 'sha256') {
      processedPassword = saslprep ? saslprep(password) : password;
    } else {
      try {
        processedPassword = passwordDigest(username, password);
      } catch (e) {
        return callback(e);
      }
    }

    const payload = Buffer$3.isBuffer(response.payload)
      ? new Binary$1(response.payload)
      : response.payload;
    const dict = parsePayload(payload.value());

    const iterations = parseInt(dict.i, 10);
    if (iterations && iterations < 4096) {
      callback(new MongoError$r(`Server returned an invalid iteration count ${iterations}`), false);
      return;
    }

    const salt = dict.s;
    const rnonce = dict.r;
    if (rnonce.startsWith('nonce')) {
      callback(new MongoError$r(`Server returned an invalid nonce: ${rnonce}`), false);
      return;
    }

    // Set up start of proof
    const withoutProof = `c=biws,r=${rnonce}`;
    const saltedPassword = HI(
      processedPassword,
      Buffer$3.from(salt, 'base64'),
      iterations,
      cryptoMethod
    );

    const clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');
    const serverKey = HMAC(cryptoMethod, saltedPassword, 'Server Key');
    const storedKey = H(cryptoMethod, clientKey);
    const authMessage = [
      clientFirstMessageBare(username, nonce),
      payload.value().toString('base64'),
      withoutProof
    ].join(',');

    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);
    const clientProof = `p=${xor(clientKey, clientSignature)}`;
    const clientFinal = [withoutProof, clientProof].join(',');

    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);
    const saslContinueCmd = {
      saslContinue: 1,
      conversationId: response.conversationId,
      payload: new Binary$1(Buffer$3.from(clientFinal))
    };

    connection.command(`${db}.$cmd`, saslContinueCmd, (_err, result) => {
      const err = resolveError(_err, result);
      if (err) {
        return callback(err);
      }

      const r = result.result;
      const parsedResponse = parsePayload(r.payload.value());
      if (!compareDigest(Buffer$3.from(parsedResponse.v, 'base64'), serverSignature)) {
        callback(new MongoError$r('Server returned an invalid signature'));
        return;
      }

      if (!r || r.done !== false) {
        return callback(err, r);
      }

      const retrySaslContinueCmd = {
        saslContinue: 1,
        conversationId: r.conversationId,
        payload: Buffer$3.alloc(0)
      };

      connection.command(`${db}.$cmd`, retrySaslContinueCmd, callback);
    });
  }

  function parsePayload(payload) {
    const dict = {};
    const parts = payload.split(',');
    for (let i = 0; i < parts.length; i++) {
      const valueParts = parts[i].split('=');
      dict[valueParts[0]] = valueParts[1];
    }

    return dict;
  }

  function passwordDigest(username, password) {
    if (typeof username !== 'string') {
      throw new MongoError$r('username must be a string');
    }

    if (typeof password !== 'string') {
      throw new MongoError$r('password must be a string');
    }

    if (password.length === 0) {
      throw new MongoError$r('password cannot be empty');
    }

    const md5 = crypto$1.createHash('md5');
    md5.update(`${username}:mongo:${password}`, 'utf8');
    return md5.digest('hex');
  }

  // XOR two buffers
  function xor(a, b) {
    if (!Buffer$3.isBuffer(a)) {
      a = Buffer$3.from(a);
    }

    if (!Buffer$3.isBuffer(b)) {
      b = Buffer$3.from(b);
    }

    const length = Math.max(a.length, b.length);
    const res = [];

    for (let i = 0; i < length; i += 1) {
      res.push(a[i] ^ b[i]);
    }

    return Buffer$3.from(res).toString('base64');
  }

  function H(method, text) {
    return crypto$1
      .createHash(method)
      .update(text)
      .digest();
  }

  function HMAC(method, key, text) {
    return crypto$1
      .createHmac(method, key)
      .update(text)
      .digest();
  }

  let _hiCache = {};
  let _hiCacheCount = 0;
  function _hiCachePurge() {
    _hiCache = {};
    _hiCacheCount = 0;
  }

  const hiLengthMap = {
    sha256: 32,
    sha1: 20
  };

  function HI(data, salt, iterations, cryptoMethod) {
    // omit the work if already generated
    const key = [data, salt.toString('base64'), iterations].join('_');
    if (_hiCache[key] !== undefined) {
      return _hiCache[key];
    }

    // generate the salt
    const saltedData = crypto$1.pbkdf2Sync(
      data,
      salt,
      iterations,
      hiLengthMap[cryptoMethod],
      cryptoMethod
    );

    // cache a copy to speed up the next lookup, but prevent unbounded cache growth
    if (_hiCacheCount >= 200) {
      _hiCachePurge();
    }

    _hiCache[key] = saltedData;
    _hiCacheCount += 1;
    return saltedData;
  }

  function compareDigest(lhs, rhs) {
    if (lhs.length !== rhs.length) {
      return false;
    }

    if (typeof crypto$1.timingSafeEqual === 'function') {
      return crypto$1.timingSafeEqual(lhs, rhs);
    }

    let result = 0;
    for (let i = 0; i < lhs.length; i++) {
      result |= lhs[i] ^ rhs[i];
    }

    return result === 0;
  }

  function resolveError(err, result) {
    if (err) return err;

    const r = result.result;
    if (r.$err || r.errmsg) return new MongoError$r(r);
  }

  class ScramSHA1$1 extends ScramSHA {
    constructor(bson) {
      super(bson, 'sha1');
    }
  }

  class ScramSHA256$1 extends ScramSHA {
    constructor(bson) {
      super(bson, 'sha256');
    }
  }

  var scram = { ScramSHA1: ScramSHA1$1, ScramSHA256: ScramSHA256$1 };

  const AuthProvider = require('./auth_provider').AuthProvider;
  const MongoCredentials$1 = require('./mongo_credentials').MongoCredentials;
  const MongoError$q = require('../error').MongoError;
  const crypto = require('crypto');
  const http = require('http');
  const maxWireVersion$8 = require('../utils').maxWireVersion;
  const url$2 = require('url');

  let aws4;
  try {
    aws4 = require('aws4');
  } catch (e) {
    // don't do anything;
  }

  const ASCII_N = 110;
  const AWS_RELATIVE_URI = 'http://169.254.170.2';
  const AWS_EC2_URI = 'http://169.254.169.254';
  const AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';

  class MongoDBAWS$1 extends AuthProvider {
    auth(authContext, callback) {
      const connection = authContext.connection;
      const credentials = authContext.credentials;

      if (maxWireVersion$8(connection) < 9) {
        callback(new MongoError$q('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));
        return;
      }

      if (aws4 == null) {
        callback(
          new MongoError$q(
            'MONGODB-AWS authentication requires the `aws4` module, please install it as a dependency of your project'
          )
        );

        return;
      }

      if (credentials.username == null) {
        makeTempCredentials(credentials, (err, tempCredentials) => {
          if (err) return callback(err);

          authContext.credentials = tempCredentials;
          this.auth(authContext, callback);
        });

        return;
      }

      const username = credentials.username;
      const password = credentials.password;
      const db = credentials.source;
      const token = credentials.mechanismProperties.AWS_SESSION_TOKEN;
      const bson = this.bson;

      crypto.randomBytes(32, (err, nonce) => {
        if (err) {
          callback(err);
          return;
        }

        const saslStart = {
          saslStart: 1,
          mechanism: 'MONGODB-AWS',
          payload: bson.serialize({ r: nonce, p: ASCII_N })
        };

        connection.command(`${db}.$cmd`, saslStart, (err, result) => {
          if (err) return callback(err);

          const res = result.result;
          const serverResponse = bson.deserialize(res.payload.buffer);
          const host = serverResponse.h;
          const serverNonce = serverResponse.s.buffer;
          if (serverNonce.length !== 64) {
            callback(
              new MongoError$q(`Invalid server nonce length ${serverNonce.length}, expected 64`)
            );
            return;
          }

          if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {
            callback(new MongoError$q('Server nonce does not begin with client nonce'));
            return;
          }

          if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {
            callback(new MongoError$q(`Server returned an invalid host: "${host}"`));
            return;
          }

          const body = 'Action=GetCallerIdentity&Version=2011-06-15';
          const options = aws4.sign(
            {
              method: 'POST',
              host,
              region: deriveRegion(serverResponse.h),
              service: 'sts',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': body.length,
                'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),
                'X-MongoDB-GS2-CB-Flag': 'n'
              },
              path: '/',
              body
            },
            {
              accessKeyId: username,
              secretAccessKey: password,
              token
            }
          );

          const authorization = options.headers.Authorization;
          const date = options.headers['X-Amz-Date'];
          const payload = { a: authorization, d: date };
          if (token) {
            payload.t = token;
          }

          const saslContinue = {
            saslContinue: 1,
            conversationId: 1,
            payload: bson.serialize(payload)
          };

          connection.command(`${db}.$cmd`, saslContinue, err => {
            if (err) return callback(err);
            callback();
          });
        });
      });
    }
  }

  function makeTempCredentials(credentials, callback) {
    function done(creds) {
      if (creds.AccessKeyId == null || creds.SecretAccessKey == null || creds.Token == null) {
        callback(new MongoError$q('Could not obtain temporary MONGODB-AWS credentials'));
        return;
      }

      callback(
        undefined,
        new MongoCredentials$1({
          username: creds.AccessKeyId,
          password: creds.SecretAccessKey,
          source: credentials.source,
          mechanism: 'MONGODB-AWS',
          mechanismProperties: {
            AWS_SESSION_TOKEN: creds.Token
          }
        })
      );
    }

    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI
    // is set then drivers MUST assume that it was set by an AWS ECS agent
    if (browser$1.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {
      request(
        `${AWS_RELATIVE_URI}${browser$1.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`,
        (err, res) => {
          if (err) return callback(err);
          done(res);
        }
      );

      return;
    }

    // Otherwise assume we are on an EC2 instance

    // get a token

    request(
      `${AWS_EC2_URI}/latest/api/token`,
      { method: 'PUT', json: false, headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 } },
      (err, token) => {
        if (err) return callback(err);

        // get role name
        request(
          `${AWS_EC2_URI}/${AWS_EC2_PATH}`,
          { json: false, headers: { 'X-aws-ec2-metadata-token': token } },
          (err, roleName) => {
            if (err) return callback(err);

            // get temp credentials
            request(
              `${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`,
              { headers: { 'X-aws-ec2-metadata-token': token } },
              (err, creds) => {
                if (err) return callback(err);
                done(creds);
              }
            );
          }
        );
      }
    );
  }

  function deriveRegion(host) {
    const parts = host.split('.');
    if (parts.length === 1 || parts[1] === 'amazonaws') {
      return 'us-east-1';
    }

    return parts[1];
  }

  function request(uri, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options = Object.assign(
      {
        method: 'GET',
        timeout: 10000,
        json: true
      },
      url$2.parse(uri),
      options
    );

    const req = http.request(options, res => {
      res.setEncoding('utf8');

      let data = '';
      res.on('data', d => (data += d));
      res.on('end', () => {
        if (options.json === false) {
          callback(undefined, data);
          return;
        }

        try {
          const parsed = JSON.parse(data);
          callback(undefined, parsed);
        } catch (err) {
          callback(new MongoError$q(`Invalid JSON response: "${data}"`));
        }
      });
    });

    req.on('error', err => callback(err));
    req.end();
  }

  module.exports = MongoDBAWS$1;

  var mongodb_aws = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var require$$18 = /*@__PURE__*/getAugmentedNamespace(gssapi);

  var MongoDBAWS = /*@__PURE__*/getAugmentedNamespace(mongodb_aws);

  const ScramSHA1 = scram.ScramSHA1;
  const ScramSHA256 = scram.ScramSHA256;


  /**
   * Returns the default authentication providers.
   *
   * @param {BSON} bson Bson definition
   * @returns {Object} a mapping of auth names to auth types
   */
  function defaultAuthProviders(bson) {
    return {
      'mongodb-aws': new MongoDBAWS(bson),
      mongocr: new mongocr(bson),
      x509: new x509(bson),
      plain: new plain(bson),
      gssapi: new require$$18(bson),
      'scram-sha-1': new ScramSHA1(bson),
      'scram-sha-256': new ScramSHA256(bson)
    };
  }

  var defaultAuthProviders_1 = { defaultAuthProviders };

  /*! https://mths.be/punycode v1.4.1 by @mathias */


  /** Highest positive signed 32-bit float value */
  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80
  var delimiter = '-'; // '\x2D'
  var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  var errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error$1(type) {
    throw new RangeError(errors[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map$1(array, fn) {
    var length = array.length;
    var result = [];
    while (length--) {
      result[length] = fn(array[length]);
    }
    return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';
    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    }
    // Avoid `split(regex)` for IE8 compatibility. See #17.
    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map$1(labels, fn).join('.');
    return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
    var output = [],
      counter = 0,
      length = string.length,
      value,
      extra;
    while (counter < length) {
      value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) { // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  function encode(input) {
    var n,
      delta,
      handledCPCount,
      basicLength,
      bias,
      j,
      m,
      q,
      k,
      t,
      currentValue,
      output = [],
      /** `inputLength` will hold the number of code points in `input`. */
      inputLength,
      /** Cached calculation results */
      handledCPCountPlusOne,
      baseMinusT,
      qMinusT;

    // Convert the input in UCS-2 to Unicode
    input = ucs2decode(input);

    // Cache the length
    inputLength = input.length;

    // Initialize the state
    n = initialN;
    delta = 0;
    bias = initialBias;

    // Handle the basic code points
    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length;

    // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.

    // Finish the basic string - if it is not empty - with a delimiter
    if (basicLength) {
      output.push(delimiter);
    }

    // Main encoding loop:
    while (handledCPCount < inputLength) {

      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      }

      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow
      handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error$1('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error$1('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base; /* no condition */ ; k += base) {
            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
            if (q < t) {
              break;
            }
            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(
              stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
            );
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;

    }
    return output.join('');
  }

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  function toASCII(input) {
    return mapDomain(input, function(string) {
      return regexNonASCII.test(string) ?
        'xn--' + encode(string) :
        string;
    });
  }

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  function stringifyPrimitive(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  }

  function stringify (obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return map(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray(obj[k])) {
          return map(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);

    }

    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq +
           encodeURIComponent(stringifyPrimitive(obj));
  }
  function map (xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }
    return res;
  }

  var objectKeys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
  };

  function parse$2(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);

    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty(obj, k)) {
        obj[k] = v;
      } else if (isArray(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  }var qs$1 = {
    encode: stringify,
    stringify: stringify,
    decode: parse$2,
    parse: parse$2
  };

  var qs$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    stringify: stringify,
    parse: parse$2,
    'default': qs$1,
    encode: stringify,
    decode: parse$2
  });

  // Copyright Joyent, Inc. and other Node contributors.
  var url = {
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    Url: Url
  };
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }

  // Reference: RFC 3986, RFC 1808, RFC 2396

  // define these here so at least they only have to be
  // compiled once on the first module load.
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };

  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject(url) && url instanceof Url) return url;

    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }
  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    return parse$1(this, url, parseQueryString, slashesDenoteHost);
  };

  function parse$1(self, url, parseQueryString, slashesDenoteHost) {
    if (!isString(url)) {
      throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
    }

    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf('?'),
      splitter =
      (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);

    var rest = url;

    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        self.path = rest;
        self.href = rest;
        self.pathname = simplePath[1];
        if (simplePath[2]) {
          self.search = simplePath[2];
          if (parseQueryString) {
            self.query = parse$2(self.search.substr(1));
          } else {
            self.query = self.search.substr(1);
          }
        } else if (parseQueryString) {
          self.search = '';
          self.query = {};
        }
        return self;
      }
    }

    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      self.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }

    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        self.slashes = true;
      }
    }
    var i, hec, l, p;
    if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c

      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.

      // find the first instance of any hostEndingChars
      var hostEnd = -1;
      for (i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }

      // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.
      var auth, atSign;
      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      }

      // Now we have a portion which is definitely the auth.
      // Pull that off.
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        self.auth = decodeURIComponent(auth);
      }

      // the host is the remaining to the left of the first non-host char
      hostEnd = -1;
      for (i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      // if we still have not hit it, then the entire thing is a host.
      if (hostEnd === -1)
        hostEnd = rest.length;

      self.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);

      // pull out port.
      parseHost(self);

      // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.
      self.hostname = self.hostname || '';

      // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.
      var ipv6Hostname = self.hostname[0] === '[' &&
        self.hostname[self.hostname.length - 1] === ']';

      // validate a little.
      if (!ipv6Hostname) {
        var hostparts = self.hostname.split(/\./);
        for (i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;
          if (!part.match(hostnamePartPattern)) {
            var newpart = '';
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            // we test again with ASCII char only
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }
              self.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (self.hostname.length > hostnameMaxLen) {
        self.hostname = '';
      } else {
        // hostnames are always lower case.
        self.hostname = self.hostname.toLowerCase();
      }

      if (!ipv6Hostname) {
        // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        self.hostname = toASCII(self.hostname);
      }

      p = self.port ? ':' + self.port : '';
      var h = self.hostname || '';
      self.host = h + p;
      self.href += self.host;

      // strip [ and ] from the hostname
      // the host field still retains them, though
      if (ipv6Hostname) {
        self.hostname = self.hostname.substr(1, self.hostname.length - 2);
        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    }

    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) {

      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1)
          continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }


    // chop off from the tail first.
    var hash = rest.indexOf('#');
    if (hash !== -1) {
      // got a fragment string.
      self.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
      self.search = rest.substr(qm);
      self.query = rest.substr(qm + 1);
      if (parseQueryString) {
        self.query = parse$2(self.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      self.search = '';
      self.query = {};
    }
    if (rest) self.pathname = rest;
    if (slashedProtocol[lowerProto] &&
      self.hostname && !self.pathname) {
      self.pathname = '/';
    }

    //to support http.request
    if (self.pathname || self.search) {
      p = self.pathname || '';
      var s = self.search || '';
      self.path = p + s;
    }

    // finally, reconstruct the href based on what has been validated.
    self.href = format(self);
    return self;
  }

  // format a parsed object into a url string
  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (isString(obj)) obj = parse$1({}, obj);
    return format(obj);
  }

  function format(self) {
    var auth = self.auth || '';
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }

    var protocol = self.protocol || '',
      pathname = self.pathname || '',
      hash = self.hash || '',
      host = false,
      query = '';

    if (self.host) {
      host = auth + self.host;
    } else if (self.hostname) {
      host = auth + (self.hostname.indexOf(':') === -1 ?
        self.hostname :
        '[' + this.hostname + ']');
      if (self.port) {
        host += ':' + self.port;
      }
    }

    if (self.query &&
      isObject(self.query) &&
      Object.keys(self.query).length) {
      query = stringify(self.query);
    }

    var search = self.search || (query && ('?' + query)) || '';

    if (protocol && protocol.substr(-1) !== ':') protocol += ':';

    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (self.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }

    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;

    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');

    return protocol + host + pathname + search + hash;
  }

  Url.prototype.format = function() {
    return format(this);
  };

  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }

  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }

  Url.prototype.resolveObject = function(relative) {
    if (isString(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }

    var result = new Url();
    var tkeys = Object.keys(this);
    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this[tkey];
    }

    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;

    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === '') {
      result.href = result.format();
      return result;
    }

    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      var rkeys = Object.keys(relative);
      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== 'protocol')
          result[rkey] = relative[rkey];
      }

      //urlParse appends trailing / to urls like http://www.example.com
      if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }

      result.href = result.format();
      return result;
    }
    var relPath;
    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);
        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }
        result.href = result.format();
        return result;
      }

      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        relPath = (relative.pathname || '').split('/');
        while (relPath.length && !(relative.host = relPath.shift()));
        if (!relative.host) relative.host = '';
        if (!relative.hostname) relative.hostname = '';
        if (relPath[0] !== '') relPath.unshift('');
        if (relPath.length < 2) relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      // to support http.request
      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }

    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
        relative.host ||
        relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
        (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];
    relPath = relative.pathname && relative.pathname.split('/') || [];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
      result.hostname = '';
      result.port = null;
      if (result.host) {
        if (srcPath[0] === '') srcPath[0] = result.host;
        else srcPath.unshift(result.host);
      }
      result.host = '';
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === '') relPath[0] = relative.host;
          else relPath.unshift(relative.host);
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }
    var authInHost;
    if (isRelAbs) {
      // it's absolute.
      result.host = (relative.host || relative.host === '') ?
        relative.host : result.host;
      result.hostname = (relative.hostname || relative.hostname === '') ?
        relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
      // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift();
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        authInHost = result.host && result.host.indexOf('@') > 0 ?
          result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      //to support http.request
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
          (result.search ? result.search : '');
      }
      result.href = result.format();
      return result;
    }

    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null;
      //to support http.request
      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }

    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];
      if (last === '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }

    if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }

    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
      srcPath.push('');
    }

    var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

    // put the host back
    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' :
        srcPath.length ? srcPath.shift() : '';
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      authInHost = result.host && result.host.indexOf('@') > 0 ?
        result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    mustEndAbs = mustEndAbs || (result.host && srcPath.length);

    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }

    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    }

    //to support request.http
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
        (result.search ? result.search : '');
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };

  Url.prototype.parseHost = function() {
    return parseHost(this);
  };

  function parseHost(self) {
    var host = self.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        self.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) self.hostname = host;
  }

  var url$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    'default': url,
    Url: Url
  });

  var URL = /*@__PURE__*/getAugmentedNamespace(url$1);

  var qs = /*@__PURE__*/getAugmentedNamespace(qs$2);

  const MongoParseError = error$2.MongoParseError;

  const emitWarningOnce$2 = require$$1$1.emitWarningOnce;

  /**
   * The following regular expression validates a connection string and breaks the
   * provide string into the following capture groups: [protocol, username, password, hosts]
   */
  const HOSTS_RX = /(mongodb(?:\+srv|)):\/\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\/|)(.*)/;

  // Options that reference file paths should not be parsed
  const FILE_PATH_OPTIONS = new Set(
    ['sslCA', 'sslCert', 'sslKey', 'tlsCAFile', 'tlsCertificateKeyFile'].map(key => key.toLowerCase())
  );

  /**
   * Determines whether a provided address matches the provided parent domain in order
   * to avoid certain attack vectors.
   *
   * @param {String} srvAddress The address to check against a domain
   * @param {String} parentDomain The domain to check the provided address against
   * @return {Boolean} Whether the provided address matches the parent domain
   */
  function matchesParentDomain(srvAddress, parentDomain) {
    const regex = /^.*?\./;
    const srv = `.${srvAddress.replace(regex, '')}`;
    const parent = `.${parentDomain.replace(regex, '')}`;
    return srv.endsWith(parent);
  }

  /**
   * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal
   * connection string.
   *
   * @param {string} uri The connection string to parse
   * @param {object} options Optional user provided connection string options
   * @param {function} callback
   */
  function parseSrvConnectionString(uri, options, callback) {
    const result = URL.parse(uri, true);

    if (options.directConnection || options.directconnection) {
      return callback(new MongoParseError('directConnection not supported with SRV URI'));
    }

    if (result.hostname.split('.').length < 3) {
      return callback(new MongoParseError('URI does not have hostname, domain name and tld'));
    }

    result.domainLength = result.hostname.split('.').length;
    if (result.pathname && result.pathname.match(',')) {
      return callback(new MongoParseError('Invalid URI, cannot contain multiple hostnames'));
    }

    if (result.port) {
      return callback(new MongoParseError(`Ports not accepted with '${PROTOCOL_MONGODB_SRV}' URIs`));
    }

    // Resolve the SRV record and use the result as the list of hosts to connect to.
    const lookupAddress = result.host;
    crypto$1.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {
      if (err) return callback(err);

      if (addresses.length === 0) {
        return callback(new MongoParseError('No addresses found at host'));
      }

      for (let i = 0; i < addresses.length; i++) {
        if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {
          return callback(
            new MongoParseError('Server record does not share hostname with parent URI')
          );
        }
      }

      // Convert the original URL to a non-SRV URL.
      result.protocol = 'mongodb';
      result.host = addresses.map(address => `${address.name}:${address.port}`).join(',');

      // Default to SSL true if it's not specified.
      if (
        !('ssl' in options) &&
        (!result.search || !('ssl' in result.query) || result.query.ssl === null)
      ) {
        result.query.ssl = true;
      }

      // Resolve TXT record and add options from there if they exist.
      crypto$1.resolveTxt(lookupAddress, (err, record) => {
        if (err) {
          if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {
            return callback(err);
          }
          record = null;
        }

        if (record) {
          if (record.length > 1) {
            return callback(new MongoParseError('Multiple text records not allowed'));
          }

          record = qs.parse(record[0].join(''));
          if (Object.keys(record).some(key => key !== 'authSource' && key !== 'replicaSet')) {
            return callback(
              new MongoParseError('Text record must only set `authSource` or `replicaSet`')
            );
          }

          result.query = Object.assign({}, record, result.query);
        }

        // Set completed options back into the URL object.
        result.search = qs.stringify(result.query);

        const finalString = URL.format(result);
        parseConnectionString(finalString, options, (err, ret) => {
          if (err) {
            callback(err);
            return;
          }

          callback(null, Object.assign({}, ret, { srvHost: lookupAddress }));
        });
      });
    });
  }

  /**
   * Parses a query string item according to the connection string spec
   *
   * @param {string} key The key for the parsed value
   * @param {Array|String} value The value to parse
   * @return {Array|Object|String} The parsed value
   */
  function parseQueryStringItemValue(key, value) {
    if (Array.isArray(value)) {
      // deduplicate and simplify arrays
      value = value.filter((v, idx) => value.indexOf(v) === idx);
      if (value.length === 1) value = value[0];
    } else if (value.indexOf(':') > 0) {
      value = value.split(',').reduce((result, pair) => {
        const parts = pair.split(':');
        result[parts[0]] = parseQueryStringItemValue(key, parts[1]);
        return result;
      }, {});
    } else if (value.indexOf(',') > 0) {
      value = value.split(',').map(v => {
        return parseQueryStringItemValue(key, v);
      });
    } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {
      value = value.toLowerCase() === 'true';
    } else if (!Number.isNaN(value) && !STRING_OPTIONS.has(key)) {
      const numericValue = parseFloat(value);
      if (!Number.isNaN(numericValue)) {
        value = parseFloat(value);
      }
    }

    return value;
  }

  // Options that are known boolean types
  const BOOLEAN_OPTIONS = new Set([
    'slaveok',
    'slave_ok',
    'sslvalidate',
    'fsync',
    'safe',
    'retrywrites',
    'j'
  ]);

  // Known string options, only used to bypass Number coercion in `parseQueryStringItemValue`
  const STRING_OPTIONS = new Set(['authsource', 'replicaset']);

  // Supported text representations of auth mechanisms
  // NOTE: this list exists in native already, if it is merged here we should deduplicate
  const AUTH_MECHANISMS = new Set([
    'GSSAPI',
    'MONGODB-AWS',
    'MONGODB-X509',
    'MONGODB-CR',
    'DEFAULT',
    'SCRAM-SHA-1',
    'SCRAM-SHA-256',
    'PLAIN'
  ]);

  // Lookup table used to translate normalized (lower-cased) forms of connection string
  // options to their expected camelCase version
  const CASE_TRANSLATION = {
    replicaset: 'replicaSet',
    connecttimeoutms: 'connectTimeoutMS',
    sockettimeoutms: 'socketTimeoutMS',
    maxpoolsize: 'maxPoolSize',
    minpoolsize: 'minPoolSize',
    maxidletimems: 'maxIdleTimeMS',
    waitqueuemultiple: 'waitQueueMultiple',
    waitqueuetimeoutms: 'waitQueueTimeoutMS',
    wtimeoutms: 'wtimeoutMS',
    readconcern: 'readConcern',
    readconcernlevel: 'readConcernLevel',
    readpreference: 'readPreference',
    maxstalenessseconds: 'maxStalenessSeconds',
    readpreferencetags: 'readPreferenceTags',
    authsource: 'authSource',
    authmechanism: 'authMechanism',
    authmechanismproperties: 'authMechanismProperties',
    gssapiservicename: 'gssapiServiceName',
    localthresholdms: 'localThresholdMS',
    serverselectiontimeoutms: 'serverSelectionTimeoutMS',
    serverselectiontryonce: 'serverSelectionTryOnce',
    heartbeatfrequencyms: 'heartbeatFrequencyMS',
    retrywrites: 'retryWrites',
    uuidrepresentation: 'uuidRepresentation',
    zlibcompressionlevel: 'zlibCompressionLevel',
    tlsallowinvalidcertificates: 'tlsAllowInvalidCertificates',
    tlsallowinvalidhostnames: 'tlsAllowInvalidHostnames',
    tlsinsecure: 'tlsInsecure',
    tlscafile: 'tlsCAFile',
    tlscertificatekeyfile: 'tlsCertificateKeyFile',
    tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',
    wtimeout: 'wTimeoutMS',
    j: 'journal',
    directconnection: 'directConnection'
  };

  /**
   * Sets the value for `key`, allowing for any required translation
   *
   * @param {object} obj The object to set the key on
   * @param {string} key The key to set the value for
   * @param {*} value The value to set
   * @param {object} options The options used for option parsing
   */
  function applyConnectionStringOption(obj, key, value, options) {
    // simple key translation
    if (key === 'journal') {
      key = 'j';
    } else if (key === 'wtimeoutms') {
      key = 'wtimeout';
    }

    // more complicated translation
    if (BOOLEAN_OPTIONS.has(key)) {
      value = value === 'true' || value === true;
    } else if (key === 'appname') {
      value = decodeURIComponent(value);
    } else if (key === 'readconcernlevel') {
      obj['readConcernLevel'] = value;
      key = 'readconcern';
      value = { level: value };
    }

    // simple validation
    if (key === 'compressors') {
      value = Array.isArray(value) ? value : [value];

      if (!value.every(c => c === 'snappy' || c === 'zlib')) {
        throw new MongoParseError(
          'Value for `compressors` must be at least one of: `snappy`, `zlib`'
        );
      }
    }

    if (key === 'authmechanism' && !AUTH_MECHANISMS.has(value)) {
      throw new MongoParseError(
        `Value for authMechanism must be one of: ${Array.from(AUTH_MECHANISMS).join(
        ', '
      )}, found: ${value}`
      );
    }

    if (key === 'readpreference' && !read_preference.isValid(value)) {
      throw new MongoParseError(
        'Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`'
      );
    }

    if (key === 'zlibcompressionlevel' && (value < -1 || value > 9)) {
      throw new MongoParseError('zlibCompressionLevel must be an integer between -1 and 9');
    }

    // special cases
    if (key === 'compressors' || key === 'zlibcompressionlevel') {
      obj.compression = obj.compression || {};
      obj = obj.compression;
    }

    if (key === 'authmechanismproperties') {
      if (typeof value.SERVICE_NAME === 'string') obj.gssapiServiceName = value.SERVICE_NAME;
      if (typeof value.SERVICE_REALM === 'string') obj.gssapiServiceRealm = value.SERVICE_REALM;
      if (typeof value.CANONICALIZE_HOST_NAME !== 'undefined') {
        obj.gssapiCanonicalizeHostName = value.CANONICALIZE_HOST_NAME;
      }
    }

    if (key === 'readpreferencetags') {
      value = Array.isArray(value) ? splitArrayOfMultipleReadPreferenceTags(value) : [value];
    }

    // set the actual value
    if (options.caseTranslate && CASE_TRANSLATION[key]) {
      obj[CASE_TRANSLATION[key]] = value;
      return;
    }

    obj[key] = value;
  }

  const USERNAME_REQUIRED_MECHANISMS = new Set([
    'GSSAPI',
    'MONGODB-CR',
    'PLAIN',
    'SCRAM-SHA-1',
    'SCRAM-SHA-256'
  ]);

  function splitArrayOfMultipleReadPreferenceTags(value) {
    const parsedTags = [];

    for (let i = 0; i < value.length; i++) {
      parsedTags[i] = {};
      value[i].split(',').forEach(individualTag => {
        const splitTag = individualTag.split(':');
        parsedTags[i][splitTag[0]] = splitTag[1];
      });
    }

    return parsedTags;
  }

  /**
   * Modifies the parsed connection string object taking into account expectations we
   * have for authentication-related options.
   *
   * @param {object} parsed The parsed connection string result
   * @return The parsed connection string result possibly modified for auth expectations
   */
  function applyAuthExpectations(parsed) {
    if (parsed.options == null) {
      return;
    }

    const options = parsed.options;
    const authSource = options.authsource || options.authSource;
    if (authSource != null) {
      parsed.auth = Object.assign({}, parsed.auth, { db: authSource });
    }

    const authMechanism = options.authmechanism || options.authMechanism;
    if (authMechanism != null) {
      if (
        USERNAME_REQUIRED_MECHANISMS.has(authMechanism) &&
        (!parsed.auth || parsed.auth.username == null)
      ) {
        throw new MongoParseError(`Username required for mechanism \`${authMechanism}\``);
      }

      if (authMechanism === 'GSSAPI') {
        if (authSource != null && authSource !== '$external') {
          throw new MongoParseError(
            `Invalid source \`${authSource}\` for mechanism \`${authMechanism}\` specified.`
          );
        }

        parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });
      }

      if (authMechanism === 'MONGODB-AWS') {
        if (authSource != null && authSource !== '$external') {
          throw new MongoParseError(
            `Invalid source \`${authSource}\` for mechanism \`${authMechanism}\` specified.`
          );
        }

        parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });
      }

      if (authMechanism === 'MONGODB-X509') {
        if (parsed.auth && parsed.auth.password != null) {
          throw new MongoParseError(`Password not allowed for mechanism \`${authMechanism}\``);
        }

        if (authSource != null && authSource !== '$external') {
          throw new MongoParseError(
            `Invalid source \`${authSource}\` for mechanism \`${authMechanism}\` specified.`
          );
        }

        parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });
      }

      if (authMechanism === 'PLAIN') {
        if (parsed.auth && parsed.auth.db == null) {
          parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });
        }
      }
    }

    // default to `admin` if nothing else was resolved
    if (parsed.auth && parsed.auth.db == null) {
      parsed.auth = Object.assign({}, parsed.auth, { db: 'admin' });
    }

    return parsed;
  }

  /**
   * Parses a query string according the connection string spec.
   *
   * @param {String} query The query string to parse
   * @param {object} [options] The options used for options parsing
   * @return {Object|Error} The parsed query string as an object, or an error if one was encountered
   */
  function parseQueryString(query, options) {
    const result = {};
    let parsedQueryString = qs.parse(query);

    checkTLSOptions(parsedQueryString);

    for (const key in parsedQueryString) {
      const value = parsedQueryString[key];
      if (value === '' || value == null) {
        throw new MongoParseError('Incomplete key value pair for option');
      }

      const normalizedKey = key.toLowerCase();
      const parsedValue = FILE_PATH_OPTIONS.has(normalizedKey)
        ? value
        : parseQueryStringItemValue(normalizedKey, value);
      applyConnectionStringOption(result, normalizedKey, parsedValue, options);
    }

    // special cases for known deprecated options
    if (result.wtimeout && result.wtimeoutms) {
      delete result.wtimeout;
      emitWarningOnce$2('Unsupported option `wtimeout` specified');
    }

    return Object.keys(result).length ? result : null;
  }

  /// Adds support for modern `tls` variants of out `ssl` options
  function translateTLSOptions(queryString) {
    if (queryString.tls) {
      queryString.ssl = queryString.tls;
    }

    if (queryString.tlsInsecure) {
      queryString.checkServerIdentity = false;
      queryString.sslValidate = false;
    } else {
      Object.assign(queryString, {
        checkServerIdentity: queryString.tlsAllowInvalidHostnames ? false : true,
        sslValidate: queryString.tlsAllowInvalidCertificates ? false : true
      });
    }

    if (queryString.tlsCAFile) {
      queryString.ssl = true;
      queryString.sslCA = queryString.tlsCAFile;
    }

    if (queryString.tlsCertificateKeyFile) {
      queryString.ssl = true;
      if (queryString.tlsCertificateFile) {
        queryString.sslCert = queryString.tlsCertificateFile;
        queryString.sslKey = queryString.tlsCertificateKeyFile;
      } else {
        queryString.sslKey = queryString.tlsCertificateKeyFile;
        queryString.sslCert = queryString.tlsCertificateKeyFile;
      }
    }

    if (queryString.tlsCertificateKeyFilePassword) {
      queryString.ssl = true;
      queryString.sslPass = queryString.tlsCertificateKeyFilePassword;
    }

    return queryString;
  }

  /**
   * Checks a query string for invalid tls options according to the URI options spec.
   *
   * @param {string} queryString The query string to check
   * @throws {MongoParseError}
   */
  function checkTLSOptions(queryString) {
    const queryStringKeys = Object.keys(queryString);
    if (
      queryStringKeys.indexOf('tlsInsecure') !== -1 &&
      (queryStringKeys.indexOf('tlsAllowInvalidCertificates') !== -1 ||
        queryStringKeys.indexOf('tlsAllowInvalidHostnames') !== -1)
    ) {
      throw new MongoParseError(
        'The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.'
      );
    }

    const tlsValue = assertTlsOptionsAreEqual('tls', queryString, queryStringKeys);
    const sslValue = assertTlsOptionsAreEqual('ssl', queryString, queryStringKeys);

    if (tlsValue != null && sslValue != null) {
      if (tlsValue !== sslValue) {
        throw new MongoParseError('All values of `tls` and `ssl` must be the same.');
      }
    }
  }

  /**
   * Checks a query string to ensure all tls/ssl options are the same.
   *
   * @param {string} key The key (tls or ssl) to check
   * @param {string} queryString The query string to check
   * @throws {MongoParseError}
   * @return The value of the tls/ssl option
   */
  function assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {
    const queryStringHasTLSOption = queryStringKeys.indexOf(optionName) !== -1;

    let optionValue;
    if (Array.isArray(queryString[optionName])) {
      optionValue = queryString[optionName][0];
    } else {
      optionValue = queryString[optionName];
    }

    if (queryStringHasTLSOption) {
      if (Array.isArray(queryString[optionName])) {
        const firstValue = queryString[optionName][0];
        queryString[optionName].forEach(tlsValue => {
          if (tlsValue !== firstValue) {
            throw new MongoParseError(`All values of ${optionName} must be the same.`);
          }
        });
      }
    }

    return optionValue;
  }

  const PROTOCOL_MONGODB = 'mongodb';
  const PROTOCOL_MONGODB_SRV = 'mongodb+srv';
  const SUPPORTED_PROTOCOLS = [PROTOCOL_MONGODB, PROTOCOL_MONGODB_SRV];

  /**
   * Parses a MongoDB connection string
   *
   * @param {*} uri the MongoDB connection string to parse
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.caseTranslate] Whether the parser should translate options back into camelCase after normalization
   * @param {parseCallback} callback
   */
  function parseConnectionString(uri, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = Object.assign({}, { caseTranslate: true }, options);

    // Check for bad uris before we parse
    try {
      URL.parse(uri);
    } catch (e) {
      return callback(new MongoParseError('URI malformed, cannot be parsed'));
    }

    const cap = uri.match(HOSTS_RX);
    if (!cap) {
      return callback(new MongoParseError('Invalid connection string'));
    }

    const protocol = cap[1];
    if (SUPPORTED_PROTOCOLS.indexOf(protocol) === -1) {
      return callback(new MongoParseError('Invalid protocol provided'));
    }

    const dbAndQuery = cap[4].split('?');
    const db = dbAndQuery.length > 0 ? dbAndQuery[0] : null;
    const query = dbAndQuery.length > 1 ? dbAndQuery[1] : null;

    let parsedOptions;
    try {
      parsedOptions = parseQueryString(query, options);
    } catch (parseError) {
      return callback(parseError);
    }

    parsedOptions = Object.assign({}, parsedOptions, options);

    if (protocol === PROTOCOL_MONGODB_SRV) {
      return parseSrvConnectionString(uri, parsedOptions, callback);
    }

    const auth = { username: null, password: null, db: db && db !== '' ? qs.unescape(db) : null };
    if (parsedOptions.auth) {
      // maintain support for legacy options passed into `MongoClient`
      if (parsedOptions.auth.username) auth.username = parsedOptions.auth.username;
      if (parsedOptions.auth.user) auth.username = parsedOptions.auth.user;
      if (parsedOptions.auth.password) auth.password = parsedOptions.auth.password;
    } else {
      if (parsedOptions.username) auth.username = parsedOptions.username;
      if (parsedOptions.user) auth.username = parsedOptions.user;
      if (parsedOptions.password) auth.password = parsedOptions.password;
    }

    if (cap[4].split('?')[0].indexOf('@') !== -1) {
      return callback(new MongoParseError('Unescaped slash in userinfo section'));
    }

    const authorityParts = cap[3].split('@');
    if (authorityParts.length > 2) {
      return callback(new MongoParseError('Unescaped at-sign in authority section'));
    }

    if (authorityParts[0] == null || authorityParts[0] === '') {
      return callback(new MongoParseError('No username provided in authority section'));
    }

    if (authorityParts.length > 1) {
      const authParts = authorityParts.shift().split(':');
      if (authParts.length > 2) {
        return callback(new MongoParseError('Unescaped colon in authority section'));
      }

      if (authParts[0] === '') {
        return callback(new MongoParseError('Invalid empty username provided'));
      }

      if (!auth.username) auth.username = qs.unescape(authParts[0]);
      if (!auth.password) auth.password = authParts[1] ? qs.unescape(authParts[1]) : null;
    }

    let hostParsingError = null;
    const hosts = authorityParts
      .shift()
      .split(',')
      .map(host => {
        let parsedHost = URL.parse(`mongodb://${host}`);
        if (parsedHost.path === '/:') {
          hostParsingError = new MongoParseError('Double colon in host identifier');
          return null;
        }

        // heuristically determine if we're working with a domain socket
        if (host.match(/\.sock/)) {
          parsedHost.hostname = qs.unescape(host);
          parsedHost.port = null;
        }

        if (Number.isNaN(parsedHost.port)) {
          hostParsingError = new MongoParseError('Invalid port (non-numeric string)');
          return;
        }

        const result = {
          host: parsedHost.hostname,
          port: parsedHost.port ? parseInt(parsedHost.port) : 27017
        };

        if (result.port === 0) {
          hostParsingError = new MongoParseError('Invalid port (zero) with hostname');
          return;
        }

        if (result.port > 65535) {
          hostParsingError = new MongoParseError('Invalid port (larger than 65535) with hostname');
          return;
        }

        if (result.port < 0) {
          hostParsingError = new MongoParseError('Invalid port (negative number)');
          return;
        }

        return result;
      })
      .filter(host => !!host);

    if (hostParsingError) {
      return callback(hostParsingError);
    }

    if (hosts.length === 0 || hosts[0].host === '' || hosts[0].host === null) {
      return callback(new MongoParseError('No hostname or hostnames provided in connection string'));
    }

    const directConnection = !!parsedOptions.directConnection;
    if (directConnection && hosts.length !== 1) {
      // If the option is set to true, the driver MUST validate that there is exactly one host given
      // in the host list in the URI, and fail client creation otherwise.
      return callback(new MongoParseError('directConnection option requires exactly one host'));
    }

    // NOTE: this behavior will go away in v4.0, we will always auto discover there
    if (
      parsedOptions.directConnection == null &&
      hosts.length === 1 &&
      parsedOptions.replicaSet == null
    ) {
      parsedOptions.directConnection = true;
    }

    const result = {
      hosts: hosts,
      auth: auth.db || auth.username ? auth : null,
      options: Object.keys(parsedOptions).length ? parsedOptions : null
    };

    if (result.auth && result.auth.db) {
      result.defaultDatabase = result.auth.db;
    } else {
      result.defaultDatabase = 'test';
    }

    // support modern `tls` variants to SSL options
    result.options = translateTLSOptions(result.options);

    try {
      applyAuthExpectations(result);
    } catch (authError) {
      return callback(authError);
    }

    callback(null, result);
  }

  var uri_parser = parseConnectionString;

  var require$$5$1 = /*@__PURE__*/getAugmentedNamespace(replset$1);

  var require$$11 = /*@__PURE__*/getAugmentedNamespace(topology);

  var require$$13 = /*@__PURE__*/getAugmentedNamespace(mongo_credentials);

  let BSON$2 = bson$1;

  const EJSON = require$$2.retrieveEJSON();

  try {
    // Attempt to grab the native BSON parser
    const BSONNative = require_optional('bson-ext');
    // If we got the native parser, use it instead of the
    // Javascript one
    if (BSONNative) {
      BSON$2 = BSONNative;
    }
  } catch (err) {} // eslint-disable-line

  var core = {
    // Errors
    MongoError: error$2.MongoError,
    MongoNetworkError: error$2.MongoNetworkError,
    MongoParseError: error$2.MongoParseError,
    MongoTimeoutError: error$2.MongoTimeoutError,
    MongoServerSelectionError: error$2.MongoServerSelectionError,
    MongoWriteConcernError: error$2.MongoWriteConcernError,
    // Core
    Connection: connection,
    Server: server$1,
    ReplSet: require$$5$1,
    Mongos: mongos$1,
    Logger: require$$7$1,
    Cursor: require$$1.CoreCursor,
    ReadPreference: read_preference,
    Sessions: sessions,
    BSON: BSON$2,
    EJSON: EJSON,
    Topology: require$$11.Topology,
    // Raw operations
    Query: commands.Query,
    // Auth mechanisms
    MongoCredentials: require$$13.MongoCredentials,
    defaultAuthProviders: defaultAuthProviders_1.defaultAuthProviders,
    MongoCR: mongocr,
    X509: x509,
    Plain: plain,
    GSSAPI: require$$18,
    ScramSHA1: scram.ScramSHA1,
    ScramSHA256: scram.ScramSHA256,
    // Utilities
    parseConnectionString: uri_parser
  };

  const EventEmitter$2 = require$$0$1.EventEmitter;

  class Instrumentation extends EventEmitter$2 {
    constructor() {
      super();
    }

    instrument(MongoClient, callback) {
      // store a reference to the original functions
      this.$MongoClient = MongoClient;
      const $prototypeConnect = (this.$prototypeConnect = MongoClient.prototype.connect);

      const instrumentation = this;
      MongoClient.prototype.connect = function(callback) {
        this.s.options.monitorCommands = true;
        this.on('commandStarted', event => instrumentation.emit('started', event));
        this.on('commandSucceeded', event => instrumentation.emit('succeeded', event));
        this.on('commandFailed', event => instrumentation.emit('failed', event));
        return $prototypeConnect.call(this, callback);
      };

      if (typeof callback === 'function') callback(null, this);
    }

    uninstrument() {
      this.$MongoClient.prototype.connect = this.$prototypeConnect;
    }
  }

  var apm = Instrumentation;

  /**
   * Custom implementation of a double ended queue.
   */
  function Denque(array, options) {
    var options = options || {};

    this._head = 0;
    this._tail = 0;
    this._capacity = options.capacity;
    this._capacityMask = 0x3;
    this._list = new Array(4);
    if (Array.isArray(array)) {
      this._fromArray(array);
    }
  }

  /**
   * -------------
   *  PUBLIC API
   * -------------
   */

  /**
   * Returns the item at the specified index from the list.
   * 0 is the first element, 1 is the second, and so on...
   * Elements at negative values are that many from the end: -1 is one before the end
   * (the last element), -2 is two before the end (one before last), etc.
   * @param index
   * @returns {*}
   */
  Denque.prototype.peekAt = function peekAt(index) {
    var i = index;
    // expect a number or return undefined
    if ((i !== (i | 0))) {
      return void 0;
    }
    var len = this.size();
    if (i >= len || i < -len) return undefined;
    if (i < 0) i += len;
    i = (this._head + i) & this._capacityMask;
    return this._list[i];
  };

  /**
   * Alias for peekAt()
   * @param i
   * @returns {*}
   */
  Denque.prototype.get = function get(i) {
    return this.peekAt(i);
  };

  /**
   * Returns the first item in the list without removing it.
   * @returns {*}
   */
  Denque.prototype.peek = function peek() {
    if (this._head === this._tail) return undefined;
    return this._list[this._head];
  };

  /**
   * Alias for peek()
   * @returns {*}
   */
  Denque.prototype.peekFront = function peekFront() {
    return this.peek();
  };

  /**
   * Returns the item that is at the back of the queue without removing it.
   * Uses peekAt(-1)
   */
  Denque.prototype.peekBack = function peekBack() {
    return this.peekAt(-1);
  };

  /**
   * Returns the current length of the queue
   * @return {Number}
   */
  Object.defineProperty(Denque.prototype, 'length', {
    get: function length() {
      return this.size();
    }
  });

  /**
   * Return the number of items on the list, or 0 if empty.
   * @returns {number}
   */
  Denque.prototype.size = function size() {
    if (this._head === this._tail) return 0;
    if (this._head < this._tail) return this._tail - this._head;
    else return this._capacityMask + 1 - (this._head - this._tail);
  };

  /**
   * Add an item at the beginning of the list.
   * @param item
   */
  Denque.prototype.unshift = function unshift(item) {
    if (item === undefined) return this.size();
    var len = this._list.length;
    this._head = (this._head - 1 + len) & this._capacityMask;
    this._list[this._head] = item;
    if (this._tail === this._head) this._growArray();
    if (this._capacity && this.size() > this._capacity) this.pop();
    if (this._head < this._tail) return this._tail - this._head;
    else return this._capacityMask + 1 - (this._head - this._tail);
  };

  /**
   * Remove and return the first item on the list,
   * Returns undefined if the list is empty.
   * @returns {*}
   */
  Denque.prototype.shift = function shift() {
    var head = this._head;
    if (head === this._tail) return undefined;
    var item = this._list[head];
    this._list[head] = undefined;
    this._head = (head + 1) & this._capacityMask;
    if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();
    return item;
  };

  /**
   * Add an item to the bottom of the list.
   * @param item
   */
  Denque.prototype.push = function push(item) {
    if (item === undefined) return this.size();
    var tail = this._tail;
    this._list[tail] = item;
    this._tail = (tail + 1) & this._capacityMask;
    if (this._tail === this._head) {
      this._growArray();
    }
    if (this._capacity && this.size() > this._capacity) {
      this.shift();
    }
    if (this._head < this._tail) return this._tail - this._head;
    else return this._capacityMask + 1 - (this._head - this._tail);
  };

  /**
   * Remove and return the last item on the list.
   * Returns undefined if the list is empty.
   * @returns {*}
   */
  Denque.prototype.pop = function pop() {
    var tail = this._tail;
    if (tail === this._head) return undefined;
    var len = this._list.length;
    this._tail = (tail - 1 + len) & this._capacityMask;
    var item = this._list[this._tail];
    this._list[this._tail] = undefined;
    if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();
    return item;
  };

  /**
   * Remove and return the item at the specified index from the list.
   * Returns undefined if the list is empty.
   * @param index
   * @returns {*}
   */
  Denque.prototype.removeOne = function removeOne(index) {
    var i = index;
    // expect a number or return undefined
    if ((i !== (i | 0))) {
      return void 0;
    }
    if (this._head === this._tail) return void 0;
    var size = this.size();
    var len = this._list.length;
    if (i >= size || i < -size) return void 0;
    if (i < 0) i += size;
    i = (this._head + i) & this._capacityMask;
    var item = this._list[i];
    var k;
    if (index < size / 2) {
      for (k = index; k > 0; k--) {
        this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];
      }
      this._list[i] = void 0;
      this._head = (this._head + 1 + len) & this._capacityMask;
    } else {
      for (k = size - 1 - index; k > 0; k--) {
        this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];
      }
      this._list[i] = void 0;
      this._tail = (this._tail - 1 + len) & this._capacityMask;
    }
    return item;
  };

  /**
   * Remove number of items from the specified index from the list.
   * Returns array of removed items.
   * Returns undefined if the list is empty.
   * @param index
   * @param count
   * @returns {array}
   */
  Denque.prototype.remove = function remove(index, count) {
    var i = index;
    var removed;
    var del_count = count;
    // expect a number or return undefined
    if ((i !== (i | 0))) {
      return void 0;
    }
    if (this._head === this._tail) return void 0;
    var size = this.size();
    var len = this._list.length;
    if (i >= size || i < -size || count < 1) return void 0;
    if (i < 0) i += size;
    if (count === 1 || !count) {
      removed = new Array(1);
      removed[0] = this.removeOne(i);
      return removed;
    }
    if (i === 0 && i + count >= size) {
      removed = this.toArray();
      this.clear();
      return removed;
    }
    if (i + count > size) count = size - i;
    var k;
    removed = new Array(count);
    for (k = 0; k < count; k++) {
      removed[k] = this._list[(this._head + i + k) & this._capacityMask];
    }
    i = (this._head + i) & this._capacityMask;
    if (index + count === size) {
      this._tail = (this._tail - count + len) & this._capacityMask;
      for (k = count; k > 0; k--) {
        this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
      }
      return removed;
    }
    if (index === 0) {
      this._head = (this._head + count + len) & this._capacityMask;
      for (k = count - 1; k > 0; k--) {
        this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
      }
      return removed;
    }
    if (i < size / 2) {
      this._head = (this._head + index + count + len) & this._capacityMask;
      for (k = index; k > 0; k--) {
        this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);
      }
      i = (this._head - 1 + len) & this._capacityMask;
      while (del_count > 0) {
        this._list[i = (i - 1 + len) & this._capacityMask] = void 0;
        del_count--;
      }
      if (index < 0) this._tail = i;
    } else {
      this._tail = i;
      i = (i + count + len) & this._capacityMask;
      for (k = size - (count + index); k > 0; k--) {
        this.push(this._list[i++]);
      }
      i = this._tail;
      while (del_count > 0) {
        this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
        del_count--;
      }
    }
    if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();
    return removed;
  };

  /**
   * Native splice implementation.
   * Remove number of items from the specified index from the list and/or add new elements.
   * Returns array of removed items or empty array if count == 0.
   * Returns undefined if the list is empty.
   *
   * @param index
   * @param count
   * @param {...*} [elements]
   * @returns {array}
   */
  Denque.prototype.splice = function splice(index, count) {
    var i = index;
    // expect a number or return undefined
    if ((i !== (i | 0))) {
      return void 0;
    }
    var size = this.size();
    if (i < 0) i += size;
    if (i > size) return void 0;
    if (arguments.length > 2) {
      var k;
      var temp;
      var removed;
      var arg_len = arguments.length;
      var len = this._list.length;
      var arguments_index = 2;
      if (!size || i < size / 2) {
        temp = new Array(i);
        for (k = 0; k < i; k++) {
          temp[k] = this._list[(this._head + k) & this._capacityMask];
        }
        if (count === 0) {
          removed = [];
          if (i > 0) {
            this._head = (this._head + i + len) & this._capacityMask;
          }
        } else {
          removed = this.remove(i, count);
          this._head = (this._head + i + len) & this._capacityMask;
        }
        while (arg_len > arguments_index) {
          this.unshift(arguments[--arg_len]);
        }
        for (k = i; k > 0; k--) {
          this.unshift(temp[k - 1]);
        }
      } else {
        temp = new Array(size - (i + count));
        var leng = temp.length;
        for (k = 0; k < leng; k++) {
          temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];
        }
        if (count === 0) {
          removed = [];
          if (i != size) {
            this._tail = (this._head + i + len) & this._capacityMask;
          }
        } else {
          removed = this.remove(i, count);
          this._tail = (this._tail - leng + len) & this._capacityMask;
        }
        while (arguments_index < arg_len) {
          this.push(arguments[arguments_index++]);
        }
        for (k = 0; k < leng; k++) {
          this.push(temp[k]);
        }
      }
      return removed;
    } else {
      return this.remove(i, count);
    }
  };

  /**
   * Soft clear - does not reset capacity.
   */
  Denque.prototype.clear = function clear() {
    this._head = 0;
    this._tail = 0;
  };

  /**
   * Returns true or false whether the list is empty.
   * @returns {boolean}
   */
  Denque.prototype.isEmpty = function isEmpty() {
    return this._head === this._tail;
  };

  /**
   * Returns an array of all queue items.
   * @returns {Array}
   */
  Denque.prototype.toArray = function toArray() {
    return this._copyArray(false);
  };

  /**
   * -------------
   *   INTERNALS
   * -------------
   */

  /**
   * Fills the queue with items from an array
   * For use in the constructor
   * @param array
   * @private
   */
  Denque.prototype._fromArray = function _fromArray(array) {
    for (var i = 0; i < array.length; i++) this.push(array[i]);
  };

  /**
   *
   * @param fullCopy
   * @returns {Array}
   * @private
   */
  Denque.prototype._copyArray = function _copyArray(fullCopy) {
    var newArray = [];
    var list = this._list;
    var len = list.length;
    var i;
    if (fullCopy || this._head > this._tail) {
      for (i = this._head; i < len; i++) newArray.push(list[i]);
      for (i = 0; i < this._tail; i++) newArray.push(list[i]);
    } else {
      for (i = this._head; i < this._tail; i++) newArray.push(list[i]);
    }
    return newArray;
  };

  /**
   * Grows the internal list array.
   * @private
   */
  Denque.prototype._growArray = function _growArray() {
    if (this._head) {
      // copy existing data, head to end, then beginning to tail.
      this._list = this._copyArray(true);
      this._head = 0;
    }

    // head is at 0 and array is now full, safe to extend
    this._tail = this._list.length;

    this._list.length *= 2;
    this._capacityMask = (this._capacityMask << 1) | 1;
  };

  /**
   * Shrinks the internal list array.
   * @private
   */
  Denque.prototype._shrinkArray = function _shrinkArray() {
    this._list.length >>>= 1;
    this._capacityMask >>>= 1;
  };


  var denque = Denque;

  const MongoNetworkError = core.MongoNetworkError;

  // From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error
  const GET_MORE_RESUMABLE_CODES = new Set([
    6, // HostUnreachable
    7, // HostNotFound
    89, // NetworkTimeout
    91, // ShutdownInProgress
    189, // PrimarySteppedDown
    262, // ExceededTimeLimit
    9001, // SocketException
    10107, // NotMaster
    11600, // InterruptedAtShutdown
    11602, // InterruptedDueToReplStateChange
    13435, // NotMasterNoSlaveOk
    13436, // NotMasterOrSecondary
    63, // StaleShardVersion
    150, // StaleEpoch
    13388, // StaleConfig
    234, // RetryChangeStream
    133, // FailedToSatisfyReadPreference
    43 // CursorNotFound
  ]);

  function isResumableError$1(error, wireVersion) {
    if (error instanceof MongoNetworkError) {
      return true;
    }

    if (wireVersion >= 9) {
      // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable
      if (error.code === 43) {
        return true;
      }
      return error.hasErrorLabel('ResumableChangeStreamError');
    }

    return GET_MORE_RESUMABLE_CODES.has(error.code);
  }

  var error = { GET_MORE_RESUMABLE_CODES, isResumableError: isResumableError$1 };

  const Explain$1 = explain.Explain;
  const MongoError$p = error$2.MongoError;

  const Aspect$d = {
    READ_OPERATION: Symbol('READ_OPERATION'),
    WRITE_OPERATION: Symbol('WRITE_OPERATION'),
    RETRYABLE: Symbol('RETRYABLE'),
    EXECUTE_WITH_SELECTION: Symbol('EXECUTE_WITH_SELECTION'),
    NO_INHERIT_OPTIONS: Symbol('NO_INHERIT_OPTIONS'),
    EXPLAINABLE: Symbol('EXPLAINABLE')
  };

  /**
   * This class acts as a parent class for any operation and is responsible for setting this.options,
   * as well as setting and getting a session.
   * Additionally, this class implements `hasAspect`, which determines whether an operation has
   * a specific aspect.
   */
  class OperationBase$8 {
    constructor(options) {
      this.options = Object.assign({}, options);

      if (this.hasAspect(Aspect$d.EXPLAINABLE)) {
        this.explain = Explain$1.fromOptions(options);
      } else if (this.options.explain !== undefined) {
        throw new MongoError$p(`explain is not supported on this command`);
      }
    }

    hasAspect(aspect) {
      if (this.constructor.aspects == null) {
        return false;
      }
      return this.constructor.aspects.has(aspect);
    }

    set session(session) {
      Object.assign(this.options, { session });
    }

    get session() {
      return this.options.session;
    }

    clearSession() {
      delete this.options.session;
    }

    get canRetryRead() {
      return true;
    }

    execute() {
      throw new TypeError('`execute` must be implemented for OperationBase subclasses');
    }
  }

  function defineAspects$9(operation, aspects) {
    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {
      aspects = [aspects];
    }
    aspects = new Set(aspects);
    Object.defineProperty(operation, 'aspects', {
      value: aspects,
      writable: false
    });
    return aspects;
  }

  var operation = {
    Aspect: Aspect$d,
    defineAspects: defineAspects$9,
    OperationBase: OperationBase$8
  };

  const maybePromise$3 = require$$1$1.maybePromise;
  const MongoError$o = error$2.MongoError;
  const Aspect$c = operation.Aspect;
  const OperationBase$7 = operation.OperationBase;

  const isRetryableError = error$2.isRetryableError;
  const maxWireVersion$7 = require$$2.maxWireVersion;
  const isUnifiedTopology = require$$2.isUnifiedTopology;

  /**
   * Executes the given operation with provided arguments.
   *
   * This method reduces large amounts of duplication in the entire codebase by providing
   * a single point for determining whether callbacks or promises should be used. Additionally
   * it allows for a single point of entry to provide features such as implicit sessions, which
   * are required by the Driver Sessions specification in the event that a ClientSession is
   * not provided
   *
   * @param {object} topology The topology to execute this operation on
   * @param {Operation} operation The operation to execute
   * @param {function} callback The command result callback
   */
  function executeOperation$1(topology, operation, cb) {
    if (topology == null) {
      throw new TypeError('This method requires a valid topology instance');
    }

    if (!(operation instanceof OperationBase$7)) {
      throw new TypeError('This method requires a valid operation instance');
    }

    return maybePromise$3(topology, cb, callback => {
      if (isUnifiedTopology(topology) && topology.shouldCheckForSessionSupport()) {
        // Recursive call to executeOperation after a server selection
        return selectServerForSessionSupport(topology, operation, callback);
      }

      // The driver sessions spec mandates that we implicitly create sessions for operations
      // that are not explicitly provided with a session.
      let session, owner;
      if (topology.hasSessionSupport()) {
        if (operation.session == null) {
          owner = Symbol();
          session = topology.startSession({ owner });
          operation.session = session;
        } else if (operation.session.hasEnded) {
          return callback(new MongoError$o('Use of expired sessions is not permitted'));
        }
      } else if (operation.session) {
        // If the user passed an explicit session and we are still, after server selection,
        // trying to run against a topology that doesn't support sessions we error out.
        return callback(new MongoError$o('Current topology does not support sessions'));
      }

      function executeCallback(err, result) {
        if (session && session.owner === owner) {
          session.endSession();
          if (operation.session === session) {
            operation.clearSession();
          }
        }

        callback(err, result);
      }

      try {
        if (operation.hasAspect(Aspect$c.EXECUTE_WITH_SELECTION)) {
          executeWithServerSelection(topology, operation, executeCallback);
        } else {
          operation.execute(executeCallback);
        }
      } catch (error) {
        if (session && session.owner === owner) {
          session.endSession();
          if (operation.session === session) {
            operation.clearSession();
          }
        }

        callback(error);
      }
    });
  }

  function supportsRetryableReads(server) {
    return maxWireVersion$7(server) >= 6;
  }

  function executeWithServerSelection(topology, operation, callback) {
    const readPreference = operation.readPreference || read_preference.primary;
    const inTransaction = operation.session && operation.session.inTransaction();

    if (inTransaction && !readPreference.equals(read_preference.primary)) {
      callback(
        new MongoError$o(
          `Read preference in a transaction must be primary, not: ${readPreference.mode}`
        )
      );

      return;
    }

    const serverSelectionOptions = {
      readPreference,
      session: operation.session
    };

    function callbackWithRetry(err, result) {
      if (err == null) {
        return callback(null, result);
      }

      if (!isRetryableError(err)) {
        return callback(err);
      }

      // select a new server, and attempt to retry the operation
      topology.selectServer(serverSelectionOptions, (err, server) => {
        if (err || !supportsRetryableReads(server)) {
          callback(err, null);
          return;
        }

        operation.execute(server, callback);
      });
    }

    // select a server, and execute the operation against it
    topology.selectServer(serverSelectionOptions, (err, server) => {
      if (err) {
        callback(err, null);
        return;
      }
      const shouldRetryReads =
        topology.s.options.retryReads !== false &&
        operation.session &&
        !inTransaction &&
        supportsRetryableReads(server) &&
        operation.canRetryRead;

      if (operation.hasAspect(Aspect$c.RETRYABLE) && shouldRetryReads) {
        operation.execute(server, callbackWithRetry);
        return;
      }

      operation.execute(server, callback);
    });
  }

  // The Unified Topology runs serverSelection before executing every operation
  // Session support is determined by the result of a monitoring check triggered by this selection
  function selectServerForSessionSupport(topology, operation, callback) {
    topology.selectServer(read_preference.primaryPreferred, err => {
      if (err) {
        return callback(err);
      }

      executeOperation$1(topology, operation, callback);
    });
  }

  var execute_operation = executeOperation$1;

  var constants = {
    SYSTEM_NAMESPACE_COLLECTION: 'system.namespaces',
    SYSTEM_INDEX_COLLECTION: 'system.indexes',
    SYSTEM_PROFILE_COLLECTION: 'system.profile',
    SYSTEM_USER_COLLECTION: 'system.users',
    SYSTEM_COMMAND_COLLECTION: '$cmd',
    SYSTEM_JS_COLLECTION: 'system.js'
  };

  const applyWriteConcern$7 = require$$1$1.applyWriteConcern;
  const Code$1 = core.BSON.Code;
  const debugOptions$1 = require$$1$1.debugOptions;
  const handleCallback$d = require$$1$1.handleCallback;
  const MongoError$n = core.MongoError;
  const parseIndexOptions$1 = require$$1$1.parseIndexOptions;
  const ReadPreference$d = core.ReadPreference;
  const toError$6 = require$$1$1.toError;

  const MongoDBNamespace$6 = require$$1$1.MongoDBNamespace;

  const debugFields$1 = [
    'authSource',
    'w',
    'wtimeout',
    'j',
    'native_parser',
    'forceServerObjectId',
    'serializeFunctions',
    'raw',
    'promoteLongs',
    'promoteValues',
    'promoteBuffers',
    'bufferMaxEntries',
    'numberOfRetries',
    'retryMiliSeconds',
    'readPreference',
    'pkFactory',
    'parentDb',
    'promiseLibrary',
    'noListener'
  ];

  /**
   * Creates an index on the db and collection.
   * @method
   * @param {Db} db The Db instance on which to create an index.
   * @param {string} name Name of the collection to create the index on.
   * @param {(string|object)} fieldOrSpec Defines the index.
   * @param {object} [options] Optional settings. See Db.prototype.createIndex for a list of options.
   * @param {Db~resultCallback} [callback] The command result callback
   */
  function createIndex$1(db, name, fieldOrSpec, options, callback) {
    // Get the write concern options
    let finalOptions = Object.assign({}, { readPreference: ReadPreference$d.PRIMARY }, options);
    finalOptions = applyWriteConcern$7(finalOptions, { db }, options);

    // Ensure we have a callback
    if (finalOptions.writeConcern && typeof callback !== 'function') {
      throw MongoError$n.create({
        message: 'Cannot use a writeConcern without a provided callback',
        driver: true
      });
    }

    // Did the user destroy the topology
    if (db.serverConfig && db.serverConfig.isDestroyed())
      return callback(new MongoError$n('topology was destroyed'));

    // Attempt to run using createIndexes command
    createIndexUsingCreateIndexes(db, name, fieldOrSpec, finalOptions, (err, result) => {
      if (err == null) return handleCallback$d(callback, err, result);

      /**
       * The following errors mean that the server recognized `createIndex` as a command so we don't need to fallback to an insert:
       * 67 = 'CannotCreateIndex' (malformed index options)
       * 85 = 'IndexOptionsConflict' (index already exists with different options)
       * 86 = 'IndexKeySpecsConflict' (index already exists with the same name)
       * 11000 = 'DuplicateKey' (couldn't build unique index because of dupes)
       * 11600 = 'InterruptedAtShutdown' (interrupted at shutdown)
       * 197 = 'InvalidIndexSpecificationOption' (`_id` with `background: true`)
       */
      if (
        err.code === 67 ||
        err.code === 11000 ||
        err.code === 85 ||
        err.code === 86 ||
        err.code === 11600 ||
        err.code === 197
      ) {
        return handleCallback$d(callback, err, result);
      }

      // Create command
      const doc = createCreateIndexCommand(db, name, fieldOrSpec, options);
      // Set no key checking
      finalOptions.checkKeys = false;
      // Insert document
      db.s.topology.insert(
        db.s.namespace.withCollection(constants.SYSTEM_INDEX_COLLECTION),
        doc,
        finalOptions,
        (err, result) => {
          if (callback == null) return;
          if (err) return handleCallback$d(callback, err);
          if (result == null) return handleCallback$d(callback, null, null);
          if (result.result.writeErrors)
            return handleCallback$d(callback, MongoError$n.create(result.result.writeErrors[0]), null);
          handleCallback$d(callback, null, doc.name);
        }
      );
    });
  }

  // Add listeners to topology
  function createListener$2(db, e, object) {
    function listener(err) {
      if (object.listeners(e).length > 0) {
        object.emit(e, err, db);

        // Emit on all associated db's if available
        for (let i = 0; i < db.s.children.length; i++) {
          db.s.children[i].emit(e, err, db.s.children[i]);
        }
      }
    }
    return listener;
  }

  /**
   * Ensures that an index exists. If it does not, creates it.
   *
   * @method
   * @param {Db} db The Db instance on which to ensure the index.
   * @param {string} name The index name
   * @param {(string|object)} fieldOrSpec Defines the index.
   * @param {object} [options] Optional settings. See Db.prototype.ensureIndex for a list of options.
   * @param {Db~resultCallback} [callback] The command result callback
   */
  function ensureIndex$3(db, name, fieldOrSpec, options, callback) {
    // Get the write concern options
    const finalOptions = applyWriteConcern$7({}, { db }, options);
    // Create command
    const selector = createCreateIndexCommand(db, name, fieldOrSpec, options);
    const index_name = selector.name;

    // Did the user destroy the topology
    if (db.serverConfig && db.serverConfig.isDestroyed())
      return callback(new MongoError$n('topology was destroyed'));

    // Merge primary readPreference
    finalOptions.readPreference = ReadPreference$d.PRIMARY;

    // Check if the index already exists
    indexInformation$3(db, name, finalOptions, (err, indexInformation) => {
      if (err != null && err.code !== 26) return handleCallback$d(callback, err, null);
      // If the index does not exist, create it
      if (indexInformation == null || !indexInformation[index_name]) {
        createIndex$1(db, name, fieldOrSpec, options, callback);
      } else {
        if (typeof callback === 'function') return handleCallback$d(callback, null, index_name);
      }
    });
  }

  /**
   * Evaluate JavaScript on the server
   *
   * @method
   * @param {Db} db The Db instance.
   * @param {Code} code JavaScript to execute on server.
   * @param {(object|array)} parameters The parameters for the call.
   * @param {object} [options] Optional settings. See Db.prototype.eval for a list of options.
   * @param {Db~resultCallback} [callback] The results callback
   * @deprecated Eval is deprecated on MongoDB 3.2 and forward
   */
  function evaluate$2(db, code, parameters, options, callback) {
    let finalCode = code;
    let finalParameters = [];

    // Did the user destroy the topology
    if (db.serverConfig && db.serverConfig.isDestroyed())
      return callback(new MongoError$n('topology was destroyed'));

    // If not a code object translate to one
    if (!(finalCode && finalCode._bsontype === 'Code')) finalCode = new Code$1(finalCode);
    // Ensure the parameters are correct
    if (parameters != null && !Array.isArray(parameters) && typeof parameters !== 'function') {
      finalParameters = [parameters];
    } else if (parameters != null && Array.isArray(parameters) && typeof parameters !== 'function') {
      finalParameters = parameters;
    }

    // Create execution selector
    let cmd = { $eval: finalCode, args: finalParameters };
    // Check if the nolock parameter is passed in
    if (options['nolock']) {
      cmd['nolock'] = options['nolock'];
    }

    // Set primary read preference
    options.readPreference = new ReadPreference$d(ReadPreference$d.PRIMARY);

    // Execute the command
    executeCommand$2(db, cmd, options, (err, result) => {
      if (err) return handleCallback$d(callback, err, null);
      if (result && result.ok === 1) return handleCallback$d(callback, null, result.retval);
      if (result)
        return handleCallback$d(
          callback,
          MongoError$n.create({ message: `eval failed: ${result.errmsg}`, driver: true }),
          null
        );
      handleCallback$d(callback, err, result);
    });
  }

  /**
   * Execute a command
   *
   * @method
   * @param {Db} db The Db instance on which to execute the command.
   * @param {object} command The command hash
   * @param {object} [options] Optional settings. See Db.prototype.command for a list of options.
   * @param {Db~resultCallback} [callback] The command result callback
   */
  function executeCommand$2(db, command, options, callback) {
    // Did the user destroy the topology
    if (db.serverConfig && db.serverConfig.isDestroyed())
      return callback(new MongoError$n('topology was destroyed'));
    // Get the db name we are executing against
    const dbName = options.dbName || options.authdb || db.databaseName;

    // Convert the readPreference if its not a write
    options.readPreference = ReadPreference$d.resolve(db, options);

    // Debug information
    if (db.s.logger.isDebug())
      db.s.logger.debug(
        `executing command ${JSON.stringify(
        command
      )} against ${dbName}.$cmd with options [${JSON.stringify(
        debugOptions$1(debugFields$1, options)
      )}]`
      );

    // Execute command
    db.s.topology.command(db.s.namespace.withCollection('$cmd'), command, options, (err, result) => {
      if (err) return handleCallback$d(callback, err);
      if (options.full) return handleCallback$d(callback, null, result);
      handleCallback$d(callback, null, result.result);
    });
  }

  /**
   * Runs a command on the database as admin.
   *
   * @method
   * @param {Db} db The Db instance on which to execute the command.
   * @param {object} command The command hash
   * @param {object} [options] Optional settings. See Db.prototype.executeDbAdminCommand for a list of options.
   * @param {Db~resultCallback} [callback] The command result callback
   */
  function executeDbAdminCommand$1(db, command, options, callback) {
    const namespace = new MongoDBNamespace$6('admin', '$cmd');

    db.s.topology.command(namespace, command, options, (err, result) => {
      // Did the user destroy the topology
      if (db.serverConfig && db.serverConfig.isDestroyed()) {
        return callback(new MongoError$n('topology was destroyed'));
      }

      if (err) return handleCallback$d(callback, err);
      handleCallback$d(callback, null, result.result);
    });
  }

  /**
   * Retrieves this collections index info.
   *
   * @method
   * @param {Db} db The Db instance on which to retrieve the index info.
   * @param {string} name The name of the collection.
   * @param {object} [options] Optional settings. See Db.prototype.indexInformation for a list of options.
   * @param {Db~resultCallback} [callback] The command result callback
   */
  function indexInformation$3(db, name, options, callback) {
    // If we specified full information
    const full = options['full'] == null ? false : options['full'];

    // Did the user destroy the topology
    if (db.serverConfig && db.serverConfig.isDestroyed())
      return callback(new MongoError$n('topology was destroyed'));
    // Process all the results from the index command and collection
    function processResults(indexes) {
      // Contains all the information
      let info = {};
      // Process all the indexes
      for (let i = 0; i < indexes.length; i++) {
        const index = indexes[i];
        // Let's unpack the object
        info[index.name] = [];
        for (let name in index.key) {
          info[index.name].push([name, index.key[name]]);
        }
      }

      return info;
    }

    // Get the list of indexes of the specified collection
    db.collection(name)
      .listIndexes(options)
      .toArray((err, indexes) => {
        if (err) return callback(toError$6(err));
        if (!Array.isArray(indexes)) return handleCallback$d(callback, null, []);
        if (full) return handleCallback$d(callback, null, indexes);
        handleCallback$d(callback, null, processResults(indexes));
      });
  }

  /**
   * Retrieve the current profiling information for MongoDB
   *
   * @method
   * @param {Db} db The Db instance on which to retrieve the profiling info.
   * @param {Object} [options] Optional settings. See Db.protoype.profilingInfo for a list of options.
   * @param {Db~resultCallback} [callback] The command result callback.
   * @deprecated Query the system.profile collection directly.
   */
  function profilingInfo$1(db, options, callback) {
    try {
      db.collection('system.profile')
        .find({}, options)
        .toArray(callback);
    } catch (err) {
      return callback(err, null);
    }
  }

  // Validate the database name
  function validateDatabaseName$1(databaseName) {
    if (typeof databaseName !== 'string')
      throw MongoError$n.create({ message: 'database name must be a string', driver: true });
    if (databaseName.length === 0)
      throw MongoError$n.create({ message: 'database name cannot be the empty string', driver: true });
    if (databaseName === '$external') return;

    const invalidChars = [' ', '.', '$', '/', '\\'];
    for (let i = 0; i < invalidChars.length; i++) {
      if (databaseName.indexOf(invalidChars[i]) !== -1)
        throw MongoError$n.create({
          message: "database names cannot contain the character '" + invalidChars[i] + "'",
          driver: true
        });
    }
  }

  /**
   * Create the command object for Db.prototype.createIndex.
   *
   * @param {Db} db The Db instance on which to create the command.
   * @param {string} name Name of the collection to create the index on.
   * @param {(string|object)} fieldOrSpec Defines the index.
   * @param {Object} [options] Optional settings. See Db.prototype.createIndex for a list of options.
   * @return {Object} The insert command object.
   */
  function createCreateIndexCommand(db, name, fieldOrSpec, options) {
    const indexParameters = parseIndexOptions$1(fieldOrSpec);
    const fieldHash = indexParameters.fieldHash;

    // Generate the index name
    const indexName = typeof options.name === 'string' ? options.name : indexParameters.name;
    const selector = {
      ns: db.s.namespace.withCollection(name).toString(),
      key: fieldHash,
      name: indexName
    };

    // Ensure we have a correct finalUnique
    const finalUnique = options == null || 'object' === typeof options ? false : options;
    // Set up options
    options = options == null || typeof options === 'boolean' ? {} : options;

    // Add all the options
    const keysToOmit = Object.keys(selector);
    for (let optionName in options) {
      if (keysToOmit.indexOf(optionName) === -1) {
        selector[optionName] = options[optionName];
      }
    }

    if (selector['unique'] == null) selector['unique'] = finalUnique;

    // Remove any write concern operations
    const removeKeys = ['w', 'wtimeout', 'j', 'fsync', 'readPreference', 'session'];
    for (let i = 0; i < removeKeys.length; i++) {
      delete selector[removeKeys[i]];
    }

    // Return the command creation selector
    return selector;
  }

  /**
   * Create index using the createIndexes command.
   *
   * @param {Db} db The Db instance on which to execute the command.
   * @param {string} name Name of the collection to create the index on.
   * @param {(string|object)} fieldOrSpec Defines the index.
   * @param {Object} [options] Optional settings. See Db.prototype.createIndex for a list of options.
   * @param {Db~resultCallback} [callback] The command result callback.
   */
  function createIndexUsingCreateIndexes(db, name, fieldOrSpec, options, callback) {
    // Build the index
    const indexParameters = parseIndexOptions$1(fieldOrSpec);
    // Generate the index name
    const indexName = typeof options.name === 'string' ? options.name : indexParameters.name;
    // Set up the index
    const indexes = [{ name: indexName, key: indexParameters.fieldHash }];
    // merge all the options
    const keysToOmit = Object.keys(indexes[0]).concat([
      'writeConcern',
      'w',
      'wtimeout',
      'j',
      'fsync',
      'readPreference',
      'session'
    ]);

    for (let optionName in options) {
      if (keysToOmit.indexOf(optionName) === -1) {
        indexes[0][optionName] = options[optionName];
      }
    }

    // Get capabilities
    const capabilities = db.s.topology.capabilities();

    // Did the user pass in a collation, check if our write server supports it
    if (indexes[0].collation && capabilities && !capabilities.commandsTakeCollation) {
      // Create a new error
      const error = new MongoError$n('server/primary/mongos does not support collation');
      error.code = 67;
      // Return the error
      return callback(error);
    }

    // Create command, apply write concern to command
    const cmd = applyWriteConcern$7({ createIndexes: name, indexes }, { db }, options);

    // ReadPreference primary
    options.readPreference = ReadPreference$d.PRIMARY;

    // Build the command
    executeCommand$2(db, cmd, options, (err, result) => {
      if (err) return handleCallback$d(callback, err, null);
      if (result.ok === 0) return handleCallback$d(callback, toError$6(result), null);
      // Return the indexName for backward compatibility
      handleCallback$d(callback, null, indexName);
    });
  }

  var db_ops = {
    createListener: createListener$2,
    createIndex: createIndex$1,
    ensureIndex: ensureIndex$3,
    evaluate: evaluate$2,
    executeCommand: executeCommand$2,
    executeDbAdminCommand: executeDbAdminCommand$1,
    indexInformation: indexInformation$3,
    profilingInfo: profilingInfo$1,
    validateDatabaseName: validateDatabaseName$1
  };

  const applyRetryableWrites$1 = require$$1$1.applyRetryableWrites;
  const applyWriteConcern$6 = require$$1$1.applyWriteConcern;
  const decorateWithCollation$2 = require$$1$1.decorateWithCollation;
  const decorateWithReadConcern$2 = require$$1$1.decorateWithReadConcern;
  const executeCommand$1 = db_ops.executeCommand;
  const formattedOrderClause$2 = require$$1$1.formattedOrderClause;
  const handleCallback$c = require$$1$1.handleCallback;
  const MongoError$m = core.MongoError;
  const ReadPreference$c = core.ReadPreference;
  const toError$5 = require$$1$1.toError;
  const CursorState$4 = require$$1.CursorState;
  const maxWireVersion$6 = require$$2.maxWireVersion;

  /**
   * Build the count command.
   *
   * @method
   * @param {collectionOrCursor} an instance of a collection or cursor
   * @param {object} query The query for the count.
   * @param {object} [options] Optional settings. See Collection.prototype.count and Cursor.prototype.count for a list of options.
   */
  function buildCountCommand$2(collectionOrCursor, query, options) {
    const skip = options.skip;
    const limit = options.limit;
    let hint = options.hint;
    const maxTimeMS = options.maxTimeMS;
    query = query || {};

    // Final query
    const cmd = {
      count: options.collectionName,
      query: query
    };

    if (collectionOrCursor.s.numberOfRetries) {
      // collectionOrCursor is a cursor
      if (collectionOrCursor.options.hint) {
        hint = collectionOrCursor.options.hint;
      } else if (collectionOrCursor.cmd.hint) {
        hint = collectionOrCursor.cmd.hint;
      }
      decorateWithCollation$2(cmd, collectionOrCursor, collectionOrCursor.cmd);
    } else {
      decorateWithCollation$2(cmd, collectionOrCursor, options);
    }

    // Add limit, skip and maxTimeMS if defined
    if (typeof skip === 'number') cmd.skip = skip;
    if (typeof limit === 'number') cmd.limit = limit;
    if (typeof maxTimeMS === 'number') cmd.maxTimeMS = maxTimeMS;
    if (hint) cmd.hint = hint;

    // Do we have a readConcern specified
    decorateWithReadConcern$2(cmd, collectionOrCursor);

    return cmd;
  }

  /**
   * Find and update a document.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {object} query Query object to locate the object to modify.
   * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.
   * @param {object} doc The fields/vals to be updated.
   * @param {object} [options] Optional settings. See Collection.prototype.findAndModify for a list of options.
   * @param {Collection~findAndModifyCallback} [callback] The command result callback
   * @deprecated use findOneAndUpdate, findOneAndReplace or findOneAndDelete instead
   */
  function findAndModify(coll, query, sort, doc, options, callback) {
    // Create findAndModify command object
    const queryObject = {
      findAndModify: coll.collectionName,
      query: query
    };

    sort = formattedOrderClause$2(sort);
    if (sort) {
      queryObject.sort = sort;
    }

    queryObject.new = options.new ? true : false;
    queryObject.remove = options.remove ? true : false;
    queryObject.upsert = options.upsert ? true : false;

    const projection = options.projection || options.fields;

    if (projection) {
      queryObject.fields = projection;
    }

    if (options.arrayFilters) {
      queryObject.arrayFilters = options.arrayFilters;
      delete options.arrayFilters;
    }

    if (doc && !options.remove) {
      queryObject.update = doc;
    }

    if (options.maxTimeMS) queryObject.maxTimeMS = options.maxTimeMS;

    // Either use override on the function, or go back to default on either the collection
    // level or db
    options.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions;

    // No check on the documents
    options.checkKeys = false;

    // Final options for retryable writes and write concern
    let finalOptions = Object.assign({}, options);
    finalOptions = applyRetryableWrites$1(finalOptions, coll.s.db);
    finalOptions = applyWriteConcern$6(finalOptions, { db: coll.s.db, collection: coll }, options);

    // Decorate the findAndModify command with the write Concern
    if (finalOptions.writeConcern) {
      queryObject.writeConcern = finalOptions.writeConcern;
    }

    // Have we specified bypassDocumentValidation
    if (finalOptions.bypassDocumentValidation === true) {
      queryObject.bypassDocumentValidation = finalOptions.bypassDocumentValidation;
    }

    finalOptions.readPreference = ReadPreference$c.primary;

    // Have we specified collation
    try {
      decorateWithCollation$2(queryObject, coll, finalOptions);
    } catch (err) {
      return callback(err, null);
    }

    // Execute the command
    executeCommand$1(coll.s.db, queryObject, finalOptions, (err, result) => {
      if (err) return handleCallback$c(callback, err, null);

      return handleCallback$c(callback, null, result);
    });
  }

  /**
   * Retrieves this collections index info.
   *
   * @method
   * @param {Db} db The Db instance on which to retrieve the index info.
   * @param {string} name The name of the collection.
   * @param {object} [options] Optional settings. See Db.prototype.indexInformation for a list of options.
   * @param {Db~resultCallback} [callback] The command result callback
   */
  function indexInformation$2(db, name, options, callback) {
    // If we specified full information
    const full = options['full'] == null ? false : options['full'];

    // Did the user destroy the topology
    if (db.serverConfig && db.serverConfig.isDestroyed())
      return callback(new MongoError$m('topology was destroyed'));
    // Process all the results from the index command and collection
    function processResults(indexes) {
      // Contains all the information
      let info = {};
      // Process all the indexes
      for (let i = 0; i < indexes.length; i++) {
        const index = indexes[i];
        // Let's unpack the object
        info[index.name] = [];
        for (let name in index.key) {
          info[index.name].push([name, index.key[name]]);
        }
      }

      return info;
    }

    // Get the list of indexes of the specified collection
    db.collection(name)
      .listIndexes(options)
      .toArray((err, indexes) => {
        if (err) return callback(toError$5(err));
        if (!Array.isArray(indexes)) return handleCallback$c(callback, null, []);
        if (full) return handleCallback$c(callback, null, indexes);
        handleCallback$c(callback, null, processResults(indexes));
      });
  }

  function prepareDocs(coll, docs, options) {
    const forceServerObjectId =
      typeof options.forceServerObjectId === 'boolean'
        ? options.forceServerObjectId
        : coll.s.db.options.forceServerObjectId;

    // no need to modify the docs if server sets the ObjectId
    if (forceServerObjectId === true) {
      return docs;
    }

    return docs.map(doc => {
      if (forceServerObjectId !== true && doc._id == null) {
        doc._id = coll.s.pkFactory.createPk();
      }

      return doc;
    });
  }

  // Get the next available document from the cursor, returns null if no more documents are available.
  function nextObject(cursor, callback) {
    if (cursor.s.state === CursorState$4.CLOSED || (cursor.isDead && cursor.isDead())) {
      return handleCallback$c(
        callback,
        MongoError$m.create({ message: 'Cursor is closed', driver: true })
      );
    }

    if (cursor.s.state === CursorState$4.INIT && cursor.cmd && cursor.cmd.sort) {
      try {
        cursor.cmd.sort = formattedOrderClause$2(cursor.cmd.sort);
      } catch (err) {
        return handleCallback$c(callback, err);
      }
    }

    // Get the next object
    cursor._next((err, doc) => {
      cursor.s.state = CursorState$4.OPEN;
      if (err) return handleCallback$c(callback, err);
      handleCallback$c(callback, null, doc);
    });
  }

  function insertDocuments$1(coll, docs, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};
    // Ensure we are operating on an array op docs
    docs = Array.isArray(docs) ? docs : [docs];

    // Final options for retryable writes and write concern
    let finalOptions = Object.assign({}, options);
    finalOptions = applyRetryableWrites$1(finalOptions, coll.s.db);
    finalOptions = applyWriteConcern$6(finalOptions, { db: coll.s.db, collection: coll }, options);

    // If keep going set unordered
    if (finalOptions.keepGoing === true) finalOptions.ordered = false;
    finalOptions.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions;

    docs = prepareDocs(coll, docs, options);

    // File inserts
    coll.s.topology.insert(coll.s.namespace, docs, finalOptions, (err, result) => {
      if (callback == null) return;
      if (err) return handleCallback$c(callback, err);
      if (result == null) return handleCallback$c(callback, null, null);
      if (result.result.code) return handleCallback$c(callback, toError$5(result.result));
      if (result.result.writeErrors)
        return handleCallback$c(callback, toError$5(result.result.writeErrors[0]));
      // Add docs to the list
      result.ops = docs;
      // Return the results
      handleCallback$c(callback, null, result);
    });
  }

  function removeDocuments$1(coll, selector, options, callback) {
    if (typeof options === 'function') {
      (callback = options), (options = {});
    } else if (typeof selector === 'function') {
      callback = selector;
      options = {};
      selector = {};
    }

    // Create an empty options object if the provided one is null
    options = options || {};

    // Final options for retryable writes and write concern
    let finalOptions = Object.assign({}, options);
    finalOptions = applyRetryableWrites$1(finalOptions, coll.s.db);
    finalOptions = applyWriteConcern$6(finalOptions, { db: coll.s.db, collection: coll }, options);

    // If selector is null set empty
    if (selector == null) selector = {};

    // Build the op
    const op = { q: selector, limit: 0 };
    if (options.single) {
      op.limit = 1;
    } else if (finalOptions.retryWrites) {
      finalOptions.retryWrites = false;
    }
    if (options.hint) {
      op.hint = options.hint;
    }

    // Have we specified collation
    try {
      decorateWithCollation$2(finalOptions, coll, options);
    } catch (err) {
      return callback(err, null);
    }

    if (options.explain !== undefined && maxWireVersion$6(coll.s.topology) < 3) {
      return callback
        ? callback(new MongoError$m(`server does not support explain on remove`))
        : undefined;
    }

    // Execute the remove
    coll.s.topology.remove(coll.s.namespace, [op], finalOptions, (err, result) => {
      if (callback == null) return;
      if (err) return handleCallback$c(callback, err, null);
      if (result == null) return handleCallback$c(callback, null, null);
      if (result.result.code) return handleCallback$c(callback, toError$5(result.result));
      if (result.result.writeErrors) {
        return handleCallback$c(callback, toError$5(result.result.writeErrors[0]));
      }

      // Return the results
      handleCallback$c(callback, null, result);
    });
  }

  function updateDocuments$2(coll, selector, document, options, callback) {
    if ('function' === typeof options) (callback = options), (options = null);
    if (options == null) options = {};
    if (!('function' === typeof callback)) callback = null;

    // If we are not providing a selector or document throw
    if (selector == null || typeof selector !== 'object')
      return callback(toError$5('selector must be a valid JavaScript object'));
    if (document == null || typeof document !== 'object')
      return callback(toError$5('document must be a valid JavaScript object'));

    // Final options for retryable writes and write concern
    let finalOptions = Object.assign({}, options);
    finalOptions = applyRetryableWrites$1(finalOptions, coll.s.db);
    finalOptions = applyWriteConcern$6(finalOptions, { db: coll.s.db, collection: coll }, options);

    // Do we return the actual result document
    // Either use override on the function, or go back to default on either the collection
    // level or db
    finalOptions.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions;

    // Execute the operation
    const op = { q: selector, u: document };
    op.upsert = options.upsert !== void 0 ? !!options.upsert : false;
    op.multi = options.multi !== void 0 ? !!options.multi : false;

    if (options.hint) {
      op.hint = options.hint;
    }

    if (finalOptions.arrayFilters) {
      op.arrayFilters = finalOptions.arrayFilters;
      delete finalOptions.arrayFilters;
    }

    if (finalOptions.retryWrites && op.multi) {
      finalOptions.retryWrites = false;
    }

    // Have we specified collation
    try {
      decorateWithCollation$2(finalOptions, coll, options);
    } catch (err) {
      return callback(err, null);
    }

    if (options.explain !== undefined && maxWireVersion$6(coll.s.topology) < 3) {
      return callback
        ? callback(new MongoError$m(`server does not support explain on update`))
        : undefined;
    }

    // Update options
    coll.s.topology.update(coll.s.namespace, [op], finalOptions, (err, result) => {
      if (callback == null) return;
      if (err) return handleCallback$c(callback, err, null);
      if (result == null) return handleCallback$c(callback, null, null);
      if (result.result.code) return handleCallback$c(callback, toError$5(result.result));
      if (result.result.writeErrors)
        return handleCallback$c(callback, toError$5(result.result.writeErrors[0]));
      // Return the results
      handleCallback$c(callback, null, result);
    });
  }

  var common_functions = {
    buildCountCommand: buildCountCommand$2,
    findAndModify,
    indexInformation: indexInformation$2,
    nextObject,
    prepareDocs,
    insertDocuments: insertDocuments$1,
    removeDocuments: removeDocuments$1,
    updateDocuments: updateDocuments$2
  };

  const applyWriteConcern$5 = require$$1$1.applyWriteConcern;
  const Code = core.BSON.Code;
  const createIndexDb = db_ops.createIndex;
  const decorateWithCollation$1 = require$$1$1.decorateWithCollation;
  const decorateWithReadConcern$1 = require$$1$1.decorateWithReadConcern;
  const ensureIndexDb = db_ops.ensureIndex;
  const evaluate$1 = db_ops.evaluate;
  const executeCommand = db_ops.executeCommand;
  const handleCallback$b = require$$1$1.handleCallback;
  const indexInformationDb = db_ops.indexInformation;
  const Long$1 = core.BSON.Long;
  const MongoError$l = core.MongoError;
  const ReadPreference$b = core.ReadPreference;
  const insertDocuments = common_functions.insertDocuments;
  const updateDocuments$1 = common_functions.updateDocuments;

  /**
   * Group function helper
   * @ignore
   */
  // var groupFunction = function () {
  //   var c = db[ns].find(condition);
  //   var map = new Map();
  //   var reduce_function = reduce;
  //
  //   while (c.hasNext()) {
  //     var obj = c.next();
  //     var key = {};
  //
  //     for (var i = 0, len = keys.length; i < len; ++i) {
  //       var k = keys[i];
  //       key[k] = obj[k];
  //     }
  //
  //     var aggObj = map.get(key);
  //
  //     if (aggObj == null) {
  //       var newObj = Object.extend({}, key);
  //       aggObj = Object.extend(newObj, initial);
  //       map.put(key, aggObj);
  //     }
  //
  //     reduce_function(obj, aggObj);
  //   }
  //
  //   return { "result": map.values() };
  // }.toString();
  const groupFunction =
    'function () {\nvar c = db[ns].find(condition);\nvar map = new Map();\nvar reduce_function = reduce;\n\nwhile (c.hasNext()) {\nvar obj = c.next();\nvar key = {};\n\nfor (var i = 0, len = keys.length; i < len; ++i) {\nvar k = keys[i];\nkey[k] = obj[k];\n}\n\nvar aggObj = map.get(key);\n\nif (aggObj == null) {\nvar newObj = Object.extend({}, key);\naggObj = Object.extend(newObj, initial);\nmap.put(key, aggObj);\n}\n\nreduce_function(obj, aggObj);\n}\n\nreturn { "result": map.values() };\n}';

  /**
   * Create an index on the db and collection.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {(string|object)} fieldOrSpec Defines the index.
   * @param {object} [options] Optional settings. See Collection.prototype.createIndex for a list of options.
   * @param {Collection~resultCallback} [callback] The command result callback
   */
  function createIndex(coll, fieldOrSpec, options, callback) {
    createIndexDb(coll.s.db, coll.collectionName, fieldOrSpec, options, callback);
  }

  /**
   * Create multiple indexes in the collection. This method is only supported for
   * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported
   * error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {array} indexSpecs An array of index specifications to be created
   * @param {Object} [options] Optional settings. See Collection.prototype.createIndexes for a list of options.
   * @param {Collection~resultCallback} [callback] The command result callback
   */
  function createIndexes(coll, indexSpecs, options, callback) {
    const capabilities = coll.s.topology.capabilities();

    // Ensure we generate the correct name if the parameter is not set
    for (let i = 0; i < indexSpecs.length; i++) {
      if (indexSpecs[i].name == null) {
        const keys = [];

        // Did the user pass in a collation, check if our write server supports it
        if (indexSpecs[i].collation && capabilities && !capabilities.commandsTakeCollation) {
          return callback(new MongoError$l('server/primary/mongos does not support collation'));
        }

        for (let name in indexSpecs[i].key) {
          keys.push(`${name}_${indexSpecs[i].key[name]}`);
        }

        // Set the name
        indexSpecs[i].name = keys.join('_');
      }
    }

    options = Object.assign({}, options, { readPreference: ReadPreference$b.PRIMARY });

    // Execute the index
    executeCommand(
      coll.s.db,
      {
        createIndexes: coll.collectionName,
        indexes: indexSpecs
      },
      options,
      callback
    );
  }

  /**
   * Ensure that an index exists. If the index does not exist, this function creates it.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {(string|object)} fieldOrSpec Defines the index.
   * @param {object} [options] Optional settings. See Collection.prototype.ensureIndex for a list of options.
   * @param {Collection~resultCallback} [callback] The command result callback
   */
  function ensureIndex$2(coll, fieldOrSpec, options, callback) {
    ensureIndexDb(coll.s.db, coll.collectionName, fieldOrSpec, options, callback);
  }

  /**
   * Run a group command across a collection.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {(object|array|function|code)} keys An object, array or function expressing the keys to group by.
   * @param {object} condition An optional condition that must be true for a row to be considered.
   * @param {object} initial Initial value of the aggregation counter object.
   * @param {(function|Code)} reduce The reduce function aggregates (reduces) the objects iterated
   * @param {(function|Code)} finalize An optional function to be run on each item in the result set just before the item is returned.
   * @param {boolean} command Specify if you wish to run using the internal group command or using eval, default is true.
   * @param {object} [options] Optional settings. See Collection.prototype.group for a list of options.
   * @param {Collection~resultCallback} [callback] The command result callback
   * @deprecated MongoDB 3.6 or higher will no longer support the group command. We recommend rewriting using the aggregation framework.
   */
  function group$1(coll, keys, condition, initial, reduce, finalize, command, options, callback) {
    // Execute using the command
    if (command) {
      const reduceFunction = reduce && reduce._bsontype === 'Code' ? reduce : new Code(reduce);

      const selector = {
        group: {
          ns: coll.collectionName,
          $reduce: reduceFunction,
          cond: condition,
          initial: initial,
          out: 'inline'
        }
      };

      // if finalize is defined
      if (finalize != null) selector.group['finalize'] = finalize;
      // Set up group selector
      if ('function' === typeof keys || (keys && keys._bsontype === 'Code')) {
        selector.group.$keyf = keys && keys._bsontype === 'Code' ? keys : new Code(keys);
      } else {
        const hash = {};
        keys.forEach(key => {
          hash[key] = 1;
        });
        selector.group.key = hash;
      }

      options = Object.assign({}, options);
      // Ensure we have the right read preference inheritance
      options.readPreference = ReadPreference$b.resolve(coll, options);

      // Do we have a readConcern specified
      decorateWithReadConcern$1(selector, coll, options);

      // Have we specified collation
      try {
        decorateWithCollation$1(selector, coll, options);
      } catch (err) {
        return callback(err, null);
      }

      // Execute command
      executeCommand(coll.s.db, selector, options, (err, result) => {
        if (err) return handleCallback$b(callback, err, null);
        handleCallback$b(callback, null, result.retval);
      });
    } else {
      // Create execution scope
      const scope = reduce != null && reduce._bsontype === 'Code' ? reduce.scope : {};

      scope.ns = coll.collectionName;
      scope.keys = keys;
      scope.condition = condition;
      scope.initial = initial;

      // Pass in the function text to execute within mongodb.
      const groupfn = groupFunction.replace(/ reduce;/, reduce.toString() + ';');

      evaluate$1(coll.s.db, new Code(groupfn, scope), null, options, (err, results) => {
        if (err) return handleCallback$b(callback, err, null);
        handleCallback$b(callback, null, results.result || results);
      });
    }
  }

  /**
   * Retrieve all the indexes on the collection.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {Object} [options] Optional settings. See Collection.prototype.indexes for a list of options.
   * @param {Collection~resultCallback} [callback] The command result callback
   */
  function indexes(coll, options, callback) {
    options = Object.assign({}, { full: true }, options);
    indexInformationDb(coll.s.db, coll.collectionName, options, callback);
  }

  /**
   * Check if one or more indexes exist on the collection. This fails on the first index that doesn't exist.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {(string|array)} indexes One or more index names to check.
   * @param {Object} [options] Optional settings. See Collection.prototype.indexExists for a list of options.
   * @param {Collection~resultCallback} [callback] The command result callback
   */
  function indexExists(coll, indexes, options, callback) {
    indexInformation$1(coll, options, (err, indexInformation) => {
      // If we have an error return
      if (err != null) return handleCallback$b(callback, err, null);
      // Let's check for the index names
      if (!Array.isArray(indexes))
        return handleCallback$b(callback, null, indexInformation[indexes] != null);
      // Check in list of indexes
      for (let i = 0; i < indexes.length; i++) {
        if (indexInformation[indexes[i]] == null) {
          return handleCallback$b(callback, null, false);
        }
      }

      // All keys found return true
      return handleCallback$b(callback, null, true);
    });
  }

  /**
   * Retrieve this collection's index info.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {object} [options] Optional settings. See Collection.prototype.indexInformation for a list of options.
   * @param {Collection~resultCallback} [callback] The command result callback
   */
  function indexInformation$1(coll, options, callback) {
    indexInformationDb(coll.s.db, coll.collectionName, options, callback);
  }

  /**
   * Return N parallel cursors for a collection to allow parallel reading of the entire collection. There are
   * no ordering guarantees for returned results.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {object} [options] Optional settings. See Collection.prototype.parallelCollectionScan for a list of options.
   * @param {Collection~parallelCollectionScanCallback} [callback] The command result callback
   */
  function parallelCollectionScan$1(coll, options, callback) {
    // Create command object
    const commandObject = {
      parallelCollectionScan: coll.collectionName,
      numCursors: options.numCursors
    };

    // Do we have a readConcern specified
    decorateWithReadConcern$1(commandObject, coll, options);

    // Store the raw value
    const raw = options.raw;
    delete options['raw'];

    // Execute the command
    executeCommand(coll.s.db, commandObject, options, (err, result) => {
      if (err) return handleCallback$b(callback, err, null);
      if (result == null)
        return handleCallback$b(
          callback,
          new Error('no result returned for parallelCollectionScan'),
          null
        );

      options = Object.assign({ explicitlyIgnoreSession: true }, options);

      const cursors = [];
      // Add the raw back to the option
      if (raw) options.raw = raw;
      // Create command cursors for each item
      for (let i = 0; i < result.cursors.length; i++) {
        const rawId = result.cursors[i].cursor.id;
        // Convert cursorId to Long if needed
        const cursorId = typeof rawId === 'number' ? Long$1.fromNumber(rawId) : rawId;
        // Add a command cursor
        cursors.push(coll.s.topology.cursor(coll.namespace, cursorId, options));
      }

      handleCallback$b(callback, null, cursors);
    });
  }

  /**
   * Save a document.
   *
   * @method
   * @param {Collection} a Collection instance.
   * @param {object} doc Document to save
   * @param {object} [options] Optional settings. See Collection.prototype.save for a list of options.
   * @param {Collection~writeOpCallback} [callback] The command result callback
   * @deprecated use insertOne, insertMany, updateOne or updateMany
   */
  function save$1(coll, doc, options, callback) {
    // Get the write concern options
    const finalOptions = applyWriteConcern$5(
      Object.assign({}, options),
      { db: coll.s.db, collection: coll },
      options
    );
    // Establish if we need to perform an insert or update
    if (doc._id != null) {
      finalOptions.upsert = true;
      return updateDocuments$1(coll, { _id: doc._id }, doc, finalOptions, callback);
    }

    // Insert the document
    insertDocuments(coll, [doc], finalOptions, (err, result) => {
      if (callback == null) return;
      if (doc == null) return handleCallback$b(callback, null, null);
      if (err) return handleCallback$b(callback, err, null);
      handleCallback$b(callback, null, result);
    });
  }

  var collection_ops = {
    createIndex,
    createIndexes,
    ensureIndex: ensureIndex$2,
    group: group$1,
    indexes,
    indexExists,
    indexInformation: indexInformation$1,
    parallelCollectionScan: parallelCollectionScan$1,
    save: save$1
  };

  const buildCountCommand$1 = collection_ops.buildCountCommand;
  const handleCallback$a = require$$1$1.handleCallback;
  const MongoError$k = core.MongoError;
  const push = Array.prototype.push;
  const CursorState$3 = require$$1.CursorState;

  /**
   * Get the count of documents for this cursor.
   *
   * @method
   * @param {Cursor} cursor The Cursor instance on which to count.
   * @param {boolean} [applySkipLimit=true] Specifies whether the count command apply limit and skip settings should be applied on the cursor or in the provided options.
   * @param {object} [options] Optional settings. See Cursor.prototype.count for a list of options.
   * @param {Cursor~countResultCallback} [callback] The result callback.
   */
  function count$1(cursor, applySkipLimit, opts, callback) {
    if (applySkipLimit) {
      if (typeof cursor.cursorSkip() === 'number') opts.skip = cursor.cursorSkip();
      if (typeof cursor.cursorLimit() === 'number') opts.limit = cursor.cursorLimit();
    }

    // Ensure we have the right read preference inheritance
    if (opts.readPreference) {
      cursor.setReadPreference(opts.readPreference);
    }

    if (
      typeof opts.maxTimeMS !== 'number' &&
      cursor.cmd &&
      typeof cursor.cmd.maxTimeMS === 'number'
    ) {
      opts.maxTimeMS = cursor.cmd.maxTimeMS;
    }

    let options = {};
    options.skip = opts.skip;
    options.limit = opts.limit;
    options.hint = opts.hint;
    options.maxTimeMS = opts.maxTimeMS;

    // Command
    options.collectionName = cursor.namespace.collection;

    let command;
    try {
      command = buildCountCommand$1(cursor, cursor.cmd.query, options);
    } catch (err) {
      return callback(err);
    }

    // Set cursor server to the same as the topology
    cursor.server = cursor.topology.s.coreTopology;

    // Execute the command
    cursor.topology.command(
      cursor.namespace.withCollection('$cmd'),
      command,
      cursor.options,
      (err, result) => {
        callback(err, result ? result.result.n : null);
      }
    );
  }

  /**
   * Iterates over all the documents for this cursor. See Cursor.prototype.each for more information.
   *
   * @method
   * @deprecated
   * @param {Cursor} cursor The Cursor instance on which to run.
   * @param {Cursor~resultCallback} callback The result callback.
   */
  function each$1(cursor, callback) {
    if (!callback) throw MongoError$k.create({ message: 'callback is mandatory', driver: true });
    if (cursor.isNotified()) return;
    if (cursor.s.state === CursorState$3.CLOSED || cursor.isDead()) {
      return handleCallback$a(
        callback,
        MongoError$k.create({ message: 'Cursor is closed', driver: true })
      );
    }

    if (cursor.s.state === CursorState$3.INIT) {
      cursor.s.state = CursorState$3.OPEN;
    }

    // Define function to avoid global scope escape
    let fn = null;
    // Trampoline all the entries
    if (cursor.bufferedCount() > 0) {
      while ((fn = loop(cursor, callback))) fn(cursor, callback);
      each$1(cursor, callback);
    } else {
      cursor.next((err, item) => {
        if (err) return handleCallback$a(callback, err);
        if (item == null) {
          return cursor.close({ skipKillCursors: true }, () => handleCallback$a(callback, null, null));
        }

        if (handleCallback$a(callback, null, item) === false) return;
        each$1(cursor, callback);
      });
    }
  }

  // Trampoline emptying the number of retrieved items
  // without incurring a nextTick operation
  function loop(cursor, callback) {
    // No more items we are done
    if (cursor.bufferedCount() === 0) return;
    // Get the next document
    cursor._next(callback);
    // Loop
    return loop;
  }

  /**
   * Returns an array of documents. See Cursor.prototype.toArray for more information.
   *
   * @method
   * @param {Cursor} cursor The Cursor instance from which to get the next document.
   * @param {Cursor~toArrayResultCallback} [callback] The result callback.
   */
  function toArray(cursor, callback) {
    const items = [];

    // Reset cursor
    cursor.rewind();
    cursor.s.state = CursorState$3.INIT;

    // Fetch all the documents
    const fetchDocs = () => {
      cursor._next((err, doc) => {
        if (err) {
          return handleCallback$a(callback, err);
        }

        if (doc == null) {
          return cursor.close({ skipKillCursors: true }, () => handleCallback$a(callback, null, items));
        }

        // Add doc to items
        items.push(doc);

        // Get all buffered objects
        if (cursor.bufferedCount() > 0) {
          let docs = cursor.readBufferedDocuments(cursor.bufferedCount());

          // Transform the doc if transform method added
          if (cursor.s.transforms && typeof cursor.s.transforms.doc === 'function') {
            docs = docs.map(cursor.s.transforms.doc);
          }

          push.apply(items, docs);
        }

        // Attempt a fetch
        fetchDocs();
      });
    };

    fetchDocs();
  }

  var cursor_ops = { count: count$1, each: each$1, toArray };

  const buildCountCommand = common_functions.buildCountCommand;
  const OperationBase$6 = operation.OperationBase;

  class CountOperation extends OperationBase$6 {
    constructor(cursor, applySkipLimit, options) {
      super(options);

      this.cursor = cursor;
      this.applySkipLimit = applySkipLimit;
    }

    execute(callback) {
      const cursor = this.cursor;
      const applySkipLimit = this.applySkipLimit;
      const options = this.options;

      if (applySkipLimit) {
        if (typeof cursor.cursorSkip() === 'number') options.skip = cursor.cursorSkip();
        if (typeof cursor.cursorLimit() === 'number') options.limit = cursor.cursorLimit();
      }

      // Ensure we have the right read preference inheritance
      if (options.readPreference) {
        cursor.setReadPreference(options.readPreference);
      }

      if (
        typeof options.maxTimeMS !== 'number' &&
        cursor.cmd &&
        typeof cursor.cmd.maxTimeMS === 'number'
      ) {
        options.maxTimeMS = cursor.cmd.maxTimeMS;
      }

      let finalOptions = {};
      finalOptions.skip = options.skip;
      finalOptions.limit = options.limit;
      finalOptions.hint = options.hint;
      finalOptions.maxTimeMS = options.maxTimeMS;

      // Command
      finalOptions.collectionName = cursor.namespace.collection;

      let command;
      try {
        command = buildCountCommand(cursor, cursor.cmd.query, finalOptions);
      } catch (err) {
        return callback(err);
      }

      // Set cursor server to the same as the topology
      cursor.server = cursor.topology.s.coreTopology;

      // Execute the command
      cursor.topology.command(
        cursor.namespace.withCollection('$cmd'),
        command,
        cursor.options,
        (err, result) => {
          callback(err, result ? result.result.n : null);
        }
      );
    }
  }

  var count = CountOperation;

  var stream$1 = /*@__PURE__*/getAugmentedNamespace(stream$2);

  const Transform = stream$1.Transform;
  const PassThrough = stream$1.PassThrough;
  const deprecate$5 = util$2.deprecate;
  const handleCallback$9 = require$$1$1.handleCallback;
  const ReadPreference$a = core.ReadPreference;
  const MongoError$j = core.MongoError;
  const CoreCursor = require$$1.CoreCursor;
  const CursorState$2 = require$$1.CursorState;
  const Map$1 = core.BSON.Map;
  const maybePromise$2 = require$$1$1.maybePromise;

  const formattedOrderClause$1 = require$$1$1.formattedOrderClause;
  const Explain = explain.Explain;
  const Aspect$b = operation.Aspect;

  const each = cursor_ops.each;


  /**
   * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB
   * allowing for iteration over the results returned from the underlying query. It supports
   * one by one document iteration, conversion to an array or can be iterated as a Node 4.X
   * or higher stream
   *
   * **CURSORS Cannot directly be instantiated**
   * @example
   * const MongoClient = require('mongodb').MongoClient;
   * const test = require('assert');
   * // Connection url
   * const url = 'mongodb://localhost:27017';
   * // Database Name
   * const dbName = 'test';
   * // Connect using MongoClient
   * MongoClient.connect(url, function(err, client) {
   *   // Create a collection we want to drop later
   *   const col = client.db(dbName).collection('createIndexExample1');
   *   // Insert a bunch of documents
   *   col.insert([{a:1, b:1}
   *     , {a:2, b:2}, {a:3, b:3}
   *     , {a:4, b:4}], {w:1}, function(err, result) {
   *     test.equal(null, err);
   *     // Show that duplicate records got dropped
   *     col.find({}).toArray(function(err, items) {
   *       test.equal(null, err);
   *       test.equal(4, items.length);
   *       client.close();
   *     });
   *   });
   * });
   */

  /**
   * Namespace provided by the code module
   * @external CoreCursor
   * @external Readable
   */

  // Flags allowed for cursor
  const flags = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];
  const fields = ['numberOfRetries', 'tailableRetryInterval'];

  /**
   * Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly)
   * @class Cursor
   * @extends external:CoreCursor
   * @extends external:Readable
   * @property {string} sortValue Cursor query sort setting.
   * @property {boolean} timeout Is Cursor able to time out.
   * @property {ReadPreference} readPreference Get cursor ReadPreference.
   * @fires Cursor#data
   * @fires Cursor#end
   * @fires Cursor#close
   * @fires Cursor#readable
   * @return {Cursor} a Cursor instance.
   * @example
   * Cursor cursor options.
   *
   * collection.find({}).project({a:1})                             // Create a projection of field a
   * collection.find({}).skip(1).limit(10)                          // Skip 1 and limit 10
   * collection.find({}).batchSize(5)                               // Set batchSize on cursor to 5
   * collection.find({}).filter({a:1})                              // Set query on the cursor
   * collection.find({}).comment('add a comment')                   // Add a comment to the query, allowing to correlate queries
   * collection.find({}).addCursorFlag('tailable', true)            // Set cursor as tailable
   * collection.find({}).addCursorFlag('noCursorTimeout', true)     // Set cursor as noCursorTimeout
   * collection.find({}).addCursorFlag('awaitData', true)           // Set cursor as awaitData
   * collection.find({}).addCursorFlag('partial', true)             // Set cursor as partial
   * collection.find({}).addQueryModifier('$orderby', {a:1})        // Set $orderby {a:1}
   * collection.find({}).max(10)                                    // Set the cursor max
   * collection.find({}).maxTimeMS(1000)                            // Set the cursor maxTimeMS
   * collection.find({}).min(100)                                   // Set the cursor min
   * collection.find({}).returnKey(true)                            // Set the cursor returnKey
   * collection.find({}).setReadPreference(ReadPreference.PRIMARY)  // Set the cursor readPreference
   * collection.find({}).showRecordId(true)                         // Set the cursor showRecordId
   * collection.find({}).sort([['a', 1]])                           // Sets the sort order of the cursor query
   * collection.find({}).hint('a_1')                                // Set the cursor hint
   *
   * All options are chainable, so one can do the following.
   *
   * collection.find({}).maxTimeMS(1000).maxScan(100).skip(1).toArray(..)
   */
  class Cursor$3 extends CoreCursor {
    constructor(topology, ns, cmd, options) {
      super(topology, ns, cmd, options);
      if (this.operation) {
        options = this.operation.options;
      }

      // Tailable cursor options
      const numberOfRetries = options.numberOfRetries || 5;
      const tailableRetryInterval = options.tailableRetryInterval || 500;
      const currentNumberOfRetries = numberOfRetries;

      // Get the promiseLibrary
      const promiseLibrary = options.promiseLibrary || Promise;

      // Internal cursor state
      this.s = {
        // Tailable cursor options
        numberOfRetries: numberOfRetries,
        tailableRetryInterval: tailableRetryInterval,
        currentNumberOfRetries: currentNumberOfRetries,
        // State
        state: CursorState$2.INIT,
        // Promise library
        promiseLibrary,
        // explicitlyIgnoreSession
        explicitlyIgnoreSession: !!options.explicitlyIgnoreSession
      };

      // Optional ClientSession
      if (!options.explicitlyIgnoreSession && options.session) {
        this.cursorState.session = options.session;
      }

      // Translate correctly
      if (this.options.noCursorTimeout === true) {
        this.addCursorFlag('noCursorTimeout', true);
      }

      // Get the batchSize
      let batchSize = 1000;
      if (this.cmd.cursor && this.cmd.cursor.batchSize) {
        batchSize = this.cmd.cursor.batchSize;
      } else if (options.cursor && options.cursor.batchSize) {
        batchSize = options.cursor.batchSize;
      } else if (typeof options.batchSize === 'number') {
        batchSize = options.batchSize;
      }

      // Set the batchSize
      this.setCursorBatchSize(batchSize);
    }

    get readPreference() {
      if (this.operation) {
        return this.operation.readPreference;
      }

      return this.options.readPreference;
    }

    get sortValue() {
      return this.cmd.sort;
    }

    _initializeCursor(callback) {
      if (this.operation && this.operation.session != null) {
        this.cursorState.session = this.operation.session;
      } else {
        // implicitly create a session if one has not been provided
        if (
          !this.s.explicitlyIgnoreSession &&
          !this.cursorState.session &&
          this.topology.hasSessionSupport()
        ) {
          this.cursorState.session = this.topology.startSession({ owner: this });

          if (this.operation) {
            this.operation.session = this.cursorState.session;
          }
        }
      }

      super._initializeCursor(callback);
    }

    /**
     * Check if there is any document still available in the cursor
     * @method
     * @param {Cursor~resultCallback} [callback] The result callback.
     * @throws {MongoError}
     * @return {Promise} returns Promise if no callback passed
     */
    hasNext(callback) {
      if (this.s.state === CursorState$2.CLOSED || (this.isDead && this.isDead())) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      return maybePromise$2(this, callback, cb => {
        const cursor = this;
        if (cursor.isNotified()) {
          return cb(null, false);
        }

        cursor._next((err, doc) => {
          if (err) return cb(err);
          if (doc == null || cursor.s.state === Cursor$3.CLOSED || cursor.isDead()) {
            return cb(null, false);
          }

          cursor.s.state = CursorState$2.OPEN;

          // NODE-2482: merge this into the core cursor implementation
          cursor.cursorState.cursorIndex--;
          if (cursor.cursorState.limit > 0) {
            cursor.cursorState.currentLimit--;
          }

          cb(null, true);
        });
      });
    }

    /**
     * Get the next available document from the cursor, returns null if no more documents are available.
     * @method
     * @param {Cursor~resultCallback} [callback] The result callback.
     * @throws {MongoError}
     * @return {Promise} returns Promise if no callback passed
     */
    next(callback) {
      return maybePromise$2(this, callback, cb => {
        const cursor = this;
        if (cursor.s.state === CursorState$2.CLOSED || (cursor.isDead && cursor.isDead())) {
          cb(MongoError$j.create({ message: 'Cursor is closed', driver: true }));
          return;
        }

        if (cursor.s.state === CursorState$2.INIT && cursor.cmd.sort) {
          try {
            cursor.cmd.sort = formattedOrderClause$1(cursor.cmd.sort);
          } catch (err) {
            return cb(err);
          }
        }

        cursor._next((err, doc) => {
          if (err) return cb(err);
          cursor.s.state = CursorState$2.OPEN;
          cb(null, doc);
        });
      });
    }

    /**
     * Set the cursor query
     * @method
     * @param {object} filter The filter object used for the cursor.
     * @return {Cursor}
     */
    filter(filter) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.query = filter;
      return this;
    }

    /**
     * Set the cursor maxScan
     * @method
     * @param {object} maxScan Constrains the query to only scan the specified number of documents when fulfilling the query
     * @deprecated as of MongoDB 4.0
     * @return {Cursor}
     */
    maxScan(maxScan) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.maxScan = maxScan;
      return this;
    }

    /**
     * Set the cursor hint
     * @method
     * @param {object} hint If specified, then the query system will only consider plans using the hinted index.
     * @return {Cursor}
     */
    hint(hint) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.hint = hint;
      return this;
    }

    /**
     * Set the cursor min
     * @method
     * @param {object} min Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.
     * @return {Cursor}
     */
    min(min) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.min = min;
      return this;
    }

    /**
     * Set the cursor max
     * @method
     * @param {object} max Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.
     * @return {Cursor}
     */
    max(max) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.max = max;
      return this;
    }

    /**
     * Set the cursor returnKey. If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents. If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.
     * @method
     * @param {bool} returnKey the returnKey value.
     * @return {Cursor}
     */
    returnKey(value) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.returnKey = value;
      return this;
    }

    /**
     * Set the cursor showRecordId
     * @method
     * @param {object} showRecordId The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.
     * @return {Cursor}
     */
    showRecordId(value) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.showDiskLoc = value;
      return this;
    }

    /**
     * Set the cursor snapshot
     * @method
     * @param {object} snapshot The $snapshot operator prevents the cursor from returning a document more than once because an intervening write operation results in a move of the document.
     * @deprecated as of MongoDB 4.0
     * @return {Cursor}
     */
    snapshot(value) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.snapshot = value;
      return this;
    }

    /**
     * Set a node.js specific cursor option
     * @method
     * @param {string} field The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].
     * @param {object} value The field value.
     * @throws {MongoError}
     * @return {Cursor}
     */
    setCursorOption(field, value) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      if (fields.indexOf(field) === -1) {
        throw MongoError$j.create({
          message: `option ${field} is not a supported option ${fields}`,
          driver: true
        });
      }

      this.s[field] = value;
      if (field === 'numberOfRetries') this.s.currentNumberOfRetries = value;
      return this;
    }

    /**
     * Add a cursor flag to the cursor
     * @method
     * @param {string} flag The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial'].
     * @param {boolean} value The flag boolean value.
     * @throws {MongoError}
     * @return {Cursor}
     */
    addCursorFlag(flag, value) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      if (flags.indexOf(flag) === -1) {
        throw MongoError$j.create({
          message: `flag ${flag} is not a supported flag ${flags}`,
          driver: true
        });
      }

      if (typeof value !== 'boolean') {
        throw MongoError$j.create({ message: `flag ${flag} must be a boolean value`, driver: true });
      }

      this.cmd[flag] = value;
      return this;
    }

    /**
     * Add a query modifier to the cursor query
     * @method
     * @param {string} name The query modifier (must start with $, such as $orderby etc)
     * @param {string|boolean|number} value The modifier value.
     * @throws {MongoError}
     * @return {Cursor}
     */
    addQueryModifier(name, value) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      if (name[0] !== '$') {
        throw MongoError$j.create({ message: `${name} is not a valid query modifier`, driver: true });
      }

      // Strip of the $
      const field = name.substr(1);
      // Set on the command
      this.cmd[field] = value;
      // Deal with the special case for sort
      if (field === 'orderby') this.cmd.sort = this.cmd[field];
      return this;
    }

    /**
     * Add a comment to the cursor query allowing for tracking the comment in the log.
     * @method
     * @param {string} value The comment attached to this query.
     * @throws {MongoError}
     * @return {Cursor}
     */
    comment(value) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.comment = value;
      return this;
    }

    /**
     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)
     * @method
     * @param {number} value Number of milliseconds to wait before aborting the tailed query.
     * @throws {MongoError}
     * @return {Cursor}
     */
    maxAwaitTimeMS(value) {
      if (typeof value !== 'number') {
        throw MongoError$j.create({ message: 'maxAwaitTimeMS must be a number', driver: true });
      }

      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.maxAwaitTimeMS = value;
      return this;
    }

    /**
     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)
     * @method
     * @param {number} value Number of milliseconds to wait before aborting the query.
     * @throws {MongoError}
     * @return {Cursor}
     */
    maxTimeMS(value) {
      if (typeof value !== 'number') {
        throw MongoError$j.create({ message: 'maxTimeMS must be a number', driver: true });
      }

      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.maxTimeMS = value;
      return this;
    }

    /**
     * Sets a field projection for the query.
     * @method
     * @param {object} value The field projection object.
     * @throws {MongoError}
     * @return {Cursor}
     */
    project(value) {
      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      this.cmd.fields = value;
      return this;
    }

    /**
     * Sets the sort order of the cursor query.
     * @method
     * @param {(string|array|object)} keyOrList The key or keys set for the sort.
     * @param {number} [direction] The direction of the sorting (1 or -1).
     * @throws {MongoError}
     * @return {Cursor}
     */
    sort(keyOrList, direction) {
      if (this.options.tailable) {
        throw MongoError$j.create({ message: "Tailable cursor doesn't support sorting", driver: true });
      }

      if (this.s.state === CursorState$2.CLOSED || this.s.state === CursorState$2.OPEN || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      let order = keyOrList;

      // We have an array of arrays, we need to preserve the order of the sort
      // so we will us a Map
      if (Array.isArray(order) && Array.isArray(order[0])) {
        order = new Map$1(
          order.map(x => {
            const value = [x[0], null];
            if (x[1] === 'asc') {
              value[1] = 1;
            } else if (x[1] === 'desc') {
              value[1] = -1;
            } else if (x[1] === 1 || x[1] === -1 || x[1].$meta) {
              value[1] = x[1];
            } else {
              throw new MongoError$j(
                "Illegal sort clause, must be of the form [['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]"
              );
            }

            return value;
          })
        );
      }

      if (direction != null) {
        order = [[keyOrList, direction]];
      }

      this.cmd.sort = order;
      return this;
    }

    /**
     * Set the batch size for the cursor.
     * @method
     * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.
     * @throws {MongoError}
     * @return {Cursor}
     */
    batchSize(value) {
      if (this.options.tailable) {
        throw MongoError$j.create({
          message: "Tailable cursor doesn't support batchSize",
          driver: true
        });
      }

      if (this.s.state === CursorState$2.CLOSED || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      if (typeof value !== 'number') {
        throw MongoError$j.create({ message: 'batchSize requires an integer', driver: true });
      }

      this.cmd.batchSize = value;
      this.setCursorBatchSize(value);
      return this;
    }

    /**
     * Set the collation options for the cursor.
     * @method
     * @param {object} value The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
     * @throws {MongoError}
     * @return {Cursor}
     */
    collation(value) {
      this.cmd.collation = value;
      return this;
    }

    /**
     * Set the limit for the cursor.
     * @method
     * @param {number} value The limit for the cursor query.
     * @throws {MongoError}
     * @return {Cursor}
     */
    limit(value) {
      if (this.options.tailable) {
        throw MongoError$j.create({ message: "Tailable cursor doesn't support limit", driver: true });
      }

      if (this.s.state === CursorState$2.OPEN || this.s.state === CursorState$2.CLOSED || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      if (typeof value !== 'number') {
        throw MongoError$j.create({ message: 'limit requires an integer', driver: true });
      }

      this.cmd.limit = value;
      this.setCursorLimit(value);
      return this;
    }

    /**
     * Set the skip for the cursor.
     * @method
     * @param {number} value The skip for the cursor query.
     * @throws {MongoError}
     * @return {Cursor}
     */
    skip(value) {
      if (this.options.tailable) {
        throw MongoError$j.create({ message: "Tailable cursor doesn't support skip", driver: true });
      }

      if (this.s.state === CursorState$2.OPEN || this.s.state === CursorState$2.CLOSED || this.isDead()) {
        throw MongoError$j.create({ message: 'Cursor is closed', driver: true });
      }

      if (typeof value !== 'number') {
        throw MongoError$j.create({ message: 'skip requires an integer', driver: true });
      }

      this.cmd.skip = value;
      this.setCursorSkip(value);
      return this;
    }

    /**
     * The callback format for results
     * @callback Cursor~resultCallback
     * @param {MongoError} error An error instance representing the error during the execution.
     * @param {(object|null|boolean)} result The result object if the command was executed successfully.
     */

    /**
     * Clone the cursor
     * @function external:CoreCursor#clone
     * @return {Cursor}
     */

    /**
     * Resets the cursor
     * @function external:CoreCursor#rewind
     * @return {null}
     */

    /**
     * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,
     * not all of the elements will be iterated if this cursor had been previously accessed.
     * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike
     * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements
     * at any given time if batch size is specified. Otherwise, the caller is responsible
     * for making sure that the entire result can fit the memory.
     * @method
     * @deprecated
     * @param {Cursor~resultCallback} callback The result callback.
     * @throws {MongoError}
     * @return {null}
     */
    each(callback) {
      // Rewind cursor state
      this.rewind();
      // Set current cursor to INIT
      this.s.state = CursorState$2.INIT;
      // Run the query
      each(this, callback);
    }

    /**
     * The callback format for the forEach iterator method
     * @callback Cursor~iteratorCallback
     * @param {Object} doc An emitted document for the iterator
     */

    /**
     * The callback error format for the forEach iterator method
     * @callback Cursor~endCallback
     * @param {MongoError} error An error instance representing the error during the execution.
     */

    /**
     * Iterates over all the documents for this cursor using the iterator, callback pattern.
     * @method
     * @param {Cursor~iteratorCallback} iterator The iteration callback.
     * @param {Cursor~endCallback} callback The end callback.
     * @throws {MongoError}
     * @return {Promise} if no callback supplied
     */
    forEach(iterator, callback) {
      // Rewind cursor state
      this.rewind();

      // Set current cursor to INIT
      this.s.state = CursorState$2.INIT;

      if (typeof callback === 'function') {
        each(this, (err, doc) => {
          if (err) {
            callback(err);
            return false;
          }
          if (doc != null) {
            iterator(doc);
            return true;
          }
          if (doc == null && callback) {
            const internalCallback = callback;
            callback = null;
            internalCallback(null);
            return false;
          }
        });
      } else {
        return new this.s.promiseLibrary((fulfill, reject) => {
          each(this, (err, doc) => {
            if (err) {
              reject(err);
              return false;
            } else if (doc == null) {
              fulfill(null);
              return false;
            } else {
              iterator(doc);
              return true;
            }
          });
        });
      }
    }

    /**
     * Set the ReadPreference for the cursor.
     * @method
     * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.
     * @throws {MongoError}
     * @return {Cursor}
     */
    setReadPreference(readPreference) {
      if (this.s.state !== CursorState$2.INIT) {
        throw MongoError$j.create({
          message: 'cannot change cursor readPreference after cursor has been accessed',
          driver: true
        });
      }

      if (readPreference instanceof ReadPreference$a) {
        this.options.readPreference = readPreference;
      } else if (typeof readPreference === 'string') {
        this.options.readPreference = new ReadPreference$a(readPreference);
      } else {
        throw new TypeError('Invalid read preference: ' + readPreference);
      }

      return this;
    }

    /**
     * The callback format for results
     * @callback Cursor~toArrayResultCallback
     * @param {MongoError} error An error instance representing the error during the execution.
     * @param {object[]} documents All the documents the satisfy the cursor.
     */

    /**
     * Returns an array of documents. The caller is responsible for making sure that there
     * is enough memory to store the results. Note that the array only contains partial
     * results when this cursor had been previously accessed. In that case,
     * cursor.rewind() can be used to reset the cursor.
     * @method
     * @param {Cursor~toArrayResultCallback} [callback] The result callback.
     * @throws {MongoError}
     * @return {Promise} returns Promise if no callback passed
     */
    toArray(callback) {
      if (this.options.tailable) {
        throw MongoError$j.create({
          message: 'Tailable cursor cannot be converted to array',
          driver: true
        });
      }

      return maybePromise$2(this, callback, cb => {
        const cursor = this;
        const items = [];

        // Reset cursor
        cursor.rewind();
        cursor.s.state = CursorState$2.INIT;

        // Fetch all the documents
        const fetchDocs = () => {
          cursor._next((err, doc) => {
            if (err) {
              return handleCallback$9(cb, err);
            }

            if (doc == null) {
              return cursor.close({ skipKillCursors: true }, () => handleCallback$9(cb, null, items));
            }

            // Add doc to items
            items.push(doc);

            // Get all buffered objects
            if (cursor.bufferedCount() > 0) {
              let docs = cursor.readBufferedDocuments(cursor.bufferedCount());
              Array.prototype.push.apply(items, docs);
            }

            // Attempt a fetch
            fetchDocs();
          });
        };

        fetchDocs();
      });
    }

    /**
     * The callback format for results
     * @callback Cursor~countResultCallback
     * @param {MongoError} error An error instance representing the error during the execution.
     * @param {number} count The count of documents.
     */

    /**
     * Get the count of documents for this cursor
     * @method
     * @param {boolean} [applySkipLimit=true] Should the count command apply limit and skip settings on the cursor or in the passed in options.
     * @param {object} [options] Optional settings.
     * @param {number} [options.skip] The number of documents to skip.
     * @param {number} [options.limit] The maximum amounts to count before aborting.
     * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.
     * @param {string} [options.hint] An index name hint for the query.
     * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
     * @param {Cursor~countResultCallback} [callback] The result callback.
     * @return {Promise} returns Promise if no callback passed
     */
    count(applySkipLimit, opts, callback) {
      if (this.cmd.query == null)
        throw MongoError$j.create({
          message: 'count can only be used with find command',
          driver: true
        });
      if (typeof opts === 'function') (callback = opts), (opts = {});
      opts = opts || {};

      if (typeof applySkipLimit === 'function') {
        callback = applySkipLimit;
        applySkipLimit = true;
      }

      if (this.cursorState.session) {
        opts = Object.assign({}, opts, { session: this.cursorState.session });
      }

      const countOperation = new count(this, applySkipLimit, opts);

      return execute_operation(this.topology, countOperation, callback);
    }

    /**
     * Close the cursor, sending a KillCursor command and emitting close.
     * @method
     * @param {object} [options] Optional settings.
     * @param {boolean} [options.skipKillCursors] Bypass calling killCursors when closing the cursor.
     * @param {Cursor~resultCallback} [callback] The result callback.
     * @return {Promise} returns Promise if no callback passed
     */
    close(options, callback) {
      if (typeof options === 'function') (callback = options), (options = {});
      options = Object.assign({}, { skipKillCursors: false }, options);

      return maybePromise$2(this, callback, cb => {
        this.s.state = CursorState$2.CLOSED;
        if (!options.skipKillCursors) {
          // Kill the cursor
          this.kill();
        }

        this._endSession(() => {
          this.emit('close');
          cb(null, this);
        });
      });
    }

    /**
     * Map all documents using the provided function
     * @method
     * @param {function} [transform] The mapping transformation method.
     * @return {Cursor}
     */
    map(transform) {
      if (this.cursorState.transforms && this.cursorState.transforms.doc) {
        const oldTransform = this.cursorState.transforms.doc;
        this.cursorState.transforms.doc = doc => {
          return transform(oldTransform(doc));
        };
      } else {
        this.cursorState.transforms = { doc: transform };
      }

      return this;
    }

    /**
     * Is the cursor closed
     * @method
     * @return {boolean}
     */
    isClosed() {
      return this.isDead();
    }

    destroy(err) {
      if (err) this.emit('error', err);
      this.pause();
      this.close();
    }

    /**
     * Return a modified Readable stream including a possible transform method.
     * @method
     * @param {object} [options] Optional settings.
     * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.
     * @return {Cursor}
     * TODO: replace this method with transformStream in next major release
     */
    stream(options) {
      this.cursorState.streamOptions = options || {};
      return this;
    }

    /**
     * Return a modified Readable stream that applies a given transform function, if supplied. If none supplied,
     * returns a stream of unmodified docs.
     * @method
     * @param {object} [options] Optional settings.
     * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.
     * @return {stream}
     */
    transformStream(options) {
      const streamOptions = options || {};
      if (typeof streamOptions.transform === 'function') {
        const stream = new Transform({
          objectMode: true,
          transform: function(chunk, encoding, callback) {
            this.push(streamOptions.transform(chunk));
            callback();
          }
        });

        return this.pipe(stream);
      }

      return this.pipe(new PassThrough({ objectMode: true }));
    }

    /**
     * Execute the explain for the cursor
     *
     * For backwards compatibility, a verbosity of true is interpreted as "allPlansExecution"
     * and false as "queryPlanner". Prior to server version 3.6, aggregate()
     * ignores the verbosity parameter and executes in "queryPlanner".
     *
     * @method
     * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity=true] - An optional mode in which to run the explain.
     * @param {Cursor~resultCallback} [callback] The result callback.
     * @return {Promise} returns Promise if no callback passed
     */
    explain(verbosity, callback) {
      if (typeof verbosity === 'function') (callback = verbosity), (verbosity = true);
      if (verbosity === undefined) verbosity = true;

      if (!this.operation || !this.operation.hasAspect(Aspect$b.EXPLAINABLE)) {
        throw new MongoError$j('This command cannot be explained');
      }
      this.operation.explain = new Explain(verbosity);

      return maybePromise$2(this, callback, cb => {
        CoreCursor.prototype._next.apply(this, [cb]);
      });
    }

    /**
     * Return the cursor logger
     * @method
     * @return {Logger} return the cursor logger
     * @ignore
     */
    getLogger() {
      return this.logger;
    }
  }

  /**
   * Cursor stream data event, fired for each document in the cursor.
   *
   * @event Cursor#data
   * @type {object}
   */

  /**
   * Cursor stream end event
   *
   * @event Cursor#end
   * @type {null}
   */

  /**
   * Cursor stream close event
   *
   * @event Cursor#close
   * @type {null}
   */

  /**
   * Cursor stream readable event
   *
   * @event Cursor#readable
   * @type {null}
   */

  // aliases
  Cursor$3.prototype.maxTimeMs = Cursor$3.prototype.maxTimeMS;

  // deprecated methods
  deprecate$5(Cursor$3.prototype.each, 'Cursor.each is deprecated. Use Cursor.forEach instead.');
  deprecate$5(
    Cursor$3.prototype.maxScan,
    'Cursor.maxScan is deprecated, and will be removed in a later version'
  );

  deprecate$5(
    Cursor$3.prototype.snapshot,
    'Cursor Snapshot is deprecated, and will be removed in a later version'
  );

  /**
   * The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.
   * @function external:Readable#read
   * @param {number} size Optional argument to specify how much data to read.
   * @return {(String | Buffer | null)}
   */

  /**
   * Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.
   * @function external:Readable#setEncoding
   * @param {string} encoding The encoding to use.
   * @return {null}
   */

  /**
   * This method will cause the readable stream to resume emitting data events.
   * @function external:Readable#resume
   * @return {null}
   */

  /**
   * This method will cause a stream in flowing-mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.
   * @function external:Readable#pause
   * @return {null}
   */

  /**
   * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.
   * @function external:Readable#pipe
   * @param {Writable} destination The destination for writing data
   * @param {object} [options] Pipe options
   * @return {null}
   */

  /**
   * This method will remove the hooks set up for a previous pipe() call.
   * @function external:Readable#unpipe
   * @param {Writable} [destination] The destination for writing data
   * @return {null}
   */

  /**
   * This is useful in certain cases where a stream is being consumed by a parser, which needs to "un-consume" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.
   * @function external:Readable#unshift
   * @param {(Buffer|string)} chunk Chunk of data to unshift onto the read queue.
   * @return {null}
   */

  /**
   * Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See "Compatibility" below for more information.)
   * @function external:Readable#wrap
   * @param {Stream} stream An "old style" readable stream.
   * @return {null}
   */

  var cursor$1 = Cursor$3;

  const Aspect$a = operation.Aspect;
  const OperationBase$5 = operation.OperationBase;
  const ReadPreference$9 = core.ReadPreference;


  const maxWireVersion$5 = require$$2.maxWireVersion;
  const decorateWithExplain = require$$1$1.decorateWithExplain;
  const commandSupportsReadConcern = sessions.commandSupportsReadConcern;
  const MongoError$i = error$2.MongoError;

  const SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;

  class CommandOperationV2 extends OperationBase$5 {
    constructor(parent, options, operationOptions) {
      super(options);

      this.ns = parent.s.namespace.withCollection('$cmd');
      const propertyProvider = this.hasAspect(Aspect$a.NO_INHERIT_OPTIONS) ? undefined : parent;
      this.readPreference = this.hasAspect(Aspect$a.WRITE_OPERATION)
        ? ReadPreference$9.primary
        : ReadPreference$9.resolve(propertyProvider, this.options);
      this.readConcern = resolveReadConcern(propertyProvider, this.options);
      this.writeConcern = resolveWriteConcern(propertyProvider, this.options);

      if (operationOptions && typeof operationOptions.fullResponse === 'boolean') {
        this.fullResponse = true;
      }

      // TODO: A lot of our code depends on having the read preference in the options. This should
      //       go away, but also requires massive test rewrites.
      this.options.readPreference = this.readPreference;

      // TODO(NODE-2056): make logger another "inheritable" property
      if (parent.s.logger) {
        this.logger = parent.s.logger;
      } else if (parent.s.db && parent.s.db.logger) {
        this.logger = parent.s.db.logger;
      }
    }

    executeCommand(server, cmd, callback) {
      // TODO: consider making this a non-enumerable property
      this.server = server;

      const options = this.options;
      const serverWireVersion = maxWireVersion$5(server);
      const inTransaction = this.session && this.session.inTransaction();

      if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {
        Object.assign(cmd, { readConcern: this.readConcern });
      }

      if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {
        callback(
          new MongoError$i(
            `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`
          )
        );
        return;
      }

      if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {
        if (this.writeConcern && this.hasAspect(Aspect$a.WRITE_OPERATION)) {
          Object.assign(cmd, { writeConcern: this.writeConcern });
        }

        if (options.collation && typeof options.collation === 'object') {
          Object.assign(cmd, { collation: options.collation });
        }
      }

      if (typeof options.maxTimeMS === 'number') {
        cmd.maxTimeMS = options.maxTimeMS;
      }

      if (typeof options.comment === 'string') {
        cmd.comment = options.comment;
      }

      if (this.hasAspect(Aspect$a.EXPLAINABLE) && this.explain) {
        if (serverWireVersion < 6 && cmd.aggregate) {
          // Prior to 3.6, with aggregate, verbosity is ignored, and we must pass in "explain: true"
          cmd.explain = true;
        } else {
          cmd = decorateWithExplain(cmd, this.explain);
        }
      }

      if (this.logger && this.logger.isDebug()) {
        this.logger.debug(`executing command ${JSON.stringify(cmd)} against ${this.ns}`);
      }

      server.command(this.ns.toString(), cmd, this.options, (err, result) => {
        if (err) {
          callback(err, null);
          return;
        }

        if (this.fullResponse) {
          callback(null, result);
          return;
        }

        callback(null, result.result);
      });
    }
  }

  function resolveWriteConcern(parent, options) {
    return write_concern.fromOptions(options) || (parent && parent.writeConcern);
  }

  function resolveReadConcern(parent, options) {
    return read_concern.fromOptions(options) || (parent && parent.readConcern);
  }

  var command_v2 = CommandOperationV2;

  const MongoError$h = core.MongoError;
  const maxWireVersion$4 = require$$2.maxWireVersion;
  const ReadPreference$8 = core.ReadPreference;
  const Aspect$9 = operation.Aspect;
  const defineAspects$8 = operation.defineAspects;

  const DB_AGGREGATE_COLLECTION = 1;
  const MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;

  class AggregateOperation$1 extends command_v2 {
    constructor(parent, pipeline, options) {
      super(parent, options, { fullResponse: true });

      this.target =
        parent.s.namespace && parent.s.namespace.collection
          ? parent.s.namespace.collection
          : DB_AGGREGATE_COLLECTION;

      this.pipeline = pipeline;

      // determine if we have a write stage, override read preference if so
      this.hasWriteStage = false;
      if (typeof options.out === 'string') {
        this.pipeline = this.pipeline.concat({ $out: options.out });
        this.hasWriteStage = true;
      } else if (pipeline.length > 0) {
        const finalStage = pipeline[pipeline.length - 1];
        if (finalStage.$out || finalStage.$merge) {
          this.hasWriteStage = true;
        }
      }

      if (this.hasWriteStage) {
        this.readPreference = ReadPreference$8.primary;
      }

      if (this.explain && this.writeConcern) {
        throw new MongoError$h('"explain" cannot be used on an aggregate call with writeConcern');
      }

      if (options.cursor != null && typeof options.cursor !== 'object') {
        throw new MongoError$h('cursor options must be an object');
      }
    }

    get canRetryRead() {
      return !this.hasWriteStage;
    }

    addToPipeline(stage) {
      this.pipeline.push(stage);
    }

    execute(server, callback) {
      const options = this.options;
      const serverWireVersion = maxWireVersion$4(server);
      const command = { aggregate: this.target, pipeline: this.pipeline };

      if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {
        this.readConcern = null;
      }

      if (serverWireVersion >= 5) {
        if (this.hasWriteStage && this.writeConcern) {
          Object.assign(command, { writeConcern: this.writeConcern });
        }
      }

      if (options.bypassDocumentValidation === true) {
        command.bypassDocumentValidation = options.bypassDocumentValidation;
      }

      if (typeof options.allowDiskUse === 'boolean') {
        command.allowDiskUse = options.allowDiskUse;
      }

      if (options.hint) {
        command.hint = options.hint;
      }

      if (this.explain) {
        options.full = false;
      }

      command.cursor = options.cursor || {};
      if (options.batchSize && !this.hasWriteStage) {
        command.cursor.batchSize = options.batchSize;
      }

      super.executeCommand(server, command, callback);
    }
  }

  defineAspects$8(AggregateOperation$1, [
    Aspect$9.READ_OPERATION,
    Aspect$9.RETRYABLE,
    Aspect$9.EXECUTE_WITH_SELECTION,
    Aspect$9.EXPLAINABLE
  ]);

  var aggregate = AggregateOperation$1;

  const deprecate$4 = require('util').deprecate;
  const deprecateOptions$1 = require('./utils').deprecateOptions;
  const emitWarningOnce$1 = require('./utils').emitWarningOnce;
  const checkCollectionName$1 = require('./utils').checkCollectionName;
  const ObjectID$4 = require('./core').BSON.ObjectID;
  const MongoError$g = require('./core').MongoError;
  const normalizeHintField = require('./utils').normalizeHintField;
  const decorateCommand = require('./utils').decorateCommand;
  const decorateWithCollation = require('./utils').decorateWithCollation;
  const decorateWithReadConcern = require('./utils').decorateWithReadConcern;
  const formattedOrderClause = require('./utils').formattedOrderClause;
  const ReadPreference$7 = require('./core').ReadPreference;
  const unordered = require('./bulk/unordered');
  const ordered = require('./bulk/ordered');
  const ChangeStream$1 = require('./change_stream');
  const executeLegacyOperation$4 = require('./utils').executeLegacyOperation;
  const WriteConcern$1 = require('./write_concern');
  const ReadConcern$1 = require('./read_concern');
  const MongoDBNamespace$5 = require('./utils').MongoDBNamespace;
  const AggregationCursor$1 = require('./aggregation_cursor');
  const CommandCursor$1 = require('./command_cursor');

  // Operations
  const ensureIndex$1 = require('./operations/collection_ops').ensureIndex;
  const group = require('./operations/collection_ops').group;
  const parallelCollectionScan = require('./operations/collection_ops').parallelCollectionScan;
  const removeDocuments = require('./operations/common_functions').removeDocuments;
  const save = require('./operations/collection_ops').save;
  const updateDocuments = require('./operations/common_functions').updateDocuments;

  const AggregateOperation = require('./operations/aggregate');
  const BulkWriteOperation = require('./operations/bulk_write');
  const CountDocumentsOperation = require('./operations/count_documents');
  const CreateIndexesOperation$1 = require('./operations/create_indexes');
  const DeleteManyOperation = require('./operations/delete_many');
  const DeleteOneOperation = require('./operations/delete_one');
  const DistinctOperation = require('./operations/distinct');
  const DropCollectionOperation$2 = require('./operations/drop').DropCollectionOperation;
  const DropIndexOperation = require('./operations/drop_index');
  const DropIndexesOperation = require('./operations/drop_indexes');
  const EstimatedDocumentCountOperation = require('./operations/estimated_document_count');
  const FindOperation = require('./operations/find');
  const FindOneOperation = require('./operations/find_one');
  const FindAndModifyOperation = require('./operations/find_and_modify');
  const FindOneAndDeleteOperation = require('./operations/find_one_and_delete');
  const FindOneAndReplaceOperation = require('./operations/find_one_and_replace');
  const FindOneAndUpdateOperation = require('./operations/find_one_and_update');
  const GeoHaystackSearchOperation = require('./operations/geo_haystack_search');
  const IndexesOperation = require('./operations/indexes');
  const IndexExistsOperation = require('./operations/index_exists');
  const IndexInformationOperation$1 = require('./operations/index_information');
  const InsertManyOperation = require('./operations/insert_many');
  const InsertOneOperation = require('./operations/insert_one');
  const IsCappedOperation = require('./operations/is_capped');
  const ListIndexesOperation = require('./operations/list_indexes');
  const MapReduceOperation = require('./operations/map_reduce');
  const OptionsOperation = require('./operations/options_operation');
  const RenameOperation$1 = require('./operations/rename');
  const ReIndexOperation = require('./operations/re_index');
  const ReplaceOneOperation = require('./operations/replace_one');
  const StatsOperation = require('./operations/stats');
  const UpdateManyOperation = require('./operations/update_many');
  const UpdateOneOperation = require('./operations/update_one');

  const executeOperation = require('./operations/execute_operation');

  /**
   * @fileOverview The **Collection** class is an internal class that embodies a MongoDB collection
   * allowing for insert/update/remove/find and other command operation on that MongoDB collection.
   *
   * **COLLECTION Cannot directly be instantiated**
   * @example
   * const MongoClient = require('mongodb').MongoClient;
   * const test = require('assert');
   * // Connection url
   * const url = 'mongodb://localhost:27017';
   * // Database Name
   * const dbName = 'test';
   * // Connect using MongoClient
   * MongoClient.connect(url, function(err, client) {
   *   // Create a collection we want to drop later
   *   const col = client.db(dbName).collection('createIndexExample1');
   *   // Show that duplicate records got dropped
   *   col.find({}).toArray(function(err, items) {
   *     test.equal(null, err);
   *     test.equal(4, items.length);
   *     client.close();
   *   });
   * });
   */

  const mergeKeys = ['ignoreUndefined'];

  /**
   * Create a new Collection instance (INTERNAL TYPE, do not instantiate directly)
   * @class
   */
  function Collection(db, topology, dbName, name, pkFactory, options) {
    checkCollectionName$1(name);

    // Unpack variables
    const internalHint = null;
    const slaveOk = options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk;
    const serializeFunctions =
      options == null || options.serializeFunctions == null
        ? db.s.options.serializeFunctions
        : options.serializeFunctions;
    const raw = options == null || options.raw == null ? db.s.options.raw : options.raw;
    const promoteLongs =
      options == null || options.promoteLongs == null
        ? db.s.options.promoteLongs
        : options.promoteLongs;
    const promoteValues =
      options == null || options.promoteValues == null
        ? db.s.options.promoteValues
        : options.promoteValues;
    const promoteBuffers =
      options == null || options.promoteBuffers == null
        ? db.s.options.promoteBuffers
        : options.promoteBuffers;
    const collectionHint = null;

    const namespace = new MongoDBNamespace$5(dbName, name);

    // Get the promiseLibrary
    const promiseLibrary = options.promiseLibrary || Promise;

    // Set custom primary key factory if provided
    pkFactory = pkFactory == null ? ObjectID$4 : pkFactory;

    // Internal state
    this.s = {
      // Set custom primary key factory if provided
      pkFactory: pkFactory,
      // Db
      db: db,
      // Topology
      topology: topology,
      // Options
      options: options,
      // Namespace
      namespace: namespace,
      // Read preference
      readPreference: ReadPreference$7.fromOptions(options),
      // SlaveOK
      slaveOk: slaveOk,
      // Serialize functions
      serializeFunctions: serializeFunctions,
      // Raw
      raw: raw,
      // promoteLongs
      promoteLongs: promoteLongs,
      // promoteValues
      promoteValues: promoteValues,
      // promoteBuffers
      promoteBuffers: promoteBuffers,
      // internalHint
      internalHint: internalHint,
      // collectionHint
      collectionHint: collectionHint,
      // Promise library
      promiseLibrary: promiseLibrary,
      // Read Concern
      readConcern: ReadConcern$1.fromOptions(options),
      // Write Concern
      writeConcern: WriteConcern$1.fromOptions(options)
    };
  }

  /**
   * The name of the database this collection belongs to
   * @member {string} dbName
   * @memberof Collection#
   * @readonly
   */
  Object.defineProperty(Collection.prototype, 'dbName', {
    enumerable: true,
    get: function() {
      return this.s.namespace.db;
    }
  });

  /**
   * The name of this collection
   * @member {string} collectionName
   * @memberof Collection#
   * @readonly
   */
  Object.defineProperty(Collection.prototype, 'collectionName', {
    enumerable: true,
    get: function() {
      return this.s.namespace.collection;
    }
  });

  /**
   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`
   * @member {string} namespace
   * @memberof Collection#
   * @readonly
   */
  Object.defineProperty(Collection.prototype, 'namespace', {
    enumerable: true,
    get: function() {
      return this.s.namespace.toString();
    }
  });

  /**
   * The current readConcern of the collection. If not explicitly defined for
   * this collection, will be inherited from the parent DB
   * @member {ReadConcern} [readConcern]
   * @memberof Collection#
   * @readonly
   */
  Object.defineProperty(Collection.prototype, 'readConcern', {
    enumerable: true,
    get: function() {
      if (this.s.readConcern == null) {
        return this.s.db.readConcern;
      }
      return this.s.readConcern;
    }
  });

  /**
   * The current readPreference of the collection. If not explicitly defined for
   * this collection, will be inherited from the parent DB
   * @member {ReadPreference} [readPreference]
   * @memberof Collection#
   * @readonly
   */
  Object.defineProperty(Collection.prototype, 'readPreference', {
    enumerable: true,
    get: function() {
      if (this.s.readPreference == null) {
        return this.s.db.readPreference;
      }

      return this.s.readPreference;
    }
  });

  /**
   * The current writeConcern of the collection. If not explicitly defined for
   * this collection, will be inherited from the parent DB
   * @member {WriteConcern} [writeConcern]
   * @memberof Collection#
   * @readonly
   */
  Object.defineProperty(Collection.prototype, 'writeConcern', {
    enumerable: true,
    get: function() {
      if (this.s.writeConcern == null) {
        return this.s.db.writeConcern;
      }
      return this.s.writeConcern;
    }
  });

  /**
   * The current index hint for the collection
   * @member {object} [hint]
   * @memberof Collection#
   */
  Object.defineProperty(Collection.prototype, 'hint', {
    enumerable: true,
    get: function() {
      return this.s.collectionHint;
    },
    set: function(v) {
      this.s.collectionHint = normalizeHintField(v);
    }
  });

  const DEPRECATED_FIND_OPTIONS = ['maxScan', 'fields', 'snapshot', 'oplogReplay'];

  /**
   * Creates a cursor for a query that can be used to iterate over results from MongoDB
   * @method
   * @param {object} [query={}] The cursor query object.
   * @param {object} [options] Optional settings.
   * @param {number} [options.limit=0] Sets the limit of documents returned in the query.
   * @param {(array|object)} [options.sort] Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
   * @param {object} [options.projection] The fields to return in the query. Object of fields to either include or exclude (one of, not both), {'a':1, 'b': 1} **or** {'a': 0, 'b': 0}
   * @param {object} [options.fields] **Deprecated** Use `options.projection` instead
   * @param {number} [options.skip=0] Set to skip N documents ahead in your query (useful for pagination).
   * @param {Object} [options.hint] Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}
   * @param {boolean} [options.snapshot=false] DEPRECATED: Snapshot query.
   * @param {boolean} [options.timeout=false] Specify if the cursor can timeout.
   * @param {boolean} [options.tailable=false] Specify if the cursor is tailable.
   * @param {boolean} [options.awaitData=false] Specify if the cursor is a a tailable-await cursor. Requires `tailable` to be true
   * @param {number} [options.batchSize=1000] Set the batchSize for the getMoreCommand when iterating over the query results.
   * @param {boolean} [options.returnKey=false] Only return the index key.
   * @param {number} [options.maxScan] DEPRECATED: Limit the number of items to scan.
   * @param {number} [options.min] Set index bounds.
   * @param {number} [options.max] Set index bounds.
   * @param {boolean} [options.showDiskLoc=false] Show disk location of results.
   * @param {string} [options.comment] You can put a $comment field on a query to make looking in the profiler logs simpler.
   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
   * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {boolean} [options.partial=false] Specify if the cursor should return partial results when querying against a sharded system
   * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.
   * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true
   * @param {boolean} [options.noCursorTimeout] The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {boolean} [options.allowDiskUse] Enables writing to temporary files on the server.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @throws {MongoError}
   * @return {Cursor}
   */
  Collection.prototype.find = deprecateOptions$1(
    {
      name: 'collection.find',
      deprecatedOptions: DEPRECATED_FIND_OPTIONS,
      optionsIndex: 1
    },
    function(query, options, callback) {
      if (typeof callback === 'object') {
        // TODO(MAJOR): throw in the future
        emitWarningOnce$1('Third parameter to `find()` must be a callback or undefined');
      }

      let selector = query;
      // figuring out arguments
      if (typeof callback !== 'function') {
        if (typeof options === 'function') {
          callback = options;
          options = undefined;
        } else if (options == null) {
          callback = typeof selector === 'function' ? selector : undefined;
          selector = typeof selector === 'object' ? selector : undefined;
        }
      }

      // Ensure selector is not null
      selector = selector == null ? {} : selector;
      // Validate correctness off the selector
      const object = selector;
      if (Buffer$9.isBuffer(object)) {
        const object_size = object[0] | (object[1] << 8) | (object[2] << 16) | (object[3] << 24);
        if (object_size !== object.length) {
          const error = new Error(
            'query selector raw message size does not match message header size [' +
              object.length +
              '] != [' +
              object_size +
              ']'
          );
          error.name = 'MongoError';
          throw error;
        }
      }

      // Check special case where we are using an objectId
      if (selector != null && selector._bsontype === 'ObjectID') {
        selector = { _id: selector };
      }

      if (!options) options = {};

      let projection = options.projection || options.fields;

      if (projection && !Buffer$9.isBuffer(projection) && Array.isArray(projection)) {
        projection = projection.length
          ? projection.reduce((result, field) => {
              result[field] = 1;
              return result;
            }, {})
          : { _id: 1 };
      }

      // Make a shallow copy of options
      let newOptions = Object.assign({}, options);

      // Make a shallow copy of the collection options
      for (let key in this.s.options) {
        if (mergeKeys.indexOf(key) !== -1) {
          newOptions[key] = this.s.options[key];
        }
      }

      // Unpack options
      newOptions.skip = options.skip ? options.skip : 0;
      newOptions.limit = options.limit ? options.limit : 0;
      newOptions.raw = typeof options.raw === 'boolean' ? options.raw : this.s.raw;
      newOptions.hint =
        options.hint != null ? normalizeHintField(options.hint) : this.s.collectionHint;
      newOptions.timeout = typeof options.timeout === 'undefined' ? undefined : options.timeout;
      // // If we have overridden slaveOk otherwise use the default db setting
      newOptions.slaveOk = options.slaveOk != null ? options.slaveOk : this.s.db.slaveOk;

      // Add read preference if needed
      newOptions.readPreference = ReadPreference$7.resolve(this, newOptions);

      // Set slave ok to true if read preference different from primary
      if (
        newOptions.readPreference != null &&
        (newOptions.readPreference !== 'primary' || newOptions.readPreference.mode !== 'primary')
      ) {
        newOptions.slaveOk = true;
      }

      // Ensure the query is an object
      if (selector != null && typeof selector !== 'object') {
        throw MongoError$g.create({ message: 'query selector must be an object', driver: true });
      }

      // Build the find command
      const findCommand = {
        find: this.s.namespace.toString(),
        limit: newOptions.limit,
        skip: newOptions.skip,
        query: selector
      };

      if (typeof options.allowDiskUse === 'boolean') {
        findCommand.allowDiskUse = options.allowDiskUse;
      }

      // Ensure we use the right await data option
      if (typeof newOptions.awaitdata === 'boolean') {
        newOptions.awaitData = newOptions.awaitdata;
      }

      // Translate to new command option noCursorTimeout
      if (typeof newOptions.timeout === 'boolean') newOptions.noCursorTimeout = !newOptions.timeout;

      decorateCommand(findCommand, newOptions, ['session', 'collation']);

      if (projection) findCommand.fields = projection;

      // Add db object to the new options
      newOptions.db = this.s.db;

      // Add the promise library
      newOptions.promiseLibrary = this.s.promiseLibrary;

      // Set raw if available at collection level
      if (newOptions.raw == null && typeof this.s.raw === 'boolean') newOptions.raw = this.s.raw;
      // Set promoteLongs if available at collection level
      if (newOptions.promoteLongs == null && typeof this.s.promoteLongs === 'boolean')
        newOptions.promoteLongs = this.s.promoteLongs;
      if (newOptions.promoteValues == null && typeof this.s.promoteValues === 'boolean')
        newOptions.promoteValues = this.s.promoteValues;
      if (newOptions.promoteBuffers == null && typeof this.s.promoteBuffers === 'boolean')
        newOptions.promoteBuffers = this.s.promoteBuffers;

      // Sort options
      if (findCommand.sort) {
        findCommand.sort = formattedOrderClause(findCommand.sort);
      }

      // Set the readConcern
      decorateWithReadConcern(findCommand, this, options);

      // Decorate find command with collation options
      try {
        decorateWithCollation(findCommand, this, options);
      } catch (err) {
        if (typeof callback === 'function') return callback(err, null);
        throw err;
      }

      const cursor = this.s.topology.cursor(
        new FindOperation(this, this.s.namespace, findCommand, newOptions),
        newOptions
      );

      // TODO: remove this when NODE-2074 is resolved
      if (typeof callback === 'function') {
        callback(null, cursor);
        return;
      }

      return cursor;
    }
  );

  /**
   * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,
   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior
   * can be overridden by setting the **forceServerObjectId** flag.
   *
   * @method
   * @param {object} doc Document to insert.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.checkKeys=true] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~insertOneWriteOpCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.insertOne = function(doc, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    const insertOneOperation = new InsertOneOperation(this, doc, options);

    return executeOperation(this.s.topology, insertOneOperation, callback);
  };

  /**
   * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,
   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior
   * can be overridden by setting the **forceServerObjectId** flag.
   *
   * @method
   * @param {object[]} docs Documents to insert.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {boolean} [options.ordered=true] If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails.
   * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.checkKeys=true] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~insertWriteOpCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.insertMany = function(docs, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options ? Object.assign({}, options) : { ordered: true };

    const insertManyOperation = new InsertManyOperation(this, docs, options);

    return executeOperation(this.s.topology, insertManyOperation, callback);
  };

  /**
   * @typedef {Object} Collection~BulkWriteOpResult
   * @property {number} insertedCount Number of documents inserted.
   * @property {number} matchedCount Number of documents matched for update.
   * @property {number} modifiedCount Number of documents modified.
   * @property {number} deletedCount Number of documents deleted.
   * @property {number} upsertedCount Number of documents upserted.
   * @property {object} insertedIds Inserted document generated Id's, hash key is the index of the originating operation
   * @property {object} upsertedIds Upserted document generated Id's, hash key is the index of the originating operation
   * @property {object} result The command result object.
   */

  /**
   * The callback format for inserts
   * @callback Collection~bulkWriteOpCallback
   * @param {BulkWriteError} error An error instance representing the error during the execution.
   * @param {Collection~BulkWriteOpResult} result The result object if the command was executed successfully.
   */

  /**
   * Perform a bulkWrite operation without a fluent API
   *
   * Legal operation types are
   *
   *  { insertOne: { document: { a: 1 } } }
   *
   *  { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
   *
   *  { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }
   *
   *  { updateMany: { filter: {}, update: {$set: {"a.$[i].x": 5}}, arrayFilters: [{ "i.x": 5 }]} }
   *
   *  { deleteOne: { filter: {c:1} } }
   *
   *  { deleteMany: { filter: {c:1} } }
   *
   *  { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true}}
   *
   * If documents passed in do not contain the **_id** field,
   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior
   * can be overridden by setting the **forceServerObjectId** flag.
   *
   * @method
   * @param {object[]} operations Bulk operations to perform.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.ordered=true] Execute write operation in ordered or unordered fashion.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {object[]} [options.arrayFilters] Determines which array elements to modify for update operation in MongoDB 3.6 or higher.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.checkKeys=false] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~bulkWriteOpCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.bulkWrite = function(operations, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || { ordered: true };

    if (!Array.isArray(operations)) {
      throw MongoError$g.create({ message: 'operations must be an array of documents', driver: true });
    }

    const bulkWriteOperation = new BulkWriteOperation(this, operations, options);

    return executeOperation(this.s.topology, bulkWriteOperation, callback);
  };

  /**
   * @typedef {Object} Collection~WriteOpResult
   * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany
   * @property {object} connection The connection object used for the operation.
   * @property {object} result The command result object.
   */

  /**
   * The callback format for inserts
   * @callback Collection~writeOpCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Collection~WriteOpResult} result The result object if the command was executed successfully.
   */

  /**
   * @typedef {Object} Collection~insertWriteOpResult
   * @property {number} insertedCount The total amount of documents inserted.
   * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany
   * @property {Object.<Number, ObjectId>} insertedIds Map of the index of the inserted document to the id of the inserted document.
   * @property {object} connection The connection object used for the operation.
   * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).
   * @property {number} result.ok Is 1 if the command executed correctly.
   * @property {number} result.n The total count of documents inserted.
   */

  /**
   * @typedef {Object} Collection~insertOneWriteOpResult
   * @property {number} insertedCount The total amount of documents inserted.
   * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany
   * @property {ObjectId} insertedId The driver generated ObjectId for the insert operation.
   * @property {object} connection The connection object used for the operation.
   * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).
   * @property {number} result.ok Is 1 if the command executed correctly.
   * @property {number} result.n The total count of documents inserted.
   */

  /**
   * The callback format for inserts
   * @callback Collection~insertWriteOpCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Collection~insertWriteOpResult} result The result object if the command was executed successfully.
   */

  /**
   * The callback format for inserts
   * @callback Collection~insertOneWriteOpCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Collection~insertOneWriteOpResult} result The result object if the command was executed successfully.
   */

  /**
   * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,
   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior
   * can be overridden by setting the **forceServerObjectId** flag.
   *
   * @method
   * @param {(object|object[])} docs Documents to insert.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~insertWriteOpCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use insertOne, insertMany or bulkWrite
   */
  Collection.prototype.insert = deprecate$4(function(docs, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || { ordered: false };
    docs = !Array.isArray(docs) ? [docs] : docs;

    if (options.keepGoing === true) {
      options.ordered = false;
    }

    return this.insertMany(docs, options, callback);
  }, 'collection.insert is deprecated. Use insertOne, insertMany or bulkWrite instead.');

  /**
   * @typedef {Object} Collection~updateWriteOpResult
   * @property {Object} result The raw result returned from MongoDB. Will vary depending on server version.
   * @property {Number} result.ok Is 1 if the command executed correctly.
   * @property {Number} result.n The total count of documents scanned.
   * @property {Number} result.nModified The total count of documents modified.
   * @property {Object} connection The connection object used for the operation.
   * @property {Number} matchedCount The number of documents that matched the filter.
   * @property {Number} modifiedCount The number of documents that were modified.
   * @property {Number} upsertedCount The number of documents upserted.
   * @property {Object} upsertedId The upserted id.
   * @property {ObjectId} upsertedId._id The upserted _id returned from the server.
   * @property {Object} message The raw msg response wrapped in an internal class
   * @property {object[]} [ops] In a response to {@link Collection#replaceOne replaceOne}, contains the new value of the document on the server. This is the same document that was originally passed in, and is only here for legacy purposes.
   */

  /**
   * The callback format for inserts
   * @callback Collection~updateWriteOpCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Collection~updateWriteOpResult} result The result object if the command was executed successfully.
   */

  /**
   * Update a single document in a collection
   * @method
   * @param {object} filter The Filter used to select the document to update
   * @param {object} update The update operations to be applied to the document
   * @param {object} [options] Optional settings.
   * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.
   * @param {boolean} [options.upsert=false] When true, creates a new document if no document matches the query..
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.checkKeys=false] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~updateWriteOpCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.updateOne = function(filter, update, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = Object.assign({}, options);

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    return executeOperation(
      this.s.topology,
      new UpdateOneOperation(this, filter, update, options),
      callback
    );
  };

  /**
   * Replace a document in a collection with another document
   * @method
   * @param {object} filter The Filter used to select the document to replace
   * @param {object} doc The Document that replaces the matching document
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.
   * @param {boolean} [options.upsert=false] When true, creates a new document if no document matches the query.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.checkKeys=false] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~updateWriteOpCallback} [callback] The command result callback
   * @return {Promise<Collection~updateWriteOpResult>} returns Promise if no callback passed
   */
  Collection.prototype.replaceOne = function(filter, doc, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = Object.assign({}, options);

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    return executeOperation(
      this.s.topology,
      new ReplaceOneOperation(this, filter, doc, options),
      callback
    );
  };

  /**
   * Update multiple documents in a collection
   * @method
   * @param {object} filter The Filter used to select the documents to update
   * @param {object} update The update operations to be applied to the documents
   * @param {object} [options] Optional settings.
   * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.
   * @param {boolean} [options.upsert=false] When true, creates a new document if no document matches the query..
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.checkKeys=false] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~updateWriteOpCallback} [callback] The command result callback
   * @return {Promise<Collection~updateWriteOpResult>} returns Promise if no callback passed
   */
  Collection.prototype.updateMany = function(filter, update, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = Object.assign({}, options);

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    return executeOperation(
      this.s.topology,
      new UpdateManyOperation(this, filter, update, options),
      callback
    );
  };

  /**
   * Updates documents.
   * @method
   * @param {object} selector The selector for the update operation.
   * @param {object} update The update operations to be applied to the documents
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.upsert=false] Update operation is an upsert.
   * @param {boolean} [options.multi=false] Update one/all documents with operation.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.
   * @param {Collection~writeOpCallback} [callback] The command result callback
   * @throws {MongoError}
   * @return {Promise} returns Promise if no callback passed
   * @deprecated use updateOne, updateMany or bulkWrite
   */
  Collection.prototype.update = deprecate$4(function(selector, update, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    return executeLegacyOperation$4(this.s.topology, updateDocuments, [
      this,
      selector,
      update,
      options,
      callback
    ]);
  }, 'collection.update is deprecated. Use updateOne, updateMany, or bulkWrite instead.');

  /**
   * @typedef {Object} Collection~deleteWriteOpResult
   * @property {Object} result The raw result returned from MongoDB. Will vary depending on server version.
   * @property {Number} result.ok Is 1 if the command executed correctly.
   * @property {Number} result.n The total count of documents deleted.
   * @property {Object} connection The connection object used for the operation.
   * @property {Number} deletedCount The number of documents deleted.
   */

  /**
   * The callback format for deletes
   * @callback Collection~deleteWriteOpCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Collection~deleteWriteOpResult} result The result object if the command was executed successfully.
   */

  /**
   * Delete a document from a collection
   * @method
   * @param {object} filter The Filter used to select the document to remove
   * @param {object} [options] Optional settings.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.checkKeys=false] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {string|object} [options.hint] optional index hint for optimizing the filter query
   * @param {Collection~deleteWriteOpCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.deleteOne = function(filter, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = Object.assign({}, options);

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    const deleteOneOperation = new DeleteOneOperation(this, filter, options);

    return executeOperation(this.s.topology, deleteOneOperation, callback);
  };

  Collection.prototype.removeOne = Collection.prototype.deleteOne;

  /**
   * Delete multiple documents from a collection
   * @method
   * @param {object} filter The Filter used to select the documents to remove
   * @param {object} [options] Optional settings.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.checkKeys=false] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {string|object} [options.hint] optional index hint for optimizing the filter query
   * @param {Collection~deleteWriteOpCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.deleteMany = function(filter, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = Object.assign({}, options);

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    const deleteManyOperation = new DeleteManyOperation(this, filter, options);

    return executeOperation(this.s.topology, deleteManyOperation, callback);
  };

  Collection.prototype.removeMany = Collection.prototype.deleteMany;

  /**
   * Remove documents.
   * @method
   * @param {object} selector The selector for the update operation.
   * @param {object} [options] Optional settings.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.single=false] Removes the first document found.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~writeOpCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @deprecated use deleteOne, deleteMany or bulkWrite
   */
  Collection.prototype.remove = deprecate$4(function(selector, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    return executeLegacyOperation$4(this.s.topology, removeDocuments, [
      this,
      selector,
      options,
      callback
    ]);
  }, 'collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.');

  /**
   * Save a document. Simple full document replacement function. Not recommended for efficiency, use atomic
   * operators and update instead for more efficient operations.
   * @method
   * @param {object} doc Document to save
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~writeOpCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @deprecated use insertOne, insertMany, updateOne or updateMany
   */
  Collection.prototype.save = deprecate$4(function(doc, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    return executeLegacyOperation$4(this.s.topology, save, [this, doc, options, callback]);
  }, 'collection.save is deprecated. Use insertOne, insertMany, updateOne, or updateMany instead.');

  /**
   * The callback format for results
   * @callback Collection~resultCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {object} result The result object if the command was executed successfully.
   */

  /**
   * The callback format for an aggregation call
   * @callback Collection~aggregationCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {AggregationCursor} cursor The cursor if the aggregation command was executed successfully.
   */

  /**
   * Fetches the first document that matches the query
   * @method
   * @param {object} query Query for find Operation
   * @param {object} [options] Optional settings.
   * @param {number} [options.limit=0] Sets the limit of documents returned in the query.
   * @param {(array|object)} [options.sort] Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.
   * @param {object} [options.projection] The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}
   * @param {object} [options.fields] **Deprecated** Use `options.projection` instead
   * @param {number} [options.skip=0] Set to skip N documents ahead in your query (useful for pagination).
   * @param {Object} [options.hint] Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}
   * @param {boolean} [options.snapshot=false] DEPRECATED: Snapshot query.
   * @param {boolean} [options.timeout=false] Specify if the cursor can timeout.
   * @param {boolean} [options.tailable=false] Specify if the cursor is tailable.
   * @param {number} [options.batchSize=1] Set the batchSize for the getMoreCommand when iterating over the query results.
   * @param {boolean} [options.returnKey=false] Only return the index key.
   * @param {number} [options.maxScan] DEPRECATED: Limit the number of items to scan.
   * @param {number} [options.min] Set index bounds.
   * @param {number} [options.max] Set index bounds.
   * @param {boolean} [options.showDiskLoc=false] Show disk location of results.
   * @param {string} [options.comment] You can put a $comment field on a query to make looking in the profiler logs simpler.
   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
   * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {boolean} [options.partial=false] Specify if the cursor should return partial results when querying against a sharded system
   * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.findOne = deprecateOptions$1(
    {
      name: 'collection.find',
      deprecatedOptions: DEPRECATED_FIND_OPTIONS,
      optionsIndex: 1
    },
    function(query, options, callback) {
      if (typeof callback === 'object') {
        // TODO(MAJOR): throw in the future
        emitWarningOnce$1('Third parameter to `findOne()` must be a callback or undefined');
      }

      if (typeof query === 'function') (callback = query), (query = {}), (options = {});
      if (typeof options === 'function') (callback = options), (options = {});
      query = query || {};
      options = options || {};

      const findOneOperation = new FindOneOperation(this, query, options);

      return executeOperation(this.s.topology, findOneOperation, callback);
    }
  );

  /**
   * The callback format for the collection method, must be used if strict is specified
   * @callback Collection~collectionResultCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Collection} collection The collection instance.
   */

  /**
   * Rename the collection.
   *
   * @method
   * @param {string} newName New name of of the collection.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~collectionResultCallback} [callback] The results callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.rename = function(newName, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = Object.assign({}, options, { readPreference: ReadPreference$7.PRIMARY });

    const renameOperation = new RenameOperation$1(this, newName, options);

    return executeOperation(this.s.topology, renameOperation, callback);
  };

  /**
   * Drop the collection from the database, removing it permanently. New accesses will create a new collection.
   *
   * @method
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The results callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.drop = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const dropCollectionOperation = new DropCollectionOperation$2(
      this.s.db,
      this.collectionName,
      options
    );

    return executeOperation(this.s.topology, dropCollectionOperation, callback);
  };

  /**
   * Returns the options of the collection.
   *
   * @method
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The results callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.options = function(opts, callback) {
    if (typeof opts === 'function') (callback = opts), (opts = {});
    opts = opts || {};

    const optionsOperation = new OptionsOperation(this, opts);

    return executeOperation(this.s.topology, optionsOperation, callback);
  };

  /**
   * Returns if the collection is a capped collection
   *
   * @method
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The results callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.isCapped = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const isCappedOperation = new IsCappedOperation(this, options);

    return executeOperation(this.s.topology, isCappedOperation, callback);
  };

  /**
   * Creates an index on the db and collection collection.
   * @method
   * @param {(string|array|object)} fieldOrSpec Defines the index.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.unique=false] Creates an unique index.
   * @param {boolean} [options.sparse=false] Creates a sparse index.
   * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.
   * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
   * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.
   * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.
   * @param {number} [options.v] Specify the format version of the indexes.
   * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
   * @param {string} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
   * @param {object} [options.partialFilterExpression] Creates a partial index based on the given filter object (MongoDB 3.2 or higher)
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {(number|string)} [options.commitQuorum] (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the "w" field in a write concern plus "votingMembers", which indicates all voting data-bearing nodes.
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @example
   * const collection = client.db('foo').collection('bar');
   *
   * await collection.createIndex({ a: 1, b: -1 });
   *
   * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes
   * await collection.createIndex([ [c, 1], [d, -1] ]);
   *
   * // Equivalent to { e: 1 }
   * await collection.createIndex('e');
   *
   * // Equivalent to { f: 1, g: 1 }
   * await collection.createIndex(['f', 'g'])
   *
   * // Equivalent to { h: 1, i: -1 }
   * await collection.createIndex([ { h: 1 }, { i: -1 } ]);
   *
   * // Equivalent to { j: 1, k: -1, l: 2d }
   * await collection.createIndex(['j', ['k', -1], { l: '2d' }])
   */
  Collection.prototype.createIndex = function(fieldOrSpec, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const createIndexesOperation = new CreateIndexesOperation$1(
      this,
      this.collectionName,
      fieldOrSpec,
      options
    );

    return executeOperation(this.s.topology, createIndexesOperation, callback);
  };

  /**
   * @typedef {object} Collection~IndexDefinition
   * @description A definition for an index. Used by the createIndex command.
   * @see https://docs.mongodb.com/manual/reference/command/createIndexes/
   */

  /**
   * Creates multiple indexes in the collection, this method is only supported for
   * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported
   * error.
   *
   * **Note**: Unlike {@link Collection#createIndex createIndex}, this function takes in raw index specifications.
   * Index specifications are defined {@link http://docs.mongodb.org/manual/reference/command/createIndexes/ here}.
   *
   * @method
   * @param {Collection~IndexDefinition[]} indexSpecs An array of index specifications to be created
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {(number|string)} [options.commitQuorum] (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the "w" field in a write concern plus "votingMembers", which indicates all voting data-bearing nodes.
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @example
   * const collection = client.db('foo').collection('bar');
   * await collection.createIndexes([
   *   // Simple index on field fizz
   *   {
   *     key: { fizz: 1 },
   *   }
   *   // wildcard index
   *   {
   *     key: { '$**': 1 }
   *   },
   *   // named index on darmok and jalad
   *   {
   *     key: { darmok: 1, jalad: -1 }
   *     name: 'tanagra'
   *   }
   * ]);
   */
  Collection.prototype.createIndexes = function(indexSpecs, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});

    options = options ? Object.assign({}, options) : {};

    if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;

    const createIndexesOperation = new CreateIndexesOperation$1(
      this,
      this.collectionName,
      indexSpecs,
      options
    );

    return executeOperation(this.s.topology, createIndexesOperation, callback);
  };

  /**
   * Drops an index from this collection.
   * @method
   * @param {string} indexName Name of the index to drop.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.dropIndex = function(indexName, options, callback) {
    const args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;

    options = args.length ? args.shift() || {} : {};
    // Run only against primary
    options.readPreference = ReadPreference$7.PRIMARY;

    const dropIndexOperation = new DropIndexOperation(this, indexName, options);

    return executeOperation(this.s.topology, dropIndexOperation, callback);
  };

  /**
   * Drops all indexes from this collection.
   * @method
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.dropIndexes = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options ? Object.assign({}, options) : {};

    if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;

    const dropIndexesOperation = new DropIndexesOperation(this, options);

    return executeOperation(this.s.topology, dropIndexesOperation, callback);
  };

  /**
   * Drops all indexes from this collection.
   * @method
   * @deprecated use dropIndexes
   * @param {Collection~resultCallback} callback The command result callback
   * @return {Promise} returns Promise if no [callback] passed
   */
  Collection.prototype.dropAllIndexes = deprecate$4(
    Collection.prototype.dropIndexes,
    'collection.dropAllIndexes is deprecated. Use dropIndexes instead.'
  );

  /**
   * Reindex all indexes on the collection
   * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.
   * @method
   * @deprecated use db.command instead
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.reIndex = deprecate$4(function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const reIndexOperation = new ReIndexOperation(this, options);

    return executeOperation(this.s.topology, reIndexOperation, callback);
  }, 'collection.reIndex is deprecated. Use db.command instead.');

  /**
   * Get the list of all indexes information for the collection.
   *
   * @method
   * @param {object} [options] Optional settings.
   * @param {number} [options.batchSize=1000] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @return {CommandCursor}
   */
  Collection.prototype.listIndexes = function(options) {
    const cursor = new CommandCursor$1(
      this.s.topology,
      new ListIndexesOperation(this, options),
      options
    );

    return cursor;
  };

  /**
   * Ensures that an index exists, if it does not it creates it
   * @method
   * @deprecated use createIndexes instead
   * @param {(string|object)} fieldOrSpec Defines the index.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.unique=false] Creates an unique index.
   * @param {boolean} [options.sparse=false] Creates a sparse index.
   * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.
   * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
   * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.
   * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.
   * @param {number} [options.v] Specify the format version of the indexes.
   * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
   * @param {number} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.ensureIndex = deprecate$4(function(fieldOrSpec, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeLegacyOperation$4(this.s.topology, ensureIndex$1, [
      this,
      fieldOrSpec,
      options,
      callback
    ]);
  }, 'collection.ensureIndex is deprecated. Use createIndexes instead.');

  /**
   * Checks if one or more indexes exist on the collection, fails on first non-existing index
   * @method
   * @param {(string|array)} indexes One or more index names to check.
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.indexExists = function(indexes, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const indexExistsOperation = new IndexExistsOperation(this, indexes, options);

    return executeOperation(this.s.topology, indexExistsOperation, callback);
  };

  /**
   * Retrieves this collections index info.
   * @method
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.full=false] Returns the full raw index information.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.indexInformation = function(options, callback) {
    const args = Array.prototype.slice.call(arguments, 0);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    options = args.length ? args.shift() || {} : {};

    const indexInformationOperation = new IndexInformationOperation$1(
      this.s.db,
      this.collectionName,
      options
    );

    return executeOperation(this.s.topology, indexInformationOperation, callback);
  };

  /**
   * The callback format for results
   * @callback Collection~countCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {number} result The count of documents that matched the query.
   */

  /**
   * An estimated count of matching documents in the db to a query.
   *
   * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents
   * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments countDocuments}.
   * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount estimatedDocumentCount}.
   *
   * @method
   * @param {object} [query={}] The query for the count.
   * @param {object} [options] Optional settings.
   * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {boolean} [options.limit] The limit of documents to count.
   * @param {boolean} [options.skip] The number of documents to skip for the count.
   * @param {string} [options.hint] An index name hint for the query.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~countCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @deprecated use {@link Collection#countDocuments countDocuments} or {@link Collection#estimatedDocumentCount estimatedDocumentCount} instead
   */
  Collection.prototype.count = deprecate$4(function(query, options, callback) {
    const args = Array.prototype.slice.call(arguments, 0);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    query = args.length ? args.shift() || {} : {};
    options = args.length ? args.shift() || {} : {};

    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeOperation(
      this.s.topology,
      new EstimatedDocumentCountOperation(this, query, options),
      callback
    );
  }, 'collection.count is deprecated, and will be removed in a future version.' +
    ' Use Collection.countDocuments or Collection.estimatedDocumentCount instead');

  /**
   * Gets an estimate of the count of documents in a collection using collection metadata.
   *
   * @method
   * @param {object} [options] Optional settings.
   * @param {number} [options.maxTimeMS] The maximum amount of time to allow the operation to run.
   * @param {Collection~countCallback} [callback] The command result callback.
   * @return {Promise} returns Promise if no callback passed.
   */
  Collection.prototype.estimatedDocumentCount = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const estimatedDocumentCountOperation = new EstimatedDocumentCountOperation(this, options);

    return executeOperation(this.s.topology, estimatedDocumentCountOperation, callback);
  };

  /**
   * Gets the number of documents matching the filter.
   * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount estimatedDocumentCount}.
   * **Note**: When migrating from {@link Collection#count count} to {@link Collection#countDocuments countDocuments}
   * the following query operators must be replaced:
   *
   * | Operator | Replacement |
   * | -------- | ----------- |
   * | `$where`   | [`$expr`][1] |
   * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |
   * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |
   *
   * [1]: https://docs.mongodb.com/manual/reference/operator/query/expr/
   * [2]: https://docs.mongodb.com/manual/reference/operator/query/geoWithin/
   * [3]: https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center
   * [4]: https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere
   *
   * @param {object} [query] the query for the count
   * @param {object} [options] Optional settings.
   * @param {object} [options.collation] Specifies a collation.
   * @param {string|object} [options.hint] The index to use.
   * @param {number} [options.limit] The maximum number of document to count.
   * @param {number} [options.maxTimeMS] The maximum amount of time to allow the operation to run.
   * @param {number} [options.skip] The number of documents to skip before counting.
   * @param {Collection~countCallback} [callback] The command result callback.
   * @return {Promise} returns Promise if no callback passed.
   * @see https://docs.mongodb.com/manual/reference/operator/query/expr/
   * @see https://docs.mongodb.com/manual/reference/operator/query/geoWithin/
   * @see https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center
   * @see https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere
   */

  Collection.prototype.countDocuments = function(query, options, callback) {
    const args = Array.prototype.slice.call(arguments, 0);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    query = args.length ? args.shift() || {} : {};
    options = args.length ? args.shift() || {} : {};

    const countDocumentsOperation = new CountDocumentsOperation(this, query, options);

    return executeOperation(this.s.topology, countDocumentsOperation, callback);
  };

  /**
   * The distinct command returns a list of distinct values for the given key across a collection.
   * @method
   * @param {string} key Field of the document to find distinct values for.
   * @param {object} [query] The query for filtering the set of documents to which we apply the distinct filter.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.
   * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.distinct = function(key, query, options, callback) {
    const args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    const queryOption = args.length ? args.shift() || {} : {};
    const optionsOption = args.length ? args.shift() || {} : {};

    const distinctOperation = new DistinctOperation(this, key, queryOption, optionsOption);

    return executeOperation(this.s.topology, distinctOperation, callback);
  };

  /**
   * Retrieve all the indexes on the collection.
   * @method
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.indexes = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const indexesOperation = new IndexesOperation(this, options);

    return executeOperation(this.s.topology, indexesOperation, callback);
  };

  /**
   * Get all the collection statistics.
   *
   * @method
   * @param {object} [options] Optional settings.
   * @param {number} [options.scale] Divide the returned sizes by scale value.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The collection result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.stats = function(options, callback) {
    const args = Array.prototype.slice.call(arguments, 0);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    options = args.length ? args.shift() || {} : {};

    const statsOperation = new StatsOperation(this, options);

    return executeOperation(this.s.topology, statsOperation, callback);
  };

  /**
   * @typedef {Object} Collection~findAndModifyWriteOpResult
   * @property {object} value Document returned from the `findAndModify` command. If no documents were found, `value` will be `null` by default (`returnOriginal: true`), even if a document was upserted; if `returnOriginal` was false, the upserted document will be returned in that case.
   * @property {object} lastErrorObject The raw lastErrorObject returned from the command. See {@link https://docs.mongodb.com/manual/reference/command/findAndModify/index.html#lasterrorobject|findAndModify command documentation}.
   * @property {Number} ok Is 1 if the command executed correctly.
   */

  /**
   * The callback format for inserts
   * @callback Collection~findAndModifyCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Collection~findAndModifyWriteOpResult} result The result object if the command was executed successfully.
   */

  /**
   * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.
   *
   * @method
   * @param {object} filter The Filter used to select the document to remove
   * @param {object} [options] Optional settings.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {object} [options.projection] Limits the fields to return for all matching documents.
   * @param {object} [options.sort] Determines which document the operation modifies if the query selects multiple documents.
   * @param {number} [options.maxTimeMS] The maximum amount of time to allow the query to run.
   * @param {boolean} [options.checkKeys=false] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~findAndModifyCallback} [callback] The collection result callback
   * @return {Promise<Collection~findAndModifyWriteOpResultObject>} returns Promise if no callback passed
   */
  Collection.prototype.findOneAndDelete = function(filter, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    return executeOperation(
      this.s.topology,
      new FindOneAndDeleteOperation(this, filter, options),
      callback
    );
  };

  /**
   * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.
   *
   * @method
   * @param {object} filter The Filter used to select the document to replace
   * @param {object} replacement The Document that replaces the matching document
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {string|object} [options.hint] An optional index to use for this operation
   * @param {number} [options.maxTimeMS] The maximum amount of time to allow the query to run.
   * @param {object} [options.projection] Limits the fields to return for all matching documents.
   * @param {object} [options.sort] Determines which document the operation modifies if the query selects multiple documents.
   * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.
   * @param {boolean} [options.returnOriginal=true] When false, returns the updated document rather than the original. The default is true.
   * @param {boolean} [options.checkKeys=false] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~findAndModifyCallback} [callback] The collection result callback
   * @return {Promise<Collection~findAndModifyWriteOpResultObject>} returns Promise if no callback passed
   */
  Collection.prototype.findOneAndReplace = function(filter, replacement, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    return executeOperation(
      this.s.topology,
      new FindOneAndReplaceOperation(this, filter, replacement, options),
      callback
    );
  };

  /**
   * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.
   *
   * @method
   * @param {object} filter The Filter used to select the document to update
   * @param {object} update Update operations to be performed on the document
   * @param {object} [options] Optional settings.
   * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {string|object} [options.hint] An optional index to use for this operation
   * @param {number} [options.maxTimeMS] The maximum amount of time to allow the query to run.
   * @param {object} [options.projection] Limits the fields to return for all matching documents.
   * @param {object} [options.sort] Determines which document the operation modifies if the query selects multiple documents.
   * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.
   * @param {boolean} [options.returnOriginal=true] When false, returns the updated document rather than the original. The default is true.
   * @param {boolean} [options.checkKeys=false] If true, will throw if bson documents start with `$` or include a `.` in any key value
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] An ptional session to use for this operation
   * @param {Collection~findAndModifyCallback} [callback] The collection result callback
   * @return {Promise<Collection~findAndModifyWriteOpResultObject>} returns Promise if no callback passed
   */
  Collection.prototype.findOneAndUpdate = function(filter, update, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // Add ignoreUndefined
    if (this.s.options.ignoreUndefined) {
      options = Object.assign({}, options);
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    return executeOperation(
      this.s.topology,
      new FindOneAndUpdateOperation(this, filter, update, options),
      callback
    );
  };

  /**
   * Find and update a document.
   * @method
   * @param {object} query Query object to locate the object to modify.
   * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.
   * @param {object} doc The fields/vals to be updated.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.remove=false] Set to true to remove the object before returning.
   * @param {boolean} [options.upsert=false] Perform an upsert operation.
   * @param {boolean} [options.new=false] Set to true if you want to return the modified object rather than the original. Ignored for remove.
   * @param {object} [options.projection] Object containing the field projection for the result returned from the operation.
   * @param {object} [options.fields] **Deprecated** Use `options.projection` instead
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Array} [options.arrayFilters] optional list of array filters referenced in filtered positional operators
   * @param {Collection~findAndModifyCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @deprecated use findOneAndUpdate, findOneAndReplace or findOneAndDelete instead
   */
  Collection.prototype.findAndModify = deprecate$4(
    _findAndModify,
    'collection.findAndModify is deprecated. Use findOneAndUpdate, findOneAndReplace or findOneAndDelete instead.'
  );

  /**
   * @ignore
   */

  Collection.prototype._findAndModify = _findAndModify;

  function _findAndModify(query, sort, doc, options, callback) {
    const args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    sort = args.length ? args.shift() || [] : [];
    doc = args.length ? args.shift() : null;
    options = args.length ? args.shift() || {} : {};

    // Clone options
    options = Object.assign({}, options);
    // Force read preference primary
    options.readPreference = ReadPreference$7.PRIMARY;

    return executeOperation(
      this.s.topology,
      new FindAndModifyOperation(this, query, sort, doc, options),
      callback
    );
  }

  /**
   * Find and remove a document.
   * @method
   * @param {object} query Query object to locate the object to modify.
   * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @deprecated use findOneAndDelete instead
   */
  Collection.prototype.findAndRemove = deprecate$4(function(query, sort, options, callback) {
    const args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    sort = args.length ? args.shift() || [] : [];
    options = args.length ? args.shift() || {} : {};

    // Add the remove option
    options.remove = true;

    return executeOperation(
      this.s.topology,
      new FindAndModifyOperation(this, query, sort, null, options),
      callback
    );
  }, 'collection.findAndRemove is deprecated. Use findOneAndDelete instead.');

  /**
   * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2
   * @method
   * @param {object} [pipeline=[]] Array containing all the aggregation framework commands for the execution.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {object} [options.cursor] Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.
   * @param {number} [options.cursor.batchSize=1000] Deprecated. Use `options.batchSize`
   * @param {boolean} [options.allowDiskUse=false] allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).
   * @param {number} [options.maxTimeMS] maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.
   * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
   * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
   * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {string} [options.comment] Add a comment to an aggregation command
   * @param {string|object} [options.hint] Add an index selection hint to an aggregation command
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~aggregationCallback} callback The command result callback
   * @return {(null|AggregationCursor)}
   */
  Collection.prototype.aggregate = function(pipeline, options, callback) {
    if (Array.isArray(pipeline)) {
      // Set up callback if one is provided
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      // If we have no options or callback we are doing
      // a cursor based aggregation
      if (options == null && callback == null) {
        options = {};
      }
    } else {
      // Aggregation pipeline passed as arguments on the method
      const args = Array.prototype.slice.call(arguments, 0);
      // Get the callback
      callback = args.pop();
      // Get the possible options object
      const opts = args[args.length - 1];
      // If it contains any of the admissible options pop it of the args
      options =
        opts &&
        (opts.readPreference ||
          opts.explain ||
          opts.cursor ||
          opts.out ||
          opts.maxTimeMS ||
          opts.hint ||
          opts.allowDiskUse)
          ? args.pop()
          : {};
      // Left over arguments is the pipeline
      pipeline = args;
    }

    const cursor = new AggregationCursor$1(
      this.s.topology,
      new AggregateOperation(this, pipeline, options),
      options
    );

    // TODO: remove this when NODE-2074 is resolved
    if (typeof callback === 'function') {
      callback(null, cursor);
      return;
    }

    return cursor;
  };

  /**
   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.
   * @method
   * @since 3.0.0
   * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.
   * @param {object} [options] Optional settings
   * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.
   * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.
   * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query
   * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {ReadPreference} [options.readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.
   * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @return {ChangeStream} a ChangeStream instance.
   */
  Collection.prototype.watch = function(pipeline, options) {
    pipeline = pipeline || [];
    options = options || {};

    // Allow optionally not specifying a pipeline
    if (!Array.isArray(pipeline)) {
      options = pipeline;
      pipeline = [];
    }

    return new ChangeStream$1(this, pipeline, options);
  };

  /**
   * The callback format for results
   * @callback Collection~parallelCollectionScanCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Cursor[]} cursors A list of cursors returned allowing for parallel reading of collection.
   */

  /**
   * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are
   * no ordering guarantees for returned results.
   * @method
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {number} [options.batchSize=1000] Set the batchSize for the getMoreCommand when iterating over the query results.
   * @param {number} [options.numCursors=1] The maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors)
   * @param {boolean} [options.raw=false] Return all BSON documents as Raw Buffer documents.
   * @param {Collection~parallelCollectionScanCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.parallelCollectionScan = deprecate$4(function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = { numCursors: 1 });
    // Set number of cursors to 1
    options.numCursors = options.numCursors || 1;
    options.batchSize = options.batchSize || 1000;

    options = Object.assign({}, options);
    // Ensure we have the right read preference inheritance
    options.readPreference = ReadPreference$7.resolve(this, options);

    // Add a promiseLibrary
    options.promiseLibrary = this.s.promiseLibrary;

    if (options.session) {
      options.session = undefined;
    }

    return executeLegacyOperation$4(
      this.s.topology,
      parallelCollectionScan,
      [this, options, callback],
      { skipSessions: true }
    );
  }, 'parallelCollectionScan is deprecated in MongoDB v4.1');

  /**
   * Execute a geo search using a geo haystack index on a collection.
   *
   * @method
   * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.
   * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {number} [options.maxDistance] Include results up to maxDistance from the point.
   * @param {object} [options.search] Filter the results by a query.
   * @param {number} [options.limit=false] Max number of results to return.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @deprecated See {@link https://docs.mongodb.com/manual/geospatial-queries/|geospatial queries docs} for current geospatial support
   */
  Collection.prototype.geoHaystackSearch = deprecate$4(function(x, y, options, callback) {
    const args = Array.prototype.slice.call(arguments, 2);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    options = args.length ? args.shift() || {} : {};

    const geoHaystackSearchOperation = new GeoHaystackSearchOperation(this, x, y, options);

    return executeOperation(this.s.topology, geoHaystackSearchOperation, callback);
  }, 'geoHaystackSearch is deprecated, and will be removed in a future version.');

  /**
   * Run a group command across a collection
   *
   * @method
   * @param {(object|array|function|code)} keys An object, array or function expressing the keys to group by.
   * @param {object} condition An optional condition that must be true for a row to be considered.
   * @param {object} initial Initial value of the aggregation counter object.
   * @param {(function|Code)} reduce The reduce function aggregates (reduces) the objects iterated
   * @param {(function|Code)} finalize An optional function to be run on each item in the result set just before the item is returned.
   * @param {boolean} command Specify if you wish to run using the internal group command or using eval, default is true.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   * @deprecated MongoDB 3.6 or higher no longer supports the group command. We recommend rewriting using the aggregation framework.
   */
  Collection.prototype.group = deprecate$4(function(
    keys,
    condition,
    initial,
    reduce,
    finalize,
    command,
    options,
    callback
  ) {
    const args = Array.prototype.slice.call(arguments, 3);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    reduce = args.length ? args.shift() : null;
    finalize = args.length ? args.shift() : null;
    command = args.length ? args.shift() : null;
    options = args.length ? args.shift() || {} : {};

    // Make sure we are backward compatible
    if (!(typeof finalize === 'function')) {
      command = finalize;
      finalize = null;
    }

    if (
      !Array.isArray(keys) &&
      keys instanceof Object &&
      typeof keys !== 'function' &&
      !(keys._bsontype === 'Code')
    ) {
      keys = Object.keys(keys);
    }

    if (typeof reduce === 'function') {
      reduce = reduce.toString();
    }

    if (typeof finalize === 'function') {
      finalize = finalize.toString();
    }

    // Set up the command as default
    command = command == null ? true : command;

    return executeLegacyOperation$4(this.s.topology, group, [
      this,
      keys,
      condition,
      initial,
      reduce,
      finalize,
      command,
      options,
      callback
    ]);
  },
  'MongoDB 3.6 or higher no longer supports the group command. We recommend rewriting using the aggregation framework.');

  /**
   * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.
   *
   * @method
   * @param {(function|string)} map The mapping function.
   * @param {(function|string)} reduce The reduce function.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {object} [options.out] Sets the output target for the map reduce job. *{inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}*
   * @param {object} [options.query] Query filter object.
   * @param {object} [options.sort] Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.
   * @param {number} [options.limit] Number of objects to return from collection.
   * @param {boolean} [options.keeptemp=false] Keep temporary data.
   * @param {(function|string)} [options.finalize] Finalize function.
   * @param {object} [options.scope] Can pass in variables that can be access from map/reduce/finalize.
   * @param {boolean} [options.jsMode=false] It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.
   * @param {boolean} [options.verbose=false] Provide statistics on job execution time.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Collection~resultCallback} [callback] The command result callback
   * @throws {MongoError}
   * @return {Promise} returns Promise if no callback passed
   */
  Collection.prototype.mapReduce = function(map, reduce, options, callback) {
    if ('function' === typeof options) (callback = options), (options = {});
    // Out must allways be defined (make sure we don't break weirdly on pre 1.8+ servers)
    if (null == options.out) {
      throw new Error(
        'the out option parameter must be defined, see mongodb docs for possible values'
      );
    }

    if ('function' === typeof map) {
      map = map.toString();
    }

    if ('function' === typeof reduce) {
      reduce = reduce.toString();
    }

    if ('function' === typeof options.finalize) {
      options.finalize = options.finalize.toString();
    }
    const mapReduceOperation = new MapReduceOperation(this, map, reduce, options);

    return executeOperation(this.s.topology, mapReduceOperation, callback);
  };

  /**
   * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.
   *
   * @method
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @return {UnorderedBulkOperation}
   */
  Collection.prototype.initializeUnorderedBulkOp = function(options) {
    options = options || {};
    // Give function's options precedence over session options.
    if (options.ignoreUndefined == null) {
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    options.promiseLibrary = this.s.promiseLibrary;
    return unordered(this.s.topology, this, options);
  };

  /**
   * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.
   *
   * @method
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {OrderedBulkOperation} callback The command result callback
   * @return {null}
   */
  Collection.prototype.initializeOrderedBulkOp = function(options) {
    options = options || {};
    // Give function's options precedence over session's options.
    if (options.ignoreUndefined == null) {
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }
    options.promiseLibrary = this.s.promiseLibrary;
    return ordered(this.s.topology, this, options);
  };

  /**
   * Return the db logger
   * @method
   * @return {Logger} return the db logger
   * @ignore
   */
  Collection.prototype.getLogger = function() {
    return this.s.db.s.logger;
  };

  module.exports = Collection;

  var collection$2 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  const ReadPreference$6 = core.ReadPreference;
  const MongoError$f = core.MongoError;

  const CursorState$1 = require$$1.CursorState;

  /**
   * @fileOverview The **CommandCursor** class is an internal class that embodies a
   * generalized cursor based on a MongoDB command allowing for iteration over the
   * results returned. It supports one by one document iteration, conversion to an
   * array or can be iterated as a Node 0.10.X or higher stream
   *
   * **CommandCursor Cannot directly be instantiated**
   * @example
   * const MongoClient = require('mongodb').MongoClient;
   * const test = require('assert');
   * // Connection url
   * const url = 'mongodb://localhost:27017';
   * // Database Name
   * const dbName = 'test';
   * // Connect using MongoClient
   * MongoClient.connect(url, function(err, client) {
   *   // Create a collection we want to drop later
   *   const col = client.db(dbName).collection('listCollectionsExample1');
   *   // Insert a bunch of documents
   *   col.insert([{a:1, b:1}
   *     , {a:2, b:2}, {a:3, b:3}
   *     , {a:4, b:4}], {w:1}, function(err, result) {
   *     test.equal(null, err);
   *     // List the database collections available
   *     db.listCollections().toArray(function(err, items) {
   *       test.equal(null, err);
   *       client.close();
   *     });
   *   });
   * });
   */

  /**
   * Namespace provided by the browser.
   * @external Readable
   */

  /**
   * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)
   * @class CommandCursor
   * @extends external:Readable
   * @fires CommandCursor#data
   * @fires CommandCursor#end
   * @fires CommandCursor#close
   * @fires CommandCursor#readable
   * @return {CommandCursor} an CommandCursor instance.
   */
  class CommandCursor extends cursor$1 {
    constructor(topology, ns, cmd, options) {
      super(topology, ns, cmd, options);
    }

    /**
     * Set the ReadPreference for the cursor.
     * @method
     * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.
     * @throws {MongoError}
     * @return {Cursor}
     */
    setReadPreference(readPreference) {
      if (this.s.state === CursorState$1.CLOSED || this.isDead()) {
        throw MongoError$f.create({ message: 'Cursor is closed', driver: true });
      }

      if (this.s.state !== CursorState$1.INIT) {
        throw MongoError$f.create({
          message: 'cannot change cursor readPreference after cursor has been accessed',
          driver: true
        });
      }

      if (readPreference instanceof ReadPreference$6) {
        this.options.readPreference = readPreference;
      } else if (typeof readPreference === 'string') {
        this.options.readPreference = new ReadPreference$6(readPreference);
      } else {
        throw new TypeError('Invalid read preference: ' + readPreference);
      }

      return this;
    }

    /**
     * Set the batch size for the cursor.
     * @method
     * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.
     * @throws {MongoError}
     * @return {CommandCursor}
     */
    batchSize(value) {
      if (this.s.state === CursorState$1.CLOSED || this.isDead()) {
        throw MongoError$f.create({ message: 'Cursor is closed', driver: true });
      }

      if (typeof value !== 'number') {
        throw MongoError$f.create({ message: 'batchSize requires an integer', driver: true });
      }

      if (this.cmd.cursor) {
        this.cmd.cursor.batchSize = value;
      }

      this.setCursorBatchSize(value);
      return this;
    }

    /**
     * Add a maxTimeMS stage to the aggregation pipeline
     * @method
     * @param {number} value The state maxTimeMS value.
     * @return {CommandCursor}
     */
    maxTimeMS(value) {
      if (this.topology.lastIsMaster().minWireVersion > 2) {
        this.cmd.maxTimeMS = value;
      }

      return this;
    }

    /**
     * Return the cursor logger
     * @method
     * @return {Logger} return the cursor logger
     * @ignore
     */
    getLogger() {
      return this.logger;
    }
  }

  // aliases
  CommandCursor.prototype.get = CommandCursor.prototype.toArray;

  /**
   * CommandCursor stream data event, fired for each document in the cursor.
   *
   * @event CommandCursor#data
   * @type {object}
   */

  /**
   * CommandCursor stream end event
   *
   * @event CommandCursor#end
   * @type {null}
   */

  /**
   * CommandCursor stream close event
   *
   * @event CommandCursor#close
   * @type {null}
   */

  /**
   * CommandCursor stream readable event
   *
   * @event CommandCursor#readable
   * @type {null}
   */

  /**
   * Get the next available document from the cursor, returns null if no more documents are available.
   * @function CommandCursor.prototype.next
   * @param {CommandCursor~resultCallback} [callback] The result callback.
   * @throws {MongoError}
   * @return {Promise} returns Promise if no callback passed
   */

  /**
   * Check if there is any document still available in the cursor
   * @function CommandCursor.prototype.hasNext
   * @param {CommandCursor~resultCallback} [callback] The result callback.
   * @throws {MongoError}
   * @return {Promise} returns Promise if no callback passed
   */

  /**
   * The callback format for results
   * @callback CommandCursor~toArrayResultCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {object[]} documents All the documents the satisfy the cursor.
   */

  /**
   * Returns an array of documents. The caller is responsible for making sure that there
   * is enough memory to store the results. Note that the array only contain partial
   * results when this cursor had been previously accessed.
   * @method CommandCursor.prototype.toArray
   * @param {CommandCursor~toArrayResultCallback} [callback] The result callback.
   * @throws {MongoError}
   * @return {Promise} returns Promise if no callback passed
   */

  /**
   * The callback format for results
   * @callback CommandCursor~resultCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {(object|null)} result The result object if the command was executed successfully.
   */

  /**
   * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,
   * not all of the elements will be iterated if this cursor had been previously accessed.
   * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike
   * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements
   * at any given time if batch size is specified. Otherwise, the caller is responsible
   * for making sure that the entire result can fit the memory.
   * @method CommandCursor.prototype.each
   * @param {CommandCursor~resultCallback} callback The result callback.
   * @throws {MongoError}
   * @return {null}
   */

  /**
   * Close the cursor, sending a KillCursor command and emitting close.
   * @method CommandCursor.prototype.close
   * @param {CommandCursor~resultCallback} [callback] The result callback.
   * @return {Promise} returns Promise if no callback passed
   */

  /**
   * Is the cursor closed
   * @method CommandCursor.prototype.isClosed
   * @return {boolean}
   */

  /**
   * Clone the cursor
   * @function CommandCursor.prototype.clone
   * @return {CommandCursor}
   */

  /**
   * Resets the cursor
   * @function CommandCursor.prototype.rewind
   * @return {CommandCursor}
   */

  /**
   * The callback format for the forEach iterator method
   * @callback CommandCursor~iteratorCallback
   * @param {Object} doc An emitted document for the iterator
   */

  /**
   * The callback error format for the forEach iterator method
   * @callback CommandCursor~endCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   */

  /*
   * Iterates over all the documents for this cursor using the iterator, callback pattern.
   * @method CommandCursor.prototype.forEach
   * @param {CommandCursor~iteratorCallback} iterator The iteration callback.
   * @param {CommandCursor~endCallback} callback The end callback.
   * @throws {MongoError}
   * @return {null}
   */

  var command_cursor = CommandCursor;

  const MongoError$e = core.MongoError;

  const CursorState = require$$1.CursorState;

  /**
   * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB
   * allowing for iteration over the results returned from the underlying query. It supports
   * one by one document iteration, conversion to an array or can be iterated as a Node 4.X
   * or higher stream
   *
   * **AGGREGATIONCURSOR Cannot directly be instantiated**
   * @example
   * const MongoClient = require('mongodb').MongoClient;
   * const test = require('assert');
   * // Connection url
   * const url = 'mongodb://localhost:27017';
   * // Database Name
   * const dbName = 'test';
   * // Connect using MongoClient
   * MongoClient.connect(url, function(err, client) {
   *   // Create a collection we want to drop later
   *   const col = client.db(dbName).collection('createIndexExample1');
   *   // Insert a bunch of documents
   *   col.insert([{a:1, b:1}
   *     , {a:2, b:2}, {a:3, b:3}
   *     , {a:4, b:4}], {w:1}, function(err, result) {
   *     test.equal(null, err);
   *     // Show that duplicate records got dropped
   *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {
   *       test.equal(null, err);
   *       test.equal(4, items.length);
   *       client.close();
   *     });
   *   });
   * });
   */

  /**
   * Namespace provided by the browser.
   * @external Readable
   */

  /**
   * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)
   * @class AggregationCursor
   * @extends external:Readable
   * @fires AggregationCursor#data
   * @fires AggregationCursor#end
   * @fires AggregationCursor#close
   * @fires AggregationCursor#readable
   * @return {AggregationCursor} an AggregationCursor instance.
   */
  class AggregationCursor extends cursor$1 {
    constructor(topology, operation, options) {
      super(topology, operation, options);
    }

    /**
     * Set the batch size for the cursor.
     * @method
     * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
     * @throws {MongoError}
     * @return {AggregationCursor}
     */
    batchSize(value) {
      if (this.s.state === CursorState.CLOSED || this.isDead()) {
        throw MongoError$e.create({ message: 'Cursor is closed', driver: true });
      }

      if (typeof value !== 'number') {
        throw MongoError$e.create({ message: 'batchSize requires an integer', driver: true });
      }

      this.operation.options.batchSize = value;
      this.setCursorBatchSize(value);
      return this;
    }

    /**
     * Add a geoNear stage to the aggregation pipeline
     * @method
     * @param {object} document The geoNear stage document.
     * @return {AggregationCursor}
     */
    geoNear(document) {
      this.operation.addToPipeline({ $geoNear: document });
      return this;
    }

    /**
     * Add a group stage to the aggregation pipeline
     * @method
     * @param {object} document The group stage document.
     * @return {AggregationCursor}
     */
    group(document) {
      this.operation.addToPipeline({ $group: document });
      return this;
    }

    /**
     * Add a limit stage to the aggregation pipeline
     * @method
     * @param {number} value The state limit value.
     * @return {AggregationCursor}
     */
    limit(value) {
      this.operation.addToPipeline({ $limit: value });
      return this;
    }

    /**
     * Add a match stage to the aggregation pipeline
     * @method
     * @param {object} document The match stage document.
     * @return {AggregationCursor}
     */
    match(document) {
      this.operation.addToPipeline({ $match: document });
      return this;
    }

    /**
     * Add a maxTimeMS stage to the aggregation pipeline
     * @method
     * @param {number} value The state maxTimeMS value.
     * @return {AggregationCursor}
     */
    maxTimeMS(value) {
      this.operation.options.maxTimeMS = value;
      return this;
    }

    /**
     * Add a out stage to the aggregation pipeline
     * @method
     * @param {number} destination The destination name.
     * @return {AggregationCursor}
     */
    out(destination) {
      this.operation.addToPipeline({ $out: destination });
      return this;
    }

    /**
     * Add a project stage to the aggregation pipeline
     * @method
     * @param {object} document The project stage document.
     * @return {AggregationCursor}
     */
    project(document) {
      this.operation.addToPipeline({ $project: document });
      return this;
    }

    /**
     * Add a lookup stage to the aggregation pipeline
     * @method
     * @param {object} document The lookup stage document.
     * @return {AggregationCursor}
     */
    lookup(document) {
      this.operation.addToPipeline({ $lookup: document });
      return this;
    }

    /**
     * Add a redact stage to the aggregation pipeline
     * @method
     * @param {object} document The redact stage document.
     * @return {AggregationCursor}
     */
    redact(document) {
      this.operation.addToPipeline({ $redact: document });
      return this;
    }

    /**
     * Add a skip stage to the aggregation pipeline
     * @method
     * @param {number} value The state skip value.
     * @return {AggregationCursor}
     */
    skip(value) {
      this.operation.addToPipeline({ $skip: value });
      return this;
    }

    /**
     * Add a sort stage to the aggregation pipeline
     * @method
     * @param {object} document The sort stage document.
     * @return {AggregationCursor}
     */
    sort(document) {
      this.operation.addToPipeline({ $sort: document });
      return this;
    }

    /**
     * Add a unwind stage to the aggregation pipeline
     * @method
     * @param {(string|object)} field The unwind field name or stage document.
     * @return {AggregationCursor}
     */
    unwind(field) {
      this.operation.addToPipeline({ $unwind: field });
      return this;
    }

    /**
     * Return the cursor logger
     * @method
     * @return {Logger} return the cursor logger
     * @ignore
     */
    getLogger() {
      return this.logger;
    }
  }

  // aliases
  AggregationCursor.prototype.get = AggregationCursor.prototype.toArray;

  /**
   * AggregationCursor stream data event, fired for each document in the cursor.
   *
   * @event AggregationCursor#data
   * @type {object}
   */

  /**
   * AggregationCursor stream end event
   *
   * @event AggregationCursor#end
   * @type {null}
   */

  /**
   * AggregationCursor stream close event
   *
   * @event AggregationCursor#close
   * @type {null}
   */

  /**
   * AggregationCursor stream readable event
   *
   * @event AggregationCursor#readable
   * @type {null}
   */

  /**
   * Get the next available document from the cursor, returns null if no more documents are available.
   * @function AggregationCursor.prototype.next
   * @param {AggregationCursor~resultCallback} [callback] The result callback.
   * @throws {MongoError}
   * @return {Promise} returns Promise if no callback passed
   */

  /**
   * Check if there is any document still available in the cursor
   * @function AggregationCursor.prototype.hasNext
   * @param {AggregationCursor~resultCallback} [callback] The result callback.
   * @throws {MongoError}
   * @return {Promise} returns Promise if no callback passed
   */

  /**
   * The callback format for results
   * @callback AggregationCursor~toArrayResultCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {object[]} documents All the documents the satisfy the cursor.
   */

  /**
   * Returns an array of documents. The caller is responsible for making sure that there
   * is enough memory to store the results. Note that the array only contain partial
   * results when this cursor had been previously accessed. In that case,
   * cursor.rewind() can be used to reset the cursor.
   * @method AggregationCursor.prototype.toArray
   * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.
   * @throws {MongoError}
   * @return {Promise} returns Promise if no callback passed
   */

  /**
   * The callback format for results
   * @callback AggregationCursor~resultCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {(object|null)} result The result object if the command was executed successfully.
   */

  /**
   * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,
   * not all of the elements will be iterated if this cursor had been previously accessed.
   * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike
   * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements
   * at any given time if batch size is specified. Otherwise, the caller is responsible
   * for making sure that the entire result can fit the memory.
   * @method AggregationCursor.prototype.each
   * @deprecated
   * @param {AggregationCursor~resultCallback} callback The result callback.
   * @throws {MongoError}
   * @return {null}
   */

  /**
   * Close the cursor, sending a AggregationCursor command and emitting close.
   * @method AggregationCursor.prototype.close
   * @param {AggregationCursor~resultCallback} [callback] The result callback.
   * @return {Promise} returns Promise if no callback passed
   */

  /**
   * Is the cursor closed
   * @method AggregationCursor.prototype.isClosed
   * @return {boolean}
   */

  /**
   * Execute the explain for the cursor
   *
   * For backwards compatibility, a verbosity of true is interpreted as "allPlansExecution"
   * and false as "queryPlanner". Prior to server version 3.6, aggregate()
   * ignores the verbosity parameter and executes in "queryPlanner".
   *
   * @method AggregationCursor.prototype.explain
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity=true] - An optional mode in which to run the explain.
   * @param {AggregationCursor~resultCallback} [callback] The result callback.
   * @return {Promise} returns Promise if no callback passed
   */

  /**
   * Clone the cursor
   * @function AggregationCursor.prototype.clone
   * @return {AggregationCursor}
   */

  /**
   * Resets the cursor
   * @function AggregationCursor.prototype.rewind
   * @return {AggregationCursor}
   */

  /**
   * The callback format for the forEach iterator method
   * @callback AggregationCursor~iteratorCallback
   * @param {Object} doc An emitted document for the iterator
   */

  /**
   * The callback error format for the forEach iterator method
   * @callback AggregationCursor~endCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   */

  /**
   * Iterates over all the documents for this cursor using the iterator, callback pattern.
   * @method AggregationCursor.prototype.forEach
   * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.
   * @param {AggregationCursor~endCallback} callback The end callback.
   * @throws {MongoError}
   * @return {null}
   */

  var aggregation_cursor = AggregationCursor;

  const Aspect$8 = operation.Aspect;
  const OperationBase$4 = operation.OperationBase;
  const applyWriteConcern$4 = require$$1$1.applyWriteConcern;
  const debugOptions = require$$1$1.debugOptions;
  const handleCallback$8 = require$$1$1.handleCallback;
  const MongoError$d = core.MongoError;
  const ReadPreference$5 = core.ReadPreference;
  const MongoDBNamespace$4 = require$$1$1.MongoDBNamespace;

  const debugFields = [
    'authSource',
    'w',
    'wtimeout',
    'j',
    'native_parser',
    'forceServerObjectId',
    'serializeFunctions',
    'raw',
    'promoteLongs',
    'promoteValues',
    'promoteBuffers',
    'bufferMaxEntries',
    'numberOfRetries',
    'retryMiliSeconds',
    'readPreference',
    'pkFactory',
    'parentDb',
    'promiseLibrary',
    'noListener'
  ];

  class CommandOperation extends OperationBase$4 {
    constructor(db, options, collection, command) {
      super(options);

      if (!this.hasAspect(Aspect$8.WRITE_OPERATION)) {
        if (collection != null) {
          this.options.readPreference = ReadPreference$5.resolve(collection, options);
        } else {
          this.options.readPreference = ReadPreference$5.resolve(db, options);
        }
      } else {
        if (collection != null) {
          applyWriteConcern$4(this.options, { db, coll: collection }, this.options);
        } else {
          applyWriteConcern$4(this.options, { db }, this.options);
        }
        this.options.readPreference = ReadPreference$5.primary;
      }

      this.db = db;

      if (command != null) {
        this.command = command;
      }

      if (collection != null) {
        this.collection = collection;
      }
    }

    _buildCommand() {
      if (this.command != null) {
        return this.command;
      }
    }

    execute(callback) {
      const db = this.db;
      const options = Object.assign({}, this.options);

      // Did the user destroy the topology
      if (db.serverConfig && db.serverConfig.isDestroyed()) {
        return callback(new MongoError$d('topology was destroyed'));
      }

      let command;
      try {
        command = this._buildCommand();
      } catch (e) {
        return callback(e);
      }

      // Get the db name we are executing against
      const dbName = options.dbName || options.authdb || db.databaseName;

      // Convert the readPreference if its not a write
      if (this.hasAspect(Aspect$8.WRITE_OPERATION)) {
        if (options.writeConcern && (!options.session || !options.session.inTransaction())) {
          command.writeConcern = options.writeConcern;
        }
      }

      // Debug information
      if (db.s.logger.isDebug()) {
        db.s.logger.debug(
          `executing command ${JSON.stringify(
          command
        )} against ${dbName}.$cmd with options [${JSON.stringify(
          debugOptions(debugFields, options)
        )}]`
        );
      }

      const namespace =
        this.namespace != null ? this.namespace : new MongoDBNamespace$4(dbName, '$cmd');

      // Execute command
      db.s.topology.command(namespace, command, options, (err, result) => {
        if (err) return handleCallback$8(callback, err);
        if (options.full) return handleCallback$8(callback, null, result);
        handleCallback$8(callback, null, result.result);
      });
    }
  }

  var command = CommandOperation;

  const Aspect$7 = operation.Aspect;

  const defineAspects$7 = operation.defineAspects;

  const handleCallback$7 = require$$1$1.handleCallback;
  const toError$4 = require$$1$1.toError;
  const emitWarning = require$$1$1.emitWarning;

  class AddUserOperation extends command {
    constructor(db, username, password, options) {
      super(db, options);

      this.username = username;
      this.password = password;
    }

    _buildCommand() {
      const db = this.db;
      const username = this.username;
      const password = this.password;
      const options = this.options;

      // Get additional values
      let roles = [];
      if (Array.isArray(options.roles)) roles = options.roles;
      if (typeof options.roles === 'string') roles = [options.roles];

      // If not roles defined print deprecated message
      // TODO: handle deprecation properly
      if (roles.length === 0) {
        emitWarning('Creating a user without roles is deprecated in MongoDB >= 2.6');
      }

      // Check the db name and add roles if needed
      if (
        (db.databaseName.toLowerCase() === 'admin' || options.dbName === 'admin') &&
        !Array.isArray(options.roles)
      ) {
        roles = ['root'];
      } else if (!Array.isArray(options.roles)) {
        roles = ['dbOwner'];
      }

      const digestPassword = db.s.topology.lastIsMaster().maxWireVersion >= 7;

      let userPassword = password;

      if (!digestPassword) {
        // Use node md5 generator
        const md5 = crypto$1.createHash('md5');
        // Generate keys used for authentication
        md5.update(username + ':mongo:' + password);
        userPassword = md5.digest('hex');
      }

      // Build the command to execute
      const command = {
        createUser: username,
        customData: options.customData || {},
        roles: roles,
        digestPassword
      };

      // No password
      if (typeof password === 'string') {
        command.pwd = userPassword;
      }

      return command;
    }

    execute(callback) {
      const options = this.options;

      // Error out if digestPassword set
      if (options.digestPassword != null) {
        return callback(
          toError$4(
            "The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option."
          )
        );
      }

      // Attempt to execute auth command
      super.execute((err, r) => {
        if (!err) {
          return handleCallback$7(callback, err, r);
        }

        return handleCallback$7(callback, err, null);
      });
    }
  }

  defineAspects$7(AddUserOperation, Aspect$7.WRITE_OPERATION);

  var add_user = AddUserOperation;

  var require$$4$1 = /*@__PURE__*/getAugmentedNamespace(collection$2);

  const OperationBase$3 = operation.OperationBase;
  const handleCallback$6 = require$$1$1.handleCallback;

  let collection$1;
  function loadCollection$3() {
    if (!collection$1) {
      collection$1 = require$$4$1;
    }
    return collection$1;
  }

  class CollectionsOperation extends OperationBase$3 {
    constructor(db, options) {
      super(options);

      this.db = db;
    }

    execute(callback) {
      const db = this.db;
      let options = this.options;

      let Collection = loadCollection$3();

      options = Object.assign({}, options, { nameOnly: true });
      // Let's get the collection names
      db.listCollections({}, options).toArray((err, documents) => {
        if (err != null) return handleCallback$6(callback, err, null);
        // Filter collections removing any illegal ones
        documents = documents.filter(doc => {
          return doc.name.indexOf('$') === -1;
        });

        // Return the collection objects
        handleCallback$6(
          callback,
          null,
          documents.map(d => {
            return new Collection(
              db,
              db.s.topology,
              db.databaseName,
              d.name,
              db.s.pkFactory,
              db.s.options
            );
          })
        );
      });
    }
  }

  var collections = CollectionsOperation;

  const defineAspects$6 = operation.defineAspects;
  const Aspect$6 = operation.Aspect;

  class RunCommandOperation extends command_v2 {
    constructor(parent, command, options) {
      super(parent, options);
      this.command = command;
    }
    execute(server, callback) {
      const command = this.command;
      this.executeCommand(server, command, callback);
    }
  }
  defineAspects$6(RunCommandOperation, [Aspect$6.EXECUTE_WITH_SELECTION, Aspect$6.NO_INHERIT_OPTIONS]);

  var run_command = RunCommandOperation;

  let collection;
  let cursor;
  let db$1;

  function loadCollection$2() {
    if (!collection) {
      collection = require$$4$1;
    }
    return collection;
  }

  function loadCursor() {
    if (!cursor) {
      cursor = cursor$1;
    }
    return cursor;
  }

  function loadDb() {
    if (!db$1) {
      db$1 = db;
    }
    return db$1;
  }

  var dynamic_loaders = {
    loadCollection: loadCollection$2,
    loadCursor,
    loadDb
  };

  const Aspect$5 = operation.Aspect;
  const defineAspects$5 = operation.defineAspects;

  const applyWriteConcern$3 = require$$1$1.applyWriteConcern;
  const loadCollection$1 = dynamic_loaders.loadCollection;
  const MongoError$c = core.MongoError;
  const ReadPreference$4 = core.ReadPreference;

  const ILLEGAL_COMMAND_FIELDS = new Set([
    'w',
    'wtimeout',
    'j',
    'fsync',
    'autoIndexId',
    'strict',
    'serializeFunctions',
    'pkFactory',
    'raw',
    'readPreference',
    'session',
    'readConcern',
    'writeConcern'
  ]);

  class CreateCollectionOperation extends command {
    constructor(db, name, options) {
      super(db, options);
      this.name = name;
    }

    _buildCommand() {
      const name = this.name;
      const options = this.options;

      const cmd = { create: name };
      for (let n in options) {
        if (
          options[n] != null &&
          typeof options[n] !== 'function' &&
          !ILLEGAL_COMMAND_FIELDS.has(n)
        ) {
          cmd[n] = options[n];
        }
      }

      return cmd;
    }

    execute(callback) {
      const db = this.db;
      const name = this.name;
      const options = this.options;
      const Collection = loadCollection$1();

      let listCollectionOptions = Object.assign({ nameOnly: true, strict: false }, options);
      listCollectionOptions = applyWriteConcern$3(listCollectionOptions, { db }, listCollectionOptions);

      function done(err) {
        if (err) {
          return callback(err);
        }

        try {
          callback(
            null,
            new Collection(db, db.s.topology, db.databaseName, name, db.s.pkFactory, options)
          );
        } catch (err) {
          callback(err);
        }
      }

      const strictMode = listCollectionOptions.strict;
      if (strictMode) {
        db.listCollections({ name }, listCollectionOptions)
          .setReadPreference(ReadPreference$4.PRIMARY)
          .toArray((err, collections) => {
            if (err) {
              return callback(err);
            }

            if (collections.length > 0) {
              return callback(
                new MongoError$c(`Collection ${name} already exists. Currently in strict mode.`)
              );
            }

            super.execute(done);
          });

        return;
      }

      // otherwise just execute the command
      super.execute(done);
    }
  }

  defineAspects$5(CreateCollectionOperation, Aspect$5.WRITE_OPERATION);
  var create_collection = CreateCollectionOperation;

  const Aspect$4 = operation.Aspect;
  const defineAspects$4 = operation.defineAspects;

  const MongoError$b = core.MongoError;
  const parseIndexOptions = require$$1$1.parseIndexOptions;
  const maxWireVersion$3 = require$$2.maxWireVersion;

  const VALID_INDEX_OPTIONS = new Set([
    'background',
    'unique',
    'name',
    'partialFilterExpression',
    'sparse',
    'expireAfterSeconds',
    'storageEngine',
    'collation',

    // text indexes
    'weights',
    'default_language',
    'language_override',
    'textIndexVersion',

    // 2d-sphere indexes
    '2dsphereIndexVersion',

    // 2d indexes
    'bits',
    'min',
    'max',

    // geoHaystack Indexes
    'bucketSize',

    // wildcard indexes
    'wildcardProjection'
  ]);

  class CreateIndexesOperation extends command_v2 {
    /**
     * @ignore
     */
    constructor(parent, collection, indexes, options) {
      super(parent, options);
      this.collection = collection;

      // createIndex can be called with a variety of styles:
      //   coll.createIndex('a');
      //   coll.createIndex({ a: 1 });
      //   coll.createIndex([['a', 1]]);
      // createIndexes is always called with an array of index spec objects
      if (!Array.isArray(indexes) || Array.isArray(indexes[0])) {
        this.onlyReturnNameOfCreatedIndex = true;
        // TODO: remove in v4 (breaking change); make createIndex return full response as createIndexes does

        const indexParameters = parseIndexOptions(indexes);
        // Generate the index name
        const name = typeof options.name === 'string' ? options.name : indexParameters.name;
        // Set up the index
        const indexSpec = { name, key: indexParameters.fieldHash };
        // merge valid index options into the index spec
        for (let optionName in options) {
          if (VALID_INDEX_OPTIONS.has(optionName)) {
            indexSpec[optionName] = options[optionName];
          }
        }
        this.indexes = [indexSpec];
        return;
      }

      this.indexes = indexes;
    }

    /**
     * @ignore
     */
    execute(server, callback) {
      const options = this.options;
      const indexes = this.indexes;

      const serverWireVersion = maxWireVersion$3(server);

      // Ensure we generate the correct name if the parameter is not set
      for (let i = 0; i < indexes.length; i++) {
        // Did the user pass in a collation, check if our write server supports it
        if (indexes[i].collation && serverWireVersion < 5) {
          callback(
            new MongoError$b(
              `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`
            )
          );
          return;
        }

        if (indexes[i].name == null) {
          const keys = [];

          for (let name in indexes[i].key) {
            keys.push(`${name}_${indexes[i].key[name]}`);
          }

          // Set the name
          indexes[i].name = keys.join('_');
        }
      }

      const cmd = { createIndexes: this.collection, indexes };

      if (options.commitQuorum != null) {
        if (serverWireVersion < 9) {
          callback(
            new MongoError$b('`commitQuorum` option for `createIndexes` not supported on servers < 4.4')
          );
          return;
        }
        cmd.commitQuorum = options.commitQuorum;
      }

      // collation is set on each index, it should not be defined at the root
      this.options.collation = undefined;

      super.executeCommand(server, cmd, (err, result) => {
        if (err) {
          callback(err);
          return;
        }

        callback(null, this.onlyReturnNameOfCreatedIndex ? indexes[0].name : result);
      });
    }
  }

  defineAspects$4(CreateIndexesOperation, [Aspect$4.WRITE_OPERATION, Aspect$4.EXECUTE_WITH_SELECTION]);

  var create_indexes = CreateIndexesOperation;

  const Aspect$3 = operation.Aspect;

  const defineAspects$3 = operation.defineAspects;
  const handleCallback$5 = require$$1$1.handleCallback;

  class DropOperation extends command {
    constructor(db, options) {
      const finalOptions = Object.assign({}, options, db.s.options);

      if (options.session) {
        finalOptions.session = options.session;
      }

      super(db, finalOptions);
    }

    execute(callback) {
      super.execute((err, result) => {
        if (err) return handleCallback$5(callback, err);
        if (result.ok) return handleCallback$5(callback, null, true);
        handleCallback$5(callback, null, false);
      });
    }
  }

  defineAspects$3(DropOperation, Aspect$3.WRITE_OPERATION);

  class DropCollectionOperation$1 extends DropOperation {
    constructor(db, name, options) {
      super(db, options);

      this.name = name;
      this.namespace = `${db.namespace}.${name}`;
    }

    _buildCommand() {
      return { drop: this.name };
    }
  }

  class DropDatabaseOperation$1 extends DropOperation {
    _buildCommand() {
      return { dropDatabase: 1 };
    }
  }

  var drop = {
    DropOperation,
    DropCollectionOperation: DropCollectionOperation$1,
    DropDatabaseOperation: DropDatabaseOperation$1
  };

  const OperationBase$2 = operation.OperationBase;
  const handleCallback$4 = require$$1$1.handleCallback;
  const MongoError$a = core.MongoError;
  const MongoDBNamespace$3 = require$$1$1.MongoDBNamespace;

  class ExecuteDbAdminCommandOperation extends OperationBase$2 {
    constructor(db, selector, options) {
      super(options);

      this.db = db;
      this.selector = selector;
    }

    execute(callback) {
      const db = this.db;
      const selector = this.selector;
      const options = this.options;

      const namespace = new MongoDBNamespace$3('admin', '$cmd');
      db.s.topology.command(namespace, selector, options, (err, result) => {
        // Did the user destroy the topology
        if (db.serverConfig && db.serverConfig.isDestroyed()) {
          return callback(new MongoError$a('topology was destroyed'));
        }

        if (err) return handleCallback$4(callback, err);
        handleCallback$4(callback, null, result.result);
      });
    }
  }

  var execute_db_admin_command = ExecuteDbAdminCommandOperation;

  const OperationBase$1 = operation.OperationBase;
  const indexInformation = common_functions.indexInformation;

  class IndexInformationOperation extends OperationBase$1 {
    constructor(db, name, options) {
      super(options);

      this.db = db;
      this.name = name;
    }

    execute(callback) {
      const db = this.db;
      const name = this.name;
      const options = this.options;

      indexInformation(db, name, options, callback);
    }
  }

  var index_information = IndexInformationOperation;

  const Aspect$2 = operation.Aspect;
  const defineAspects$2 = operation.defineAspects;
  const maxWireVersion$2 = require$$2.maxWireVersion;


  const LIST_COLLECTIONS_WIRE_VERSION = 3;

  function listCollectionsTransforms(databaseName) {
    const matching = `${databaseName}.`;

    return {
      doc: doc => {
        const index = doc.name.indexOf(matching);
        // Remove database name if available
        if (doc.name && index === 0) {
          doc.name = doc.name.substr(index + matching.length);
        }

        return doc;
      }
    };
  }

  class ListCollectionsOperation extends command_v2 {
    constructor(db, filter, options) {
      super(db, options, { fullResponse: true });

      this.db = db;
      this.filter = filter;
      this.nameOnly = !!this.options.nameOnly;

      if (typeof this.options.batchSize === 'number') {
        this.batchSize = this.options.batchSize;
      }
    }

    execute(server, callback) {
      if (maxWireVersion$2(server) < LIST_COLLECTIONS_WIRE_VERSION) {
        let filter = this.filter;
        const databaseName = this.db.s.namespace.db;

        // If we have legacy mode and have not provided a full db name filter it
        if (
          typeof filter.name === 'string' &&
          !new RegExp('^' + databaseName + '\\.').test(filter.name)
        ) {
          filter = Object.assign({}, filter);
          filter.name = this.db.s.namespace.withCollection(filter.name).toString();
        }

        // No filter, filter by current database
        if (filter == null) {
          filter.name = `/${databaseName}/`;
        }

        // Rewrite the filter to use $and to filter out indexes
        if (filter.name) {
          filter = { $and: [{ name: filter.name }, { name: /^((?!\$).)*$/ }] };
        } else {
          filter = { name: /^((?!\$).)*$/ };
        }

        const transforms = listCollectionsTransforms(databaseName);
        server.query(
          `${databaseName}.${constants.SYSTEM_NAMESPACE_COLLECTION}`,
          { query: filter },
          { batchSize: this.batchSize || 1000 },
          {},
          (err, result) => {
            if (
              result &&
              result.message &&
              result.message.documents &&
              Array.isArray(result.message.documents)
            ) {
              result.message.documents = result.message.documents.map(transforms.doc);
            }

            callback(err, result);
          }
        );

        return;
      }

      const command = {
        listCollections: 1,
        filter: this.filter,
        cursor: this.batchSize ? { batchSize: this.batchSize } : {},
        nameOnly: this.nameOnly
      };

      return super.executeCommand(server, command, callback);
    }
  }

  defineAspects$2(ListCollectionsOperation, [
    Aspect$2.READ_OPERATION,
    Aspect$2.RETRYABLE,
    Aspect$2.EXECUTE_WITH_SELECTION
  ]);

  var list_collections = ListCollectionsOperation;

  class ProfilingLevelOperation extends command {
    constructor(db, command, options) {
      super(db, options);
    }

    _buildCommand() {
      const command = { profile: -1 };

      return command;
    }

    execute(callback) {
      super.execute((err, doc) => {
        if (err == null && doc.ok === 1) {
          const was = doc.was;
          if (was === 0) return callback(null, 'off');
          if (was === 1) return callback(null, 'slow_only');
          if (was === 2) return callback(null, 'all');
          return callback(new Error('Error: illegal profiling level value ' + was), null);
        } else {
          err != null ? callback(err, null) : callback(new Error('Error with profile command'), null);
        }
      });
    }
  }

  var profiling_level = ProfilingLevelOperation;

  const Aspect$1 = operation.Aspect;

  const defineAspects$1 = operation.defineAspects;
  const handleCallback$3 = require$$1$1.handleCallback;


  class RemoveUserOperation extends command {
    constructor(db, username, options) {
      const commandOptions = {};

      const writeConcern = write_concern.fromOptions(options);
      if (writeConcern != null) {
        commandOptions.writeConcern = writeConcern;
      }

      if (options.dbName) {
        commandOptions.dbName = options.dbName;
      }

      // Add maxTimeMS to options if set
      if (typeof options.maxTimeMS === 'number') {
        commandOptions.maxTimeMS = options.maxTimeMS;
      }

      super(db, commandOptions);

      this.username = username;
    }

    _buildCommand() {
      const username = this.username;

      // Build the command to execute
      const command = { dropUser: username };

      return command;
    }

    execute(callback) {
      // Attempt to execute command
      super.execute((err, result) => {
        if (err) return handleCallback$3(callback, err, null);
        handleCallback$3(callback, err, result.ok ? true : false);
      });
    }
  }

  defineAspects$1(RemoveUserOperation, Aspect$1.WRITE_OPERATION);

  var remove_user = RemoveUserOperation;

  const OperationBase = operation.OperationBase;
  const applyWriteConcern$2 = require$$1$1.applyWriteConcern;
  const checkCollectionName = require$$1$1.checkCollectionName;
  const executeDbAdminCommand = db_ops.executeDbAdminCommand;
  const handleCallback$2 = require$$1$1.handleCallback;
  const loadCollection = dynamic_loaders.loadCollection;
  const toError$3 = require$$1$1.toError;

  class RenameOperation extends OperationBase {
    constructor(collection, newName, options) {
      super(options);

      this.collection = collection;
      this.newName = newName;
    }

    execute(callback) {
      const coll = this.collection;
      const newName = this.newName;
      const options = this.options;

      let Collection = loadCollection();
      // Check the collection name
      checkCollectionName(newName);
      // Build the command
      const renameCollection = coll.namespace;
      const toCollection = coll.s.namespace.withCollection(newName).toString();
      const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;
      const cmd = { renameCollection: renameCollection, to: toCollection, dropTarget: dropTarget };

      // Decorate command with writeConcern if supported
      applyWriteConcern$2(cmd, { db: coll.s.db, collection: coll }, options);

      // Execute against admin
      executeDbAdminCommand(coll.s.db.admin().s.db, cmd, options, (err, doc) => {
        if (err) return handleCallback$2(callback, err, null);
        // We have an error
        if (doc.errmsg) return handleCallback$2(callback, toError$3(doc), null);
        try {
          return handleCallback$2(
            callback,
            null,
            new Collection(
              coll.s.db,
              coll.s.topology,
              coll.s.namespace.db,
              newName,
              coll.s.pkFactory,
              coll.s.options
            )
          );
        } catch (err) {
          return handleCallback$2(callback, toError$3(err), null);
        }
      });
    }
  }

  var rename = RenameOperation;

  const levelValues = new Set(['off', 'slow_only', 'all']);

  class SetProfilingLevelOperation extends command {
    constructor(db, level, options) {
      let profile = 0;

      if (level === 'off') {
        profile = 0;
      } else if (level === 'slow_only') {
        profile = 1;
      } else if (level === 'all') {
        profile = 2;
      }

      super(db, options);
      this.level = level;
      this.profile = profile;
    }

    _buildCommand() {
      const profile = this.profile;

      // Set up the profile number
      const command = { profile };

      return command;
    }

    execute(callback) {
      const level = this.level;

      if (!levelValues.has(level)) {
        return callback(new Error('Error: illegal profiling level value ' + level));
      }

      super.execute((err, doc) => {
        if (err == null && doc.ok === 1) return callback(null, level);
        return err != null
          ? callback(err, null)
          : callback(new Error('Error with profile command'), null);
      });
    }
  }

  var set_profiling_level = SetProfilingLevelOperation;

  class ValidateCollectionOperation extends command {
    constructor(admin, collectionName, options) {
      // Decorate command with extra options
      let command = { validate: collectionName };
      const keys = Object.keys(options);
      for (let i = 0; i < keys.length; i++) {
        if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {
          command[keys[i]] = options[keys[i]];
        }
      }

      super(admin.s.db, options, null, command);
      this.collectionName = collectionName;
    }

    execute(callback) {
      const collectionName = this.collectionName;

      super.execute((err, doc) => {
        if (err != null) return callback(err, null);

        if (doc.ok === 0) return callback(new Error('Error with validate command'), null);
        if (doc.result != null && doc.result.constructor !== String)
          return callback(new Error('Error with validation data'), null);
        if (doc.result != null && doc.result.match(/exception|corrupt/) != null)
          return callback(new Error('Error: invalid collection ' + collectionName), null);
        if (doc.valid != null && !doc.valid)
          return callback(new Error('Error: invalid collection ' + collectionName), null);

        return callback(null, doc);
      });
    }
  }

  var validate_collection = ValidateCollectionOperation;

  const Aspect = operation.Aspect;
  const defineAspects = operation.defineAspects;
  const MongoDBNamespace$2 = require$$1$1.MongoDBNamespace;

  class ListDatabasesOperation extends command_v2 {
    constructor(db, options) {
      super(db, options);
      this.ns = new MongoDBNamespace$2('admin', '$cmd');
    }

    execute(server, callback) {
      const cmd = { listDatabases: 1 };
      if (this.options.nameOnly) {
        cmd.nameOnly = Number(cmd.nameOnly);
      }

      if (this.options.filter) {
        cmd.filter = this.options.filter;
      }

      if (typeof this.options.authorizedDatabases === 'boolean') {
        cmd.authorizedDatabases = this.options.authorizedDatabases;
      }

      super.executeCommand(server, cmd, callback);
    }
  }

  defineAspects(ListDatabasesOperation, [
    Aspect.READ_OPERATION,
    Aspect.RETRYABLE,
    Aspect.EXECUTE_WITH_SELECTION
  ]);

  var list_databases = ListDatabasesOperation;

  const applyWriteConcern$1 = require$$1$1.applyWriteConcern;









  /**
   * @fileOverview The **Admin** class is an internal class that allows convenient access to
   * the admin functionality and commands for MongoDB.
   *
   * **ADMIN Cannot directly be instantiated**
   * @example
   * const MongoClient = require('mongodb').MongoClient;
   * const test = require('assert');
   * // Connection url
   * const url = 'mongodb://localhost:27017';
   * // Database Name
   * const dbName = 'test';
   *
   * // Connect using MongoClient
   * MongoClient.connect(url, function(err, client) {
   *   // Use the admin database for the operation
   *   const adminDb = client.db(dbName).admin();
   *
   *   // List all the available databases
   *   adminDb.listDatabases(function(err, dbs) {
   *     test.equal(null, err);
   *     test.ok(dbs.databases.length > 0);
   *     client.close();
   *   });
   * });
   */

  /**
   * Create a new Admin instance (INTERNAL TYPE, do not instantiate directly)
   * @class
   * @return {Admin} a collection instance.
   */
  function Admin(db, topology, promiseLibrary) {
    if (!(this instanceof Admin)) return new Admin(db, topology);

    // Internal state
    this.s = {
      db: db,
      topology: topology,
      promiseLibrary: promiseLibrary
    };
  }

  /**
   * The callback format for results
   * @callback Admin~resultCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {object} result The result object if the command was executed successfully.
   */

  /**
   * Execute a command
   * @method
   * @param {object} command The command hash
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.
   * @param {Admin~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.command = function(command, options, callback) {
    const args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    options = args.length ? args.shift() : {};

    const commandOperation = new execute_db_admin_command(this.s.db, command, options);

    return execute_operation(this.s.db.s.topology, commandOperation, callback);
  };

  /**
   * Retrieve the server information for the current
   * instance of the db client
   *
   * @param {Object} [options] optional parameters for this operation
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Admin~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.buildInfo = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const cmd = { buildinfo: 1 };

    const buildInfoOperation = new execute_db_admin_command(this.s.db, cmd, options);

    return execute_operation(this.s.db.s.topology, buildInfoOperation, callback);
  };

  /**
   * Retrieve the server information for the current
   * instance of the db client
   *
   * @param {Object} [options] optional parameters for this operation
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Admin~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.serverInfo = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const cmd = { buildinfo: 1 };

    const serverInfoOperation = new execute_db_admin_command(this.s.db, cmd, options);

    return execute_operation(this.s.db.s.topology, serverInfoOperation, callback);
  };

  /**
   * Retrieve this db's server status.
   *
   * @param {Object} [options] optional parameters for this operation
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Admin~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.serverStatus = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const serverStatusOperation = new execute_db_admin_command(
      this.s.db,
      { serverStatus: 1 },
      options
    );

    return execute_operation(this.s.db.s.topology, serverStatusOperation, callback);
  };

  /**
   * Ping the MongoDB server and retrieve results
   *
   * @param {Object} [options] optional parameters for this operation
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Admin~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.ping = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const cmd = { ping: 1 };

    const pingOperation = new execute_db_admin_command(this.s.db, cmd, options);

    return execute_operation(this.s.db.s.topology, pingOperation, callback);
  };

  /**
   * Add a user to the database.
   * @method
   * @param {string} username The username.
   * @param {string} password The password.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {object} [options.customData] Custom data associated with the user (only Mongodb 2.6 or higher)
   * @param {object[]} [options.roles] Roles associated with the created user (only Mongodb 2.6 or higher)
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Admin~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.addUser = function(username, password, options, callback) {
    const args = Array.prototype.slice.call(arguments, 2);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;

    // Special case where there is no password ($external users)
    if (typeof username === 'string' && password != null && typeof password === 'object') {
      options = password;
      password = null;
    }

    options = args.length ? args.shift() : {};
    options = Object.assign({}, options);
    // Get the options
    options = applyWriteConcern$1(options, { db: this.s.db });
    // Set the db name to admin
    options.dbName = 'admin';

    const addUserOperation = new add_user(this.s.db, username, password, options);

    return execute_operation(this.s.db.s.topology, addUserOperation, callback);
  };

  /**
   * Remove a user from a database
   * @method
   * @param {string} username The username.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Admin~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.removeUser = function(username, options, callback) {
    const args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;

    options = args.length ? args.shift() : {};
    options = Object.assign({}, options);
    // Get the options
    options = applyWriteConcern$1(options, { db: this.s.db });
    // Set the db name
    options.dbName = 'admin';

    const removeUserOperation = new remove_user(this.s.db, username, options);

    return execute_operation(this.s.db.s.topology, removeUserOperation, callback);
  };

  /**
   * Validate an existing collection
   *
   * @param {string} collectionName The name of the collection to validate.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.background] Validates a collection in the background, without interrupting read or write traffic (only in MongoDB 4.4+)
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Admin~resultCallback} [callback] The command result callback.
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.validateCollection = function(collectionName, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const validateCollectionOperation = new validate_collection(
      this,
      collectionName,
      options
    );

    return execute_operation(this.s.db.s.topology, validateCollectionOperation, callback);
  };

  /**
   * List the available databases
   *
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.nameOnly=false] Whether the command should return only db names, or names and size info.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Admin~resultCallback} [callback] The command result callback.
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.listDatabases = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return execute_operation(
      this.s.db.s.topology,
      new list_databases(this.s.db, options),
      callback
    );
  };

  /**
   * Get ReplicaSet status
   *
   * @param {Object} [options] optional parameters for this operation
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Admin~resultCallback} [callback] The command result callback.
   * @return {Promise} returns Promise if no callback passed
   */
  Admin.prototype.replSetGetStatus = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const replSetGetStatusOperation = new execute_db_admin_command(
      this.s.db,
      { replSetGetStatus: 1 },
      options
    );

    return execute_operation(this.s.db.s.topology, replSetGetStatusOperation, callback);
  };

  var admin = Admin;

  const EventEmitter$1 = require$$0$1.EventEmitter;
  const inherits$2 = util$2.inherits;
  const getSingleProperty = require$$1$1.getSingleProperty;

  const handleCallback$1 = require$$1$1.handleCallback;
  const filterOptions$3 = require$$1$1.filterOptions;
  const toError$2 = require$$1$1.toError;
  const ReadPreference$3 = core.ReadPreference;
  const MongoError$9 = core.MongoError;
  const ObjectID$3 = core.ObjectID;
  const Logger$1 = core.Logger;

  const conditionallyMergeWriteConcern = require$$1$1.conditionallyMergeWriteConcern;
  const executeLegacyOperation$3 = require$$1$1.executeLegacyOperation;

  const deprecate$3 = util$2.deprecate;
  const deprecateOptions = require$$1$1.deprecateOptions;
  const MongoDBNamespace$1 = require$$1$1.MongoDBNamespace;





  // Operations
  const createListener$1 = db_ops.createListener;
  const ensureIndex = db_ops.ensureIndex;
  const evaluate = db_ops.evaluate;
  const profilingInfo = db_ops.profilingInfo;
  const validateDatabaseName = db_ops.validateDatabaseName;








  const DropCollectionOperation = drop.DropCollectionOperation;
  const DropDatabaseOperation = drop.DropDatabaseOperation;










  /**
   * @fileOverview The **Db** class is a class that represents a MongoDB Database.
   *
   * @example
   * const MongoClient = require('mongodb').MongoClient;
   * // Connection url
   * const url = 'mongodb://localhost:27017';
   * // Database Name
   * const dbName = 'test';
   * // Connect using MongoClient
   * MongoClient.connect(url, function(err, client) {
   *   // Select the database by name
   *   const testDb = client.db(dbName);
   *   client.close();
   * });
   */

  // Allowed parameters
  const legalOptionNames$3 = [
    'w',
    'wtimeout',
    'fsync',
    'j',
    'writeConcern',
    'readPreference',
    'readPreferenceTags',
    'native_parser',
    'forceServerObjectId',
    'pkFactory',
    'serializeFunctions',
    'raw',
    'bufferMaxEntries',
    'authSource',
    'ignoreUndefined',
    'promoteLongs',
    'promiseLibrary',
    'readConcern',
    'retryMiliSeconds',
    'numberOfRetries',
    'parentDb',
    'noListener',
    'loggerLevel',
    'logger',
    'promoteBuffers',
    'promoteLongs',
    'promoteValues',
    'compression',
    'retryWrites'
  ];

  /**
   * Creates a new Db instance
   * @class
   * @param {string} databaseName The name of the database this instance represents.
   * @param {(Server|ReplSet|Mongos)} topology The server topology for the database.
   * @param {object} [options] Optional settings.
   * @param {string} [options.authSource] If the database authentication is dependent on another databaseName.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
   * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
   * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.
   * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
   * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)
   * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)
   * @property {(Server|ReplSet|Mongos)} serverConfig Get the current db topology.
   * @property {number} bufferMaxEntries Current bufferMaxEntries value for the database
   * @property {string} databaseName The name of the database this instance represents.
   * @property {object} options The options associated with the db instance.
   * @property {boolean} native_parser The current value of the parameter native_parser.
   * @property {boolean} slaveOk The current slaveOk value for the db instance.
   * @property {object} writeConcern The current write concern values.
   * @property {object} topology Access the topology object (single server, replicaset or mongos).
   * @fires Db#close
   * @fires Db#reconnect
   * @fires Db#error
   * @fires Db#timeout
   * @fires Db#parseError
   * @fires Db#fullsetup
   * @return {Db} a Db instance.
   */
  function Db(databaseName, topology, options) {
    options = options || {};
    if (!(this instanceof Db)) return new Db(databaseName, topology, options);
    EventEmitter$1.call(this);

    // Get the promiseLibrary
    const promiseLibrary = options.promiseLibrary || Promise;

    // Filter the options
    options = filterOptions$3(options, legalOptionNames$3);

    // Ensure we put the promiseLib in the options
    options.promiseLibrary = promiseLibrary;

    // Internal state of the db object
    this.s = {
      // DbCache
      dbCache: {},
      // Children db's
      children: [],
      // Topology
      topology: topology,
      // Options
      options: options,
      // Logger instance
      logger: Logger$1('Db', options),
      // Get the bson parser
      bson: topology ? topology.bson : null,
      // Unpack read preference
      readPreference: ReadPreference$3.fromOptions(options),
      // Set buffermaxEntries
      bufferMaxEntries: typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : -1,
      // Parent db (if chained)
      parentDb: options.parentDb || null,
      // Set up the primary key factory or fallback to ObjectID
      pkFactory: options.pkFactory || ObjectID$3,
      // Get native parser
      nativeParser: options.nativeParser || options.native_parser,
      // Promise library
      promiseLibrary: promiseLibrary,
      // No listener
      noListener: typeof options.noListener === 'boolean' ? options.noListener : false,
      // ReadConcern
      readConcern: read_concern.fromOptions(options),
      writeConcern: write_concern.fromOptions(options),
      // Namespace
      namespace: new MongoDBNamespace$1(databaseName)
    };

    // Ensure we have a valid db name
    validateDatabaseName(databaseName);

    // Add a read Only property
    getSingleProperty(this, 'serverConfig', this.s.topology);
    getSingleProperty(this, 'bufferMaxEntries', this.s.bufferMaxEntries);
    getSingleProperty(this, 'databaseName', this.s.namespace.db);

    // This is a child db, do not register any listeners
    if (options.parentDb) return;
    if (this.s.noListener) return;

    // Add listeners
    topology.on('error', createListener$1(this, 'error', this));
    topology.on('timeout', createListener$1(this, 'timeout', this));
    topology.on('close', createListener$1(this, 'close', this));
    topology.on('parseError', createListener$1(this, 'parseError', this));
    topology.once('open', createListener$1(this, 'open', this));
    topology.once('fullsetup', createListener$1(this, 'fullsetup', this));
    topology.once('all', createListener$1(this, 'all', this));
    topology.on('reconnect', createListener$1(this, 'reconnect', this));
  }

  inherits$2(Db, EventEmitter$1);

  Db.prototype.on = deprecate$3(function() {
    return Db.super_.prototype.on.apply(this, arguments);
  }, 'Listening to events on the Db class has been deprecated and will be removed in the next major version.');

  Db.prototype.once = deprecate$3(function() {
    return Db.super_.prototype.once.apply(this, arguments);
  }, 'Listening to events on the Db class has been deprecated and will be removed in the next major version.');

  // Topology
  Object.defineProperty(Db.prototype, 'topology', {
    enumerable: true,
    get: function() {
      return this.s.topology;
    }
  });

  // Options
  Object.defineProperty(Db.prototype, 'options', {
    enumerable: true,
    get: function() {
      return this.s.options;
    }
  });

  // slaveOk specified
  Object.defineProperty(Db.prototype, 'slaveOk', {
    enumerable: true,
    get: function() {
      if (
        this.s.options.readPreference != null &&
        (this.s.options.readPreference !== 'primary' ||
          this.s.options.readPreference.mode !== 'primary')
      ) {
        return true;
      }
      return false;
    }
  });

  Object.defineProperty(Db.prototype, 'readConcern', {
    enumerable: true,
    get: function() {
      return this.s.readConcern;
    }
  });

  Object.defineProperty(Db.prototype, 'readPreference', {
    enumerable: true,
    get: function() {
      if (this.s.readPreference == null) {
        // TODO: check client
        return ReadPreference$3.primary;
      }

      return this.s.readPreference;
    }
  });

  // get the write Concern
  Object.defineProperty(Db.prototype, 'writeConcern', {
    enumerable: true,
    get: function() {
      return this.s.writeConcern;
    }
  });

  Object.defineProperty(Db.prototype, 'namespace', {
    enumerable: true,
    get: function() {
      return this.s.namespace.toString();
    }
  });

  /**
   * Execute a command
   * @method
   * @param {object} command The command hash
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.command = function(command, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = Object.assign({}, options);

    const commandOperation = new run_command(this, command, options);

    return execute_operation(this.s.topology, commandOperation, callback);
  };

  /**
   * Execute an aggregation framework pipeline against the database, needs MongoDB >= 3.6
   * @method
   * @param {object} [pipeline=[]] Array containing all the aggregation framework commands for the execution.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {object} [options.cursor] Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.
   * @param {number} [options.cursor.batchSize=1000] Deprecated. Use `options.batchSize`
   * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [options.explain] The verbosity mode for the explain output.
   * @param {boolean} [options.allowDiskUse=false] allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).
   * @param {number} [options.maxTimeMS] maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.
   * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query.
   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.
   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
   * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {string} [options.comment] Add a comment to an aggregation command
   * @param {string|object} [options.hint] Add an index selection hint to an aggregation command
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Database~aggregationCallback} callback The command result callback
   * @return {(null|AggregationCursor)}
   */
  Db.prototype.aggregate = function(pipeline, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    // If we have no options or callback we are doing
    // a cursor based aggregation
    if (options == null && callback == null) {
      options = {};
    }

    const cursor = new aggregation_cursor(
      this.s.topology,
      new aggregate(this, pipeline, options),
      options
    );

    // TODO: remove this when NODE-2074 is resolved
    if (typeof callback === 'function') {
      callback(null, cursor);
      return;
    }

    return cursor;
  };

  /**
   * Return the Admin db instance
   * @method
   * @return {Admin} return the new Admin db instance
   */
  Db.prototype.admin = function() {
    const Admin = admin;

    return new Admin(this, this.s.topology, this.s.promiseLibrary);
  };

  /**
   * The callback format for the collection method, must be used if strict is specified
   * @callback Db~collectionResultCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Collection} collection The collection instance.
   */

  /**
   * The callback format for an aggregation call
   * @callback Database~aggregationCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {AggregationCursor} cursor The cursor if the aggregation command was executed successfully.
   */

  const COLLECTION_OPTION_KEYS = [
    'pkFactory',
    'readPreference',
    'serializeFunctions',
    'strict',
    'readConcern',
    'ignoreUndefined',
    'promoteValues',
    'promoteBuffers',
    'promoteLongs'
  ];

  /**
   * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you
   * can use it without a callback in the following way: `const collection = db.collection('mycollection');`
   *
   * @method
   * @param {string} name the collection name we wish to access.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
   * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.strict=false] Returns an error if the collection does not exist
   * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)
   * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)
   * @param {Db~collectionResultCallback} [callback] The collection result callback
   * @return {Collection} return the new Collection instance if not in strict mode
   */
  Db.prototype.collection = function(name, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};
    options = Object.assign({}, options);

    // Set the promise library
    options.promiseLibrary = this.s.promiseLibrary;

    // If we have not set a collection level readConcern set the db level one
    options.readConcern = options.readConcern
      ? new read_concern(options.readConcern.level)
      : this.readConcern;

    // Do we have ignoreUndefined set
    if (this.s.options.ignoreUndefined) {
      options.ignoreUndefined = this.s.options.ignoreUndefined;
    }

    for (const collectionOptionKey of COLLECTION_OPTION_KEYS) {
      if (!(collectionOptionKey in options) && this.s.options[collectionOptionKey] !== undefined) {
        options[collectionOptionKey] = this.s.options[collectionOptionKey];
      }
    }

    // Merge in all needed options and ensure correct writeConcern merging from db level
    options = conditionallyMergeWriteConcern(options, this.s.options);

    // Execute
    if (options == null || !options.strict) {
      try {
        const collection = new require$$4$1(
          this,
          this.s.topology,
          this.databaseName,
          name,
          this.s.pkFactory,
          options
        );
        if (callback) callback(null, collection);
        return collection;
      } catch (err) {
        if (err instanceof MongoError$9 && callback) return callback(err);
        throw err;
      }
    }

    // Strict mode
    if (typeof callback !== 'function') {
      throw toError$2(`A callback is required in strict mode. While getting collection ${name}`);
    }

    // Did the user destroy the topology
    if (this.serverConfig && this.serverConfig.isDestroyed()) {
      return callback(new MongoError$9('topology was destroyed'));
    }

    const listCollectionOptions = Object.assign({}, options, { nameOnly: true });

    // Strict mode
    this.listCollections({ name: name }, listCollectionOptions).toArray((err, collections) => {
      if (err != null) return handleCallback$1(callback, err, null);
      if (collections.length === 0)
        return handleCallback$1(
          callback,
          toError$2(`Collection ${name} does not exist. Currently in strict mode.`),
          null
        );

      try {
        return handleCallback$1(
          callback,
          null,
          new require$$4$1(this, this.s.topology, this.databaseName, name, this.s.pkFactory, options)
        );
      } catch (err) {
        return handleCallback$1(callback, err, null);
      }
    });
  };

  /**
   * Create a new collection on a server with the specified options. Use this to create capped collections.
   * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/
   *
   * @method
   * @param {string} name the collection name we wish to access.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.
   * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
   * @param {boolean} [options.strict=false] DEPRECATED: Returns an error if the collection does not exist
   * @param {boolean} [options.capped=false] Create a capped collection.
   * @param {boolean} [options.autoIndexId=true] DEPRECATED: Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0
   * @param {number} [options.size] The size of the capped collection in bytes.
   * @param {number} [options.max] The maximum number of documents in the capped collection.
   * @param {number} [options.flags] Optional. Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag.
   * @param {object} [options.storageEngine] Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher.
   * @param {object} [options.validator] Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher.
   * @param {string} [options.validationLevel] Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher.
   * @param {string} [options.validationAction] Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher.
   * @param {object} [options.indexOptionDefaults] Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher.
   * @param {string} [options.viewOn] The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher.
   * @param {array} [options.pipeline] An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher.
   * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~collectionResultCallback} [callback] The results callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.createCollection = deprecateOptions(
    {
      name: 'Db.createCollection',
      deprecatedOptions: ['autoIndexId', 'strict', 'w', 'wtimeout', 'j'],
      optionsIndex: 1
    },
    function(name, options, callback) {
      if (typeof options === 'function') (callback = options), (options = {});
      options = options || {};
      options.promiseLibrary = options.promiseLibrary || this.s.promiseLibrary;
      options.readConcern = options.readConcern
        ? new read_concern(options.readConcern.level)
        : this.readConcern;
      const createCollectionOperation = new create_collection(this, name, options);

      return execute_operation(this.s.topology, createCollectionOperation, callback);
    }
  );

  /**
   * Get all the db statistics.
   *
   * @method
   * @param {object} [options] Optional settings.
   * @param {number} [options.scale] Divide the returned sizes by scale value.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The collection result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.stats = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};
    // Build command object
    const commandObject = { dbStats: true };
    // Check if we have the scale value
    if (options['scale'] != null) commandObject['scale'] = options['scale'];

    // If we have a readPreference set
    if (options.readPreference == null && this.s.readPreference) {
      options.readPreference = this.s.readPreference;
    }

    const statsOperation = new command(this, options, null, commandObject);

    // Execute the command
    return execute_operation(this.s.topology, statsOperation, callback);
  };

  /**
   * Get the list of all collection information for the specified db.
   *
   * @method
   * @param {object} [filter={}] Query to filter collections by
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.nameOnly=false] Since 4.0: If true, will only return the collection name in the response, and will omit additional info
   * @param {number} [options.batchSize=1000] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @return {CommandCursor}
   */
  Db.prototype.listCollections = function(filter, options) {
    filter = filter || {};
    options = options || {};

    return new command_cursor(
      this.s.topology,
      new list_collections(this, filter, options),
      options
    );
  };

  /**
   * Evaluate JavaScript on the server
   *
   * @method
   * @param {Code} code JavaScript to execute on server.
   * @param {(object|array)} parameters The parameters for the call.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.nolock=false] Tell MongoDB not to block on the evaluation of the javascript.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The results callback
   * @deprecated Eval is deprecated on MongoDB 3.2 and forward
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.eval = deprecate$3(function(code, parameters, options, callback) {
    const args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    parameters = args.length ? args.shift() : parameters;
    options = args.length ? args.shift() || {} : {};

    return executeLegacyOperation$3(this.s.topology, evaluate, [
      this,
      code,
      parameters,
      options,
      callback
    ]);
  }, 'Db.eval is deprecated as of MongoDB version 3.2');

  /**
   * Rename a collection.
   *
   * @method
   * @param {string} fromCollection Name of current collection to rename.
   * @param {string} toCollection New name of of the collection.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~collectionResultCallback} [callback] The results callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.renameCollection = function(fromCollection, toCollection, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = Object.assign({}, options, { readPreference: ReadPreference$3.PRIMARY });

    // Add return new collection
    options.new_collection = true;

    const renameOperation = new rename(
      this.collection(fromCollection),
      toCollection,
      options
    );

    return execute_operation(this.s.topology, renameOperation, callback);
  };

  /**
   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.
   *
   * @method
   * @param {string} name Name of collection to drop
   * @param {Object} [options] Optional settings
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The results callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.dropCollection = function(name, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const dropCollectionOperation = new DropCollectionOperation(this, name, options);

    return execute_operation(this.s.topology, dropCollectionOperation, callback);
  };

  /**
   * Drop a database, removing it permanently from the server.
   *
   * @method
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The results callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.dropDatabase = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const dropDatabaseOperation = new DropDatabaseOperation(this, options);

    return execute_operation(this.s.topology, dropDatabaseOperation, callback);
  };

  /**
   * Fetch all collections for the current db.
   *
   * @method
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~collectionsResultCallback} [callback] The results callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.collections = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const collectionsOperation = new collections(this, options);

    return execute_operation(this.s.topology, collectionsOperation, callback);
  };

  /**
   * Runs a command on the database as admin.
   * @method
   * @param {object} command The command hash
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.executeDbAdminCommand = function(selector, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};
    options.readPreference = ReadPreference$3.resolve(this, options);

    const executeDbAdminCommandOperation = new execute_db_admin_command(
      this,
      selector,
      options
    );

    return execute_operation(this.s.topology, executeDbAdminCommandOperation, callback);
  };

  /**
   * Creates an index on the db and collection.
   * @method
   * @param {string} name Name of the collection to create the index on.
   * @param {(string|object)} fieldOrSpec Defines the index.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.unique=false] Creates an unique index.
   * @param {boolean} [options.sparse=false] Creates a sparse index.
   * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.
   * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
   * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.
   * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.
   * @param {number} [options.v] Specify the format version of the indexes.
   * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
   * @param {string} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
   * @param {object} [options.partialFilterExpression] Creates a partial index based on the given filter object (MongoDB 3.2 or higher)
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {(number|string)} [options.commitQuorum] (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the "w" field in a write concern plus "votingMembers", which indicates all voting data-bearing nodes.
   * @param {Db~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.createIndex = function(name, fieldOrSpec, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options ? Object.assign({}, options) : {};

    const createIndexesOperation = new create_indexes(this, name, fieldOrSpec, options);

    return execute_operation(this.s.topology, createIndexesOperation, callback);
  };

  /**
   * Ensures that an index exists, if it does not it creates it
   * @method
   * @deprecated since version 2.0
   * @param {string} name The index name
   * @param {(string|object)} fieldOrSpec Defines the index.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.unique=false] Creates an unique index.
   * @param {boolean} [options.sparse=false] Creates a sparse index.
   * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.
   * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value
   * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.
   * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.
   * @param {number} [options.v] Specify the format version of the indexes.
   * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
   * @param {number} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.ensureIndex = deprecate$3(function(name, fieldOrSpec, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeLegacyOperation$3(this.s.topology, ensureIndex, [
      this,
      name,
      fieldOrSpec,
      options,
      callback
    ]);
  }, 'Db.ensureIndex is deprecated as of MongoDB version 3.0 / driver version 2.0');

  Db.prototype.addChild = function(db) {
    if (this.s.parentDb) return this.s.parentDb.addChild(db);
    this.s.children.push(db);
  };

  /**
   * Add a user to the database.
   * @method
   * @param {string} username The username.
   * @param {string} password The password.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {object} [options.customData] Custom data associated with the user (only Mongodb 2.6 or higher)
   * @param {object[]} [options.roles] Roles associated with the created user (only Mongodb 2.6 or higher)
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.addUser = function(username, password, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    // Special case where there is no password ($external users)
    if (typeof username === 'string' && password != null && typeof password === 'object') {
      options = password;
      password = null;
    }

    const addUserOperation = new add_user(this, username, password, options);

    return execute_operation(this.s.topology, addUserOperation, callback);
  };

  /**
   * Remove a user from a database
   * @method
   * @param {string} username The username.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.removeUser = function(username, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const removeUserOperation = new remove_user(this, username, options);

    return execute_operation(this.s.topology, removeUserOperation, callback);
  };

  /**
   * Set the current profiling level of MongoDB
   *
   * @param {string} level The new profiling level (off, slow_only, all).
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The command result callback.
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.setProfilingLevel = function(level, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const setProfilingLevelOperation = new set_profiling_level(this, level, options);

    return execute_operation(this.s.topology, setProfilingLevelOperation, callback);
  };

  /**
   * Retrieve the current profiling information for MongoDB
   *
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The command result callback.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Query the system.profile collection directly.
   */
  Db.prototype.profilingInfo = deprecate$3(function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeLegacyOperation$3(this.s.topology, profilingInfo, [this, options, callback]);
  }, 'Db.profilingInfo is deprecated. Query the system.profile collection directly.');

  /**
   * Retrieve the current profiling Level for MongoDB
   *
   * @param {Object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.profilingLevel = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const profilingLevelOperation = new profiling_level(this, options);

    return execute_operation(this.s.topology, profilingLevelOperation, callback);
  };

  /**
   * Retrieves this collections index info.
   * @method
   * @param {string} name The name of the collection.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.full=false] Returns the full raw index information.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {Db~resultCallback} [callback] The command result callback
   * @return {Promise} returns Promise if no callback passed
   */
  Db.prototype.indexInformation = function(name, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    const indexInformationOperation = new index_information(this, name, options);

    return execute_operation(this.s.topology, indexInformationOperation, callback);
  };

  /**
   * Unref all sockets
   * @method
   */
  Db.prototype.unref = function() {
    this.s.topology.unref();
  };

  /**
   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this database. Will ignore all changes to system collections.
   * @method
   * @since 3.1.0
   * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.
   * @param {object} [options] Optional settings
   * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.
   * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.
   * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query
   * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {ReadPreference} [options.readPreference] The read preference. Defaults to the read preference of the database. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.
   * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @return {ChangeStream} a ChangeStream instance.
   */
  Db.prototype.watch = function(pipeline, options) {
    pipeline = pipeline || [];
    options = options || {};

    // Allow optionally not specifying a pipeline
    if (!Array.isArray(pipeline)) {
      options = pipeline;
      pipeline = [];
    }

    return new change_stream(this, pipeline, options);
  };

  /**
   * Return the db logger
   * @method
   * @return {Logger} return the db logger
   * @ignore
   */
  Db.prototype.getLogger = function() {
    return this.s.logger;
  };

  /**
   * Db close event
   *
   * Emitted after a socket closed against a single server or mongos proxy.
   *
   * @event Db#close
   * @type {MongoError}
   */

  /**
   * Db reconnect event
   *
   *  * Server: Emitted when the driver has reconnected and re-authenticated.
   *  * ReplicaSet: N/A
   *  * Mongos: Emitted when the driver reconnects and re-authenticates successfully against a Mongos.
   *
   * @event Db#reconnect
   * @type {object}
   */

  /**
   * Db error event
   *
   * Emitted after an error occurred against a single server or mongos proxy.
   *
   * @event Db#error
   * @type {MongoError}
   */

  /**
   * Db timeout event
   *
   * Emitted after a socket timeout occurred against a single server or mongos proxy.
   *
   * @event Db#timeout
   * @type {MongoError}
   */

  /**
   * Db parseError event
   *
   * The parseError event is emitted if the driver detects illegal or corrupt BSON being received from the server.
   *
   * @event Db#parseError
   * @type {MongoError}
   */

  /**
   * Db fullsetup event, emitted when all servers in the topology have been connected to at start up time.
   *
   * * Server: Emitted when the driver has connected to the single server and has authenticated.
   * * ReplSet: Emitted after the driver has attempted to connect to all replicaset members.
   * * Mongos: Emitted after the driver has attempted to connect to all mongos proxies.
   *
   * @event Db#fullsetup
   * @type {Db}
   */

  // Constants
  Db.SYSTEM_NAMESPACE_COLLECTION = constants.SYSTEM_NAMESPACE_COLLECTION;
  Db.SYSTEM_INDEX_COLLECTION = constants.SYSTEM_INDEX_COLLECTION;
  Db.SYSTEM_PROFILE_COLLECTION = constants.SYSTEM_PROFILE_COLLECTION;
  Db.SYSTEM_USER_COLLECTION = constants.SYSTEM_USER_COLLECTION;
  Db.SYSTEM_COMMAND_COLLECTION = constants.SYSTEM_COMMAND_COLLECTION;
  Db.SYSTEM_JS_COLLECTION = constants.SYSTEM_JS_COLLECTION;

  var db = Db;

  const isResumableError = error.isResumableError;
  const MongoError$8 = core.MongoError;

  const relayEvents$1 = require$$2.relayEvents;
  const maxWireVersion$1 = require$$2.maxWireVersion;
  const maybePromise$1 = require$$1$1.maybePromise;
  const now = require$$1$1.now;
  const calculateDurationInMs = require$$1$1.calculateDurationInMs;


  const kResumeQueue = Symbol('resumeQueue');

  const CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];
  const CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(
    CHANGE_STREAM_OPTIONS
  );

  const CHANGE_DOMAIN_TYPES = {
    COLLECTION: Symbol('Collection'),
    DATABASE: Symbol('Database'),
    CLUSTER: Symbol('Cluster')
  };

  /**
   * @typedef ResumeToken
   * @description Represents the logical starting point for a new or resuming {@link ChangeStream} on the server.
   * @see https://docs.mongodb.com/master/changeStreams/#change-stream-resume-token
   */

  /**
   * @typedef OperationTime
   * @description Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}
   * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response
   */

  /**
   * @typedef ChangeStreamOptions
   * @description Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.
   * @property {string} [fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.
   * @property {number} [maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query.
   * @property {ResumeToken} [resumeAfter] Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/master/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}.
   * @property {ResumeToken} [startAfter] Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/master/changeStreams/#startafter-for-change-streams|ChangeStream documentation}.
   * @property {OperationTime} [startAtOperationTime] Will start the changeStream after the specified operationTime.
   * @property {number} [batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @property {object} [collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @property {ReadPreference} [readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.
   */

  /**
   * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.
   * @class ChangeStream
   * @since 3.0.0
   * @param {(MongoClient|Db|Collection)} parent The parent object that created this change stream
   * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents
   * @param {ChangeStreamOptions} [options] Optional settings
   * @fires ChangeStream#close
   * @fires ChangeStream#change
   * @fires ChangeStream#end
   * @fires ChangeStream#error
   * @fires ChangeStream#resumeTokenChanged
   * @return {ChangeStream} a ChangeStream instance.
   */
  class ChangeStream extends require$$0$1 {
    constructor(parent, pipeline, options) {
      super();
      const Collection = require$$4$1;
      const Db = db;
      const MongoClient = mongo_client;

      this.pipeline = pipeline || [];
      this.options = options || {};

      this.parent = parent;
      this.namespace = parent.s.namespace;
      if (parent instanceof Collection) {
        this.type = CHANGE_DOMAIN_TYPES.COLLECTION;
        this.topology = parent.s.db.serverConfig;
      } else if (parent instanceof Db) {
        this.type = CHANGE_DOMAIN_TYPES.DATABASE;
        this.topology = parent.serverConfig;
      } else if (parent instanceof MongoClient) {
        this.type = CHANGE_DOMAIN_TYPES.CLUSTER;
        this.topology = parent.topology;
      } else {
        throw new TypeError(
          'parent provided to ChangeStream constructor is not an instance of Collection, Db, or MongoClient'
        );
      }

      this.promiseLibrary = parent.s.promiseLibrary;
      if (!this.options.readPreference && parent.s.readPreference) {
        this.options.readPreference = parent.s.readPreference;
      }

      this[kResumeQueue] = new denque();

      // Create contained Change Stream cursor
      this.cursor = createChangeStreamCursor(this, options);

      this.closed = false;

      // Listen for any `change` listeners being added to ChangeStream
      this.on('newListener', eventName => {
        if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {
          this.cursor.on('data', change => processNewChange(this, change));
        }
      });

      // Listen for all `change` listeners being removed from ChangeStream
      this.on('removeListener', eventName => {
        if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {
          this.cursor.removeAllListeners('data');
        }
      });
    }

    /**
     * @property {ResumeToken} resumeToken
     * The cached resume token that will be used to resume
     * after the most recently returned change.
     */
    get resumeToken() {
      return this.cursor.resumeToken;
    }

    /**
     * Check if there is any document still available in the Change Stream
     * @function ChangeStream.prototype.hasNext
     * @param {ChangeStream~resultCallback} [callback] The result callback.
     * @throws {MongoError}
     * @returns {Promise|void} returns Promise if no callback passed
     */
    hasNext(callback) {
      return maybePromise$1(this.parent, callback, cb => {
        getCursor(this, (err, cursor) => {
          if (err) return cb(err); // failed to resume, raise an error
          cursor.hasNext(cb);
        });
      });
    }

    /**
     * Get the next available document from the Change Stream, returns null if no more documents are available.
     * @function ChangeStream.prototype.next
     * @param {ChangeStream~resultCallback} [callback] The result callback.
     * @throws {MongoError}
     * @returns {Promise|void} returns Promise if no callback passed
     */
    next(callback) {
      return maybePromise$1(this.parent, callback, cb => {
        getCursor(this, (err, cursor) => {
          if (err) return cb(err); // failed to resume, raise an error
          cursor.next((error, change) => {
            if (error) {
              this[kResumeQueue].push(() => this.next(cb));
              processError(this, error, cb);
              return;
            }
            processNewChange(this, change, cb);
          });
        });
      });
    }

    /**
     * Is the change stream closed
     * @method ChangeStream.prototype.isClosed
     * @return {boolean}
     */
    isClosed() {
      return this.closed || (this.cursor && this.cursor.isClosed());
    }

    /**
     * Close the Change Stream
     * @method ChangeStream.prototype.close
     * @param {ChangeStream~resultCallback} [callback] The result callback.
     * @return {Promise} returns Promise if no callback passed
     */
    close(callback) {
      return maybePromise$1(this.parent, callback, cb => {
        if (this.closed) return cb();

        // flag the change stream as explicitly closed
        this.closed = true;

        if (!this.cursor) return cb();

        // Tidy up the existing cursor
        const cursor = this.cursor;

        return cursor.close(err => {
          ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));
          this.cursor = undefined;

          return cb(err);
        });
      });
    }

    /**
     * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.
     * @method
     * @param {Writable} destination The destination for writing data
     * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}
     * @return {null}
     */
    pipe(destination, options) {
      if (!this.pipeDestinations) {
        this.pipeDestinations = [];
      }
      this.pipeDestinations.push(destination);
      return this.cursor.pipe(destination, options);
    }

    /**
     * This method will remove the hooks set up for a previous pipe() call.
     * @param {Writable} [destination] The destination for writing data
     * @return {null}
     */
    unpipe(destination) {
      if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {
        this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);
      }
      return this.cursor.unpipe(destination);
    }

    /**
     * Return a modified Readable stream including a possible transform method.
     * @method
     * @param {object} [options] Optional settings.
     * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.
     * @return {Cursor}
     */
    stream(options) {
      this.streamOptions = options;
      return this.cursor.stream(options);
    }

    /**
     * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.
     * @return {null}
     */
    pause() {
      return this.cursor.pause();
    }

    /**
     * This method will cause the readable stream to resume emitting data events.
     * @return {null}
     */
    resume() {
      return this.cursor.resume();
    }
  }

  class ChangeStreamCursor extends cursor$1 {
    constructor(topology, operation, options) {
      super(topology, operation, options);

      options = options || {};
      this._resumeToken = null;
      this.startAtOperationTime = options.startAtOperationTime;

      if (options.startAfter) {
        this.resumeToken = options.startAfter;
      } else if (options.resumeAfter) {
        this.resumeToken = options.resumeAfter;
      }
    }

    set resumeToken(token) {
      this._resumeToken = token;
      this.emit('resumeTokenChanged', token);
    }

    get resumeToken() {
      return this._resumeToken;
    }

    get resumeOptions() {
      const result = {};
      for (const optionName of CURSOR_OPTIONS) {
        if (this.options[optionName]) result[optionName] = this.options[optionName];
      }

      if (this.resumeToken || this.startAtOperationTime) {
        ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => delete result[key]);

        if (this.resumeToken) {
          const resumeKey =
            this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';
          result[resumeKey] = this.resumeToken;
        } else if (this.startAtOperationTime && maxWireVersion$1(this.server) >= 7) {
          result.startAtOperationTime = this.startAtOperationTime;
        }
      }

      return result;
    }

    cacheResumeToken(resumeToken) {
      if (this.bufferedCount() === 0 && this.cursorState.postBatchResumeToken) {
        this.resumeToken = this.cursorState.postBatchResumeToken;
      } else {
        this.resumeToken = resumeToken;
      }
      this.hasReceived = true;
    }

    _processBatch(batchName, response) {
      const cursor = response.cursor;
      if (cursor.postBatchResumeToken) {
        this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;

        if (cursor[batchName].length === 0) {
          this.resumeToken = cursor.postBatchResumeToken;
        }
      }
    }

    _initializeCursor(callback) {
      super._initializeCursor((err, result) => {
        if (err || result == null) {
          callback(err, result);
          return;
        }

        const response = result.documents[0];

        if (
          this.startAtOperationTime == null &&
          this.resumeAfter == null &&
          this.startAfter == null &&
          maxWireVersion$1(this.server) >= 7
        ) {
          this.startAtOperationTime = response.operationTime;
        }

        this._processBatch('firstBatch', response);

        this.emit('init', result);
        this.emit('response');
        callback(err, result);
      });
    }

    _getMore(callback) {
      super._getMore((err, response) => {
        if (err) {
          callback(err);
          return;
        }

        this._processBatch('nextBatch', response);

        this.emit('more', response);
        this.emit('response');
        callback(err, response);
      });
    }
  }

  /**
   * @event ChangeStreamCursor#response
   * internal event DO NOT USE
   * @ignore
   */

  // Create a new change stream cursor based on self's configuration
  function createChangeStreamCursor(self, options) {
    const changeStreamStageOptions = { fullDocument: options.fullDocument || 'default' };
    applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);
    if (self.type === CHANGE_DOMAIN_TYPES.CLUSTER) {
      changeStreamStageOptions.allChangesForCluster = true;
    }

    const pipeline = [{ $changeStream: changeStreamStageOptions }].concat(self.pipeline);
    const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);

    const changeStreamCursor = new ChangeStreamCursor(
      self.topology,
      new aggregate(self.parent, pipeline, options),
      cursorOptions
    );

    relayEvents$1(changeStreamCursor, self, ['resumeTokenChanged', 'end', 'close']);

    /**
     * Fired for each new matching change in the specified namespace. Attaching a `change`
     * event listener to a Change Stream will switch the stream into flowing mode. Data will
     * then be passed as soon as it is available.
     *
     * @event ChangeStream#change
     * @type {object}
     */
    if (self.listenerCount('change') > 0) {
      changeStreamCursor.on('data', function(change) {
        processNewChange(self, change);
      });
    }

    /**
     * Change stream close event
     *
     * @event ChangeStream#close
     * @type {null}
     */

    /**
     * Change stream end event
     *
     * @event ChangeStream#end
     * @type {null}
     */

    /**
     * Emitted each time the change stream stores a new resume token.
     *
     * @event ChangeStream#resumeTokenChanged
     * @type {ResumeToken}
     */

    /**
     * Fired when the stream encounters an error.
     *
     * @event ChangeStream#error
     * @type {Error}
     */
    changeStreamCursor.on('error', function(error) {
      processError(self, error);
    });

    if (self.pipeDestinations) {
      const cursorStream = changeStreamCursor.stream(self.streamOptions);
      for (let pipeDestination of self.pipeDestinations) {
        cursorStream.pipe(pipeDestination);
      }
    }

    return changeStreamCursor;
  }

  function applyKnownOptions(target, source, optionNames) {
    optionNames.forEach(name => {
      if (source[name]) {
        target[name] = source[name];
      }
    });

    return target;
  }

  // This method performs a basic server selection loop, satisfying the requirements of
  // ChangeStream resumability until the new SDAM layer can be used.
  const SELECTION_TIMEOUT = 30000;
  function waitForTopologyConnected(topology, options, callback) {
    setTimeout(() => {
      if (options && options.start == null) {
        options.start = now();
      }

      const start = options.start || now();
      const timeout = options.timeout || SELECTION_TIMEOUT;
      const readPreference = options.readPreference;
      if (topology.isConnected({ readPreference })) {
        return callback();
      }

      if (calculateDurationInMs(start) > timeout) {
        return callback(new MongoError$8('Timed out waiting for connection'));
      }

      waitForTopologyConnected(topology, options, callback);
    }, 500); // this is an arbitrary wait time to allow SDAM to transition
  }

  function processNewChange(changeStream, change, callback) {
    const cursor = changeStream.cursor;

    // a null change means the cursor has been notified, implicitly closing the change stream
    if (change == null) {
      changeStream.closed = true;
    }

    if (changeStream.closed) {
      if (callback) callback(new MongoError$8('ChangeStream is closed'));
      return;
    }

    if (change && !change._id) {
      const noResumeTokenError = new Error(
        'A change stream document has been received that lacks a resume token (_id).'
      );

      if (!callback) return changeStream.emit('error', noResumeTokenError);
      return callback(noResumeTokenError);
    }

    // cache the resume token
    cursor.cacheResumeToken(change._id);

    // wipe the startAtOperationTime if there was one so that there won't be a conflict
    // between resumeToken and startAtOperationTime if we need to reconnect the cursor
    changeStream.options.startAtOperationTime = undefined;

    // Return the change
    if (!callback) return changeStream.emit('change', change);
    return callback(undefined, change);
  }

  function processError(changeStream, error, callback) {
    const topology = changeStream.topology;
    const cursor = changeStream.cursor;

    // If the change stream has been closed explictly, do not process error.
    if (changeStream.closed) {
      if (callback) callback(new MongoError$8('ChangeStream is closed'));
      return;
    }

    // if the resume succeeds, continue with the new cursor
    function resumeWithCursor(newCursor) {
      changeStream.cursor = newCursor;
      processResumeQueue(changeStream);
    }

    // otherwise, raise an error and close the change stream
    function unresumableError(err) {
      if (!callback) {
        changeStream.emit('error', err);
        changeStream.emit('close');
      }
      processResumeQueue(changeStream, err);
      changeStream.closed = true;
    }

    if (cursor && isResumableError(error, maxWireVersion$1(cursor.server))) {
      changeStream.cursor = undefined;

      // stop listening to all events from old cursor
      ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));

      // close internal cursor, ignore errors
      cursor.close();

      waitForTopologyConnected(topology, { readPreference: cursor.options.readPreference }, err => {
        // if the topology can't reconnect, close the stream
        if (err) return unresumableError(err);

        // create a new cursor, preserving the old cursor's options
        const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);

        // attempt to continue in emitter mode
        if (!callback) return resumeWithCursor(newCursor);

        // attempt to continue in iterator mode
        newCursor.hasNext(err => {
          // if there's an error immediately after resuming, close the stream
          if (err) return unresumableError(err);
          resumeWithCursor(newCursor);
        });
      });
      return;
    }

    if (!callback) return changeStream.emit('error', error);
    return callback(error);
  }

  /**
   * Safely provides a cursor across resume attempts
   *
   * @param {ChangeStream} changeStream the parent ChangeStream
   * @param {function} callback gets the cursor or error
   * @param {ChangeStreamCursor} [oldCursor] when resuming from an error, carry over options from previous cursor
   */
  function getCursor(changeStream, callback) {
    if (changeStream.isClosed()) {
      callback(new MongoError$8('ChangeStream is closed.'));
      return;
    }

    // if a cursor exists and it is open, return it
    if (changeStream.cursor) {
      callback(undefined, changeStream.cursor);
      return;
    }

    // no cursor, queue callback until topology reconnects
    changeStream[kResumeQueue].push(callback);
  }

  /**
   * Drain the resume queue when a new has become available
   *
   * @param {ChangeStream} changeStream the parent ChangeStream
   * @param {ChangeStreamCursor?} changeStream.cursor the new cursor
   * @param {Error} [err] error getting a new cursor
   */
  function processResumeQueue(changeStream, err) {
    while (changeStream[kResumeQueue].length) {
      const request = changeStream[kResumeQueue].pop();
      if (changeStream.isClosed() && !err) {
        request(new MongoError$8('Change Stream is not open.'));
        return;
      }
      request(err, changeStream.cursor);
    }
  }

  /**
   * The callback format for results
   * @callback ChangeStream~resultCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {(object|null)} result The result object if the command was executed successfully.
   */

  var change_stream = ChangeStream;

  const MongoError$7 = core.MongoError,
    f$1 = util$2.format,
    ReadPreference$2 = core.ReadPreference,
    ClientSession = core.Sessions.ClientSession;

  // The store of ops
  var Store$3 = function(topology, storeOptions) {
    var self = this;
    var storedOps = [];
    storeOptions = storeOptions || { force: false, bufferMaxEntries: -1 };

    // Internal state
    this.s = {
      storedOps: storedOps,
      storeOptions: storeOptions,
      topology: topology
    };

    Object.defineProperty(this, 'length', {
      enumerable: true,
      get: function() {
        return self.s.storedOps.length;
      }
    });
  };

  Store$3.prototype.add = function(opType, ns, ops, options, callback) {
    if (this.s.storeOptions.force) {
      return callback(MongoError$7.create({ message: 'db closed by application', driver: true }));
    }

    if (this.s.storeOptions.bufferMaxEntries === 0) {
      return callback(
        MongoError$7.create({
          message: f$1(
            'no connection available for operation and number of stored operation > %s',
            this.s.storeOptions.bufferMaxEntries
          ),
          driver: true
        })
      );
    }

    if (
      this.s.storeOptions.bufferMaxEntries > 0 &&
      this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries
    ) {
      while (this.s.storedOps.length > 0) {
        var op = this.s.storedOps.shift();
        op.c(
          MongoError$7.create({
            message: f$1(
              'no connection available for operation and number of stored operation > %s',
              this.s.storeOptions.bufferMaxEntries
            ),
            driver: true
          })
        );
      }

      return;
    }

    this.s.storedOps.push({ t: opType, n: ns, o: ops, op: options, c: callback });
  };

  Store$3.prototype.addObjectAndMethod = function(opType, object, method, params, callback) {
    if (this.s.storeOptions.force) {
      return callback(MongoError$7.create({ message: 'db closed by application', driver: true }));
    }

    if (this.s.storeOptions.bufferMaxEntries === 0) {
      return callback(
        MongoError$7.create({
          message: f$1(
            'no connection available for operation and number of stored operation > %s',
            this.s.storeOptions.bufferMaxEntries
          ),
          driver: true
        })
      );
    }

    if (
      this.s.storeOptions.bufferMaxEntries > 0 &&
      this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries
    ) {
      while (this.s.storedOps.length > 0) {
        var op = this.s.storedOps.shift();
        op.c(
          MongoError$7.create({
            message: f$1(
              'no connection available for operation and number of stored operation > %s',
              this.s.storeOptions.bufferMaxEntries
            ),
            driver: true
          })
        );
      }

      return;
    }

    this.s.storedOps.push({ t: opType, m: method, o: object, p: params, c: callback });
  };

  Store$3.prototype.flush = function(err) {
    while (this.s.storedOps.length > 0) {
      this.s.storedOps
        .shift()
        .c(
          err ||
            MongoError$7.create({ message: f$1('no connection available for operation'), driver: true })
        );
    }
  };

  var primaryOptions = ['primary', 'primaryPreferred', 'nearest', 'secondaryPreferred'];
  var secondaryOptions = ['secondary', 'secondaryPreferred'];

  Store$3.prototype.execute = function(options) {
    options = options || {};
    // Get current ops
    var ops = this.s.storedOps;
    // Reset the ops
    this.s.storedOps = [];

    // Unpack options
    var executePrimary = typeof options.executePrimary === 'boolean' ? options.executePrimary : true;
    var executeSecondary =
      typeof options.executeSecondary === 'boolean' ? options.executeSecondary : true;

    // Execute all the stored ops
    while (ops.length > 0) {
      var op = ops.shift();

      if (op.t === 'cursor') {
        if (executePrimary && executeSecondary) {
          op.o[op.m].apply(op.o, op.p);
        } else if (
          executePrimary &&
          op.o.options &&
          op.o.options.readPreference &&
          primaryOptions.indexOf(op.o.options.readPreference.mode) !== -1
        ) {
          op.o[op.m].apply(op.o, op.p);
        } else if (
          !executePrimary &&
          executeSecondary &&
          op.o.options &&
          op.o.options.readPreference &&
          secondaryOptions.indexOf(op.o.options.readPreference.mode) !== -1
        ) {
          op.o[op.m].apply(op.o, op.p);
        }
      } else if (op.t === 'auth') {
        this.s.topology[op.t].apply(this.s.topology, op.o);
      } else {
        if (executePrimary && executeSecondary) {
          this.s.topology[op.t](op.n, op.o, op.op, op.c);
        } else if (
          executePrimary &&
          op.op &&
          op.op.readPreference &&
          primaryOptions.indexOf(op.op.readPreference.mode) !== -1
        ) {
          this.s.topology[op.t](op.n, op.o, op.op, op.c);
        } else if (
          !executePrimary &&
          executeSecondary &&
          op.op &&
          op.op.readPreference &&
          secondaryOptions.indexOf(op.op.readPreference.mode) !== -1
        ) {
          this.s.topology[op.t](op.n, op.o, op.op, op.c);
        }
      }
    }
  };

  Store$3.prototype.all = function() {
    return this.s.storedOps;
  };

  // Server capabilities
  var ServerCapabilities$1 = function(ismaster) {
    var setup_get_property = function(object, name, value) {
      Object.defineProperty(object, name, {
        enumerable: true,
        get: function() {
          return value;
        }
      });
    };

    // Capabilities
    var aggregationCursor = false;
    var writeCommands = false;
    var textSearch = false;
    var authCommands = false;
    var listCollections = false;
    var listIndexes = false;
    var maxNumberOfDocsInBatch = ismaster.maxWriteBatchSize || 1000;
    var commandsTakeWriteConcern = false;
    var commandsTakeCollation = false;

    if (ismaster.minWireVersion >= 0) {
      textSearch = true;
    }

    if (ismaster.maxWireVersion >= 1) {
      aggregationCursor = true;
      authCommands = true;
    }

    if (ismaster.maxWireVersion >= 2) {
      writeCommands = true;
    }

    if (ismaster.maxWireVersion >= 3) {
      listCollections = true;
      listIndexes = true;
    }

    if (ismaster.maxWireVersion >= 5) {
      commandsTakeWriteConcern = true;
      commandsTakeCollation = true;
    }

    // If no min or max wire version set to 0
    if (ismaster.minWireVersion == null) {
      ismaster.minWireVersion = 0;
    }

    if (ismaster.maxWireVersion == null) {
      ismaster.maxWireVersion = 0;
    }

    // Map up read only parameters
    setup_get_property(this, 'hasAggregationCursor', aggregationCursor);
    setup_get_property(this, 'hasWriteCommands', writeCommands);
    setup_get_property(this, 'hasTextSearch', textSearch);
    setup_get_property(this, 'hasAuthCommands', authCommands);
    setup_get_property(this, 'hasListCollectionsCommand', listCollections);
    setup_get_property(this, 'hasListIndexesCommand', listIndexes);
    setup_get_property(this, 'minWireVersion', ismaster.minWireVersion);
    setup_get_property(this, 'maxWireVersion', ismaster.maxWireVersion);
    setup_get_property(this, 'maxNumberOfDocsInBatch', maxNumberOfDocsInBatch);
    setup_get_property(this, 'commandsTakeWriteConcern', commandsTakeWriteConcern);
    setup_get_property(this, 'commandsTakeCollation', commandsTakeCollation);
  };

  class TopologyBase$3 extends require$$0$1 {
    constructor() {
      super();
      this.setMaxListeners(Infinity);
    }

    // Sessions related methods
    hasSessionSupport() {
      return this.logicalSessionTimeoutMinutes != null;
    }

    startSession(options, clientOptions) {
      const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);

      session.once('ended', () => {
        this.s.sessions.delete(session);
      });

      this.s.sessions.add(session);
      return session;
    }

    endSessions(sessions, callback) {
      return this.s.coreTopology.endSessions(sessions, callback);
    }

    get clientMetadata() {
      return this.s.coreTopology.s.options.metadata;
    }

    // Server capabilities
    capabilities() {
      if (this.s.sCapabilities) return this.s.sCapabilities;
      if (this.s.coreTopology.lastIsMaster() == null) return null;
      this.s.sCapabilities = new ServerCapabilities$1(this.s.coreTopology.lastIsMaster());
      return this.s.sCapabilities;
    }

    // Command
    command(ns, cmd, options, callback) {
      this.s.coreTopology.command(ns.toString(), cmd, ReadPreference$2.translate(options), callback);
    }

    // Insert
    insert(ns, ops, options, callback) {
      this.s.coreTopology.insert(ns.toString(), ops, options, callback);
    }

    // Update
    update(ns, ops, options, callback) {
      this.s.coreTopology.update(ns.toString(), ops, options, callback);
    }

    // Remove
    remove(ns, ops, options, callback) {
      this.s.coreTopology.remove(ns.toString(), ops, options, callback);
    }

    // IsConnected
    isConnected(options) {
      options = options || {};
      options = ReadPreference$2.translate(options);

      return this.s.coreTopology.isConnected(options);
    }

    // IsDestroyed
    isDestroyed() {
      return this.s.coreTopology.isDestroyed();
    }

    // Cursor
    cursor(ns, cmd, options) {
      options = options || {};
      options = ReadPreference$2.translate(options);
      options.disconnectHandler = this.s.store;
      options.topology = this;

      return this.s.coreTopology.cursor(ns, cmd, options);
    }

    lastIsMaster() {
      return this.s.coreTopology.lastIsMaster();
    }

    selectServer(selector, options, callback) {
      return this.s.coreTopology.selectServer(selector, options, callback);
    }

    /**
     * Unref all sockets
     * @method
     */
    unref() {
      return this.s.coreTopology.unref();
    }

    /**
     * All raw connections
     * @method
     * @return {array}
     */
    connections() {
      return this.s.coreTopology.connections();
    }

    close(forceClosed, callback) {
      // If we have sessions, we want to individually move them to the session pool,
      // and then send a single endSessions call.
      this.s.sessions.forEach(session => session.endSession());

      if (this.s.sessionPool) {
        this.s.sessionPool.endAllPooledSessions();
      }

      // We need to wash out all stored processes
      if (forceClosed === true) {
        this.s.storeOptions.force = forceClosed;
        this.s.store.flush();
      }

      this.s.coreTopology.destroy(
        {
          force: typeof forceClosed === 'boolean' ? forceClosed : false
        },
        callback
      );
    }
  }

  // Properties
  Object.defineProperty(TopologyBase$3.prototype, 'bson', {
    enumerable: true,
    get: function() {
      return this.s.coreTopology.s.bson;
    }
  });

  Object.defineProperty(TopologyBase$3.prototype, 'parserType', {
    enumerable: true,
    get: function() {
      return this.s.coreTopology.parserType;
    }
  });

  Object.defineProperty(TopologyBase$3.prototype, 'logicalSessionTimeoutMinutes', {
    enumerable: true,
    get: function() {
      return this.s.coreTopology.logicalSessionTimeoutMinutes;
    }
  });

  Object.defineProperty(TopologyBase$3.prototype, 'type', {
    enumerable: true,
    get: function() {
      return this.s.coreTopology.type;
    }
  });

  var Store_1 = Store$3;
  var ServerCapabilities_1 = ServerCapabilities$1;
  var TopologyBase_1 = TopologyBase$3;

  var topology_base = {
  	Store: Store_1,
  	ServerCapabilities: ServerCapabilities_1,
  	TopologyBase: TopologyBase_1
  };

  const Topology = core.Topology;
  const ServerCapabilities = topology_base.ServerCapabilities;

  const translateOptions$4 = require$$1$1.translateOptions;

  class NativeTopology$1 extends Topology {
    constructor(servers, options) {
      options = options || {};

      let clonedOptions = Object.assign(
        {},
        {
          cursorFactory: cursor$1,
          reconnect: false,
          emitError: typeof options.emitError === 'boolean' ? options.emitError : true,
          maxPoolSize:
            typeof options.maxPoolSize === 'number'
              ? options.maxPoolSize
              : typeof options.poolSize === 'number'
              ? options.poolSize
              : 10,
          minPoolSize:
            typeof options.minPoolSize === 'number'
              ? options.minPoolSize
              : typeof options.minSize === 'number'
              ? options.minSize
              : 0,
          monitorCommands:
            typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false
        }
      );

      // Translate any SSL options and other connectivity options
      clonedOptions = translateOptions$4(clonedOptions, options);

      // Socket options
      var socketOptions =
        options.socketOptions && Object.keys(options.socketOptions).length > 0
          ? options.socketOptions
          : options;

      // Translate all the options to the core types
      clonedOptions = translateOptions$4(clonedOptions, socketOptions);

      super(servers, clonedOptions);
    }

    capabilities() {
      if (this.s.sCapabilities) return this.s.sCapabilities;
      if (this.lastIsMaster() == null) return null;
      this.s.sCapabilities = new ServerCapabilities(this.lastIsMaster());
      return this.s.sCapabilities;
    }

    // Command
    command(ns, cmd, options, callback) {
      super.command(ns.toString(), cmd, options, callback);
    }

    // Insert
    insert(ns, ops, options, callback) {
      super.insert(ns.toString(), ops, options, callback);
    }

    // Update
    update(ns, ops, options, callback) {
      super.update(ns.toString(), ops, options, callback);
    }

    // Remove
    remove(ns, ops, options, callback) {
      super.remove(ns.toString(), ops, options, callback);
    }
  }

  var native_topology = NativeTopology$1;

  const deprecate$2 = require('util').deprecate;
  const Logger = require('../core').Logger;
  const MongoCredentials = require('../core').MongoCredentials;
  const MongoError$6 = require('../core').MongoError;
  const Mongos$1 = require('../topologies/mongos');
  const NativeTopology = require('../topologies/native_topology');
  const parse = require('../core').parseConnectionString;
  const ReadConcern = require('../read_concern');
  const ReadPreference$1 = require('../core').ReadPreference;
  const ReplSet$1 = require('../topologies/replset');
  const Server$3 = require('../topologies/server');
  const ServerSessionPool = require('../core').Sessions.ServerSessionPool;
  const emitDeprecationWarning = require('../utils').emitDeprecationWarning;
  const emitWarningOnce = require('../utils').emitWarningOnce;
  const fs$1 = require('fs');
  const WriteConcern = require('../write_concern');
  const BSON$1 = require('../core/connection/utils').retrieveBSON();
  const CMAP_EVENT_NAMES = require('../cmap/events').CMAP_EVENT_NAMES;

  let client;
  function loadClient() {
    if (!client) {
      client = require('../mongo_client');
    }
    return client;
  }

  const legacyParse = deprecate$2(
    require('../url_parser'),
    'current URL string parser is deprecated, and will be removed in a future version. ' +
      'To use the new parser, pass option { useNewUrlParser: true } to MongoClient.connect.'
  );

  const AUTH_MECHANISM_INTERNAL_MAP = {
    DEFAULT: 'default',
    PLAIN: 'plain',
    GSSAPI: 'gssapi',
    'MONGODB-CR': 'mongocr',
    'MONGODB-X509': 'x509',
    'MONGODB-AWS': 'mongodb-aws',
    'SCRAM-SHA-1': 'scram-sha-1',
    'SCRAM-SHA-256': 'scram-sha-256'
  };

  const monitoringEvents = [
    'timeout',
    'close',
    'serverOpening',
    'serverDescriptionChanged',
    'serverHeartbeatStarted',
    'serverHeartbeatSucceeded',
    'serverHeartbeatFailed',
    'serverClosed',
    'topologyOpening',
    'topologyClosed',
    'topologyDescriptionChanged',
    'commandStarted',
    'commandSucceeded',
    'commandFailed',
    'joined',
    'left',
    'ping',
    'ha',
    'all',
    'fullsetup',
    'open'
  ];

  const VALID_AUTH_MECHANISMS = new Set([
    'DEFAULT',
    'PLAIN',
    'GSSAPI',
    'MONGODB-CR',
    'MONGODB-X509',
    'MONGODB-AWS',
    'SCRAM-SHA-1',
    'SCRAM-SHA-256'
  ]);

  const validOptionNames = [
    'poolSize',
    'ssl',
    'sslValidate',
    'sslCA',
    'sslCert',
    'sslKey',
    'sslPass',
    'sslCRL',
    'autoReconnect',
    'noDelay',
    'keepAlive',
    'keepAliveInitialDelay',
    'connectTimeoutMS',
    'family',
    'socketTimeoutMS',
    'reconnectTries',
    'reconnectInterval',
    'ha',
    'haInterval',
    'replicaSet',
    'secondaryAcceptableLatencyMS',
    'acceptableLatencyMS',
    'connectWithNoPrimary',
    'authSource',
    'w',
    'wtimeout',
    'j',
    'writeConcern',
    'forceServerObjectId',
    'serializeFunctions',
    'ignoreUndefined',
    'raw',
    'bufferMaxEntries',
    'readPreference',
    'pkFactory',
    'promiseLibrary',
    'readConcern',
    'maxStalenessSeconds',
    'loggerLevel',
    'logger',
    'promoteValues',
    'promoteBuffers',
    'promoteLongs',
    'domainsEnabled',
    'checkServerIdentity',
    'validateOptions',
    'appname',
    'auth',
    'user',
    'password',
    'authMechanism',
    'compression',
    'fsync',
    'readPreferenceTags',
    'numberOfRetries',
    'auto_reconnect',
    'minSize',
    'monitorCommands',
    'retryWrites',
    'retryReads',
    'useNewUrlParser',
    'useUnifiedTopology',
    'serverSelectionTimeoutMS',
    'useRecoveryToken',
    'autoEncryption',
    'driverInfo',
    'tls',
    'tlsInsecure',
    'tlsinsecure',
    'tlsAllowInvalidCertificates',
    'tlsAllowInvalidHostnames',
    'tlsCAFile',
    'tlsCertificateFile',
    'tlsCertificateKeyFile',
    'tlsCertificateKeyFilePassword',
    'minHeartbeatFrequencyMS',
    'heartbeatFrequencyMS',
    'directConnection',
    'appName',

    // CMAP options
    'maxPoolSize',
    'minPoolSize',
    'maxIdleTimeMS',
    'waitQueueTimeoutMS'
  ];

  const ignoreOptionNames = ['native_parser'];
  const legacyOptionNames = ['server', 'replset', 'replSet', 'mongos', 'db'];

  // Validate options object
  function validOptions$1(options) {
    const _validOptions = validOptionNames.concat(legacyOptionNames);

    for (const name in options) {
      if (ignoreOptionNames.indexOf(name) !== -1) {
        continue;
      }

      if (_validOptions.indexOf(name) === -1) {
        if (options.validateOptions) {
          return new MongoError$6(`option ${name} is not supported`);
        } else {
          emitWarningOnce(`the options [${name}] is not supported`);
        }
      }

      if (legacyOptionNames.indexOf(name) !== -1) {
        emitWarningOnce(
          `the server/replset/mongos/db options are deprecated, ` +
            `all their options are supported at the top level of the options object [${validOptionNames}]`
        );
      }
    }
  }

  const LEGACY_OPTIONS_MAP = validOptionNames.reduce((obj, name) => {
    obj[name.toLowerCase()] = name;
    return obj;
  }, {});

  function addListeners(mongoClient, topology) {
    topology.on('authenticated', createListener(mongoClient, 'authenticated'));
    topology.on('error', createListener(mongoClient, 'error'));
    topology.on('timeout', createListener(mongoClient, 'timeout'));
    topology.on('close', createListener(mongoClient, 'close'));
    topology.on('parseError', createListener(mongoClient, 'parseError'));
    topology.once('open', createListener(mongoClient, 'open'));
    topology.once('fullsetup', createListener(mongoClient, 'fullsetup'));
    topology.once('all', createListener(mongoClient, 'all'));
    topology.on('reconnect', createListener(mongoClient, 'reconnect'));
  }

  function assignTopology(client, topology) {
    client.topology = topology;

    if (!(topology instanceof NativeTopology)) {
      topology.s.sessionPool = new ServerSessionPool(topology.s.coreTopology);
    }
  }

  // Clear out all events
  function clearAllEvents(topology) {
    monitoringEvents.forEach(event => topology.removeAllListeners(event));
  }

  // Collect all events in order from SDAM
  function collectEvents(mongoClient, topology) {
    let MongoClient = loadClient();
    const collectedEvents = [];

    if (mongoClient instanceof MongoClient) {
      monitoringEvents.forEach(event => {
        topology.on(event, (object1, object2) => {
          if (event === 'open') {
            collectedEvents.push({ event: event, object1: mongoClient });
          } else {
            collectedEvents.push({ event: event, object1: object1, object2: object2 });
          }
        });
      });
    }

    return collectedEvents;
  }

  function resolveTLSOptions(options) {
    if (options.tls == null) {
      return;
    }

    ['sslCA', 'sslKey', 'sslCert'].forEach(optionName => {
      if (options[optionName]) {
        options[optionName] = fs$1.readFileSync(options[optionName]);
      }
    });
  }

  function connect$2(mongoClient, url, options, callback) {
    options = Object.assign({}, options);

    // If callback is null throw an exception
    if (callback == null) {
      throw new Error('no callback function provided');
    }

    let didRequestAuthentication = false;
    const logger = Logger('MongoClient', options);

    // Did we pass in a Server/ReplSet/Mongos
    if (url instanceof Server$3 || url instanceof ReplSet$1 || url instanceof Mongos$1) {
      return connectWithUrl(mongoClient, url, options, connectCallback);
    }

    const useNewUrlParser = options.useNewUrlParser !== false;

    const parseFn = useNewUrlParser ? parse : legacyParse;
    const transform = useNewUrlParser ? transformUrlOptions : legacyTransformUrlOptions;

    parseFn(url, options, (err, _object) => {
      // Do not attempt to connect if parsing error
      if (err) return callback(err);

      // Flatten
      const object = transform(_object);

      // Parse the string
      const _finalOptions = createUnifiedOptions(object, options);

      // Check if we have connection and socket timeout set
      if (_finalOptions.socketTimeoutMS == null) _finalOptions.socketTimeoutMS = 0;
      if (_finalOptions.connectTimeoutMS == null) _finalOptions.connectTimeoutMS = 10000;
      if (_finalOptions.retryWrites == null) _finalOptions.retryWrites = true;
      if (_finalOptions.useRecoveryToken == null) _finalOptions.useRecoveryToken = true;
      if (_finalOptions.readPreference == null) _finalOptions.readPreference = 'primary';

      if (_finalOptions.db_options && _finalOptions.db_options.auth) {
        delete _finalOptions.db_options.auth;
      }

      // resolve tls options if needed
      resolveTLSOptions(_finalOptions);

      // Store the merged options object
      mongoClient.s.options = _finalOptions;

      // Apply read and write concern from parsed url
      mongoClient.s.readPreference = ReadPreference$1.fromOptions(_finalOptions);
      mongoClient.s.writeConcern = WriteConcern.fromOptions(_finalOptions);

      // Failure modes
      if (object.servers.length === 0) {
        return callback(new Error('connection string must contain at least one seed host'));
      }

      if (_finalOptions.auth && !_finalOptions.credentials) {
        try {
          didRequestAuthentication = true;
          _finalOptions.credentials = generateCredentials(
            mongoClient,
            _finalOptions.auth.user,
            _finalOptions.auth.password,
            _finalOptions
          );
        } catch (err) {
          return callback(err);
        }
      }

      if (_finalOptions.useUnifiedTopology) {
        return createTopology(mongoClient, 'unified', _finalOptions, connectCallback);
      }

      emitWarningOnce(
        'Current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. To use the new Server Discover and Monitoring engine, pass option { useUnifiedTopology: true } to the MongoClient constructor.'
      );

      // Do we have a replicaset then skip discovery and go straight to connectivity
      if (_finalOptions.replicaSet || _finalOptions.rs_name) {
        return createTopology(mongoClient, 'replicaset', _finalOptions, connectCallback);
      } else if (object.servers.length > 1) {
        return createTopology(mongoClient, 'mongos', _finalOptions, connectCallback);
      } else {
        return createServer(mongoClient, _finalOptions, connectCallback);
      }
    });

    function connectCallback(err, topology) {
      const warningMessage = `seed list contains no mongos proxies, replicaset connections requires the parameter replicaSet to be supplied in the URI or options object, mongodb://server:port/db?replicaSet=name`;
      if (err && err.message === 'no mongos proxies found in seed list') {
        if (logger.isWarn()) {
          logger.warn(warningMessage);
        }

        // Return a more specific error message for MongoClient.connect
        return callback(new MongoError$6(warningMessage));
      }

      if (didRequestAuthentication) {
        mongoClient.emit('authenticated', null, true);
      }

      // Return the error and db instance
      callback(err, topology);
    }
  }

  function connectWithUrl(mongoClient, url, options, connectCallback) {
    // Set the topology
    assignTopology(mongoClient, url);

    // Add listeners
    addListeners(mongoClient, url);

    // Propagate the events to the client
    relayEvents(mongoClient, url);

    let finalOptions = Object.assign({}, options);

    // If we have a readPreference passed in by the db options, convert it from a string
    if (typeof options.readPreference === 'string' || typeof options.read_preference === 'string') {
      finalOptions.readPreference = new ReadPreference$1(
        options.readPreference || options.read_preference
      );
    }

    const isDoingAuth = finalOptions.user || finalOptions.password || finalOptions.authMechanism;
    if (isDoingAuth && !finalOptions.credentials) {
      try {
        finalOptions.credentials = generateCredentials(
          mongoClient,
          finalOptions.user,
          finalOptions.password,
          finalOptions
        );
      } catch (err) {
        return connectCallback(err, url);
      }
    }

    return url.connect(finalOptions, connectCallback);
  }

  function createListener(mongoClient, event) {
    const eventSet = new Set(['all', 'fullsetup', 'open', 'reconnect']);
    return (v1, v2) => {
      if (eventSet.has(event)) {
        return mongoClient.emit(event, mongoClient);
      }

      mongoClient.emit(event, v1, v2);
    };
  }

  function createServer(mongoClient, options, callback) {
    // Pass in the promise library
    options.promiseLibrary = mongoClient.s.promiseLibrary;

    // Set default options
    const servers = translateOptions$3(options);

    const server = servers[0];

    // Propagate the events to the client
    const collectedEvents = collectEvents(mongoClient, server);

    // Connect to topology
    server.connect(options, (err, topology) => {
      if (err) {
        server.close(true);
        return callback(err);
      }
      // Clear out all the collected event listeners
      clearAllEvents(server);

      // Relay all the events
      relayEvents(mongoClient, server);
      // Add listeners
      addListeners(mongoClient, server);
      // Check if we are really speaking to a mongos
      const ismaster = topology.lastIsMaster();

      // Set the topology
      assignTopology(mongoClient, topology);

      // Do we actually have a mongos
      if (ismaster && ismaster.msg === 'isdbgrid') {
        // Destroy the current connection
        topology.close();
        // Create mongos connection instead
        return createTopology(mongoClient, 'mongos', options, callback);
      }

      // Fire all the events
      replayEvents(mongoClient, collectedEvents);
      // Otherwise callback
      callback(err, topology);
    });
  }

  const DEPRECATED_UNIFIED_EVENTS = new Set([
    'reconnect',
    'reconnectFailed',
    'attemptReconnect',
    'joined',
    'left',
    'ping',
    'ha',
    'all',
    'fullsetup',
    'open'
  ]);

  function registerDeprecatedEventNotifiers(client) {
    client.on('newListener', eventName => {
      if (DEPRECATED_UNIFIED_EVENTS.has(eventName)) {
        emitDeprecationWarning(
          `The \`${eventName}\` event is no longer supported by the unified topology, please read more by visiting http://bit.ly/2D8WfT6`,
          'DeprecationWarning'
        );
      }
    });
  }

  function createTopology(mongoClient, topologyType, options, callback) {
    // Pass in the promise library
    options.promiseLibrary = mongoClient.s.promiseLibrary;

    const translationOptions = {};
    if (topologyType === 'unified') translationOptions.createServers = false;

    // Set default options
    const servers = translateOptions$3(options, translationOptions);

    // determine CSFLE support
    if (options.autoEncryption != null) {
      let AutoEncrypter;
      try {
        require.resolve('mongodb-client-encryption');
      } catch (err) {
        callback(
          new MongoError$6(
            'Auto-encryption requested, but the module is not installed. Please add `mongodb-client-encryption` as a dependency of your project'
          )
        );
        return;
      }

      try {
        let mongodbClientEncryption = require('mongodb-client-encryption');
        if (typeof mongodbClientEncryption.extension !== 'function') {
          callback(
            new MongoError$6(
              'loaded version of `mongodb-client-encryption` does not have property `extension`. Please make sure you are loading the correct version of `mongodb-client-encryption`'
            )
          );
        }
        AutoEncrypter = mongodbClientEncryption.extension(require('../../index')).AutoEncrypter;
      } catch (err) {
        callback(err);
        return;
      }

      const mongoCryptOptions = Object.assign(
        {
          bson:
            options.bson ||
            new BSON$1([
              BSON$1.Binary,
              BSON$1.Code,
              BSON$1.DBRef,
              BSON$1.Decimal128,
              BSON$1.Double,
              BSON$1.Int32,
              BSON$1.Long,
              BSON$1.Map,
              BSON$1.MaxKey,
              BSON$1.MinKey,
              BSON$1.ObjectId,
              BSON$1.BSONRegExp,
              BSON$1.Symbol,
              BSON$1.Timestamp
            ])
        },
        options.autoEncryption
      );

      options.autoEncrypter = new AutoEncrypter(mongoClient, mongoCryptOptions);
    }

    // Create the topology
    let topology;
    if (topologyType === 'mongos') {
      topology = new Mongos$1(servers, options);
    } else if (topologyType === 'replicaset') {
      topology = new ReplSet$1(servers, options);
    } else if (topologyType === 'unified') {
      topology = new NativeTopology(options.servers, options);
      registerDeprecatedEventNotifiers(mongoClient);
    }

    // Add listeners
    addListeners(mongoClient, topology);

    // Propagate the events to the client
    relayEvents(mongoClient, topology);

    // Open the connection
    assignTopology(mongoClient, topology);

    // initialize CSFLE if requested
    if (options.autoEncrypter) {
      options.autoEncrypter.init(err => {
        if (err) {
          callback(err);
          return;
        }

        topology.connect(options, err => {
          if (err) {
            topology.close(true);
            callback(err);
            return;
          }

          callback(undefined, topology);
        });
      });

      return;
    }

    // otherwise connect normally
    topology.connect(options, err => {
      if (err) {
        topology.close(true);
        return callback(err);
      }

      callback(undefined, topology);
      return;
    });
  }

  function createUnifiedOptions(finalOptions, options) {
    const childOptions = [
      'mongos',
      'server',
      'db',
      'replset',
      'db_options',
      'server_options',
      'rs_options',
      'mongos_options'
    ];
    const noMerge = ['readconcern', 'compression', 'autoencryption'];
    const skip = ['w', 'wtimeout', 'j', 'journal', 'fsync', 'writeConcern'];

    for (const name in options) {
      if (skip.indexOf(name.toLowerCase()) !== -1) {
        continue;
      } else if (noMerge.indexOf(name.toLowerCase()) !== -1) {
        finalOptions[name] = options[name];
      } else if (childOptions.indexOf(name.toLowerCase()) !== -1) {
        finalOptions = mergeOptions$3(finalOptions, options[name], false);
      } else {
        if (
          options[name] &&
          typeof options[name] === 'object' &&
          !Buffer$9.isBuffer(options[name]) &&
          !Array.isArray(options[name])
        ) {
          finalOptions = mergeOptions$3(finalOptions, options[name], true);
        } else {
          finalOptions[name] = options[name];
        }
      }
    }

    // Handle write concern keys separately, since `options` may have the keys at the top level or
    // under `options.writeConcern`. The final merged keys will be under `finalOptions.writeConcern`.
    // This way, `fromOptions` will warn once if `options` is using deprecated write concern options
    const optionsWriteConcern = WriteConcern.fromOptions(options);
    if (optionsWriteConcern) {
      finalOptions.writeConcern = Object.assign({}, finalOptions.writeConcern, optionsWriteConcern);
    }

    return finalOptions;
  }

  function generateCredentials(client, username, password, options) {
    options = Object.assign({}, options);

    // the default db to authenticate against is 'self'
    // if authententicate is called from a retry context, it may be another one, like admin
    const source = options.authSource || options.authdb || options.dbName;

    // authMechanism
    const authMechanismRaw = options.authMechanism || 'DEFAULT';
    const authMechanism = authMechanismRaw.toUpperCase();
    const mechanismProperties = options.authMechanismProperties;

    if (!VALID_AUTH_MECHANISMS.has(authMechanism)) {
      throw MongoError$6.create({
        message: `authentication mechanism ${authMechanismRaw} not supported', options.authMechanism`,
        driver: true
      });
    }

    return new MongoCredentials({
      mechanism: AUTH_MECHANISM_INTERNAL_MAP[authMechanism],
      mechanismProperties,
      source,
      username,
      password
    });
  }

  function legacyTransformUrlOptions(object) {
    return mergeOptions$3(createUnifiedOptions({}, object), object, false);
  }

  function mergeOptions$3(target, source, flatten) {
    for (const name in source) {
      if (source[name] && typeof source[name] === 'object' && flatten) {
        target = mergeOptions$3(target, source[name], flatten);
      } else {
        target[name] = source[name];
      }
    }

    return target;
  }

  function relayEvents(mongoClient, topology) {
    const serverOrCommandEvents = [
      // APM
      'commandStarted',
      'commandSucceeded',
      'commandFailed',

      // SDAM
      'serverOpening',
      'serverClosed',
      'serverDescriptionChanged',
      'serverHeartbeatStarted',
      'serverHeartbeatSucceeded',
      'serverHeartbeatFailed',
      'topologyOpening',
      'topologyClosed',
      'topologyDescriptionChanged',

      // Legacy
      'joined',
      'left',
      'ping',
      'ha'
    ].concat(CMAP_EVENT_NAMES);

    serverOrCommandEvents.forEach(event => {
      topology.on(event, (object1, object2) => {
        mongoClient.emit(event, object1, object2);
      });
    });
  }

  //
  // Replay any events due to single server connection switching to Mongos
  //
  function replayEvents(mongoClient, events) {
    for (let i = 0; i < events.length; i++) {
      mongoClient.emit(events[i].event, events[i].object1, events[i].object2);
    }
  }

  function transformUrlOptions(_object) {
    let object = Object.assign({ servers: _object.hosts }, _object.options);
    for (let name in object) {
      const camelCaseName = LEGACY_OPTIONS_MAP[name];
      if (camelCaseName) {
        object[camelCaseName] = object[name];
      }
    }

    const hasUsername = _object.auth && _object.auth.username;
    const hasAuthMechanism = _object.options && _object.options.authMechanism;
    if (hasUsername || hasAuthMechanism) {
      object.auth = Object.assign({}, _object.auth);
      if (object.auth.db) {
        object.authSource = object.authSource || object.auth.db;
      }

      if (object.auth.username) {
        object.auth.user = object.auth.username;
      }
    }

    if (_object.defaultDatabase) {
      object.dbName = _object.defaultDatabase;
    }

    if (object.maxPoolSize) {
      object.poolSize = object.maxPoolSize;
    }

    if (object.readConcernLevel) {
      object.readConcern = new ReadConcern(object.readConcernLevel);
    }

    if (object.wTimeoutMS) {
      object.wtimeout = object.wTimeoutMS;
      object.wTimeoutMS = undefined;
    }

    if (_object.srvHost) {
      object.srvHost = _object.srvHost;
    }

    // Any write concern options from the URL will be top-level, so we manually
    // move them options under `object.writeConcern` to avoid warnings later
    const wcKeys = ['w', 'wtimeout', 'j', 'journal', 'fsync'];
    for (const key of wcKeys) {
      if (object[key] !== undefined) {
        if (object.writeConcern === undefined) object.writeConcern = {};
        object.writeConcern[key] = object[key];
        object[key] = undefined;
      }
    }

    return object;
  }

  function translateOptions$3(options, translationOptions) {
    translationOptions = Object.assign({}, { createServers: true }, translationOptions);

    // If we have a readPreference passed in by the db options
    if (typeof options.readPreference === 'string' || typeof options.read_preference === 'string') {
      options.readPreference = new ReadPreference$1(options.readPreference || options.read_preference);
    }

    // Do we have readPreference tags, add them
    if (options.readPreference && (options.readPreferenceTags || options.read_preference_tags)) {
      options.readPreference.tags = options.readPreferenceTags || options.read_preference_tags;
    }

    // Do we have maxStalenessSeconds
    if (options.maxStalenessSeconds) {
      options.readPreference.maxStalenessSeconds = options.maxStalenessSeconds;
    }

    // Set the socket and connection timeouts
    if (options.socketTimeoutMS == null) options.socketTimeoutMS = 0;
    if (options.connectTimeoutMS == null) options.connectTimeoutMS = 10000;

    if (!translationOptions.createServers) {
      return;
    }

    // Create server instances
    return options.servers.map(serverObj => {
      return serverObj.domain_socket
        ? new Server$3(serverObj.domain_socket, 27017, options)
        : new Server$3(serverObj.host, serverObj.port, options);
    });
  }

  module.exports = { validOptions: validOptions$1, connect: connect$2 };

  var connect$3 = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var require$$4 = /*@__PURE__*/getAugmentedNamespace(connect$3);

  const EventEmitter = require$$0$1.EventEmitter;
  const inherits$1 = util$2.inherits;
  const MongoError$5 = core.MongoError;
  const deprecate$1 = util$2.deprecate;

  const MongoDBNamespace = require$$1$1.MongoDBNamespace;

  const maybePromise = require$$1$1.maybePromise;

  const connect$1 = require$$4.connect;
  const validOptions = require$$4.validOptions;

  /**
   * @fileOverview The **MongoClient** class is a class that allows for making Connections to MongoDB.
   *
   * @example
   * // Connect using a MongoClient instance
   * const MongoClient = require('mongodb').MongoClient;
   * const test = require('assert');
   * // Connection url
   * const url = 'mongodb://localhost:27017';
   * // Database Name
   * const dbName = 'test';
   * // Connect using MongoClient
   * const mongoClient = new MongoClient(url);
   * mongoClient.connect(function(err, client) {
   *   const db = client.db(dbName);
   *   client.close();
   * });
   *
   * @example
   * // Connect using the MongoClient.connect static method
   * const MongoClient = require('mongodb').MongoClient;
   * const test = require('assert');
   * // Connection url
   * const url = 'mongodb://localhost:27017';
   * // Database Name
   * const dbName = 'test';
   * // Connect using MongoClient
   * MongoClient.connect(url, function(err, client) {
   *   const db = client.db(dbName);
   *   client.close();
   * });
   */

  /**
   * A string specifying the level of a ReadConcern
   * @typedef {'local'|'available'|'majority'|'linearizable'|'snapshot'} ReadConcernLevel
   * @see https://docs.mongodb.com/manual/reference/read-concern/index.html#read-concern-levels
   */

  /**
   * Configuration options for drivers wrapping the node driver.
   *
   * @typedef {Object} DriverInfoOptions
   * @property {string} [name] The name of the driver
   * @property {string} [version] The version of the driver
   * @property {string} [platform] Optional platform information
   */

  /**
   * Configuration options for drivers wrapping the node driver.
   *
   * @typedef {Object} DriverInfoOptions
   * @property {string} [name] The name of the driver
   * @property {string} [version] The version of the driver
   * @property {string} [platform] Optional platform information
   */

  /**
   * Creates a new MongoClient instance
   * @class
   * @param {string} url The connection URI string
   * @param {object} [options] Optional settings
   * @param {number} [options.poolSize=5] The maximum size of the individual server pool
   * @param {boolean} [options.ssl=false] Enable SSL connection. *deprecated* use `tls` variants
   * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against Certificate Authority
   * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer *deprecated* use `tls` variants
   * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer *deprecated* use `tls` variants
   * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer *deprecated* use `tls` variants
   * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase *deprecated* use `tls` variants
   * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer *deprecated* use `tls` variants
   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function. *deprecated* use `tls` variants
   * @param {boolean} [options.tls=false] Enable TLS connections
   * @param {boolean} [options.tlsInsecure=false] Relax TLS constraints, disabling validation
   * @param {string} [options.tlsCAFile] A path to file with either a single or bundle of certificate authorities to be considered trusted when making a TLS connection
   * @param {string} [options.tlsCertificateKeyFile] A path to the client certificate file or the client private key file; in the case that they both are needed, the files should be concatenated
   * @param {string} [options.tlsCertificateKeyFilePassword] The password to decrypt the client private key to be used for TLS connections
   * @param {boolean} [options.tlsAllowInvalidCertificates] Specifies whether or not the driver should error when the server’s TLS certificate is invalid
   * @param {boolean} [options.tlsAllowInvalidHostnames] Specifies whether or not the driver should error when there is a mismatch between the server’s hostname and the hostname specified by the TLS certificate
   * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances
   * @param {boolean} [options.noDelay=true] TCP Connection no delay
   * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
   * @param {number} [options.keepAliveInitialDelay=120000] The number of milliseconds to wait before initiating keepAlive on the TCP socket
   * @param {number} [options.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out
   * @param {number} [options.socketTimeoutMS=0] How long a send or receive on a socket can take before timing out
   * @param {number} [options.family] Version of IP stack. Can be 4, 6 or null (default).
   * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure
   * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times
   * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries
   * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies
   * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry
   * @param {string} [options.replicaSet=undefined] The Replicaset set name
   * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection
   * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection
   * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available
   * @param {string} [options.authSource=undefined] Define the database to authenticate against
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields
   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers
   * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)
   * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys
   * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
   * @param {object} [options.readConcern] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)
   * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)
   * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)
   * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)
   * @param {object} [options.logger=undefined] Custom logger object
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers
   * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution
   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit
   * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness
   * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections
   * @param {string} [options.auth.user=undefined] The username for auth
   * @param {string} [options.auth.password=undefined] The password for auth
   * @param {string} [options.authMechanism] An authentication mechanism to use for connection authentication, see the {@link https://docs.mongodb.com/manual/reference/connection-string/#urioption.authMechanism|authMechanism} reference for supported options.
   * @param {object} [options.compression] Type of compression to use: snappy or zlib
   * @param {array} [options.readPreferenceTags] Read preference tags
   * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor
   * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances
   * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this client
   * @param {number} [options.minSize] If present, the connection pool will be initialized with minSize connections, and will never dip below minSize connections
   * @param {boolean} [options.useNewUrlParser=true] Determines whether or not to use the new url parser. Enables the new, spec-compliant, url parser shipped in the core driver. This url parser fixes a number of problems with the original parser, and aims to outright replace that parser in the near future. Defaults to true, and must be explicitly set to false to use the legacy url parser.
   * @param {boolean} [options.useUnifiedTopology] Enables the new unified topology layer
   * @param {Number} [options.localThresholdMS=15] **Only applies to the unified topology** The size of the latency window for selecting among multiple suitable servers
   * @param {Number} [options.serverSelectionTimeoutMS=30000] **Only applies to the unified topology** How long to block for server selection before throwing an error
   * @param {Number} [options.heartbeatFrequencyMS=10000] **Only applies to the unified topology** The frequency with which topology updates are scheduled
   * @param {number} [options.maxPoolSize=10] **Only applies to the unified topology** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections.
   * @param {number} [options.minPoolSize=0] **Only applies to the unified topology** The minimum number of connections that MUST exist at any moment in a single connection pool.
   * @param {number} [options.maxIdleTimeMS] **Only applies to the unified topology** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. The default is infinity.
   * @param {number} [options.waitQueueTimeoutMS=0] **Only applies to the unified topology** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit.
   * @param {AutoEncrypter~AutoEncryptionOptions} [options.autoEncryption] Optionally enable client side auto encryption
   * @param {DriverInfoOptions} [options.driverInfo] Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver
   * @param {boolean} [options.directConnection=false] Enable directConnection
   * @param {MongoClient~connectCallback} [callback] The command result callback
   * @return {MongoClient} a MongoClient instance
   */
  function MongoClient(url, options) {
    if (!(this instanceof MongoClient)) return new MongoClient(url, options);
    // Set up event emitter
    EventEmitter.call(this);

    // The internal state
    this.s = {
      url: url,
      options: options || {},
      promiseLibrary: (options && options.promiseLibrary) || Promise,
      dbCache: new Map(),
      sessions: new Set(),
      writeConcern: write_concern.fromOptions(options),
      readPreference: read_preference.fromOptions(options) || read_preference.primary,
      namespace: new MongoDBNamespace('admin')
    };
  }

  /**
   * @ignore
   */
  inherits$1(MongoClient, EventEmitter);

  Object.defineProperty(MongoClient.prototype, 'writeConcern', {
    enumerable: true,
    get: function() {
      return this.s.writeConcern;
    }
  });

  Object.defineProperty(MongoClient.prototype, 'readPreference', {
    enumerable: true,
    get: function() {
      return this.s.readPreference;
    }
  });

  /**
   * The callback format for results
   * @callback MongoClient~connectCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {MongoClient} client The connected client.
   */

  /**
   * Connect to MongoDB using a url as documented at
   *
   *  docs.mongodb.org/manual/reference/connection-string/
   *
   * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver
   *
   * @method
   * @param {MongoClient~connectCallback} [callback] The command result callback
   * @return {Promise<MongoClient>} returns Promise if no callback passed
   */
  MongoClient.prototype.connect = function(callback) {
    if (typeof callback === 'string') {
      throw new TypeError('`connect` only accepts a callback');
    }

    const client = this;
    return maybePromise(this, callback, cb => {
      const err = validOptions(client.s.options);
      if (err) return cb(err);

      connect$1(client, client.s.url, client.s.options, err => {
        if (err) return cb(err);
        cb(null, client);
      });
    });
  };

  MongoClient.prototype.logout = deprecate$1(function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    if (typeof callback === 'function') callback(null, true);
  }, 'Multiple authentication is prohibited on a connected client, please only authenticate once per MongoClient');

  /**
   * Close the db and its underlying connections
   * @method
   * @param {boolean} [force=false] Force close, emitting no events
   * @param {Db~noResultCallback} [callback] The result callback
   * @return {Promise} returns Promise if no callback passed
   */
  MongoClient.prototype.close = function(force, callback) {
    if (typeof force === 'function') {
      callback = force;
      force = false;
    }

    const client = this;
    return maybePromise(this, callback, cb => {
      const completeClose = err => {
        client.emit('close', client);

        if (!(client.topology instanceof native_topology)) {
          for (const item of client.s.dbCache) {
            item[1].emit('close', client);
          }
        }

        client.removeAllListeners('close');
        cb(err);
      };

      if (client.topology == null) {
        completeClose();
        return;
      }

      client.topology.close(force, err => {
        const autoEncrypter = client.topology.s.options.autoEncrypter;
        if (!autoEncrypter) {
          completeClose(err);
          return;
        }

        autoEncrypter.teardown(force, err2 => completeClose(err || err2));
      });
    });
  };

  /**
   * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are
   * related in a parent-child relationship to the original instance so that events are correctly emitted on child
   * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.
   * You can control these behaviors with the options noListener and returnNonCachedInstance.
   *
   * @method
   * @param {string} [dbName] The name of the database we want to use. If not provided, use database name from connection string.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.
   * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created
   * @return {Db}
   */
  MongoClient.prototype.db = function(dbName, options) {
    options = options || {};

    // Default to db from connection string if not provided
    if (!dbName) {
      dbName = this.s.options.dbName;
    }

    // Copy the options and add out internal override of the not shared flag
    const finalOptions = Object.assign({}, this.s.options, options);

    // Do we have the db in the cache already
    if (this.s.dbCache.has(dbName) && finalOptions.returnNonCachedInstance !== true) {
      return this.s.dbCache.get(dbName);
    }

    // Add promiseLibrary
    finalOptions.promiseLibrary = this.s.promiseLibrary;

    // If no topology throw an error message
    if (!this.topology) {
      throw new MongoError$5('MongoClient must be connected before calling MongoClient.prototype.db');
    }

    // Return the db object
    const db$1 = new db(dbName, this.topology, finalOptions);

    // Add the db to the cache
    this.s.dbCache.set(dbName, db$1);
    // Return the database
    return db$1;
  };

  /**
   * Check if MongoClient is connected
   *
   * @method
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.
   * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created
   * @return {boolean}
   */
  MongoClient.prototype.isConnected = function(options) {
    options = options || {};

    if (!this.topology) return false;
    return this.topology.isConnected(options);
  };

  /**
   * Connect to MongoDB using a url as documented at
   *
   *  docs.mongodb.org/manual/reference/connection-string/
   *
   * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver
   *
   * @method
   * @static
   * @param {string} url The connection URI string
   * @param {object} [options] Optional settings
   * @param {number} [options.poolSize=5] The maximum size of the individual server pool
   * @param {boolean} [options.ssl=false] Enable SSL connection. *deprecated* use `tls` variants
   * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against Certificate Authority
   * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer *deprecated* use `tls` variants
   * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer *deprecated* use `tls` variants
   * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer *deprecated* use `tls` variants
   * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase *deprecated* use `tls` variants
   * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer *deprecated* use `tls` variants
   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function. *deprecated* use `tls` variants
   * @param {boolean} [options.tls=false] Enable TLS connections
   * @param {boolean} [options.tlsInsecure=false] Relax TLS constraints, disabling validation
   * @param {string} [options.tlsCAFile] A path to file with either a single or bundle of certificate authorities to be considered trusted when making a TLS connection
   * @param {string} [options.tlsCertificateKeyFile] A path to the client certificate file or the client private key file; in the case that they both are needed, the files should be concatenated
   * @param {string} [options.tlsCertificateKeyFilePassword] The password to decrypt the client private key to be used for TLS connections
   * @param {boolean} [options.tlsAllowInvalidCertificates] Specifies whether or not the driver should error when the server’s TLS certificate is invalid
   * @param {boolean} [options.tlsAllowInvalidHostnames] Specifies whether or not the driver should error when there is a mismatch between the server’s hostname and the hostname specified by the TLS certificate
   * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances
   * @param {boolean} [options.noDelay=true] TCP Connection no delay
   * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled
   * @param {number} [options.keepAliveInitialDelay=120000] The number of milliseconds to wait before initiating keepAlive on the TCP socket
   * @param {number} [options.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out
   * @param {number} [options.socketTimeoutMS=0] How long a send or receive on a socket can take before timing out
   * @param {number} [options.family] Version of IP stack. Can be 4, 6 or null (default).
   * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure
   * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times
   * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries
   * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies
   * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry
   * @param {string} [options.replicaSet=undefined] The Replicaset set name
   * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection
   * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection
   * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available
   * @param {string} [options.authSource=undefined] Define the database to authenticate against
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver
   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object
   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields
   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers
   * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)
   * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys
   * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
   * @param {object} [options.readConcern] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)
   * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)
   * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)
   * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)
   * @param {object} [options.logger=undefined] Custom logger object
   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types
   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers
   * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution
   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit
   * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness
   * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections
   * @param {string} [options.auth.user=undefined] The username for auth
   * @param {string} [options.auth.password=undefined] The password for auth
   * @param {string} [options.authMechanism] An authentication mechanism to use for connection authentication, see the {@link https://docs.mongodb.com/manual/reference/connection-string/#urioption.authMechanism|authMechanism} reference for supported options.
   * @param {object} [options.compression] Type of compression to use: snappy or zlib
   * @param {array} [options.readPreferenceTags] Read preference tags
   * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor
   * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances
   * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this client
   * @param {number} [options.minSize] If present, the connection pool will be initialized with minSize connections, and will never dip below minSize connections
   * @param {boolean} [options.directConnection=false] Enable directConnection
   * @param {boolean} [options.useNewUrlParser=true] Determines whether or not to use the new url parser. Enables the new, spec-compliant, url parser shipped in the core driver. This url parser fixes a number of problems with the original parser, and aims to outright replace that parser in the near future. Defaults to true, and must be explicitly set to false to use the legacy url parser.
   * @param {boolean} [options.useUnifiedTopology] Enables the new unified topology layer
   * @param {Number} [options.localThresholdMS=15] **Only applies to the unified topology** The size of the latency window for selecting among multiple suitable servers
   * @param {Number} [options.serverSelectionTimeoutMS=30000] **Only applies to the unified topology** How long to block for server selection before throwing an error
   * @param {Number} [options.heartbeatFrequencyMS=10000] **Only applies to the unified topology** The frequency with which topology updates are scheduled
   * @param {number} [options.maxPoolSize=10] **Only applies to the unified topology** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections.
   * @param {number} [options.minPoolSize=0] **Only applies to the unified topology** The minimum number of connections that MUST exist at any moment in a single connection pool.
   * @param {number} [options.maxIdleTimeMS] **Only applies to the unified topology** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. The default is infinity.
   * @param {number} [options.waitQueueTimeoutMS=0] **Only applies to the unified topology** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit.
   * @param {AutoEncrypter~AutoEncryptionOptions} [options.autoEncryption] Optionally enable client side auto encryption
   * @param {DriverInfoOptions} [options.driverInfo] Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver
   * @param {MongoClient~connectCallback} [callback] The command result callback
   * @return {Promise<MongoClient>} returns Promise if no callback passed
   */
  MongoClient.connect = function(url, options, callback) {
    const args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    options = args.length ? args.shift() : null;
    options = options || {};

    // Create client
    const mongoClient = new MongoClient(url, options);
    // Execute the connect method
    return mongoClient.connect(callback);
  };

  /**
   * Starts a new session on the server
   *
   * @param {SessionOptions} [options] optional settings for a driver session
   * @return {ClientSession} the newly established session
   */
  MongoClient.prototype.startSession = function(options) {
    options = Object.assign({ explicit: true }, options);
    if (!this.topology) {
      throw new MongoError$5('Must connect to a server before calling this method');
    }

    return this.topology.startSession(options, this.s.options);
  };

  /**
   * Runs a given operation with an implicitly created session. The lifetime of the session
   * will be handled without the need for user interaction.
   *
   * NOTE: presently the operation MUST return a Promise (either explicit or implicity as an async function)
   *
   * @param {Object} [options] Optional settings to be appled to implicitly created session
   * @param {Function} operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`
   * @return {Promise}
   */
  MongoClient.prototype.withSession = function(options, operation) {
    if (typeof options === 'function') (operation = options), (options = undefined);
    const session = this.startSession(options);

    let cleanupHandler = (err, result, opts) => {
      // prevent multiple calls to cleanupHandler
      cleanupHandler = () => {
        throw new ReferenceError('cleanupHandler was called too many times');
      };

      opts = Object.assign({ throw: true }, opts);
      session.endSession();

      if (err) {
        if (opts.throw) throw err;
        return Promise.reject(err);
      }
    };

    try {
      const result = operation(session);
      return Promise.resolve(result)
        .then(result => cleanupHandler(null, result))
        .catch(err => cleanupHandler(err, null, { throw: true }));
    } catch (err) {
      return cleanupHandler(err, null, { throw: false });
    }
  };
  /**
   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this cluster. Will ignore all changes to system collections, as well as the local, admin,
   * and config databases.
   * @method
   * @since 3.1.0
   * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.
   * @param {object} [options] Optional settings
   * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.
   * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.
   * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query
   * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.
   * @param {ReadPreference} [options.readPreference] The read preference. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.
   * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @return {ChangeStream} a ChangeStream instance.
   */
  MongoClient.prototype.watch = function(pipeline, options) {
    pipeline = pipeline || [];
    options = options || {};

    // Allow optionally not specifying a pipeline
    if (!Array.isArray(pipeline)) {
      options = pipeline;
      pipeline = [];
    }

    return new change_stream(this, pipeline, options);
  };

  /**
   * Return the mongo client logger
   * @method
   * @return {Logger} return the mongo client logger
   * @ignore
   */
  MongoClient.prototype.getLogger = function() {
    return this.s.options.logger;
  };

  var mongo_client = MongoClient;

  const Long = core.BSON.Long;
  const MongoError$4 = core.MongoError;
  const ObjectID$2 = core.BSON.ObjectID;
  const BSON = core.BSON;
  const MongoWriteConcernError = core.MongoWriteConcernError;
  const toError$1 = require$$1$1.toError;
  const handleCallback = require$$1$1.handleCallback;
  const applyRetryableWrites = require$$1$1.applyRetryableWrites;
  const applyWriteConcern = require$$1$1.applyWriteConcern;
  const executeLegacyOperation$2 = require$$1$1.executeLegacyOperation;
  const isPromiseLike = require$$1$1.isPromiseLike;
  const hasAtomicOperators = require$$1$1.hasAtomicOperators;
  const maxWireVersion = require$$2.maxWireVersion;

  // Error codes
  const WRITE_CONCERN_ERROR = 64;

  // Insert types
  const INSERT = 1;
  const UPDATE = 2;
  const REMOVE = 3;

  const bson = new BSON([
    BSON.Binary,
    BSON.Code,
    BSON.DBRef,
    BSON.Decimal128,
    BSON.Double,
    BSON.Int32,
    BSON.Long,
    BSON.Map,
    BSON.MaxKey,
    BSON.MinKey,
    BSON.ObjectId,
    BSON.BSONRegExp,
    BSON.Symbol,
    BSON.Timestamp
  ]);

  /**
   * Keeps the state of a unordered batch so we can rewrite the results
   * correctly after command execution
   * @ignore
   */
  class Batch {
    constructor(batchType, originalZeroIndex) {
      this.originalZeroIndex = originalZeroIndex;
      this.currentIndex = 0;
      this.originalIndexes = [];
      this.batchType = batchType;
      this.operations = [];
      this.size = 0;
      this.sizeBytes = 0;
    }
  }

  /**
   * @classdesc
   * The result of a bulk write.
   */
  class BulkWriteResult {
    /**
     * Create a new BulkWriteResult instance
     *
     * **NOTE:** Internal Type, do not instantiate directly
     */
    constructor(bulkResult) {
      this.result = bulkResult;
    }

    /**
     * Evaluates to true if the bulk operation correctly executes
     * @type {boolean}
     */
    get ok() {
      return this.result.ok;
    }

    /**
     * The number of inserted documents
     * @type {number}
     */
    get nInserted() {
      return this.result.nInserted;
    }

    /**
     * Number of upserted documents
     * @type {number}
     */
    get nUpserted() {
      return this.result.nUpserted;
    }

    /**
     * Number of matched documents
     * @type {number}
     */
    get nMatched() {
      return this.result.nMatched;
    }

    /**
     * Number of documents updated physically on disk
     * @type {number}
     */
    get nModified() {
      return this.result.nModified;
    }

    /**
     * Number of removed documents
     * @type {number}
     */
    get nRemoved() {
      return this.result.nRemoved;
    }

    /**
     * Returns an array of all inserted ids
     *
     * @return {object[]}
     */
    getInsertedIds() {
      return this.result.insertedIds;
    }

    /**
     * Returns an array of all upserted ids
     *
     * @return {object[]}
     */
    getUpsertedIds() {
      return this.result.upserted;
    }

    /**
     * Returns the upserted id at the given index
     *
     * @param {number} index the number of the upserted id to return, returns undefined if no result for passed in index
     * @return {object}
     */
    getUpsertedIdAt(index) {
      return this.result.upserted[index];
    }

    /**
     * Returns raw internal result
     *
     * @return {object}
     */
    getRawResponse() {
      return this.result;
    }

    /**
     * Returns true if the bulk operation contains a write error
     *
     * @return {boolean}
     */
    hasWriteErrors() {
      return this.result.writeErrors.length > 0;
    }

    /**
     * Returns the number of write errors off the bulk operation
     *
     * @return {number}
     */
    getWriteErrorCount() {
      return this.result.writeErrors.length;
    }

    /**
     * Returns a specific write error object
     *
     * @param {number} index of the write error to return, returns null if there is no result for passed in index
     * @return {WriteError}
     */
    getWriteErrorAt(index) {
      if (index < this.result.writeErrors.length) {
        return this.result.writeErrors[index];
      }
      return null;
    }

    /**
     * Retrieve all write errors
     *
     * @return {WriteError[]}
     */
    getWriteErrors() {
      return this.result.writeErrors;
    }

    /**
     * Retrieve lastOp if available
     *
     * @return {object}
     */
    getLastOp() {
      return this.result.lastOp;
    }

    /**
     * Retrieve the write concern error if any
     *
     * @return {WriteConcernError}
     */
    getWriteConcernError() {
      if (this.result.writeConcernErrors.length === 0) {
        return null;
      } else if (this.result.writeConcernErrors.length === 1) {
        // Return the error
        return this.result.writeConcernErrors[0];
      } else {
        // Combine the errors
        let errmsg = '';
        for (let i = 0; i < this.result.writeConcernErrors.length; i++) {
          const err = this.result.writeConcernErrors[i];
          errmsg = errmsg + err.errmsg;

          // TODO: Something better
          if (i === 0) errmsg = errmsg + ' and ';
        }

        return new WriteConcernError({ errmsg: errmsg, code: WRITE_CONCERN_ERROR });
      }
    }

    /**
     * @return {object}
     */
    toJSON() {
      return this.result;
    }

    /**
     * @return {string}
     */
    toString() {
      return `BulkWriteResult(${this.toJSON(this.result)})`;
    }

    /**
     * @return {boolean}
     */
    isOk() {
      return this.result.ok === 1;
    }
  }

  /**
   * @classdesc An error representing a failure by the server to apply the requested write concern to the bulk operation.
   */
  class WriteConcernError {
    /**
     * Create a new WriteConcernError instance
     *
     * **NOTE:** Internal Type, do not instantiate directly
     */
    constructor(err) {
      this.err = err;
    }

    /**
     * Write concern error code.
     * @type {number}
     */
    get code() {
      return this.err.code;
    }

    /**
     * Write concern error message.
     * @type {string}
     */
    get errmsg() {
      return this.err.errmsg;
    }

    /**
     * @return {object}
     */
    toJSON() {
      return { code: this.err.code, errmsg: this.err.errmsg };
    }

    /**
     * @return {string}
     */
    toString() {
      return `WriteConcernError(${this.err.errmsg})`;
    }
  }

  /**
   * @classdesc An error that occurred during a BulkWrite on the server.
   */
  class WriteError {
    /**
     * Create a new WriteError instance
     *
     * **NOTE:** Internal Type, do not instantiate directly
     */
    constructor(err) {
      this.err = err;
    }

    /**
     * WriteError code.
     * @type {number}
     */
    get code() {
      return this.err.code;
    }

    /**
     * WriteError original bulk operation index.
     * @type {number}
     */
    get index() {
      return this.err.index;
    }

    /**
     * WriteError message.
     * @type {string}
     */
    get errmsg() {
      return this.err.errmsg;
    }

    /**
     * Returns the underlying operation that caused the error
     * @return {object}
     */
    getOperation() {
      return this.err.op;
    }

    /**
     * @return {object}
     */
    toJSON() {
      return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };
    }

    /**
     * @return {string}
     */
    toString() {
      return `WriteError(${JSON.stringify(this.toJSON())})`;
    }
  }

  /**
   * Merges results into shared data structure
   * @ignore
   */
  function mergeBatchResults(batch, bulkResult, err, result) {
    // If we have an error set the result to be the err object
    if (err) {
      result = err;
    } else if (result && result.result) {
      result = result.result;
    } else if (result == null) {
      return;
    }

    // Do we have a top level error stop processing and return
    if (result.ok === 0 && bulkResult.ok === 1) {
      bulkResult.ok = 0;

      const writeError = {
        index: 0,
        code: result.code || 0,
        errmsg: result.message,
        op: batch.operations[0]
      };

      bulkResult.writeErrors.push(new WriteError(writeError));
      return;
    } else if (result.ok === 0 && bulkResult.ok === 0) {
      return;
    }

    // Deal with opTime if available
    if (result.opTime || result.lastOp) {
      const opTime = result.lastOp || result.opTime;
      let lastOpTS = null;
      let lastOpT = null;

      // We have a time stamp
      if (opTime && opTime._bsontype === 'Timestamp') {
        if (bulkResult.lastOp == null) {
          bulkResult.lastOp = opTime;
        } else if (opTime.greaterThan(bulkResult.lastOp)) {
          bulkResult.lastOp = opTime;
        }
      } else {
        // Existing TS
        if (bulkResult.lastOp) {
          lastOpTS =
            typeof bulkResult.lastOp.ts === 'number'
              ? Long.fromNumber(bulkResult.lastOp.ts)
              : bulkResult.lastOp.ts;
          lastOpT =
            typeof bulkResult.lastOp.t === 'number'
              ? Long.fromNumber(bulkResult.lastOp.t)
              : bulkResult.lastOp.t;
        }

        // Current OpTime TS
        const opTimeTS = typeof opTime.ts === 'number' ? Long.fromNumber(opTime.ts) : opTime.ts;
        const opTimeT = typeof opTime.t === 'number' ? Long.fromNumber(opTime.t) : opTime.t;

        // Compare the opTime's
        if (bulkResult.lastOp == null) {
          bulkResult.lastOp = opTime;
        } else if (opTimeTS.greaterThan(lastOpTS)) {
          bulkResult.lastOp = opTime;
        } else if (opTimeTS.equals(lastOpTS)) {
          if (opTimeT.greaterThan(lastOpT)) {
            bulkResult.lastOp = opTime;
          }
        }
      }
    }

    // If we have an insert Batch type
    if (batch.batchType === INSERT && result.n) {
      bulkResult.nInserted = bulkResult.nInserted + result.n;
    }

    // If we have an insert Batch type
    if (batch.batchType === REMOVE && result.n) {
      bulkResult.nRemoved = bulkResult.nRemoved + result.n;
    }

    let nUpserted = 0;

    // We have an array of upserted values, we need to rewrite the indexes
    if (Array.isArray(result.upserted)) {
      nUpserted = result.upserted.length;

      for (let i = 0; i < result.upserted.length; i++) {
        bulkResult.upserted.push({
          index: result.upserted[i].index + batch.originalZeroIndex,
          _id: result.upserted[i]._id
        });
      }
    } else if (result.upserted) {
      nUpserted = 1;

      bulkResult.upserted.push({
        index: batch.originalZeroIndex,
        _id: result.upserted
      });
    }

    // If we have an update Batch type
    if (batch.batchType === UPDATE && result.n) {
      const nModified = result.nModified;
      bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;
      bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);

      if (typeof nModified === 'number') {
        bulkResult.nModified = bulkResult.nModified + nModified;
      } else {
        bulkResult.nModified = null;
      }
    }

    if (Array.isArray(result.writeErrors)) {
      for (let i = 0; i < result.writeErrors.length; i++) {
        const writeError = {
          index: batch.originalIndexes[result.writeErrors[i].index],
          code: result.writeErrors[i].code,
          errmsg: result.writeErrors[i].errmsg,
          op: batch.operations[result.writeErrors[i].index]
        };

        bulkResult.writeErrors.push(new WriteError(writeError));
      }
    }

    if (result.writeConcernError) {
      bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));
    }
  }

  function executeCommands(bulkOperation, options, callback) {
    if (bulkOperation.s.batches.length === 0) {
      return handleCallback(callback, null, new BulkWriteResult(bulkOperation.s.bulkResult));
    }

    const batch = bulkOperation.s.batches.shift();

    function resultHandler(err, result) {
      // Error is a driver related error not a bulk op error, terminate
      if (((err && err.driver) || (err && err.message)) && !(err instanceof MongoWriteConcernError)) {
        return handleCallback(callback, err);
      }

      // If we have and error
      if (err) err.ok = 0;
      if (err instanceof MongoWriteConcernError) {
        return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);
      }

      // Merge the results together
      const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);
      const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);
      if (mergeResult != null) {
        return handleCallback(callback, null, writeResult);
      }

      if (bulkOperation.handleWriteError(callback, writeResult)) return;

      // Execute the next command in line
      executeCommands(bulkOperation, options, callback);
    }

    bulkOperation.finalOptionsHandler({ options, batch, resultHandler }, callback);
  }

  /**
   * handles write concern error
   *
   * @ignore
   * @param {object} batch
   * @param {object} bulkResult
   * @param {boolean} ordered
   * @param {WriteConcernError} err
   * @param {function} callback
   */
  function handleMongoWriteConcernError(batch, bulkResult, err, callback) {
    mergeBatchResults(batch, bulkResult, null, err.result);

    const wrappedWriteConcernError = new WriteConcernError({
      errmsg: err.result.writeConcernError.errmsg,
      code: err.result.writeConcernError.result
    });
    return handleCallback(
      callback,
      new BulkWriteError(toError$1(wrappedWriteConcernError), new BulkWriteResult(bulkResult)),
      null
    );
  }

  /**
   * @classdesc An error indicating an unsuccessful Bulk Write
   */
  class BulkWriteError extends MongoError$4 {
    /**
     * Creates a new BulkWriteError
     *
     * @param {Error|string|object} message The error message
     * @param {BulkWriteResult} result The result of the bulk write operation
     * @extends {MongoError}
     */
    constructor(error, result) {
      const message = error.err || error.errmsg || error.errMessage || error;
      super(message);

      Object.assign(this, error);

      this.name = 'BulkWriteError';
      this.result = result;
    }
  }

  /**
   * @classdesc A builder object that is returned from {@link BulkOperationBase#find}.
   * Is used to build a write operation that involves a query filter.
   */
  class FindOperators {
    /**
     * Creates a new FindOperators object.
     *
     * **NOTE:** Internal Type, do not instantiate directly
     * @param {OrderedBulkOperation|UnorderedBulkOperation} bulkOperation
     */
    constructor(bulkOperation) {
      this.s = bulkOperation.s;
    }

    /**
     * Add a multiple update operation to the bulk operation
     *
     * @method
     * @param {object} updateDocument An update field for an update operation. See {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-u u documentation}
     * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.
     * @throws {MongoError} If operation cannot be added to bulk write
     * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation
     */
    update(updateDocument) {
      // Perform upsert
      const upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;

      // Establish the update command
      const document = {
        q: this.s.currentOp.selector,
        u: updateDocument,
        multi: true,
        upsert: upsert
      };

      if (updateDocument.hint) {
        document.hint = updateDocument.hint;
      }

      // Clear out current Op
      this.s.currentOp = null;
      return this.s.options.addToOperationsList(this, UPDATE, document);
    }

    /**
     * Add a single update operation to the bulk operation
     *
     * @method
     * @param {object} updateDocument An update field for an update operation. See {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-u u documentation}
     * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.
     * @throws {MongoError} If operation cannot be added to bulk write
     * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation
     */
    updateOne(updateDocument) {
      // Perform upsert
      const upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;

      // Establish the update command
      const document = {
        q: this.s.currentOp.selector,
        u: updateDocument,
        multi: false,
        upsert: upsert
      };

      if (updateDocument.hint) {
        document.hint = updateDocument.hint;
      }

      if (!hasAtomicOperators(updateDocument)) {
        throw new TypeError('Update document requires atomic operators');
      }

      // Clear out current Op
      this.s.currentOp = null;
      return this.s.options.addToOperationsList(this, UPDATE, document);
    }

    /**
     * Add a replace one operation to the bulk operation
     *
     * @method
     * @param {object} replacement the new document to replace the existing one with
     * @throws {MongoError} If operation cannot be added to bulk write
     * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation
     */
    replaceOne(replacement) {
      // Perform upsert
      const upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;

      // Establish the update command
      const document = {
        q: this.s.currentOp.selector,
        u: replacement,
        multi: false,
        upsert: upsert
      };

      if (replacement.hint) {
        document.hint = replacement.hint;
      }

      if (hasAtomicOperators(replacement)) {
        throw new TypeError('Replacement document must not use atomic operators');
      }

      // Clear out current Op
      this.s.currentOp = null;
      return this.s.options.addToOperationsList(this, UPDATE, document);
    }

    /**
     * Upsert modifier for update bulk operation, noting that this operation is an upsert.
     *
     * @method
     * @throws {MongoError} If operation cannot be added to bulk write
     * @return {FindOperators} reference to self
     */
    upsert() {
      this.s.currentOp.upsert = true;
      return this;
    }

    /**
     * Add a delete one operation to the bulk operation
     *
     * @method
     * @throws {MongoError} If operation cannot be added to bulk write
     * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation
     */
    deleteOne() {
      // Establish the update command
      const document = {
        q: this.s.currentOp.selector,
        limit: 1
      };

      // Clear out current Op
      this.s.currentOp = null;
      return this.s.options.addToOperationsList(this, REMOVE, document);
    }

    /**
     * Add a delete many operation to the bulk operation
     *
     * @method
     * @throws {MongoError} If operation cannot be added to bulk write
     * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation
     */
    delete() {
      // Establish the update command
      const document = {
        q: this.s.currentOp.selector,
        limit: 0
      };

      // Clear out current Op
      this.s.currentOp = null;
      return this.s.options.addToOperationsList(this, REMOVE, document);
    }

    /**
     * backwards compatability for deleteOne
     */
    removeOne() {
      return this.deleteOne();
    }

    /**
     * backwards compatability for delete
     */
    remove() {
      return this.delete();
    }
  }

  /**
   * @classdesc Parent class to OrderedBulkOperation and UnorderedBulkOperation
   *
   * **NOTE:** Internal Type, do not instantiate directly
   */
  class BulkOperationBase {
    /**
     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance
     * @property {number} length Get the number of operations in the bulk.
     */
    constructor(topology, collection, options, isOrdered) {
      // determine whether bulkOperation is ordered or unordered
      this.isOrdered = isOrdered;

      options = options == null ? {} : options;
      // TODO Bring from driver information in isMaster
      // Get the namespace for the write operations
      const namespace = collection.s.namespace;
      // Used to mark operation as executed
      const executed = false;

      // Current item
      const currentOp = null;

      // Handle to the bson serializer, used to calculate running sizes
      const bson = topology.bson;
      // Set max byte size
      const isMaster = topology.lastIsMaster();

      // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents
      // over 2mb are still allowed
      const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);
      const maxBsonObjectSize =
        isMaster && isMaster.maxBsonObjectSize ? isMaster.maxBsonObjectSize : 1024 * 1024 * 16;
      const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;
      const maxWriteBatchSize =
        isMaster && isMaster.maxWriteBatchSize ? isMaster.maxWriteBatchSize : 1000;

      // Calculates the largest possible size of an Array key, represented as a BSON string
      // element. This calculation:
      //     1 byte for BSON type
      //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))
      //   + 1 bytes for null terminator
      const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;

      // Final options for retryable writes and write concern
      let finalOptions = Object.assign({}, options);
      finalOptions = applyRetryableWrites(finalOptions, collection.s.db);
      finalOptions = applyWriteConcern(finalOptions, { collection: collection }, options);
      const writeConcern = finalOptions.writeConcern;

      // Get the promiseLibrary
      const promiseLibrary = options.promiseLibrary || Promise;

      // Final results
      const bulkResult = {
        ok: 1,
        writeErrors: [],
        writeConcernErrors: [],
        insertedIds: [],
        nInserted: 0,
        nUpserted: 0,
        nMatched: 0,
        nModified: 0,
        nRemoved: 0,
        upserted: []
      };

      // Internal state
      this.s = {
        // Final result
        bulkResult: bulkResult,
        // Current batch state
        currentBatch: null,
        currentIndex: 0,
        // ordered specific
        currentBatchSize: 0,
        currentBatchSizeBytes: 0,
        // unordered specific
        currentInsertBatch: null,
        currentUpdateBatch: null,
        currentRemoveBatch: null,
        batches: [],
        // Write concern
        writeConcern: writeConcern,
        // Max batch size options
        maxBsonObjectSize,
        maxBatchSizeBytes,
        maxWriteBatchSize,
        maxKeySize,
        // Namespace
        namespace: namespace,
        // BSON
        bson: bson,
        // Topology
        topology: topology,
        // Options
        options: finalOptions,
        // Current operation
        currentOp: currentOp,
        // Executed
        executed: executed,
        // Collection
        collection: collection,
        // Promise Library
        promiseLibrary: promiseLibrary,
        // Fundamental error
        err: null,
        // check keys
        checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : true
      };

      // bypass Validation
      if (options.bypassDocumentValidation === true) {
        this.s.bypassDocumentValidation = true;
      }
    }

    /**
     * Add a single insert document to the bulk operation
     *
     * @param {object} document the document to insert
     * @throws {MongoError}
     * @return {BulkOperationBase} A reference to self
     *
     * @example
     * const bulkOp = collection.initializeOrderedBulkOp();
     * // Adds three inserts to the bulkOp.
     * bulkOp
     *   .insert({ a: 1 })
     *   .insert({ b: 2 })
     *   .insert({ c: 3 });
     * await bulkOp.execute();
     */
    insert(document) {
      if (this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null)
        document._id = new ObjectID$2();
      return this.s.options.addToOperationsList(this, INSERT, document);
    }

    /**
     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.
     * Returns a builder object used to complete the definition of the operation.
     *
     * @method
     * @param {object} selector The selector for the bulk operation. See {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-q q documentation}
     * @throws {MongoError} if a selector is not specified
     * @return {FindOperators} A helper object with which the write operation can be defined.
     *
     * @example
     * const bulkOp = collection.initializeOrderedBulkOp();
     *
     * // Add an updateOne to the bulkOp
     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });
     *
     * // Add an updateMany to the bulkOp
     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });
     *
     * // Add an upsert
     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });
     *
     * // Add a deletion
     * bulkOp.find({ g: 7 }).deleteOne();
     *
     * // Add a multi deletion
     * bulkOp.find({ h: 8 }).delete();
     *
     * // Add a replaceOne
     * bulkOp.find({ i: 9 }).replaceOne({ j: 10 });
     *
     * // Update using a pipeline (requires Mongodb 4.2 or higher)
     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([
     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }
     * ]);
     *
     * // All of the ops will now be executed
     * await bulkOp.execute();
     */
    find(selector) {
      if (!selector) {
        throw toError$1('Bulk find operation must specify a selector');
      }

      // Save a current selector
      this.s.currentOp = {
        selector: selector
      };

      return new FindOperators(this);
    }

    /**
     * Specifies a raw operation to perform in the bulk write.
     *
     * @method
     * @param {object} op The raw operation to perform.
     * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.
     * @return {BulkOperationBase} A reference to self
     */
    raw(op) {
      const key = Object.keys(op)[0];

      // Set up the force server object id
      const forceServerObjectId =
        typeof this.s.options.forceServerObjectId === 'boolean'
          ? this.s.options.forceServerObjectId
          : this.s.collection.s.db.options.forceServerObjectId;

      // Update operations
      if (
        (op.updateOne && op.updateOne.q) ||
        (op.updateMany && op.updateMany.q) ||
        (op.replaceOne && op.replaceOne.q)
      ) {
        op[key].multi = op.updateOne || op.replaceOne ? false : true;
        return this.s.options.addToOperationsList(this, UPDATE, op[key]);
      }

      // Crud spec update format
      if (op.updateOne || op.updateMany || op.replaceOne) {
        if (op.replaceOne && hasAtomicOperators(op[key].replacement)) {
          throw new TypeError('Replacement document must not use atomic operators');
        } else if ((op.updateOne || op.updateMany) && !hasAtomicOperators(op[key].update)) {
          throw new TypeError('Update document requires atomic operators');
        }

        const multi = op.updateOne || op.replaceOne ? false : true;
        const operation = {
          q: op[key].filter,
          u: op[key].update || op[key].replacement,
          multi: multi
        };

        if (op[key].hint) {
          operation.hint = op[key].hint;
        }

        if (this.isOrdered) {
          operation.upsert = op[key].upsert ? true : false;
          if (op.collation) operation.collation = op.collation;
        } else {
          if (op[key].upsert) operation.upsert = true;
        }
        if (op[key].arrayFilters) {
          // TODO: this check should be done at command construction against a connection, not a topology
          if (maxWireVersion(this.s.topology) < 6) {
            throw new TypeError('arrayFilters are only supported on MongoDB 3.6+');
          }

          operation.arrayFilters = op[key].arrayFilters;
        }

        return this.s.options.addToOperationsList(this, UPDATE, operation);
      }

      // Remove operations
      if (
        op.removeOne ||
        op.removeMany ||
        (op.deleteOne && op.deleteOne.q) ||
        (op.deleteMany && op.deleteMany.q)
      ) {
        op[key].limit = op.removeOne ? 1 : 0;
        return this.s.options.addToOperationsList(this, REMOVE, op[key]);
      }

      // Crud spec delete operations, less efficient
      if (op.deleteOne || op.deleteMany) {
        const limit = op.deleteOne ? 1 : 0;
        const operation = { q: op[key].filter, limit: limit };
        if (op[key].hint) {
          operation.hint = op[key].hint;
        }
        if (this.isOrdered) {
          if (op.collation) operation.collation = op.collation;
        }
        return this.s.options.addToOperationsList(this, REMOVE, operation);
      }

      // Insert operations
      if (op.insertOne && op.insertOne.document == null) {
        if (forceServerObjectId !== true && op.insertOne._id == null)
          op.insertOne._id = new ObjectID$2();
        return this.s.options.addToOperationsList(this, INSERT, op.insertOne);
      } else if (op.insertOne && op.insertOne.document) {
        if (forceServerObjectId !== true && op.insertOne.document._id == null)
          op.insertOne.document._id = new ObjectID$2();
        return this.s.options.addToOperationsList(this, INSERT, op.insertOne.document);
      }

      if (op.insertMany) {
        for (let i = 0; i < op.insertMany.length; i++) {
          if (forceServerObjectId !== true && op.insertMany[i]._id == null)
            op.insertMany[i]._id = new ObjectID$2();
          this.s.options.addToOperationsList(this, INSERT, op.insertMany[i]);
        }

        return;
      }

      // No valid type of operation
      throw toError$1(
        'bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany'
      );
    }

    /**
     * helper function to assist with promiseOrCallback behavior
     * @ignore
     * @param {*} err
     * @param {*} callback
     */
    _handleEarlyError(err, callback) {
      if (typeof callback === 'function') {
        callback(err, null);
        return;
      }

      return this.s.promiseLibrary.reject(err);
    }

    /**
     * An internal helper method. Do not invoke directly. Will be going away in the future
     *
     * @ignore
     * @method
     * @param {class} bulk either OrderedBulkOperation or UnorderdBulkOperation
     * @param {object} writeConcern
     * @param {object} options
     * @param {function} callback
     */
    bulkExecute(_writeConcern, options, callback) {
      if (typeof options === 'function') (callback = options), (options = {});
      options = options || {};

      if (typeof _writeConcern === 'function') {
        callback = _writeConcern;
      } else if (_writeConcern && typeof _writeConcern === 'object') {
        this.s.writeConcern = _writeConcern;
      }

      if (this.s.executed) {
        const executedError = toError$1('batch cannot be re-executed');
        return this._handleEarlyError(executedError, callback);
      }

      // If we have current batch
      if (this.isOrdered) {
        if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);
      } else {
        if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);
        if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);
        if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);
      }
      // If we have no operations in the bulk raise an error
      if (this.s.batches.length === 0) {
        const emptyBatchError = toError$1('Invalid Operation, no operations specified');
        return this._handleEarlyError(emptyBatchError, callback);
      }
      return { options, callback };
    }

    /**
     * The callback format for results
     * @callback BulkOperationBase~resultCallback
     * @param {MongoError} error An error instance representing the error during the execution.
     * @param {BulkWriteResult} result The bulk write result.
     */

    /**
     * Execute the bulk operation
     *
     * @method
     * @param {WriteConcern} [_writeConcern] Optional write concern. Can also be specified through options.
     * @param {object} [options] Optional settings.
     * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
     * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
     * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
     * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.
     * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
     * @param {BulkOperationBase~resultCallback} [callback] A callback that will be invoked when bulkWrite finishes/errors
     * @throws {MongoError} Throws error if the bulk object has already been executed
     * @throws {MongoError} Throws error if the bulk object does not have any operations
     * @return {Promise|void} returns Promise if no callback passed
     */
    execute(_writeConcern, options, callback) {
      const ret = this.bulkExecute(_writeConcern, options, callback);
      if (!ret || isPromiseLike(ret)) {
        return ret;
      }

      options = ret.options;
      callback = ret.callback;

      return executeLegacyOperation$2(this.s.topology, executeCommands, [this, options, callback]);
    }

    /**
     * Handles final options before executing command
     *
     * An internal method. Do not invoke. Will not be accessible in the future
     *
     * @ignore
     * @param {object} config
     * @param {object} config.options
     * @param {number} config.batch
     * @param {function} config.resultHandler
     * @param {function} callback
     */
    finalOptionsHandler(config, callback) {
      const finalOptions = Object.assign({ ordered: this.isOrdered }, config.options);
      if (this.s.writeConcern != null) {
        finalOptions.writeConcern = this.s.writeConcern;
      }

      if (finalOptions.bypassDocumentValidation !== true) {
        delete finalOptions.bypassDocumentValidation;
      }

      // Set an operationIf if provided
      if (this.operationId) {
        config.resultHandler.operationId = this.operationId;
      }

      // Serialize functions
      if (this.s.options.serializeFunctions) {
        finalOptions.serializeFunctions = true;
      }

      // Ignore undefined
      if (this.s.options.ignoreUndefined) {
        finalOptions.ignoreUndefined = true;
      }

      // Is the bypassDocumentValidation options specific
      if (this.s.bypassDocumentValidation === true) {
        finalOptions.bypassDocumentValidation = true;
      }

      // Is the checkKeys option disabled
      if (this.s.checkKeys === false) {
        finalOptions.checkKeys = false;
      }

      if (finalOptions.retryWrites) {
        if (config.batch.batchType === UPDATE) {
          finalOptions.retryWrites =
            finalOptions.retryWrites && !config.batch.operations.some(op => op.multi);
        }

        if (config.batch.batchType === REMOVE) {
          finalOptions.retryWrites =
            finalOptions.retryWrites && !config.batch.operations.some(op => op.limit === 0);
        }
      }

      try {
        if (config.batch.batchType === INSERT) {
          this.s.topology.insert(
            this.s.namespace,
            config.batch.operations,
            finalOptions,
            config.resultHandler
          );
        } else if (config.batch.batchType === UPDATE) {
          this.s.topology.update(
            this.s.namespace,
            config.batch.operations,
            finalOptions,
            config.resultHandler
          );
        } else if (config.batch.batchType === REMOVE) {
          this.s.topology.remove(
            this.s.namespace,
            config.batch.operations,
            finalOptions,
            config.resultHandler
          );
        }
      } catch (err) {
        // Force top level error
        err.ok = 0;
        // Merge top level error and return
        handleCallback(callback, null, mergeBatchResults(config.batch, this.s.bulkResult, err, null));
      }
    }

    /**
     * Handles the write error before executing commands
     *
     * An internal helper method. Do not invoke directly. Will be going away in the future
     *
     * @ignore
     * @param {function} callback
     * @param {BulkWriteResult} writeResult
     * @param {class} self either OrderedBulkOperation or UnorderedBulkOperation
     */
    handleWriteError(callback, writeResult) {
      if (this.s.bulkResult.writeErrors.length > 0) {
        const msg = this.s.bulkResult.writeErrors[0].errmsg
          ? this.s.bulkResult.writeErrors[0].errmsg
          : 'write operation failed';

        handleCallback(
          callback,
          new BulkWriteError(
            toError$1({
              message: msg,
              code: this.s.bulkResult.writeErrors[0].code,
              writeErrors: this.s.bulkResult.writeErrors
            }),
            writeResult
          ),
          null
        );
        return true;
      }

      if (writeResult.getWriteConcernError()) {
        handleCallback(
          callback,
          new BulkWriteError(toError$1(writeResult.getWriteConcernError()), writeResult),
          null
        );
        return true;
      }
    }
  }

  Object.defineProperty(BulkOperationBase.prototype, 'length', {
    enumerable: true,
    get: function() {
      return this.s.currentIndex;
    }
  });

  // Exports symbols
  var common = {
    Batch,
    BulkOperationBase,
    bson,
    INSERT: INSERT,
    UPDATE: UPDATE,
    REMOVE: REMOVE,
    BulkWriteError
  };

  const CServer = require('../core').Server;
  const Cursor$2 = require('../cursor');
  const TopologyBase$2 = require('./topology_base').TopologyBase;
  const Store$2 = require('./topology_base').Store;
  const MongoError$3 = require('../core').MongoError;
  const MAX_JS_INT$2 = require('../utils').MAX_JS_INT;
  const translateOptions$2 = require('../utils').translateOptions;
  const filterOptions$2 = require('../utils').filterOptions;
  const mergeOptions$2 = require('../utils').mergeOptions;

  /**
   * @fileOverview The **Server** class is a class that represents a single server topology and is
   * used to construct connections.
   *
   * **Server Should not be used, use MongoClient.connect**
   */

  // Allowed parameters
  var legalOptionNames$2 = [
    'ha',
    'haInterval',
    'acceptableLatencyMS',
    'poolSize',
    'ssl',
    'checkServerIdentity',
    'sslValidate',
    'sslCA',
    'sslCRL',
    'sslCert',
    'ciphers',
    'ecdhCurve',
    'sslKey',
    'sslPass',
    'socketOptions',
    'bufferMaxEntries',
    'store',
    'auto_reconnect',
    'autoReconnect',
    'emitError',
    'keepAlive',
    'keepAliveInitialDelay',
    'noDelay',
    'connectTimeoutMS',
    'socketTimeoutMS',
    'family',
    'loggerLevel',
    'logger',
    'reconnectTries',
    'reconnectInterval',
    'monitoring',
    'appname',
    'domainsEnabled',
    'servername',
    'promoteLongs',
    'promoteValues',
    'promoteBuffers',
    'compression',
    'promiseLibrary',
    'monitorCommands'
  ];

  /**
   * Creates a new Server instance
   * @class
   * @deprecated
   * @param {string} host The host for the server, can be either an IP4, IP6 or domain socket style host.
   * @param {number} [port] The server port if IP4.
   * @param {object} [options] Optional settings.
   * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.
   * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)
   * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.
   * @param {array} [options.sslCA] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {array} [options.sslCRL] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {(Buffer|string)} [options.sslCert] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {string} [options.ciphers] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.
   * @param {string} [options.ecdhCurve] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.
   * @param {(Buffer|string)} [options.sslKey] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {(Buffer|string)} [options.sslPass] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {string} [options.servername] String containing the server name requested via TLS SNI.
   * @param {object} [options.socketOptions] Socket options
   * @param {boolean} [options.socketOptions.autoReconnect=true] Reconnect on error.
   * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.
   * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled
   * @param {number} [options.socketOptions.keepAliveInitialDelay=120000] The number of milliseconds to wait before initiating keepAlive on the TCP socket
   * @param {number} [options.socketOptions.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out
   * @param {number} [options.socketOptions.socketTimeoutMS=0] How long a send or receive on a socket can take before timing out
   * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times
   * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries
   * @param {boolean} [options.monitoring=true] Triggers the server instance to call ismaster
   * @param {number} [options.haInterval=10000] The interval of calling ismaster when monitoring is enabled.
   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.
   * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology
   * @fires Server#connect
   * @fires Server#close
   * @fires Server#error
   * @fires Server#timeout
   * @fires Server#parseError
   * @fires Server#reconnect
   * @fires Server#commandStarted
   * @fires Server#commandSucceeded
   * @fires Server#commandFailed
   * @property {string} parserType the parser type used (c++ or js).
   * @return {Server} a Server instance.
   */
  class Server$2 extends TopologyBase$2 {
    constructor(host, port, options) {
      super();
      var self = this;

      // Filter the options
      options = filterOptions$2(options, legalOptionNames$2);

      // Promise library
      const promiseLibrary = options.promiseLibrary;

      // Stored options
      var storeOptions = {
        force: false,
        bufferMaxEntries:
          typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT$2
      };

      // Shared global store
      var store = options.store || new Store$2(self, storeOptions);

      // Detect if we have a socket connection
      if (host.indexOf('/') !== -1) {
        if (port != null && typeof port === 'object') {
          options = port;
          port = null;
        }
      } else if (port == null) {
        throw MongoError$3.create({ message: 'port must be specified', driver: true });
      }

      // Get the reconnect option
      var reconnect = typeof options.auto_reconnect === 'boolean' ? options.auto_reconnect : true;
      reconnect = typeof options.autoReconnect === 'boolean' ? options.autoReconnect : reconnect;

      // Clone options
      var clonedOptions = mergeOptions$2(
        {},
        {
          host: host,
          port: port,
          disconnectHandler: store,
          cursorFactory: Cursor$2,
          reconnect: reconnect,
          emitError: typeof options.emitError === 'boolean' ? options.emitError : true,
          size: typeof options.poolSize === 'number' ? options.poolSize : 5,
          monitorCommands:
            typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false
        }
      );

      // Translate any SSL options and other connectivity options
      clonedOptions = translateOptions$2(clonedOptions, options);

      // Socket options
      var socketOptions =
        options.socketOptions && Object.keys(options.socketOptions).length > 0
          ? options.socketOptions
          : options;

      // Translate all the options to the core types
      clonedOptions = translateOptions$2(clonedOptions, socketOptions);

      // Define the internal properties
      this.s = {
        // Create an instance of a server instance from core module
        coreTopology: new CServer(clonedOptions),
        // Server capabilities
        sCapabilities: null,
        // Cloned options
        clonedOptions: clonedOptions,
        // Reconnect
        reconnect: clonedOptions.reconnect,
        // Emit error
        emitError: clonedOptions.emitError,
        // Pool size
        poolSize: clonedOptions.size,
        // Store Options
        storeOptions: storeOptions,
        // Store
        store: store,
        // Host
        host: host,
        // Port
        port: port,
        // Options
        options: options,
        // Server Session Pool
        sessionPool: null,
        // Active client sessions
        sessions: new Set(),
        // Promise library
        promiseLibrary: promiseLibrary || Promise
      };
    }

    // Connect
    connect(_options, callback) {
      var self = this;
      if ('function' === typeof _options) (callback = _options), (_options = {});
      if (_options == null) _options = this.s.clonedOptions;
      if (!('function' === typeof callback)) callback = null;
      _options = Object.assign({}, this.s.clonedOptions, _options);
      self.s.options = _options;

      // Update bufferMaxEntries
      self.s.storeOptions.bufferMaxEntries =
        typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;

      // Error handler
      var connectErrorHandler = function() {
        return function(err) {
          // Remove all event handlers
          var events = ['timeout', 'error', 'close'];
          events.forEach(function(e) {
            self.s.coreTopology.removeListener(e, connectHandlers[e]);
          });

          self.s.coreTopology.removeListener('connect', connectErrorHandler);

          // Try to callback
          try {
            callback(err);
          } catch (err) {
            browser$1.nextTick(function() {
              throw err;
            });
          }
        };
      };

      // Actual handler
      var errorHandler = function(event) {
        return function(err) {
          if (event !== 'error') {
            self.emit(event, err);
          }
        };
      };

      // Error handler
      var reconnectHandler = function() {
        self.emit('reconnect', self);
        self.s.store.execute();
      };

      // Reconnect failed
      var reconnectFailedHandler = function(err) {
        self.emit('reconnectFailed', err);
        self.s.store.flush(err);
      };

      // Destroy called on topology, perform cleanup
      var destroyHandler = function() {
        self.s.store.flush();
      };

      // relay the event
      var relay = function(event) {
        return function(t, server) {
          self.emit(event, t, server);
        };
      };

      // Connect handler
      var connectHandler = function() {
        // Clear out all the current handlers left over
        ['timeout', 'error', 'close', 'destroy'].forEach(function(e) {
          self.s.coreTopology.removeAllListeners(e);
        });

        // Set up listeners
        self.s.coreTopology.on('timeout', errorHandler('timeout'));
        self.s.coreTopology.once('error', errorHandler('error'));
        self.s.coreTopology.on('close', errorHandler('close'));
        // Only called on destroy
        self.s.coreTopology.on('destroy', destroyHandler);

        // Emit open event
        self.emit('open', null, self);

        // Return correctly
        try {
          callback(null, self);
        } catch (err) {
          browser$1.nextTick(function() {
            throw err;
          });
        }
      };

      // Set up listeners
      var connectHandlers = {
        timeout: connectErrorHandler(),
        error: connectErrorHandler(),
        close: connectErrorHandler()
      };

      // Clear out all the current handlers left over
      [
        'timeout',
        'error',
        'close',
        'serverOpening',
        'serverDescriptionChanged',
        'serverHeartbeatStarted',
        'serverHeartbeatSucceeded',
        'serverHeartbeatFailed',
        'serverClosed',
        'topologyOpening',
        'topologyClosed',
        'topologyDescriptionChanged',
        'commandStarted',
        'commandSucceeded',
        'commandFailed'
      ].forEach(function(e) {
        self.s.coreTopology.removeAllListeners(e);
      });

      // Add the event handlers
      self.s.coreTopology.once('timeout', connectHandlers.timeout);
      self.s.coreTopology.once('error', connectHandlers.error);
      self.s.coreTopology.once('close', connectHandlers.close);
      self.s.coreTopology.once('connect', connectHandler);
      // Reconnect server
      self.s.coreTopology.on('reconnect', reconnectHandler);
      self.s.coreTopology.on('reconnectFailed', reconnectFailedHandler);

      // Set up SDAM listeners
      self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));
      self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));
      self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));
      self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));
      self.s.coreTopology.on('serverOpening', relay('serverOpening'));
      self.s.coreTopology.on('serverClosed', relay('serverClosed'));
      self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));
      self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));
      self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));
      self.s.coreTopology.on('commandStarted', relay('commandStarted'));
      self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));
      self.s.coreTopology.on('commandFailed', relay('commandFailed'));
      self.s.coreTopology.on('attemptReconnect', relay('attemptReconnect'));
      self.s.coreTopology.on('monitoring', relay('monitoring'));

      // Start connection
      self.s.coreTopology.connect(_options);
    }
  }

  Object.defineProperty(Server$2.prototype, 'poolSize', {
    enumerable: true,
    get: function() {
      return this.s.coreTopology.connections().length;
    }
  });

  Object.defineProperty(Server$2.prototype, 'autoReconnect', {
    enumerable: true,
    get: function() {
      return this.s.reconnect;
    }
  });

  Object.defineProperty(Server$2.prototype, 'host', {
    enumerable: true,
    get: function() {
      return this.s.host;
    }
  });

  Object.defineProperty(Server$2.prototype, 'port', {
    enumerable: true,
    get: function() {
      return this.s.port;
    }
  });

  /**
   * Server connect event
   *
   * @event Server#connect
   * @type {object}
   */

  /**
   * Server close event
   *
   * @event Server#close
   * @type {object}
   */

  /**
   * Server reconnect event
   *
   * @event Server#reconnect
   * @type {object}
   */

  /**
   * Server error event
   *
   * @event Server#error
   * @type {MongoError}
   */

  /**
   * Server timeout event
   *
   * @event Server#timeout
   * @type {object}
   */

  /**
   * Server parseError event
   *
   * @event Server#parseError
   * @type {object}
   */

  /**
   * An event emitted indicating a command was started, if command monitoring is enabled
   *
   * @event Server#commandStarted
   * @type {object}
   */

  /**
   * An event emitted indicating a command succeeded, if command monitoring is enabled
   *
   * @event Server#commandSucceeded
   * @type {object}
   */

  /**
   * An event emitted indicating a command failed, if command monitoring is enabled
   *
   * @event Server#commandFailed
   * @type {object}
   */

  module.exports = Server$2;

  var server = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  const Server$1 = require('./server');
  const Cursor$1 = require('../cursor');
  const MongoError$2 = require('../core').MongoError;
  const TopologyBase$1 = require('./topology_base').TopologyBase;
  const Store$1 = require('./topology_base').Store;
  const CReplSet = require('../core').ReplSet;
  const MAX_JS_INT$1 = require('../utils').MAX_JS_INT;
  const translateOptions$1 = require('../utils').translateOptions;
  const filterOptions$1 = require('../utils').filterOptions;
  const mergeOptions$1 = require('../utils').mergeOptions;

  /**
   * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is
   * used to construct connections.
   *
   * **ReplSet Should not be used, use MongoClient.connect**
   */

  // Allowed parameters
  var legalOptionNames$1 = [
    'ha',
    'haInterval',
    'replicaSet',
    'rs_name',
    'secondaryAcceptableLatencyMS',
    'connectWithNoPrimary',
    'poolSize',
    'ssl',
    'checkServerIdentity',
    'sslValidate',
    'sslCA',
    'sslCert',
    'ciphers',
    'ecdhCurve',
    'sslCRL',
    'sslKey',
    'sslPass',
    'socketOptions',
    'bufferMaxEntries',
    'store',
    'auto_reconnect',
    'autoReconnect',
    'emitError',
    'keepAlive',
    'keepAliveInitialDelay',
    'noDelay',
    'connectTimeoutMS',
    'socketTimeoutMS',
    'strategy',
    'debug',
    'family',
    'loggerLevel',
    'logger',
    'reconnectTries',
    'appname',
    'domainsEnabled',
    'servername',
    'promoteLongs',
    'promoteValues',
    'promoteBuffers',
    'maxStalenessSeconds',
    'promiseLibrary',
    'minSize',
    'monitorCommands'
  ];

  /**
   * Creates a new ReplSet instance
   * @class
   * @deprecated
   * @param {Server[]} servers A seedlist of servers participating in the replicaset.
   * @param {object} [options] Optional settings.
   * @param {boolean} [options.ha=true] Turn on high availability monitoring.
   * @param {number} [options.haInterval=10000] Time between each replicaset status check.
   * @param {string} [options.replicaSet] The name of the replicaset to connect to.
   * @param {number} [options.secondaryAcceptableLatencyMS=15] Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)
   * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available
   * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.
   * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)
   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.
   * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {array} [options.sslCA] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {array} [options.sslCRL] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {(Buffer|string)} [options.sslCert] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher.
   * @param {string} [options.ciphers] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.
   * @param {string} [options.ecdhCurve] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.
   * @param {(Buffer|string)} [options.sslKey] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {(Buffer|string)} [options.sslPass] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {string} [options.servername] String containing the server name requested via TLS SNI.
   * @param {object} [options.socketOptions] Socket options
   * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.
   * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled
   * @param {number} [options.socketOptions.keepAliveInitialDelay=120000] The number of milliseconds to wait before initiating keepAlive on the TCP socket
   * @param {number} [options.socketOptions.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out
   * @param {number} [options.socketOptions.socketTimeoutMS=360000] How long a send or receive on a socket can take before timing out
   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.
   * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed);
   * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology
   * @fires ReplSet#connect
   * @fires ReplSet#ha
   * @fires ReplSet#joined
   * @fires ReplSet#left
   * @fires ReplSet#fullsetup
   * @fires ReplSet#open
   * @fires ReplSet#close
   * @fires ReplSet#error
   * @fires ReplSet#timeout
   * @fires ReplSet#parseError
   * @fires ReplSet#commandStarted
   * @fires ReplSet#commandSucceeded
   * @fires ReplSet#commandFailed
   * @property {string} parserType the parser type used (c++ or js).
   * @return {ReplSet} a ReplSet instance.
   */
  class ReplSet extends TopologyBase$1 {
    constructor(servers, options) {
      super();

      options = options || {};
      var self = this;

      // Filter the options
      options = filterOptions$1(options, legalOptionNames$1);

      // Ensure all the instances are Server
      for (var i = 0; i < servers.length; i++) {
        if (!(servers[i] instanceof Server$1)) {
          throw MongoError$2.create({
            message: 'all seed list instances must be of the Server type',
            driver: true
          });
        }
      }

      // Stored options
      var storeOptions = {
        force: false,
        bufferMaxEntries:
          typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT$1
      };

      // Shared global store
      var store = options.store || new Store$1(self, storeOptions);

      // Build seed list
      var seedlist = servers.map(function(x) {
        return { host: x.host, port: x.port };
      });

      // Clone options
      var clonedOptions = mergeOptions$1(
        {},
        {
          disconnectHandler: store,
          cursorFactory: Cursor$1,
          reconnect: false,
          emitError: typeof options.emitError === 'boolean' ? options.emitError : true,
          size: typeof options.poolSize === 'number' ? options.poolSize : 5,
          monitorCommands:
            typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false
        }
      );

      // Translate any SSL options and other connectivity options
      clonedOptions = translateOptions$1(clonedOptions, options);

      // Socket options
      var socketOptions =
        options.socketOptions && Object.keys(options.socketOptions).length > 0
          ? options.socketOptions
          : options;

      // Translate all the options to the core types
      clonedOptions = translateOptions$1(clonedOptions, socketOptions);

      // Create the ReplSet
      var coreTopology = new CReplSet(seedlist, clonedOptions);

      // Listen to reconnect event
      coreTopology.on('reconnect', function() {
        self.emit('reconnect');
        store.execute();
      });

      // Internal state
      this.s = {
        // Replicaset
        coreTopology: coreTopology,
        // Server capabilities
        sCapabilities: null,
        // Debug tag
        tag: options.tag,
        // Store options
        storeOptions: storeOptions,
        // Cloned options
        clonedOptions: clonedOptions,
        // Store
        store: store,
        // Options
        options: options,
        // Server Session Pool
        sessionPool: null,
        // Active client sessions
        sessions: new Set(),
        // Promise library
        promiseLibrary: options.promiseLibrary || Promise
      };

      // Debug
      if (clonedOptions.debug) {
        // Last ismaster
        Object.defineProperty(this, 'replset', {
          enumerable: true,
          get: function() {
            return coreTopology;
          }
        });
      }
    }

    // Connect method
    connect(_options, callback) {
      var self = this;
      if ('function' === typeof _options) (callback = _options), (_options = {});
      if (_options == null) _options = {};
      if (!('function' === typeof callback)) callback = null;
      _options = Object.assign({}, this.s.clonedOptions, _options);
      self.s.options = _options;

      // Update bufferMaxEntries
      self.s.storeOptions.bufferMaxEntries =
        typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;

      // Actual handler
      var errorHandler = function(event) {
        return function(err) {
          if (event !== 'error') {
            self.emit(event, err);
          }
        };
      };

      // Clear out all the current handlers left over
      var events = [
        'timeout',
        'error',
        'close',
        'serverOpening',
        'serverDescriptionChanged',
        'serverHeartbeatStarted',
        'serverHeartbeatSucceeded',
        'serverHeartbeatFailed',
        'serverClosed',
        'topologyOpening',
        'topologyClosed',
        'topologyDescriptionChanged',
        'commandStarted',
        'commandSucceeded',
        'commandFailed',
        'joined',
        'left',
        'ping',
        'ha'
      ];
      events.forEach(function(e) {
        self.s.coreTopology.removeAllListeners(e);
      });

      // relay the event
      var relay = function(event) {
        return function(t, server) {
          self.emit(event, t, server);
        };
      };

      // Replset events relay
      var replsetRelay = function(event) {
        return function(t, server) {
          self.emit(event, t, server.lastIsMaster(), server);
        };
      };

      // Relay ha
      var relayHa = function(t, state) {
        self.emit('ha', t, state);

        if (t === 'start') {
          self.emit('ha_connect', t, state);
        } else if (t === 'end') {
          self.emit('ha_ismaster', t, state);
        }
      };

      // Set up serverConfig listeners
      self.s.coreTopology.on('joined', replsetRelay('joined'));
      self.s.coreTopology.on('left', relay('left'));
      self.s.coreTopology.on('ping', relay('ping'));
      self.s.coreTopology.on('ha', relayHa);

      // Set up SDAM listeners
      self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));
      self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));
      self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));
      self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));
      self.s.coreTopology.on('serverOpening', relay('serverOpening'));
      self.s.coreTopology.on('serverClosed', relay('serverClosed'));
      self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));
      self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));
      self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));
      self.s.coreTopology.on('commandStarted', relay('commandStarted'));
      self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));
      self.s.coreTopology.on('commandFailed', relay('commandFailed'));

      self.s.coreTopology.on('fullsetup', function() {
        self.emit('fullsetup', self, self);
      });

      self.s.coreTopology.on('all', function() {
        self.emit('all', null, self);
      });

      // Connect handler
      var connectHandler = function() {
        // Set up listeners
        self.s.coreTopology.once('timeout', errorHandler('timeout'));
        self.s.coreTopology.once('error', errorHandler('error'));
        self.s.coreTopology.once('close', errorHandler('close'));

        // Emit open event
        self.emit('open', null, self);

        // Return correctly
        try {
          callback(null, self);
        } catch (err) {
          browser$1.nextTick(function() {
            throw err;
          });
        }
      };

      // Error handler
      var connectErrorHandler = function() {
        return function(err) {
          ['timeout', 'error', 'close'].forEach(function(e) {
            self.s.coreTopology.removeListener(e, connectErrorHandler);
          });

          self.s.coreTopology.removeListener('connect', connectErrorHandler);
          // Destroy the replset
          self.s.coreTopology.destroy();

          // Try to callback
          try {
            callback(err);
          } catch (err) {
            if (!self.s.coreTopology.isConnected())
              browser$1.nextTick(function() {
                throw err;
              });
          }
        };
      };

      // Set up listeners
      self.s.coreTopology.once('timeout', connectErrorHandler());
      self.s.coreTopology.once('error', connectErrorHandler());
      self.s.coreTopology.once('close', connectErrorHandler());
      self.s.coreTopology.once('connect', connectHandler);

      // Start connection
      self.s.coreTopology.connect(_options);
    }

    close(forceClosed, callback) {
      ['timeout', 'error', 'close', 'joined', 'left'].forEach(e => this.removeAllListeners(e));
      super.close(forceClosed, callback);
    }
  }

  Object.defineProperty(ReplSet.prototype, 'haInterval', {
    enumerable: true,
    get: function() {
      return this.s.coreTopology.s.haInterval;
    }
  });

  /**
   * A replset connect event, used to verify that the connection is up and running
   *
   * @event ReplSet#connect
   * @type {ReplSet}
   */

  /**
   * The replset high availability event
   *
   * @event ReplSet#ha
   * @type {function}
   * @param {string} type The stage in the high availability event (start|end)
   * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only
   * @param {number} data.id The id for this high availability request
   * @param {object} data.state An object containing the information about the current replicaset
   */

  /**
   * A server member left the replicaset
   *
   * @event ReplSet#left
   * @type {function}
   * @param {string} type The type of member that left (primary|secondary|arbiter)
   * @param {Server} server The server object that left
   */

  /**
   * A server member joined the replicaset
   *
   * @event ReplSet#joined
   * @type {function}
   * @param {string} type The type of member that joined (primary|secondary|arbiter)
   * @param {Server} server The server object that joined
   */

  /**
   * ReplSet open event, emitted when replicaset can start processing commands.
   *
   * @event ReplSet#open
   * @type {Replset}
   */

  /**
   * ReplSet fullsetup event, emitted when all servers in the topology have been connected to.
   *
   * @event ReplSet#fullsetup
   * @type {Replset}
   */

  /**
   * ReplSet close event
   *
   * @event ReplSet#close
   * @type {object}
   */

  /**
   * ReplSet error event, emitted if there is an error listener.
   *
   * @event ReplSet#error
   * @type {MongoError}
   */

  /**
   * ReplSet timeout event
   *
   * @event ReplSet#timeout
   * @type {object}
   */

  /**
   * ReplSet parseError event
   *
   * @event ReplSet#parseError
   * @type {object}
   */

  /**
   * An event emitted indicating a command was started, if command monitoring is enabled
   *
   * @event ReplSet#commandStarted
   * @type {object}
   */

  /**
   * An event emitted indicating a command succeeded, if command monitoring is enabled
   *
   * @event ReplSet#commandSucceeded
   * @type {object}
   */

  /**
   * An event emitted indicating a command failed, if command monitoring is enabled
   *
   * @event ReplSet#commandFailed
   * @type {object}
   */

  module.exports = ReplSet;

  var replset = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  const TopologyBase = require('./topology_base').TopologyBase;
  const MongoError$1 = require('../core').MongoError;
  const CMongos = require('../core').Mongos;
  const Cursor = require('../cursor');
  const Server = require('./server');
  const Store = require('./topology_base').Store;
  const MAX_JS_INT = require('../utils').MAX_JS_INT;
  const translateOptions = require('../utils').translateOptions;
  const filterOptions = require('../utils').filterOptions;
  const mergeOptions = require('../utils').mergeOptions;

  /**
   * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is
   * used to construct connections.
   *
   * **Mongos Should not be used, use MongoClient.connect**
   */

  // Allowed parameters
  var legalOptionNames = [
    'ha',
    'haInterval',
    'acceptableLatencyMS',
    'poolSize',
    'ssl',
    'checkServerIdentity',
    'sslValidate',
    'sslCA',
    'sslCRL',
    'sslCert',
    'ciphers',
    'ecdhCurve',
    'sslKey',
    'sslPass',
    'socketOptions',
    'bufferMaxEntries',
    'store',
    'auto_reconnect',
    'autoReconnect',
    'emitError',
    'keepAlive',
    'keepAliveInitialDelay',
    'noDelay',
    'connectTimeoutMS',
    'socketTimeoutMS',
    'loggerLevel',
    'logger',
    'reconnectTries',
    'appname',
    'domainsEnabled',
    'servername',
    'promoteLongs',
    'promoteValues',
    'promoteBuffers',
    'promiseLibrary',
    'monitorCommands'
  ];

  /**
   * Creates a new Mongos instance
   * @class
   * @deprecated
   * @param {Server[]} servers A seedlist of servers participating in the replicaset.
   * @param {object} [options] Optional settings.
   * @param {booelan} [options.ha=true] Turn on high availability monitoring.
   * @param {number} [options.haInterval=5000] Time between each replicaset status check.
   * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.
   * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for MongoS proxy selection
   * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)
   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.
   * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {array} [options.sslCA] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {array} [options.sslCRL] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {string} [options.ciphers] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.
   * @param {string} [options.ecdhCurve] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.
   * @param {(Buffer|string)} [options.sslCert] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {(Buffer|string)} [options.sslKey] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {(Buffer|string)} [options.sslPass] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)
   * @param {string} [options.servername] String containing the server name requested via TLS SNI.
   * @param {object} [options.socketOptions] Socket options
   * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.
   * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled
   * @param {number} [options.socketOptions.keepAliveInitialDelay=120000] The number of milliseconds to wait before initiating keepAlive on the TCP socket
   * @param {number} [options.socketOptions.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out
   * @param {number} [options.socketOptions.socketTimeoutMS=0] How long a send or receive on a socket can take before timing out
   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.
   * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology
   * @fires Mongos#connect
   * @fires Mongos#ha
   * @fires Mongos#joined
   * @fires Mongos#left
   * @fires Mongos#fullsetup
   * @fires Mongos#open
   * @fires Mongos#close
   * @fires Mongos#error
   * @fires Mongos#timeout
   * @fires Mongos#parseError
   * @fires Mongos#commandStarted
   * @fires Mongos#commandSucceeded
   * @fires Mongos#commandFailed
   * @property {string} parserType the parser type used (c++ or js).
   * @return {Mongos} a Mongos instance.
   */
  class Mongos extends TopologyBase {
    constructor(servers, options) {
      super();

      options = options || {};
      var self = this;

      // Filter the options
      options = filterOptions(options, legalOptionNames);

      // Ensure all the instances are Server
      for (var i = 0; i < servers.length; i++) {
        if (!(servers[i] instanceof Server)) {
          throw MongoError$1.create({
            message: 'all seed list instances must be of the Server type',
            driver: true
          });
        }
      }

      // Stored options
      var storeOptions = {
        force: false,
        bufferMaxEntries:
          typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT
      };

      // Shared global store
      var store = options.store || new Store(self, storeOptions);

      // Build seed list
      var seedlist = servers.map(function(x) {
        return { host: x.host, port: x.port };
      });

      // Get the reconnect option
      var reconnect = typeof options.auto_reconnect === 'boolean' ? options.auto_reconnect : true;
      reconnect = typeof options.autoReconnect === 'boolean' ? options.autoReconnect : reconnect;

      // Clone options
      var clonedOptions = mergeOptions(
        {},
        {
          disconnectHandler: store,
          cursorFactory: Cursor,
          reconnect: reconnect,
          emitError: typeof options.emitError === 'boolean' ? options.emitError : true,
          size: typeof options.poolSize === 'number' ? options.poolSize : 5,
          monitorCommands:
            typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false
        }
      );

      // Translate any SSL options and other connectivity options
      clonedOptions = translateOptions(clonedOptions, options);

      // Socket options
      var socketOptions =
        options.socketOptions && Object.keys(options.socketOptions).length > 0
          ? options.socketOptions
          : options;

      // Translate all the options to the core types
      clonedOptions = translateOptions(clonedOptions, socketOptions);

      // Internal state
      this.s = {
        // Create the Mongos
        coreTopology: new CMongos(seedlist, clonedOptions),
        // Server capabilities
        sCapabilities: null,
        // Debug turned on
        debug: clonedOptions.debug,
        // Store option defaults
        storeOptions: storeOptions,
        // Cloned options
        clonedOptions: clonedOptions,
        // Actual store of callbacks
        store: store,
        // Options
        options: options,
        // Server Session Pool
        sessionPool: null,
        // Active client sessions
        sessions: new Set(),
        // Promise library
        promiseLibrary: options.promiseLibrary || Promise
      };
    }

    // Connect
    connect(_options, callback) {
      var self = this;
      if ('function' === typeof _options) (callback = _options), (_options = {});
      if (_options == null) _options = {};
      if (!('function' === typeof callback)) callback = null;
      _options = Object.assign({}, this.s.clonedOptions, _options);
      self.s.options = _options;

      // Update bufferMaxEntries
      self.s.storeOptions.bufferMaxEntries =
        typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;

      // Error handler
      var connectErrorHandler = function() {
        return function(err) {
          // Remove all event handlers
          var events = ['timeout', 'error', 'close'];
          events.forEach(function(e) {
            self.removeListener(e, connectErrorHandler);
          });

          self.s.coreTopology.removeListener('connect', connectErrorHandler);
          // Force close the topology
          self.close(true);

          // Try to callback
          try {
            callback(err);
          } catch (err) {
            browser$1.nextTick(function() {
              throw err;
            });
          }
        };
      };

      // Actual handler
      var errorHandler = function(event) {
        return function(err) {
          if (event !== 'error') {
            self.emit(event, err);
          }
        };
      };

      // Error handler
      var reconnectHandler = function() {
        self.emit('reconnect');
        self.s.store.execute();
      };

      // relay the event
      var relay = function(event) {
        return function(t, server) {
          self.emit(event, t, server);
        };
      };

      // Connect handler
      var connectHandler = function() {
        // Clear out all the current handlers left over
        var events = ['timeout', 'error', 'close', 'fullsetup'];
        events.forEach(function(e) {
          self.s.coreTopology.removeAllListeners(e);
        });

        // Set up listeners
        self.s.coreTopology.on('timeout', errorHandler('timeout'));
        self.s.coreTopology.on('error', errorHandler('error'));
        self.s.coreTopology.on('close', errorHandler('close'));

        // Set up serverConfig listeners
        self.s.coreTopology.on('fullsetup', function() {
          self.emit('fullsetup', self);
        });

        // Emit open event
        self.emit('open', null, self);

        // Return correctly
        try {
          callback(null, self);
        } catch (err) {
          browser$1.nextTick(function() {
            throw err;
          });
        }
      };

      // Clear out all the current handlers left over
      var events = [
        'timeout',
        'error',
        'close',
        'serverOpening',
        'serverDescriptionChanged',
        'serverHeartbeatStarted',
        'serverHeartbeatSucceeded',
        'serverHeartbeatFailed',
        'serverClosed',
        'topologyOpening',
        'topologyClosed',
        'topologyDescriptionChanged',
        'commandStarted',
        'commandSucceeded',
        'commandFailed'
      ];
      events.forEach(function(e) {
        self.s.coreTopology.removeAllListeners(e);
      });

      // Set up SDAM listeners
      self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));
      self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));
      self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));
      self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));
      self.s.coreTopology.on('serverOpening', relay('serverOpening'));
      self.s.coreTopology.on('serverClosed', relay('serverClosed'));
      self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));
      self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));
      self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));
      self.s.coreTopology.on('commandStarted', relay('commandStarted'));
      self.s.coreTopology.on('commandSucceeded', relay('commandSucceeded'));
      self.s.coreTopology.on('commandFailed', relay('commandFailed'));

      // Set up listeners
      self.s.coreTopology.once('timeout', connectErrorHandler());
      self.s.coreTopology.once('error', connectErrorHandler());
      self.s.coreTopology.once('close', connectErrorHandler());
      self.s.coreTopology.once('connect', connectHandler);
      // Join and leave events
      self.s.coreTopology.on('joined', relay('joined'));
      self.s.coreTopology.on('left', relay('left'));

      // Reconnect server
      self.s.coreTopology.on('reconnect', reconnectHandler);

      // Start connection
      self.s.coreTopology.connect(_options);
    }
  }

  Object.defineProperty(Mongos.prototype, 'haInterval', {
    enumerable: true,
    get: function() {
      return this.s.coreTopology.s.haInterval;
    }
  });

  /**
   * A mongos connect event, used to verify that the connection is up and running
   *
   * @event Mongos#connect
   * @type {Mongos}
   */

  /**
   * The mongos high availability event
   *
   * @event Mongos#ha
   * @type {function}
   * @param {string} type The stage in the high availability event (start|end)
   * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only
   * @param {number} data.id The id for this high availability request
   * @param {object} data.state An object containing the information about the current replicaset
   */

  /**
   * A server member left the mongos set
   *
   * @event Mongos#left
   * @type {function}
   * @param {string} type The type of member that left (primary|secondary|arbiter)
   * @param {Server} server The server object that left
   */

  /**
   * A server member joined the mongos set
   *
   * @event Mongos#joined
   * @type {function}
   * @param {string} type The type of member that joined (primary|secondary|arbiter)
   * @param {Server} server The server object that joined
   */

  /**
   * Mongos fullsetup event, emitted when all proxies in the topology have been connected to.
   *
   * @event Mongos#fullsetup
   * @type {Mongos}
   */

  /**
   * Mongos open event, emitted when mongos can start processing commands.
   *
   * @event Mongos#open
   * @type {Mongos}
   */

  /**
   * Mongos close event
   *
   * @event Mongos#close
   * @type {object}
   */

  /**
   * Mongos error event, emitted if there is an error listener.
   *
   * @event Mongos#error
   * @type {MongoError}
   */

  /**
   * Mongos timeout event
   *
   * @event Mongos#timeout
   * @type {object}
   */

  /**
   * Mongos parseError event
   *
   * @event Mongos#parseError
   * @type {object}
   */

  /**
   * An event emitted indicating a command was started, if command monitoring is enabled
   *
   * @event Mongos#commandStarted
   * @type {object}
   */

  /**
   * An event emitted indicating a command succeeded, if command monitoring is enabled
   *
   * @event Mongos#commandSucceeded
   * @type {object}
   */

  /**
   * An event emitted indicating a command failed, if command monitoring is enabled
   *
   * @event Mongos#commandFailed
   * @type {object}
   */

  module.exports = Mongos;

  var mongos = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  /**
   * @fileOverview GridFS is a tool for MongoDB to store files to the database.
   * Because of the restrictions of the object size the database can hold, a
   * facility to split a file into several chunks is needed. The {@link GridStore}
   * class offers a simplified api to interact with files while managing the
   * chunks of split files behind the scenes. More information about GridFS can be
   * found <a href="http://www.mongodb.org/display/DOCS/GridFS">here</a>.
   *
   * @example
   * const MongoClient = require('mongodb').MongoClient;
   * const GridStore = require('mongodb').GridStore;
   * const ObjectID = require('mongodb').ObjectID;
   * const test = require('assert');
   * // Connection url
   * const url = 'mongodb://localhost:27017';
   * // Database Name
   * const dbName = 'test';
   * // Connect using MongoClient
   * MongoClient.connect(url, function(err, client) {
   *   const db = client.db(dbName);
   *   const gridStore = new GridStore(db, null, "w");
   *   gridStore.open(function(err, gridStore) {
   *     gridStore.write("hello world!", function(err, gridStore) {
   *       gridStore.close(function(err, result) {
   *         // Let's read the file using object Id
   *         GridStore.read(db, result._id, function(err, data) {
   *           test.equal('hello world!', data);
   *           client.close();
   *           test.done();
   *         });
   *       });
   *     });
   *   });
   * });
   */
  const Chunk$1 = require('./chunk');
  const ObjectID$1 = require('../core').BSON.ObjectID;
  const ReadPreference = require('../core').ReadPreference;
  const Buffer$2 = require('safe-buffer').Buffer;
  const fs = require('fs');
  const f = require('util').format;
  const util$1 = require('util');
  const MongoError = require('../core').MongoError;
  const inherits = util$1.inherits;
  const Duplex = require('stream').Duplex;
  const shallowClone$1 = require('../utils').shallowClone;
  const executeLegacyOperation$1 = require('../utils').executeLegacyOperation;
  const deprecate = require('util').deprecate;

  var REFERENCE_BY_FILENAME = 0,
    REFERENCE_BY_ID = 1;

  const deprecationFn = deprecate(() => {},
  'GridStore is deprecated, and will be removed in a future version. Please use GridFSBucket instead');

  /**
   * Namespace provided by the core module
   * @external Duplex
   */

  /**
   * Create a new GridStore instance
   *
   * Modes
   *  - **"r"** - read only. This is the default mode.
   *  - **"w"** - write in truncate mode. Existing data will be overwritten.
   *
   * @class
   * @param {Db} db A database instance to interact with.
   * @param {object} [id] optional unique id for this file
   * @param {string} [filename] optional filename for this file, no unique constrain on the field
   * @param {string} mode set the mode for this file.
   * @param {object} [options] Optional settings.
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {string} [options.root] Root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
   * @param {string} [options.content_type] MIME type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.
   * @param {number} [options.chunk_size=261120] Size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.
   * @param {object} [options.metadata] Arbitrary data the user wants to store.
   * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @property {number} chunkSize Get the gridstore chunk size.
   * @property {number} md5 The md5 checksum for this file.
   * @property {number} chunkNumber The current chunk number the gridstore has materialized into memory
   * @return {GridStore} a GridStore instance.
   * @deprecated Use GridFSBucket API instead
   */
  var GridStore = function GridStore(db, id, filename, mode, options) {
    deprecationFn();
    if (!(this instanceof GridStore)) return new GridStore(db, id, filename, mode, options);
    this.db = db;

    // Handle options
    if (typeof options === 'undefined') options = {};
    // Handle mode
    if (typeof mode === 'undefined') {
      mode = filename;
      filename = undefined;
    } else if (typeof mode === 'object') {
      options = mode;
      mode = filename;
      filename = undefined;
    }

    if (id && id._bsontype === 'ObjectID') {
      this.referenceBy = REFERENCE_BY_ID;
      this.fileId = id;
      this.filename = filename;
    } else if (typeof filename === 'undefined') {
      this.referenceBy = REFERENCE_BY_FILENAME;
      this.filename = id;
      if (mode.indexOf('w') != null) {
        this.fileId = new ObjectID$1();
      }
    } else {
      this.referenceBy = REFERENCE_BY_ID;
      this.fileId = id;
      this.filename = filename;
    }

    // Set up the rest
    this.mode = mode == null ? 'r' : mode;
    this.options = options || {};

    // Opened
    this.isOpen = false;

    // Set the root if overridden
    this.root =
      this.options['root'] == null ? GridStore.DEFAULT_ROOT_COLLECTION : this.options['root'];
    this.position = 0;
    this.readPreference =
      this.options.readPreference || db.options.readPreference || ReadPreference.primary;
    this.writeConcern = _getWriteConcern(db, this.options);
    // Set default chunk size
    this.internalChunkSize =
      this.options['chunkSize'] == null ? Chunk$1.DEFAULT_CHUNK_SIZE : this.options['chunkSize'];

    // Get the promiseLibrary
    var promiseLibrary = this.options.promiseLibrary || Promise;

    // Set the promiseLibrary
    this.promiseLibrary = promiseLibrary;

    Object.defineProperty(this, 'chunkSize', {
      enumerable: true,
      get: function() {
        return this.internalChunkSize;
      },
      set: function(value) {
        if (!(this.mode[0] === 'w' && this.position === 0 && this.uploadDate == null)) {
          // eslint-disable-next-line no-self-assign
          this.internalChunkSize = this.internalChunkSize;
        } else {
          this.internalChunkSize = value;
        }
      }
    });

    Object.defineProperty(this, 'md5', {
      enumerable: true,
      get: function() {
        return this.internalMd5;
      }
    });

    Object.defineProperty(this, 'chunkNumber', {
      enumerable: true,
      get: function() {
        return this.currentChunk && this.currentChunk.chunkNumber
          ? this.currentChunk.chunkNumber
          : null;
      }
    });
  };

  /**
   * The callback format for the Gridstore.open method
   * @callback GridStore~openCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {GridStore} gridStore The GridStore instance if the open method was successful.
   */

  /**
   * Opens the file from the database and initialize this object. Also creates a
   * new one if file does not exist.
   *
   * @method
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~openCallback} [callback] this will be called after executing this method
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.open = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    if (this.mode !== 'w' && this.mode !== 'w+' && this.mode !== 'r') {
      throw MongoError.create({ message: 'Illegal mode ' + this.mode, driver: true });
    }

    return executeLegacyOperation$1(this.db.s.topology, open, [this, options, callback], {
      skipSessions: true
    });
  };

  var open = function(self, options, callback) {
    // Get the write concern
    var writeConcern = _getWriteConcern(self.db, self.options);

    // If we are writing we need to ensure we have the right indexes for md5's
    if (self.mode === 'w' || self.mode === 'w+') {
      // Get files collection
      var collection = self.collection();
      // Put index on filename
      collection.ensureIndex([['filename', 1]], writeConcern, function() {
        // Get chunk collection
        var chunkCollection = self.chunkCollection();
        // Make an unique index for compatibility with mongo-cxx-driver:legacy
        var chunkIndexOptions = shallowClone$1(writeConcern);
        chunkIndexOptions.unique = true;
        // Ensure index on chunk collection
        chunkCollection.ensureIndex(
          [
            ['files_id', 1],
            ['n', 1]
          ],
          chunkIndexOptions,
          function() {
            // Open the connection
            _open(self, writeConcern, function(err, r) {
              if (err) return callback(err);
              self.isOpen = true;
              callback(err, r);
            });
          }
        );
      });
    } else {
      // Open the gridstore
      _open(self, writeConcern, function(err, r) {
        if (err) return callback(err);
        self.isOpen = true;
        callback(err, r);
      });
    }
  };

  /**
   * Verify if the file is at EOF.
   *
   * @method
   * @return {boolean} true if the read/write head is at the end of this file.
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.eof = function() {
    return this.position === this.length ? true : false;
  };

  /**
   * The callback result format.
   * @callback GridStore~resultCallback
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {object} result The result from the callback.
   */

  /**
   * Retrieves a single character from this file.
   *
   * @method
   * @param {GridStore~resultCallback} [callback] this gets called after this method is executed. Passes null to the first parameter and the character read to the second or null to the second if the read/write head is at the end of the file.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.getc = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeLegacyOperation$1(this.db.s.topology, getc, [this, options, callback], {
      skipSessions: true
    });
  };

  var getc = function(self, options, callback) {
    if (self.eof()) {
      callback(null, null);
    } else if (self.currentChunk.eof()) {
      nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {
        self.currentChunk = chunk;
        self.position = self.position + 1;
        callback(err, self.currentChunk.getc());
      });
    } else {
      self.position = self.position + 1;
      callback(null, self.currentChunk.getc());
    }
  };

  /**
   * Writes a string to the file with a newline character appended at the end if
   * the given string does not have one.
   *
   * @method
   * @param {string} string the string to write.
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.puts = function(string, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    var finalString = string.match(/\n$/) == null ? string + '\n' : string;
    return executeLegacyOperation$1(
      this.db.s.topology,
      this.write.bind(this),
      [finalString, options, callback],
      { skipSessions: true }
    );
  };

  /**
   * Return a modified Readable stream including a possible transform method.
   *
   * @method
   * @return {GridStoreStream}
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.stream = function() {
    return new GridStoreStream(this);
  };

  /**
   * Writes some data. This method will work properly only if initialized with mode "w" or "w+".
   *
   * @method
   * @param {(string|Buffer)} data the data to write.
   * @param {boolean} [close] closes this file after writing if set to true.
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.write = function write(data, close, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeLegacyOperation$1(
      this.db.s.topology,
      _writeNormal,
      [this, data, close, options, callback],
      { skipSessions: true }
    );
  };

  /**
   * Handles the destroy part of a stream
   *
   * @method
   * @result {null}
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.destroy = function destroy() {
    // close and do not emit any more events. queued data is not sent.
    if (!this.writable) return;
    this.readable = false;
    if (this.writable) {
      this.writable = false;
      this._q.length = 0;
      this.emit('close');
    }
  };

  /**
   * Stores a file from the file system to the GridFS database.
   *
   * @method
   * @param {(string|Buffer|FileHandle)} file the file to store.
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.writeFile = function(file, options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeLegacyOperation$1(this.db.s.topology, writeFile, [this, file, options, callback], {
      skipSessions: true
    });
  };

  var writeFile = function(self, file, options, callback) {
    if (typeof file === 'string') {
      fs.open(file, 'r', function(err, fd) {
        if (err) return callback(err);
        self.writeFile(fd, callback);
      });
      return;
    }

    self.open(function(err, self) {
      if (err) return callback(err, self);

      fs.fstat(file, function(err, stats) {
        if (err) return callback(err, self);

        var offset = 0;
        var index = 0;

        // Write a chunk
        var writeChunk = function() {
          // Allocate the buffer
          var _buffer = Buffer$2.alloc(self.chunkSize);
          // Read the file
          fs.read(file, _buffer, 0, _buffer.length, offset, function(err, bytesRead, data) {
            if (err) return callback(err, self);

            offset = offset + bytesRead;

            // Create a new chunk for the data
            var chunk = new Chunk$1(self, { n: index++ }, self.writeConcern);
            chunk.write(data.slice(0, bytesRead), function(err, chunk) {
              if (err) return callback(err, self);

              chunk.save({}, function(err) {
                if (err) return callback(err, self);

                self.position = self.position + bytesRead;

                // Point to current chunk
                self.currentChunk = chunk;

                if (offset >= stats.size) {
                  fs.close(file, function(err) {
                    if (err) return callback(err);

                    self.close(function(err) {
                      if (err) return callback(err, self);
                      return callback(null, self);
                    });
                  });
                } else {
                  return browser$1.nextTick(writeChunk);
                }
              });
            });
          });
        };

        // Process the first write
        browser$1.nextTick(writeChunk);
      });
    });
  };

  /**
   * Saves this file to the database. This will overwrite the old entry if it
   * already exists. This will work properly only if mode was initialized to
   * "w" or "w+".
   *
   * @method
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.close = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeLegacyOperation$1(this.db.s.topology, close, [this, options, callback], {
      skipSessions: true
    });
  };

  var close = function(self, options, callback) {
    if (self.mode[0] === 'w') {
      // Set up options
      options = Object.assign({}, self.writeConcern, options);

      if (self.currentChunk != null && self.currentChunk.position > 0) {
        self.currentChunk.save({}, function(err) {
          if (err && typeof callback === 'function') return callback(err);

          self.collection(function(err, files) {
            if (err && typeof callback === 'function') return callback(err);

            // Build the mongo object
            if (self.uploadDate != null) {
              buildMongoObject(self, function(err, mongoObject) {
                if (err) {
                  if (typeof callback === 'function') return callback(err);
                  else throw err;
                }

                files.save(mongoObject, options, function(err) {
                  if (typeof callback === 'function') callback(err, mongoObject);
                });
              });
            } else {
              self.uploadDate = new Date();
              buildMongoObject(self, function(err, mongoObject) {
                if (err) {
                  if (typeof callback === 'function') return callback(err);
                  else throw err;
                }

                files.save(mongoObject, options, function(err) {
                  if (typeof callback === 'function') callback(err, mongoObject);
                });
              });
            }
          });
        });
      } else {
        self.collection(function(err, files) {
          if (err && typeof callback === 'function') return callback(err);

          self.uploadDate = new Date();
          buildMongoObject(self, function(err, mongoObject) {
            if (err) {
              if (typeof callback === 'function') return callback(err);
              else throw err;
            }

            files.save(mongoObject, options, function(err) {
              if (typeof callback === 'function') callback(err, mongoObject);
            });
          });
        });
      }
    } else if (self.mode[0] === 'r') {
      if (typeof callback === 'function') callback(null, null);
    } else {
      if (typeof callback === 'function')
        callback(MongoError.create({ message: f('Illegal mode %s', self.mode), driver: true }));
    }
  };

  /**
   * The collection callback format.
   * @callback GridStore~collectionCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Collection} collection The collection from the command execution.
   */

  /**
   * Retrieve this file's chunks collection.
   *
   * @method
   * @param {GridStore~collectionCallback} callback the command callback.
   * @return {Collection}
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.chunkCollection = function(callback) {
    if (typeof callback === 'function') return this.db.collection(this.root + '.chunks', callback);
    return this.db.collection(this.root + '.chunks');
  };

  /**
   * Deletes all the chunks of this file in the database.
   *
   * @method
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~resultCallback} [callback] the command callback.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.unlink = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeLegacyOperation$1(this.db.s.topology, unlink, [this, options, callback], {
      skipSessions: true
    });
  };

  var unlink = function(self, options, callback) {
    deleteChunks(self, function(err) {
      if (err !== null) {
        err.message = 'at deleteChunks: ' + err.message;
        return callback(err);
      }

      self.collection(function(err, collection) {
        if (err !== null) {
          err.message = 'at collection: ' + err.message;
          return callback(err);
        }

        collection.remove({ _id: self.fileId }, self.writeConcern, function(err) {
          callback(err, self);
        });
      });
    });
  };

  /**
   * Retrieves the file collection associated with this object.
   *
   * @method
   * @param {GridStore~collectionCallback} callback the command callback.
   * @return {Collection}
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.collection = function(callback) {
    if (typeof callback === 'function') this.db.collection(this.root + '.files', callback);
    return this.db.collection(this.root + '.files');
  };

  /**
   * The readlines callback format.
   * @callback GridStore~readlinesCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {string[]} strings The array of strings returned.
   */

  /**
   * Read the entire file as a list of strings splitting by the provided separator.
   *
   * @method
   * @param {string} [separator] The character to be recognized as the newline separator.
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~readlinesCallback} [callback] the command callback.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.readlines = function(separator, options, callback) {
    var args = Array.prototype.slice.call(arguments, 0);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    separator = args.length ? args.shift() : '\n';
    separator = separator || '\n';
    options = args.length ? args.shift() : {};

    return executeLegacyOperation$1(
      this.db.s.topology,
      readlines,
      [this, separator, options, callback],
      { skipSessions: true }
    );
  };

  var readlines = function(self, separator, options, callback) {
    self.read(function(err, data) {
      if (err) return callback(err);

      var items = data.toString().split(separator);
      items = items.length > 0 ? items.splice(0, items.length - 1) : [];
      for (var i = 0; i < items.length; i++) {
        items[i] = items[i] + separator;
      }

      callback(null, items);
    });
  };

  /**
   * Deletes all the chunks of this file in the database if mode was set to "w" or
   * "w+" and resets the read/write head to the initial position.
   *
   * @method
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.rewind = function(options, callback) {
    if (typeof options === 'function') (callback = options), (options = {});
    options = options || {};

    return executeLegacyOperation$1(this.db.s.topology, rewind, [this, options, callback], {
      skipSessions: true
    });
  };

  var rewind = function(self, options, callback) {
    if (self.currentChunk.chunkNumber !== 0) {
      if (self.mode[0] === 'w') {
        deleteChunks(self, function(err) {
          if (err) return callback(err);
          self.currentChunk = new Chunk$1(self, { n: 0 }, self.writeConcern);
          self.position = 0;
          callback(null, self);
        });
      } else {
        self.currentChunk(0, function(err, chunk) {
          if (err) return callback(err);
          self.currentChunk = chunk;
          self.currentChunk.rewind();
          self.position = 0;
          callback(null, self);
        });
      }
    } else {
      self.currentChunk.rewind();
      self.position = 0;
      callback(null, self);
    }
  };

  /**
   * The read callback format.
   * @callback GridStore~readCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {Buffer} data The data read from the GridStore object
   */

  /**
   * Retrieves the contents of this file and advances the read/write head. Works with Buffers only.
   *
   * There are 3 signatures for this method:
   *
   * (callback)
   * (length, callback)
   * (length, buffer, callback)
   *
   * @method
   * @param {number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.
   * @param {(string|Buffer)} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~readCallback} [callback] the command callback.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.read = function(length, buffer, options, callback) {
    var args = Array.prototype.slice.call(arguments, 0);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    length = args.length ? args.shift() : null;
    buffer = args.length ? args.shift() : null;
    options = args.length ? args.shift() : {};

    return executeLegacyOperation$1(
      this.db.s.topology,
      read,
      [this, length, buffer, options, callback],
      { skipSessions: true }
    );
  };

  var read = function(self, length, buffer, options, callback) {
    // The data is a c-terminated string and thus the length - 1
    var finalLength = length == null ? self.length - self.position : length;
    var finalBuffer = buffer == null ? Buffer$2.alloc(finalLength) : buffer;
    // Add a index to buffer to keep track of writing position or apply current index
    finalBuffer._index = buffer != null && buffer._index != null ? buffer._index : 0;

    if (self.currentChunk.length() - self.currentChunk.position + finalBuffer._index >= finalLength) {
      var slice = self.currentChunk.readSlice(finalLength - finalBuffer._index);
      // Copy content to final buffer
      slice.copy(finalBuffer, finalBuffer._index);
      // Update internal position
      self.position = self.position + finalBuffer.length;
      // Check if we don't have a file at all
      if (finalLength === 0 && finalBuffer.length === 0)
        return callback(MongoError.create({ message: 'File does not exist', driver: true }), null);
      // Else return data
      return callback(null, finalBuffer);
    }

    // Read the next chunk
    slice = self.currentChunk.readSlice(self.currentChunk.length() - self.currentChunk.position);
    // Copy content to final buffer
    slice.copy(finalBuffer, finalBuffer._index);
    // Update index position
    finalBuffer._index += slice.length;

    // Load next chunk and read more
    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {
      if (err) return callback(err);

      if (chunk.length() > 0) {
        self.currentChunk = chunk;
        self.read(length, finalBuffer, callback);
      } else {
        if (finalBuffer._index > 0) {
          callback(null, finalBuffer);
        } else {
          callback(
            MongoError.create({
              message: 'no chunks found for file, possibly corrupt',
              driver: true
            }),
            null
          );
        }
      }
    });
  };

  /**
   * The tell callback format.
   * @callback GridStore~tellCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {number} position The current read position in the GridStore.
   */

  /**
   * Retrieves the position of the read/write head of this file.
   *
   * @method
   * @param {number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.
   * @param {(string|Buffer)} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~tellCallback} [callback] the command callback.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.tell = function(callback) {
    var self = this;
    // We provided a callback leg
    if (typeof callback === 'function') return callback(null, this.position);
    // Return promise
    return new self.promiseLibrary(function(resolve) {
      resolve(self.position);
    });
  };

  /**
   * The tell callback format.
   * @callback GridStore~gridStoreCallback
   * @param {MongoError} error An error instance representing the error during the execution.
   * @param {GridStore} gridStore The gridStore.
   */

  /**
   * Moves the read/write head to a new location.
   *
   * There are 3 signatures for this method
   *
   * Seek Location Modes
   *  - **GridStore.IO_SEEK_SET**, **(default)** set the position from the start of the file.
   *  - **GridStore.IO_SEEK_CUR**, set the position from the current position in the file.
   *  - **GridStore.IO_SEEK_END**, set the position from the end of the file.
   *
   * @method
   * @param {number} [position] the position to seek to
   * @param {number} [seekLocation] seek mode. Use one of the Seek Location modes.
   * @param {object} [options] Optional settings
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~gridStoreCallback} [callback] the command callback.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.prototype.seek = function(position, seekLocation, options, callback) {
    var args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    seekLocation = args.length ? args.shift() : null;
    options = args.length ? args.shift() : {};

    return executeLegacyOperation$1(
      this.db.s.topology,
      seek,
      [this, position, seekLocation, options, callback],
      { skipSessions: true }
    );
  };

  var seek = function(self, position, seekLocation, options, callback) {
    // Seek only supports read mode
    if (self.mode !== 'r') {
      return callback(
        MongoError.create({ message: 'seek is only supported for mode r', driver: true })
      );
    }

    var seekLocationFinal = seekLocation == null ? GridStore.IO_SEEK_SET : seekLocation;
    var finalPosition = position;
    var targetPosition = 0;

    // Calculate the position
    if (seekLocationFinal === GridStore.IO_SEEK_CUR) {
      targetPosition = self.position + finalPosition;
    } else if (seekLocationFinal === GridStore.IO_SEEK_END) {
      targetPosition = self.length + finalPosition;
    } else {
      targetPosition = finalPosition;
    }

    // Get the chunk
    var newChunkNumber = Math.floor(targetPosition / self.chunkSize);
    var seekChunk = function() {
      nthChunk(self, newChunkNumber, function(err, chunk) {
        if (err) return callback(err, null);
        if (chunk == null) return callback(new Error('no chunk found'));

        // Set the current chunk
        self.currentChunk = chunk;
        self.position = targetPosition;
        self.currentChunk.position = self.position % self.chunkSize;
        callback(err, self);
      });
    };

    seekChunk();
  };

  /**
   * @ignore
   */
  var _open = function(self, options, callback) {
    var collection = self.collection();
    // Create the query
    var query =
      self.referenceBy === REFERENCE_BY_ID ? { _id: self.fileId } : { filename: self.filename };
    query = null == self.fileId && self.filename == null ? null : query;
    options.readPreference = self.readPreference;

    // Fetch the chunks
    if (query != null) {
      collection.findOne(query, options, function(err, doc) {
        if (err) {
          return error(err);
        }

        // Check if the collection for the files exists otherwise prepare the new one
        if (doc != null) {
          self.fileId = doc._id;
          // Prefer a new filename over the existing one if this is a write
          self.filename =
            self.mode === 'r' || self.filename === undefined ? doc.filename : self.filename;
          self.contentType = doc.contentType;
          self.internalChunkSize = doc.chunkSize;
          self.uploadDate = doc.uploadDate;
          self.aliases = doc.aliases;
          self.length = doc.length;
          self.metadata = doc.metadata;
          self.internalMd5 = doc.md5;
        } else if (self.mode !== 'r') {
          self.fileId = self.fileId == null ? new ObjectID$1() : self.fileId;
          self.contentType = GridStore.DEFAULT_CONTENT_TYPE;
          self.internalChunkSize =
            self.internalChunkSize == null ? Chunk$1.DEFAULT_CHUNK_SIZE : self.internalChunkSize;
          self.length = 0;
        } else {
          self.length = 0;
          var txtId = self.fileId._bsontype === 'ObjectID' ? self.fileId.toHexString() : self.fileId;
          return error(
            MongoError.create({
              message: f(
                'file with id %s not opened for writing',
                self.referenceBy === REFERENCE_BY_ID ? txtId : self.filename
              ),
              driver: true
            }));
        }

        // Process the mode of the object
        if (self.mode === 'r') {
          nthChunk(self, 0, options, function(err, chunk) {
            if (err) return error(err);
            self.currentChunk = chunk;
            self.position = 0;
            callback(null, self);
          });
        } else if (self.mode === 'w' && doc) {
          // Delete any existing chunks
          deleteChunks(self, options, function(err) {
            if (err) return error(err);
            self.currentChunk = new Chunk$1(self, { n: 0 }, self.writeConcern);
            self.contentType =
              self.options['content_type'] == null ? self.contentType : self.options['content_type'];
            self.internalChunkSize =
              self.options['chunk_size'] == null
                ? self.internalChunkSize
                : self.options['chunk_size'];
            self.metadata =
              self.options['metadata'] == null ? self.metadata : self.options['metadata'];
            self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
            self.position = 0;
            callback(null, self);
          });
        } else if (self.mode === 'w') {
          self.currentChunk = new Chunk$1(self, { n: 0 }, self.writeConcern);
          self.contentType =
            self.options['content_type'] == null ? self.contentType : self.options['content_type'];
          self.internalChunkSize =
            self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];
          self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
          self.position = 0;
          callback(null, self);
        } else if (self.mode === 'w+') {
          nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {
            if (err) return error(err);
            // Set the current chunk
            self.currentChunk = chunk == null ? new Chunk$1(self, { n: 0 }, self.writeConcern) : chunk;
            self.currentChunk.position = self.currentChunk.data.length();
            self.metadata =
              self.options['metadata'] == null ? self.metadata : self.options['metadata'];
            self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
            self.position = self.length;
            callback(null, self);
          });
        }
      });
    } else {
      // Write only mode
      self.fileId = null == self.fileId ? new ObjectID$1() : self.fileId;
      self.contentType = GridStore.DEFAULT_CONTENT_TYPE;
      self.internalChunkSize =
        self.internalChunkSize == null ? Chunk$1.DEFAULT_CHUNK_SIZE : self.internalChunkSize;
      self.length = 0;

      // No file exists set up write mode
      if (self.mode === 'w') {
        // Delete any existing chunks
        deleteChunks(self, options, function(err) {
          if (err) return error(err);
          self.currentChunk = new Chunk$1(self, { n: 0 }, self.writeConcern);
          self.contentType =
            self.options['content_type'] == null ? self.contentType : self.options['content_type'];
          self.internalChunkSize =
            self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];
          self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
          self.position = 0;
          callback(null, self);
        });
      } else if (self.mode === 'w+') {
        nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {
          if (err) return error(err);
          // Set the current chunk
          self.currentChunk = chunk == null ? new Chunk$1(self, { n: 0 }, self.writeConcern) : chunk;
          self.currentChunk.position = self.currentChunk.data.length();
          self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];
          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];
          self.position = self.length;
          callback(null, self);
        });
      }
    }

    // only pass error to callback once
    function error(err) {
      if (error.err) return;
      callback((error.err = err));
    }
  };

  /**
   * @ignore
   */
  var writeBuffer = function(self, buffer, close, callback) {
    if (typeof close === 'function') {
      callback = close;
      close = null;
    }
    var finalClose = typeof close === 'boolean' ? close : false;

    if (self.mode !== 'w') {
      callback(
        MongoError.create({
          message: f(
            'file with id %s not opened for writing',
            self.referenceBy === REFERENCE_BY_ID ? self.referenceBy : self.filename
          ),
          driver: true
        }),
        null
      );
    } else {
      if (self.currentChunk.position + buffer.length >= self.chunkSize) {
        // Write out the current Chunk and then keep writing until we have less data left than a chunkSize left
        // to a new chunk (recursively)
        var previousChunkNumber = self.currentChunk.chunkNumber;
        var leftOverDataSize = self.chunkSize - self.currentChunk.position;
        var firstChunkData = buffer.slice(0, leftOverDataSize);
        var leftOverData = buffer.slice(leftOverDataSize);
        // A list of chunks to write out
        var chunksToWrite = [self.currentChunk.write(firstChunkData)];
        // If we have more data left than the chunk size let's keep writing new chunks
        while (leftOverData.length >= self.chunkSize) {
          // Create a new chunk and write to it
          var newChunk = new Chunk$1(self, { n: previousChunkNumber + 1 }, self.writeConcern);
          firstChunkData = leftOverData.slice(0, self.chunkSize);
          leftOverData = leftOverData.slice(self.chunkSize);
          // Update chunk number
          previousChunkNumber = previousChunkNumber + 1;
          // Write data
          newChunk.write(firstChunkData);
          // Push chunk to save list
          chunksToWrite.push(newChunk);
        }

        // Set current chunk with remaining data
        self.currentChunk = new Chunk$1(self, { n: previousChunkNumber + 1 }, self.writeConcern);
        // If we have left over data write it
        if (leftOverData.length > 0) self.currentChunk.write(leftOverData);

        // Update the position for the gridstore
        self.position = self.position + buffer.length;
        // Total number of chunks to write
        var numberOfChunksToWrite = chunksToWrite.length;

        for (var i = 0; i < chunksToWrite.length; i++) {
          chunksToWrite[i].save({}, function(err) {
            if (err) return callback(err);

            numberOfChunksToWrite = numberOfChunksToWrite - 1;

            if (numberOfChunksToWrite <= 0) {
              // We care closing the file before returning
              if (finalClose) {
                return self.close(function(err) {
                  callback(err, self);
                });
              }

              // Return normally
              return callback(null, self);
            }
          });
        }
      } else {
        // Update the position for the gridstore
        self.position = self.position + buffer.length;
        // We have less data than the chunk size just write it and callback
        self.currentChunk.write(buffer);
        // We care closing the file before returning
        if (finalClose) {
          return self.close(function(err) {
            callback(err, self);
          });
        }
        // Return normally
        return callback(null, self);
      }
    }
  };

  /**
   * Creates a mongoDB object representation of this object.
   *
   *        <pre><code>
   *        {
   *          '_id' : , // {number} id for this file
   *          'filename' : , // {string} name for this file
   *          'contentType' : , // {string} mime type for this file
   *          'length' : , // {number} size of this file?
   *          'chunksize' : , // {number} chunk size used by this file
   *          'uploadDate' : , // {Date}
   *          'aliases' : , // {array of string}
   *          'metadata' : , // {string}
   *        }
   *        </code></pre>
   *
   * @ignore
   */
  var buildMongoObject = function(self, callback) {
    // Calcuate the length
    var mongoObject = {
      _id: self.fileId,
      filename: self.filename,
      contentType: self.contentType,
      length: self.position ? self.position : 0,
      chunkSize: self.chunkSize,
      uploadDate: self.uploadDate,
      aliases: self.aliases,
      metadata: self.metadata
    };

    var md5Command = { filemd5: self.fileId, root: self.root };
    self.db.command(md5Command, function(err, results) {
      if (err) return callback(err);

      mongoObject.md5 = results.md5;
      callback(null, mongoObject);
    });
  };

  /**
   * Gets the nth chunk of this file.
   * @ignore
   */
  var nthChunk = function(self, chunkNumber, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options = options || self.writeConcern;
    options.readPreference = self.readPreference;
    // Get the nth chunk
    self
      .chunkCollection()
      .findOne({ files_id: self.fileId, n: chunkNumber }, options, function(err, chunk) {
        if (err) return callback(err);

        var finalChunk = chunk == null ? {} : chunk;
        callback(null, new Chunk$1(self, finalChunk, self.writeConcern));
      });
  };

  /**
   * @ignore
   */
  var lastChunkNumber = function(self) {
    return Math.floor((self.length ? self.length - 1 : 0) / self.chunkSize);
  };

  /**
   * Deletes all the chunks of this file in the database.
   *
   * @ignore
   */
  var deleteChunks = function(self, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options = options || self.writeConcern;

    if (self.fileId != null) {
      self.chunkCollection().remove({ files_id: self.fileId }, options, function(err) {
        if (err) return callback(err, false);
        callback(null, true);
      });
    } else {
      callback(null, true);
    }
  };

  /**
   * The collection to be used for holding the files and chunks collection.
   *
   * @classconstant DEFAULT_ROOT_COLLECTION
   */
  GridStore.DEFAULT_ROOT_COLLECTION = 'fs';

  /**
   * Default file mime type
   *
   * @classconstant DEFAULT_CONTENT_TYPE
   */
  GridStore.DEFAULT_CONTENT_TYPE = 'binary/octet-stream';

  /**
   * Seek mode where the given length is absolute.
   *
   * @classconstant IO_SEEK_SET
   */
  GridStore.IO_SEEK_SET = 0;

  /**
   * Seek mode where the given length is an offset to the current read/write head.
   *
   * @classconstant IO_SEEK_CUR
   */
  GridStore.IO_SEEK_CUR = 1;

  /**
   * Seek mode where the given length is an offset to the end of the file.
   *
   * @classconstant IO_SEEK_END
   */
  GridStore.IO_SEEK_END = 2;

  /**
   * Checks if a file exists in the database.
   *
   * @method
   * @static
   * @param {Db} db the database to query.
   * @param {string} name The name of the file to look for.
   * @param {string} [rootCollection] The root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~resultCallback} [callback] result from exists.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.exist = function(db, fileIdObject, rootCollection, options, callback) {
    var args = Array.prototype.slice.call(arguments, 2);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    rootCollection = args.length ? args.shift() : null;
    options = args.length ? args.shift() : {};
    options = options || {};

    return executeLegacyOperation$1(
      db.s.topology,
      exists,
      [db, fileIdObject, rootCollection, options, callback],
      { skipSessions: true }
    );
  };

  var exists = function(db, fileIdObject, rootCollection, options, callback) {
    // Establish read preference
    var readPreference = options.readPreference || ReadPreference.PRIMARY;
    // Fetch collection
    var rootCollectionFinal =
      rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;
    db.collection(rootCollectionFinal + '.files', function(err, collection) {
      if (err) return callback(err);

      // Build query
      var query =
        typeof fileIdObject === 'string' ||
        Object.prototype.toString.call(fileIdObject) === '[object RegExp]'
          ? { filename: fileIdObject }
          : { _id: fileIdObject }; // Attempt to locate file

      // We have a specific query
      if (
        fileIdObject != null &&
        typeof fileIdObject === 'object' &&
        Object.prototype.toString.call(fileIdObject) !== '[object RegExp]'
      ) {
        query = fileIdObject;
      }

      // Check if the entry exists
      collection.findOne(query, { readPreference: readPreference }, function(err, item) {
        if (err) return callback(err);
        callback(null, item == null ? false : true);
      });
    });
  };

  /**
   * Gets the list of files stored in the GridFS.
   *
   * @method
   * @static
   * @param {Db} db the database to query.
   * @param {string} [rootCollection] The root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~resultCallback} [callback] result from exists.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.list = function(db, rootCollection, options, callback) {
    var args = Array.prototype.slice.call(arguments, 1);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    rootCollection = args.length ? args.shift() : null;
    options = args.length ? args.shift() : {};
    options = options || {};

    return executeLegacyOperation$1(db.s.topology, list, [db, rootCollection, options, callback], {
      skipSessions: true
    });
  };

  var list = function(db, rootCollection, options, callback) {
    // Ensure we have correct values
    if (rootCollection != null && typeof rootCollection === 'object') {
      options = rootCollection;
      rootCollection = null;
    }

    // Establish read preference
    var readPreference = options.readPreference || ReadPreference.primary;
    // Check if we are returning by id not filename
    var byId = options['id'] != null ? options['id'] : false;
    // Fetch item
    var rootCollectionFinal =
      rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;
    var items = [];
    db.collection(rootCollectionFinal + '.files', function(err, collection) {
      if (err) return callback(err);

      collection.find({}, { readPreference: readPreference }, function(err, cursor) {
        if (err) return callback(err);

        cursor.each(function(err, item) {
          if (item != null) {
            items.push(byId ? item._id : item.filename);
          } else {
            callback(err, items);
          }
        });
      });
    });
  };

  /**
   * Reads the contents of a file.
   *
   * This method has the following signatures
   *
   * (db, name, callback)
   * (db, name, length, callback)
   * (db, name, length, offset, callback)
   * (db, name, length, offset, options, callback)
   *
   * @method
   * @static
   * @param {Db} db the database to query.
   * @param {string} name The name of the file.
   * @param {number} [length] The size of data to read.
   * @param {number} [offset] The offset from the head of the file of which to start reading from.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~readCallback} [callback] the command callback.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.read = function(db, name, length, offset, options, callback) {
    var args = Array.prototype.slice.call(arguments, 2);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    length = args.length ? args.shift() : null;
    offset = args.length ? args.shift() : null;
    options = args.length ? args.shift() : null;
    options = options || {};

    return executeLegacyOperation$1(
      db.s.topology,
      readStatic,
      [db, name, length, offset, options, callback],
      { skipSessions: true }
    );
  };

  var readStatic = function(db, name, length, offset, options, callback) {
    new GridStore(db, name, 'r', options).open(function(err, gridStore) {
      if (err) return callback(err);
      // Make sure we are not reading out of bounds
      if (offset && offset >= gridStore.length)
        return callback('offset larger than size of file', null);
      if (length && length > gridStore.length)
        return callback('length is larger than the size of the file', null);
      if (offset && length && offset + length > gridStore.length)
        return callback('offset and length is larger than the size of the file', null);

      if (offset != null) {
        gridStore.seek(offset, function(err, gridStore) {
          if (err) return callback(err);
          gridStore.read(length, callback);
        });
      } else {
        gridStore.read(length, callback);
      }
    });
  };

  /**
   * Read the entire file as a list of strings splitting by the provided separator.
   *
   * @method
   * @static
   * @param {Db} db the database to query.
   * @param {(String|object)} name the name of the file.
   * @param {string} [separator] The character to be recognized as the newline separator.
   * @param {object} [options] Optional settings.
   * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
   * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~readlinesCallback} [callback] the command callback.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.readlines = function(db, name, separator, options, callback) {
    var args = Array.prototype.slice.call(arguments, 2);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    separator = args.length ? args.shift() : null;
    options = args.length ? args.shift() : null;
    options = options || {};

    return executeLegacyOperation$1(
      db.s.topology,
      readlinesStatic,
      [db, name, separator, options, callback],
      { skipSessions: true }
    );
  };

  var readlinesStatic = function(db, name, separator, options, callback) {
    var finalSeperator = separator == null ? '\n' : separator;
    new GridStore(db, name, 'r', options).open(function(err, gridStore) {
      if (err) return callback(err);
      gridStore.readlines(finalSeperator, callback);
    });
  };

  /**
   * Deletes the chunks and metadata information of a file from GridFS.
   *
   * @method
   * @static
   * @param {Db} db The database to query.
   * @param {(string|array)} names The name/names of the files to delete.
   * @param {object} [options] Optional settings.
   * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible
   * @param {ClientSession} [options.session] optional session to use for this operation
   * @param {GridStore~resultCallback} [callback] the command callback.
   * @return {Promise} returns Promise if no callback passed
   * @deprecated Use GridFSBucket API instead
   */
  GridStore.unlink = function(db, names, options, callback) {
    var args = Array.prototype.slice.call(arguments, 2);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    options = args.length ? args.shift() : {};
    options = options || {};

    return executeLegacyOperation$1(db.s.topology, unlinkStatic, [this, db, names, options, callback], {
      skipSessions: true
    });
  };

  var unlinkStatic = function(self, db, names, options, callback) {
    // Get the write concern
    var writeConcern = _getWriteConcern(db, options);

    // List of names
    if (names.constructor === Array) {
      var tc = 0;
      for (var i = 0; i < names.length; i++) {
        ++tc;
        GridStore.unlink(db, names[i], options, function() {
          if (--tc === 0) {
            callback(null, self);
          }
        });
      }
    } else {
      new GridStore(db, names, 'w', options).open(function(err, gridStore) {
        if (err) return callback(err);
        deleteChunks(gridStore, function(err) {
          if (err) return callback(err);
          gridStore.collection(function(err, collection) {
            if (err) return callback(err);
            collection.remove({ _id: gridStore.fileId }, writeConcern, function(err) {
              callback(err, self);
            });
          });
        });
      });
    }
  };

  /**
   *  @ignore
   */
  var _writeNormal = function(self, data, close, options, callback) {
    // If we have a buffer write it using the writeBuffer method
    if (Buffer$2.isBuffer(data)) {
      return writeBuffer(self, data, close, callback);
    } else {
      return writeBuffer(self, Buffer$2.from(data, 'binary'), close, callback);
    }
  };

  /**
   * @ignore
   */
  var _setWriteConcernHash = function(options) {
    const baseOptions = Object.assign(options, options.writeConcern);
    var finalOptions = {};
    if (baseOptions.w != null) finalOptions.w = baseOptions.w;
    if (baseOptions.journal === true) finalOptions.j = baseOptions.journal;
    if (baseOptions.j === true) finalOptions.j = baseOptions.j;
    if (baseOptions.fsync === true) finalOptions.fsync = baseOptions.fsync;
    if (baseOptions.wtimeout != null) finalOptions.wtimeout = baseOptions.wtimeout;
    return finalOptions;
  };

  /**
   * @ignore
   */
  var _getWriteConcern = function(self, options) {
    // Final options
    var finalOptions = { w: 1 };
    options = options || {};

    // Local options verification
    if (
      options.writeConcern != null ||
      options.w != null ||
      typeof options.j === 'boolean' ||
      typeof options.journal === 'boolean' ||
      typeof options.fsync === 'boolean'
    ) {
      finalOptions = _setWriteConcernHash(options);
    } else if (options.safe != null && typeof options.safe === 'object') {
      finalOptions = _setWriteConcernHash(options.safe);
    } else if (typeof options.safe === 'boolean') {
      finalOptions = { w: options.safe ? 1 : 0 };
    } else if (
      self.options.writeConcern != null ||
      self.options.w != null ||
      typeof self.options.j === 'boolean' ||
      typeof self.options.journal === 'boolean' ||
      typeof self.options.fsync === 'boolean'
    ) {
      finalOptions = _setWriteConcernHash(self.options);
    } else if (
      self.safe &&
      (self.safe.w != null ||
        typeof self.safe.j === 'boolean' ||
        typeof self.safe.journal === 'boolean' ||
        typeof self.safe.fsync === 'boolean')
    ) {
      finalOptions = _setWriteConcernHash(self.safe);
    } else if (typeof self.safe === 'boolean') {
      finalOptions = { w: self.safe ? 1 : 0 };
    }

    // Ensure we don't have an invalid combination of write concerns
    if (
      finalOptions.w < 1 &&
      (finalOptions.journal === true || finalOptions.j === true || finalOptions.fsync === true)
    )
      throw MongoError.create({
        message: 'No acknowledgement using w < 1 cannot be combined with journal:true or fsync:true',
        driver: true
      });

    // Return the options
    return finalOptions;
  };

  /**
   * Create a new GridStoreStream instance (INTERNAL TYPE, do not instantiate directly)
   *
   * @class
   * @extends external:Duplex
   * @return {GridStoreStream} a GridStoreStream instance.
   * @deprecated Use GridFSBucket API instead
   */
  var GridStoreStream = function(gs) {
    // Initialize the duplex stream
    Duplex.call(this);

    // Get the gridstore
    this.gs = gs;

    // End called
    this.endCalled = false;

    // If we have a seek
    this.totalBytesToRead = this.gs.length - this.gs.position;
    this.seekPosition = this.gs.position;
  };

  //
  // Inherit duplex
  inherits(GridStoreStream, Duplex);

  GridStoreStream.prototype._pipe = GridStoreStream.prototype.pipe;

  // Set up override
  GridStoreStream.prototype.pipe = function(destination) {
    var self = this;

    // Only open gridstore if not already open
    if (!self.gs.isOpen) {
      self.gs.open(function(err) {
        if (err) return self.emit('error', err);
        self.totalBytesToRead = self.gs.length - self.gs.position;
        self._pipe.apply(self, [destination]);
      });
    } else {
      self.totalBytesToRead = self.gs.length - self.gs.position;
      self._pipe.apply(self, [destination]);
    }

    return destination;
  };

  // Called by stream
  GridStoreStream.prototype._read = function() {
    var self = this;

    var read = function() {
      // Read data
      self.gs.read(length, function(err, buffer) {
        if (err && !self.endCalled) return self.emit('error', err);

        // Stream is closed
        if (self.endCalled || buffer == null) return self.push(null);
        // Remove bytes read
        if (buffer.length <= self.totalBytesToRead) {
          self.totalBytesToRead = self.totalBytesToRead - buffer.length;
          self.push(buffer);
        } else if (buffer.length > self.totalBytesToRead) {
          self.totalBytesToRead = self.totalBytesToRead - buffer._index;
          self.push(buffer.slice(0, buffer._index));
        }

        // Finished reading
        if (self.totalBytesToRead <= 0) {
          self.endCalled = true;
        }
      });
    };

    // Set read length
    var length =
      self.gs.length < self.gs.chunkSize ? self.gs.length - self.seekPosition : self.gs.chunkSize;
    if (!self.gs.isOpen) {
      self.gs.open(function(err) {
        self.totalBytesToRead = self.gs.length - self.gs.position;
        if (err) return self.emit('error', err);
        read();
      });
    } else {
      read();
    }
  };

  GridStoreStream.prototype.destroy = function() {
    this.pause();
    this.endCalled = true;
    this.gs.close();
    this.emit('end');
  };

  GridStoreStream.prototype.write = function(chunk) {
    var self = this;
    if (self.endCalled)
      return self.emit(
        'error',
        MongoError.create({ message: 'attempting to write to stream after end called', driver: true })
      );
    // Do we have to open the gridstore
    if (!self.gs.isOpen) {
      self.gs.open(function() {
        self.gs.isOpen = true;
        self.gs.write(chunk, function() {
          browser$1.nextTick(function() {
            self.emit('drain');
          });
        });
      });
      return false;
    } else {
      self.gs.write(chunk, function() {
        self.emit('drain');
      });
      return true;
    }
  };

  GridStoreStream.prototype.end = function(chunk, encoding, callback) {
    var self = this;
    var args = Array.prototype.slice.call(arguments, 0);
    callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
    chunk = args.length ? args.shift() : null;
    encoding = args.length ? args.shift() : null;
    self.endCalled = true;

    if (chunk) {
      self.gs.write(chunk, function() {
        self.gs.close(function() {
          if (typeof callback === 'function') callback();
          self.emit('end');
        });
      });
    }

    self.gs.close(function() {
      if (typeof callback === 'function') callback();
      self.emit('end');
    });
  };

  /**
   * The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.
   * @function external:Duplex#read
   * @param {number} size Optional argument to specify how much data to read.
   * @return {(String | Buffer | null)}
   */

  /**
   * Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.
   * @function external:Duplex#setEncoding
   * @param {string} encoding The encoding to use.
   * @return {null}
   */

  /**
   * This method will cause the readable stream to resume emitting data events.
   * @function external:Duplex#resume
   * @return {null}
   */

  /**
   * This method will cause a stream in flowing-mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.
   * @function external:Duplex#pause
   * @return {null}
   */

  /**
   * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.
   * @function external:Duplex#pipe
   * @param {Writable} destination The destination for writing data
   * @param {object} [options] Pipe options
   * @return {null}
   */

  /**
   * This method will remove the hooks set up for a previous pipe() call.
   * @function external:Duplex#unpipe
   * @param {Writable} [destination] The destination for writing data
   * @return {null}
   */

  /**
   * This is useful in certain cases where a stream is being consumed by a parser, which needs to "un-consume" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.
   * @function external:Duplex#unshift
   * @param {(Buffer|string)} chunk Chunk of data to unshift onto the read queue.
   * @return {null}
   */

  /**
   * Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See "Compatibility" below for more information.)
   * @function external:Duplex#wrap
   * @param {Stream} stream An "old style" readable stream.
   * @return {null}
   */

  /**
   * This method writes some data to the underlying system, and calls the supplied callback once the data has been fully handled.
   * @function external:Duplex#write
   * @param {(string|Buffer)} chunk The data to write
   * @param {string} encoding The encoding, if chunk is a String
   * @param {function} callback Callback for when this chunk of data is flushed
   * @return {boolean}
   */

  /**
   * Call this method when no more data will be written to the stream. If supplied, the callback is attached as a listener on the finish event.
   * @function external:Duplex#end
   * @param {(string|Buffer)} chunk The data to write
   * @param {string} encoding The encoding, if chunk is a String
   * @param {function} callback Callback for when this chunk of data is flushed
   * @return {null}
   */

  /**
   * GridStoreStream stream data event, fired for each document in the cursor.
   *
   * @event GridStoreStream#data
   * @type {object}
   */

  /**
   * GridStoreStream stream end event
   *
   * @event GridStoreStream#end
   * @type {null}
   */

  /**
   * GridStoreStream stream close event
   *
   * @event GridStoreStream#close
   * @type {null}
   */

  /**
   * GridStoreStream stream readable event
   *
   * @event GridStoreStream#readable
   * @type {null}
   */

  /**
   * GridStoreStream stream drain event
   *
   * @event GridStoreStream#drain
   * @type {null}
   */

  /**
   * GridStoreStream stream finish event
   *
   * @event GridStoreStream#finish
   * @type {null}
   */

  /**
   * GridStoreStream stream pipe event
   *
   * @event GridStoreStream#pipe
   * @type {null}
   */

  /**
   * GridStoreStream stream unpipe event
   *
   * @event GridStoreStream#unpipe
   * @type {null}
   */

  /**
   * GridStoreStream stream error event
   *
   * @event GridStoreStream#error
   * @type {null}
   */

  /**
   * @ignore
   */
  module.exports = GridStore;

  var grid_store = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var Binary = core.BSON.Binary,
    ObjectID = core.BSON.ObjectID;

  var Buffer$1 = safeBuffer.Buffer;

  /**
   * Class for representing a single chunk in GridFS.
   *
   * @class
   *
   * @param file {GridStore} The {@link GridStore} object holding this chunk.
   * @param mongoObject {object} The mongo object representation of this chunk.
   *
   * @throws Error when the type of data field for {@link mongoObject} is not
   *     supported. Currently supported types for data field are instances of
   *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}
   *     from the bson module
   *
   * @see Chunk#buildMongoObject
   */
  var Chunk = function(file, mongoObject, writeConcern) {
    if (!(this instanceof Chunk)) return new Chunk(file, mongoObject);

    this.file = file;
    var mongoObjectFinal = mongoObject == null ? {} : mongoObject;
    this.writeConcern = writeConcern || { w: 1 };
    this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;
    this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;
    this.data = new Binary();

    if (typeof mongoObjectFinal.data === 'string') {
      var buffer = Buffer$1.alloc(mongoObjectFinal.data.length);
      buffer.write(mongoObjectFinal.data, 0, mongoObjectFinal.data.length, 'binary');
      this.data = new Binary(buffer);
    } else if (Array.isArray(mongoObjectFinal.data)) {
      buffer = Buffer$1.alloc(mongoObjectFinal.data.length);
      var data = mongoObjectFinal.data.join('');
      buffer.write(data, 0, data.length, 'binary');
      this.data = new Binary(buffer);
    } else if (mongoObjectFinal.data && mongoObjectFinal.data._bsontype === 'Binary') {
      this.data = mongoObjectFinal.data;
    } else if (!Buffer$1.isBuffer(mongoObjectFinal.data) && !(mongoObjectFinal.data == null)) {
      throw Error('Illegal chunk format');
    }

    // Update position
    this.internalPosition = 0;
  };

  /**
   * Writes a data to this object and advance the read/write head.
   *
   * @param data {string} the data to write
   * @param callback {function(*, GridStore)} This will be called after executing
   *     this method. The first parameter will contain null and the second one
   *     will contain a reference to this object.
   */
  Chunk.prototype.write = function(data, callback) {
    this.data.write(data, this.internalPosition, data.length, 'binary');
    this.internalPosition = this.data.length();
    if (callback != null) return callback(null, this);
    return this;
  };

  /**
   * Reads data and advances the read/write head.
   *
   * @param length {number} The length of data to read.
   *
   * @return {string} The data read if the given length will not exceed the end of
   *     the chunk. Returns an empty String otherwise.
   */
  Chunk.prototype.read = function(length) {
    // Default to full read if no index defined
    length = length == null || length === 0 ? this.length() : length;

    if (this.length() - this.internalPosition + 1 >= length) {
      var data = this.data.read(this.internalPosition, length);
      this.internalPosition = this.internalPosition + length;
      return data;
    } else {
      return '';
    }
  };

  Chunk.prototype.readSlice = function(length) {
    if (this.length() - this.internalPosition >= length) {
      var data = null;
      if (this.data.buffer != null) {
        //Pure BSON
        data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);
      } else {
        //Native BSON
        data = Buffer$1.alloc(length);
        length = this.data.readInto(data, this.internalPosition);
      }
      this.internalPosition = this.internalPosition + length;
      return data;
    } else {
      return null;
    }
  };

  /**
   * Checks if the read/write head is at the end.
   *
   * @return {boolean} Whether the read/write head has reached the end of this
   *     chunk.
   */
  Chunk.prototype.eof = function() {
    return this.internalPosition === this.length() ? true : false;
  };

  /**
   * Reads one character from the data of this chunk and advances the read/write
   * head.
   *
   * @return {string} a single character data read if the the read/write head is
   *     not at the end of the chunk. Returns an empty String otherwise.
   */
  Chunk.prototype.getc = function() {
    return this.read(1);
  };

  /**
   * Clears the contents of the data in this chunk and resets the read/write head
   * to the initial position.
   */
  Chunk.prototype.rewind = function() {
    this.internalPosition = 0;
    this.data = new Binary();
  };

  /**
   * Saves this chunk to the database. Also overwrites existing entries having the
   * same id as this chunk.
   *
   * @param callback {function(*, GridStore)} This will be called after executing
   *     this method. The first parameter will contain null and the second one
   *     will contain a reference to this object.
   */
  Chunk.prototype.save = function(options, callback) {
    var self = this;
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    self.file.chunkCollection(function(err, collection) {
      if (err) return callback(err);

      // Merge the options
      var writeOptions = { upsert: true };
      for (var name in options) writeOptions[name] = options[name];
      for (name in self.writeConcern) writeOptions[name] = self.writeConcern[name];

      if (self.data.length() > 0) {
        self.buildMongoObject(function(mongoObject) {
          for (var name in self.writeConcern) {
            self.writeConcern[name];
          }

          collection.replaceOne({ _id: self.objectId }, mongoObject, writeOptions, function(err) {
            callback(err, self);
          });
        });
      } else {
        callback(null, self);
      }
      // });
    });
  };

  /**
   * Creates a mongoDB object representation of this chunk.
   *
   * @param callback {function(Object)} This will be called after executing this
   *     method. The object will be passed to the first parameter and will have
   *     the structure:
   *
   *        <pre><code>
   *        {
   *          '_id' : , // {number} id for this chunk
   *          'files_id' : , // {number} foreign key to the file collection
   *          'n' : , // {number} chunk number
   *          'data' : , // {bson#Binary} the chunk data itself
   *        }
   *        </code></pre>
   *
   * @see <a href="http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}">MongoDB GridFS Chunk Object Structure</a>
   */
  Chunk.prototype.buildMongoObject = function(callback) {
    var mongoObject = {
      files_id: this.file.fileId,
      n: this.chunkNumber,
      data: this.data
    };
    // If we are saving using a specific ObjectId
    if (this.objectId != null) mongoObject._id = this.objectId;

    callback(mongoObject);
  };

  /**
   * @return {number} the length of the data
   */
  Chunk.prototype.length = function() {
    return this.data.length();
  };

  /**
   * The position of the read/write head
   * @name position
   * @lends Chunk#
   * @field
   */
  Object.defineProperty(Chunk.prototype, 'position', {
    enumerable: true,
    get: function() {
      return this.internalPosition;
    },
    set: function(value) {
      this.internalPosition = value;
    }
  });

  /**
   * The default chunk size
   * @constant
   */
  Chunk.DEFAULT_CHUNK_SIZE = 1024 * 255;

  var chunk = Chunk;

  var stream = require('stream'),
    util = require('util');

  module.exports = GridFSBucketReadStream$1;

  /**
   * A readable stream that enables you to read buffers from GridFS.
   *
   * Do not instantiate this class directly. Use `openDownloadStream()` instead.
   *
   * @class
   * @extends external:Readable
   * @param {Collection} chunks Handle for chunks collection
   * @param {Collection} files Handle for files collection
   * @param {Object} readPreference The read preference to use
   * @param {Object} filter The query to use to find the file document
   * @param {Object} [options] Optional settings.
   * @param {Number} [options.sort] Optional sort for the file find query
   * @param {Number} [options.skip] Optional skip for the file find query
   * @param {Number} [options.start] Optional 0-based offset in bytes to start streaming from
   * @param {Number} [options.end] Optional 0-based offset in bytes to stop streaming before
   * @fires GridFSBucketReadStream#error
   * @fires GridFSBucketReadStream#file
   */
  function GridFSBucketReadStream$1(chunks, files, readPreference, filter, options) {
    this.s = {
      bytesRead: 0,
      chunks: chunks,
      cursor: null,
      expected: 0,
      files: files,
      filter: filter,
      init: false,
      expectedEnd: 0,
      file: null,
      options: options,
      readPreference: readPreference
    };

    stream.Readable.call(this);
  }

  util.inherits(GridFSBucketReadStream$1, stream.Readable);

  /**
   * An error occurred
   *
   * @event GridFSBucketReadStream#error
   * @type {Error}
   */

  /**
   * Fires when the stream loaded the file document corresponding to the
   * provided id.
   *
   * @event GridFSBucketReadStream#file
   * @type {object}
   */

  /**
   * Emitted when a chunk of data is available to be consumed.
   *
   * @event GridFSBucketReadStream#data
   * @type {object}
   */

  /**
   * Fired when the stream is exhausted (no more data events).
   *
   * @event GridFSBucketReadStream#end
   * @type {object}
   */

  /**
   * Fired when the stream is exhausted and the underlying cursor is killed
   *
   * @event GridFSBucketReadStream#close
   * @type {object}
   */

  /**
   * Reads from the cursor and pushes to the stream.
   * Private Impl, do not call directly
   * @ignore
   * @method
   */

  GridFSBucketReadStream$1.prototype._read = function() {
    var _this = this;
    if (this.destroyed) {
      return;
    }

    waitForFile(_this, function() {
      doRead(_this);
    });
  };

  /**
   * Sets the 0-based offset in bytes to start streaming from. Throws
   * an error if this stream has entered flowing mode
   * (e.g. if you've already called `on('data')`)
   * @method
   * @param {Number} start Offset in bytes to start reading at
   * @return {GridFSBucketReadStream} Reference to Self
   */

  GridFSBucketReadStream$1.prototype.start = function(start) {
    throwIfInitialized(this);
    this.s.options.start = start;
    return this;
  };

  /**
   * Sets the 0-based offset in bytes to start streaming from. Throws
   * an error if this stream has entered flowing mode
   * (e.g. if you've already called `on('data')`)
   * @method
   * @param {Number} end Offset in bytes to stop reading at
   * @return {GridFSBucketReadStream} Reference to self
   */

  GridFSBucketReadStream$1.prototype.end = function(end) {
    throwIfInitialized(this);
    this.s.options.end = end;
    return this;
  };

  /**
   * Marks this stream as aborted (will never push another `data` event)
   * and kills the underlying cursor. Will emit the 'end' event, and then
   * the 'close' event once the cursor is successfully killed.
   *
   * @method
   * @param {GridFSBucket~errorCallback} [callback] called when the cursor is successfully closed or an error occurred.
   * @fires GridFSBucketWriteStream#close
   * @fires GridFSBucketWriteStream#end
   */

  GridFSBucketReadStream$1.prototype.abort = function(callback) {
    var _this = this;
    this.push(null);
    this.destroyed = true;
    if (this.s.cursor) {
      this.s.cursor.close(function(error) {
        _this.emit('close');
        callback && callback(error);
      });
    } else {
      if (!this.s.init) {
        // If not initialized, fire close event because we will never
        // get a cursor
        _this.emit('close');
      }
      callback && callback();
    }
  };

  /**
   * @ignore
   */

  function throwIfInitialized(self) {
    if (self.s.init) {
      throw new Error('You cannot change options after the stream has entered' + 'flowing mode!');
    }
  }

  /**
   * @ignore
   */

  function doRead(_this) {
    if (_this.destroyed) {
      return;
    }

    _this.s.cursor.next(function(error, doc) {
      if (_this.destroyed) {
        return;
      }
      if (error) {
        return __handleError$1(_this, error);
      }
      if (!doc) {
        _this.push(null);

        browser$1.nextTick(() => {
          _this.s.cursor.close(function(error) {
            if (error) {
              __handleError$1(_this, error);
              return;
            }

            _this.emit('close');
          });
        });

        return;
      }

      var bytesRemaining = _this.s.file.length - _this.s.bytesRead;
      var expectedN = _this.s.expected++;
      var expectedLength = Math.min(_this.s.file.chunkSize, bytesRemaining);

      if (doc.n > expectedN) {
        var errmsg = 'ChunkIsMissing: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;
        return __handleError$1(_this, new Error(errmsg));
      }

      if (doc.n < expectedN) {
        errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;
        return __handleError$1(_this, new Error(errmsg));
      }

      var buf = Buffer$9.isBuffer(doc.data) ? doc.data : doc.data.buffer;

      if (buf.length !== expectedLength) {
        if (bytesRemaining <= 0) {
          errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n;
          return __handleError$1(_this, new Error(errmsg));
        }

        errmsg =
          'ChunkIsWrongSize: Got unexpected length: ' + buf.length + ', expected: ' + expectedLength;
        return __handleError$1(_this, new Error(errmsg));
      }

      _this.s.bytesRead += buf.length;

      if (buf.length === 0) {
        return _this.push(null);
      }

      var sliceStart = null;
      var sliceEnd = null;

      if (_this.s.bytesToSkip != null) {
        sliceStart = _this.s.bytesToSkip;
        _this.s.bytesToSkip = 0;
      }

      const atEndOfStream = expectedN === _this.s.expectedEnd - 1;
      const bytesLeftToRead = _this.s.options.end - _this.s.bytesToSkip;
      if (atEndOfStream && _this.s.bytesToTrim != null) {
        sliceEnd = _this.s.file.chunkSize - _this.s.bytesToTrim;
      } else if (_this.s.options.end && bytesLeftToRead < doc.data.length()) {
        sliceEnd = bytesLeftToRead;
      }

      if (sliceStart != null || sliceEnd != null) {
        buf = buf.slice(sliceStart || 0, sliceEnd || buf.length);
      }

      _this.push(buf);
    });
  }

  /**
   * @ignore
   */

  function init(self) {
    var findOneOptions = {};
    if (self.s.readPreference) {
      findOneOptions.readPreference = self.s.readPreference;
    }
    if (self.s.options && self.s.options.sort) {
      findOneOptions.sort = self.s.options.sort;
    }
    if (self.s.options && self.s.options.skip) {
      findOneOptions.skip = self.s.options.skip;
    }

    self.s.files.findOne(self.s.filter, findOneOptions, function(error, doc) {
      if (error) {
        return __handleError$1(self, error);
      }

      if (!doc) {
        var identifier = self.s.filter._id ? self.s.filter._id.toString() : self.s.filter.filename;
        var errmsg = 'FileNotFound: file ' + identifier + ' was not found';
        var err = new Error(errmsg);
        err.code = 'ENOENT';
        return __handleError$1(self, err);
      }

      // If document is empty, kill the stream immediately and don't
      // execute any reads
      if (doc.length <= 0) {
        self.push(null);
        return;
      }

      if (self.destroyed) {
        // If user destroys the stream before we have a cursor, wait
        // until the query is done to say we're 'closed' because we can't
        // cancel a query.
        self.emit('close');
        return;
      }

      try {
        self.s.bytesToSkip = handleStartOption(self, doc, self.s.options);
      } catch (error) {
        return __handleError$1(self, error);
      }

      var filter = { files_id: doc._id };

      // Currently (MongoDB 3.4.4) skip function does not support the index,
      // it needs to retrieve all the documents first and then skip them. (CS-25811)
      // As work around we use $gte on the "n" field.
      if (self.s.options && self.s.options.start != null) {
        var skip = Math.floor(self.s.options.start / doc.chunkSize);
        if (skip > 0) {
          filter['n'] = { $gte: skip };
        }
      }
      self.s.cursor = self.s.chunks.find(filter).sort({ n: 1 });

      if (self.s.readPreference) {
        self.s.cursor.setReadPreference(self.s.readPreference);
      }

      self.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);
      self.s.file = doc;

      try {
        self.s.bytesToTrim = handleEndOption(self, doc, self.s.cursor, self.s.options);
      } catch (error) {
        return __handleError$1(self, error);
      }

      self.emit('file', doc);
    });
  }

  /**
   * @ignore
   */

  function waitForFile(_this, callback) {
    if (_this.s.file) {
      return callback();
    }

    if (!_this.s.init) {
      init(_this);
      _this.s.init = true;
    }

    _this.once('file', function() {
      callback();
    });
  }

  /**
   * @ignore
   */

  function handleStartOption(stream, doc, options) {
    if (options && options.start != null) {
      if (options.start > doc.length) {
        throw new Error(
          'Stream start (' +
            options.start +
            ') must not be ' +
            'more than the length of the file (' +
            doc.length +
            ')'
        );
      }
      if (options.start < 0) {
        throw new Error('Stream start (' + options.start + ') must not be ' + 'negative');
      }
      if (options.end != null && options.end < options.start) {
        throw new Error(
          'Stream start (' +
            options.start +
            ') must not be ' +
            'greater than stream end (' +
            options.end +
            ')'
        );
      }

      stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;
      stream.s.expected = Math.floor(options.start / doc.chunkSize);

      return options.start - stream.s.bytesRead;
    }
  }

  /**
   * @ignore
   */

  function handleEndOption(stream, doc, cursor, options) {
    if (options && options.end != null) {
      if (options.end > doc.length) {
        throw new Error(
          'Stream end (' +
            options.end +
            ') must not be ' +
            'more than the length of the file (' +
            doc.length +
            ')'
        );
      }
      if (options.start < 0) {
        throw new Error('Stream end (' + options.end + ') must not be ' + 'negative');
      }

      var start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;

      cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);

      stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);

      return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;
    }
  }

  /**
   * @ignore
   */

  function __handleError$1(_this, error) {
    _this.emit('error', error);
  }

  var download = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var Buffer = safeBuffer.Buffer;

  var ERROR_NAMESPACE_NOT_FOUND = 26;

  var upload = GridFSBucketWriteStream;

  /**
   * A writable stream that enables you to write buffers to GridFS.
   *
   * Do not instantiate this class directly. Use `openUploadStream()` instead.
   *
   * @class
   * @extends external:Writable
   * @param {GridFSBucket} bucket Handle for this stream's corresponding bucket
   * @param {string} filename The value of the 'filename' key in the files doc
   * @param {object} [options] Optional settings.
   * @param {string|number|object} [options.id] Custom file id for the GridFS file.
   * @param {number} [options.chunkSizeBytes] The chunk size to use, in bytes
   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.
   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.
   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.
   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.
   * @param {boolean} [options.disableMD5=false] If true, disables adding an md5 field to file data
   * @fires GridFSBucketWriteStream#error
   * @fires GridFSBucketWriteStream#finish
   */

  function GridFSBucketWriteStream(bucket, filename, options) {
    options = options || {};
    stream$1.Writable.call(this, options);
    this.bucket = bucket;
    this.chunks = bucket.s._chunksCollection;
    this.filename = filename;
    this.files = bucket.s._filesCollection;
    this.options = options;
    // Signals the write is all done
    this.done = false;

    this.id = options.id ? options.id : core.BSON.ObjectId();
    this.chunkSizeBytes = this.options.chunkSizeBytes;
    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);
    this.length = 0;
    this.md5 = !options.disableMD5 && crypto$1.createHash('md5');
    this.n = 0;
    this.pos = 0;
    this.state = {
      streamEnd: false,
      outstandingRequests: 0,
      errored: false,
      aborted: false,
      promiseLibrary: this.bucket.s.promiseLibrary
    };

    if (!this.bucket.s.calledOpenUploadStream) {
      this.bucket.s.calledOpenUploadStream = true;

      var _this = this;
      checkIndexes(this, function() {
        _this.bucket.s.checkedIndexes = true;
        _this.bucket.emit('index');
      });
    }
  }

  util$2.inherits(GridFSBucketWriteStream, stream$1.Writable);

  /**
   * An error occurred
   *
   * @event GridFSBucketWriteStream#error
   * @type {Error}
   */

  /**
   * `end()` was called and the write stream successfully wrote the file
   * metadata and all the chunks to MongoDB.
   *
   * @event GridFSBucketWriteStream#finish
   * @type {object}
   */

  /**
   * Write a buffer to the stream.
   *
   * @method
   * @param {Buffer} chunk Buffer to write
   * @param {String} encoding Optional encoding for the buffer
   * @param {GridFSBucket~errorCallback} callback Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.
   * @return {Boolean} False if this write required flushing a chunk to MongoDB. True otherwise.
   */

  GridFSBucketWriteStream.prototype.write = function(chunk, encoding, callback) {
    var _this = this;
    return waitForIndexes(this, function() {
      return doWrite(_this, chunk, encoding, callback);
    });
  };

  /**
   * Places this write stream into an aborted state (all future writes fail)
   * and deletes all chunks that have already been written.
   *
   * @method
   * @param {GridFSBucket~errorCallback} callback called when chunks are successfully removed or error occurred
   * @return {Promise} if no callback specified
   */

  GridFSBucketWriteStream.prototype.abort = function(callback) {
    if (this.state.streamEnd) {
      var error = new Error('Cannot abort a stream that has already completed');
      if (typeof callback === 'function') {
        return callback(error);
      }
      return this.state.promiseLibrary.reject(error);
    }
    if (this.state.aborted) {
      error = new Error('Cannot call abort() on a stream twice');
      if (typeof callback === 'function') {
        return callback(error);
      }
      return this.state.promiseLibrary.reject(error);
    }
    this.state.aborted = true;
    this.chunks.deleteMany({ files_id: this.id }, function(error) {
      if (typeof callback === 'function') callback(error);
    });
  };

  /**
   * Tells the stream that no more data will be coming in. The stream will
   * persist the remaining data to MongoDB, write the files document, and
   * then emit a 'finish' event.
   *
   * @method
   * @param {Buffer} chunk Buffer to write
   * @param {String} encoding Optional encoding for the buffer
   * @param {GridFSBucket~errorCallback} callback Function to call when all files and chunks have been persisted to MongoDB
   */

  GridFSBucketWriteStream.prototype.end = function(chunk, encoding, callback) {
    var _this = this;
    if (typeof chunk === 'function') {
      (callback = chunk), (chunk = null), (encoding = null);
    } else if (typeof encoding === 'function') {
      (callback = encoding), (encoding = null);
    }

    if (checkAborted(this, callback)) {
      return;
    }
    this.state.streamEnd = true;

    if (callback) {
      this.once('finish', function(result) {
        callback(null, result);
      });
    }

    if (!chunk) {
      waitForIndexes(this, function() {
        writeRemnant(_this);
      });
      return;
    }

    this.write(chunk, encoding, function() {
      writeRemnant(_this);
    });
  };

  /**
   * @ignore
   */

  function __handleError(_this, error, callback) {
    if (_this.state.errored) {
      return;
    }
    _this.state.errored = true;
    if (callback) {
      return callback(error);
    }
    _this.emit('error', error);
  }

  /**
   * @ignore
   */

  function createChunkDoc(filesId, n, data) {
    return {
      _id: core.BSON.ObjectId(),
      files_id: filesId,
      n: n,
      data: data
    };
  }

  /**
   * @ignore
   */

  function checkChunksIndex(_this, callback) {
    _this.chunks.listIndexes().toArray(function(error, indexes) {
      if (error) {
        // Collection doesn't exist so create index
        if (error.code === ERROR_NAMESPACE_NOT_FOUND) {
          var index = { files_id: 1, n: 1 };
          _this.chunks.createIndex(index, { background: false, unique: true }, function(error) {
            if (error) {
              return callback(error);
            }

            callback();
          });
          return;
        }
        return callback(error);
      }

      var hasChunksIndex = false;
      indexes.forEach(function(index) {
        if (index.key) {
          var keys = Object.keys(index.key);
          if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {
            hasChunksIndex = true;
          }
        }
      });

      if (hasChunksIndex) {
        callback();
      } else {
        index = { files_id: 1, n: 1 };
        var indexOptions = getWriteOptions(_this);

        indexOptions.background = false;
        indexOptions.unique = true;

        _this.chunks.createIndex(index, indexOptions, function(error) {
          if (error) {
            return callback(error);
          }

          callback();
        });
      }
    });
  }

  /**
   * @ignore
   */

  function checkDone(_this, callback) {
    if (_this.done) return true;
    if (_this.state.streamEnd && _this.state.outstandingRequests === 0 && !_this.state.errored) {
      // Set done so we dont' trigger duplicate createFilesDoc
      _this.done = true;
      // Create a new files doc
      var filesDoc = createFilesDoc(
        _this.id,
        _this.length,
        _this.chunkSizeBytes,
        _this.md5 && _this.md5.digest('hex'),
        _this.filename,
        _this.options.contentType,
        _this.options.aliases,
        _this.options.metadata
      );

      if (checkAborted(_this, callback)) {
        return false;
      }

      _this.files.insertOne(filesDoc, getWriteOptions(_this), function(error) {
        if (error) {
          return __handleError(_this, error, callback);
        }
        _this.emit('finish', filesDoc);
      });

      return true;
    }

    return false;
  }

  /**
   * @ignore
   */

  function checkIndexes(_this, callback) {
    _this.files.findOne({}, { _id: 1 }, function(error, doc) {
      if (error) {
        return callback(error);
      }
      if (doc) {
        return callback();
      }

      _this.files.listIndexes().toArray(function(error, indexes) {
        if (error) {
          // Collection doesn't exist so create index
          if (error.code === ERROR_NAMESPACE_NOT_FOUND) {
            var index = { filename: 1, uploadDate: 1 };
            _this.files.createIndex(index, { background: false }, function(error) {
              if (error) {
                return callback(error);
              }

              checkChunksIndex(_this, callback);
            });
            return;
          }
          return callback(error);
        }

        var hasFileIndex = false;
        indexes.forEach(function(index) {
          var keys = Object.keys(index.key);
          if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {
            hasFileIndex = true;
          }
        });

        if (hasFileIndex) {
          checkChunksIndex(_this, callback);
        } else {
          index = { filename: 1, uploadDate: 1 };

          var indexOptions = getWriteOptions(_this);

          indexOptions.background = false;

          _this.files.createIndex(index, indexOptions, function(error) {
            if (error) {
              return callback(error);
            }

            checkChunksIndex(_this, callback);
          });
        }
      });
    });
  }

  /**
   * @ignore
   */

  function createFilesDoc(_id, length, chunkSize, md5, filename, contentType, aliases, metadata) {
    var ret = {
      _id: _id,
      length: length,
      chunkSize: chunkSize,
      uploadDate: new Date(),
      filename: filename
    };

    if (md5) {
      ret.md5 = md5;
    }

    if (contentType) {
      ret.contentType = contentType;
    }

    if (aliases) {
      ret.aliases = aliases;
    }

    if (metadata) {
      ret.metadata = metadata;
    }

    return ret;
  }

  /**
   * @ignore
   */

  function doWrite(_this, chunk, encoding, callback) {
    if (checkAborted(_this, callback)) {
      return false;
    }

    var inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);

    _this.length += inputBuf.length;

    // Input is small enough to fit in our buffer
    if (_this.pos + inputBuf.length < _this.chunkSizeBytes) {
      inputBuf.copy(_this.bufToStore, _this.pos);
      _this.pos += inputBuf.length;

      callback && callback();

      // Note that we reverse the typical semantics of write's return value
      // to be compatible with node's `.pipe()` function.
      // True means client can keep writing.
      return true;
    }

    // Otherwise, buffer is too big for current chunk, so we need to flush
    // to MongoDB.
    var inputBufRemaining = inputBuf.length;
    var spaceRemaining = _this.chunkSizeBytes - _this.pos;
    var numToCopy = Math.min(spaceRemaining, inputBuf.length);
    var outstandingRequests = 0;
    while (inputBufRemaining > 0) {
      var inputBufPos = inputBuf.length - inputBufRemaining;
      inputBuf.copy(_this.bufToStore, _this.pos, inputBufPos, inputBufPos + numToCopy);
      _this.pos += numToCopy;
      spaceRemaining -= numToCopy;
      if (spaceRemaining === 0) {
        if (_this.md5) {
          _this.md5.update(_this.bufToStore);
        }
        var doc = createChunkDoc(_this.id, _this.n, Buffer.from(_this.bufToStore));
        ++_this.state.outstandingRequests;
        ++outstandingRequests;

        if (checkAborted(_this, callback)) {
          return false;
        }

        _this.chunks.insertOne(doc, getWriteOptions(_this), function(error) {
          if (error) {
            return __handleError(_this, error);
          }
          --_this.state.outstandingRequests;
          --outstandingRequests;

          if (!outstandingRequests) {
            _this.emit('drain', doc);
            callback && callback();
            checkDone(_this);
          }
        });

        spaceRemaining = _this.chunkSizeBytes;
        _this.pos = 0;
        ++_this.n;
      }
      inputBufRemaining -= numToCopy;
      numToCopy = Math.min(spaceRemaining, inputBufRemaining);
    }

    // Note that we reverse the typical semantics of write's return value
    // to be compatible with node's `.pipe()` function.
    // False means the client should wait for the 'drain' event.
    return false;
  }

  /**
   * @ignore
   */

  function getWriteOptions(_this) {
    var obj = {};
    if (_this.options.writeConcern) {
      obj.w = _this.options.writeConcern.w;
      obj.wtimeout = _this.options.writeConcern.wtimeout;
      obj.j = _this.options.writeConcern.j;
    }
    return obj;
  }

  /**
   * @ignore
   */

  function waitForIndexes(_this, callback) {
    if (_this.bucket.s.checkedIndexes) {
      return callback(false);
    }

    _this.bucket.once('index', function() {
      callback(true);
    });

    return true;
  }

  /**
   * @ignore
   */

  function writeRemnant(_this, callback) {
    // Buffer is empty, so don't bother to insert
    if (_this.pos === 0) {
      return checkDone(_this, callback);
    }

    ++_this.state.outstandingRequests;

    // Create a new buffer to make sure the buffer isn't bigger than it needs
    // to be.
    var remnant = Buffer.alloc(_this.pos);
    _this.bufToStore.copy(remnant, 0, 0, _this.pos);
    if (_this.md5) {
      _this.md5.update(remnant);
    }
    var doc = createChunkDoc(_this.id, _this.n, remnant);

    // If the stream was aborted, do not write remnant
    if (checkAborted(_this, callback)) {
      return false;
    }

    _this.chunks.insertOne(doc, getWriteOptions(_this), function(error) {
      if (error) {
        return __handleError(_this, error);
      }
      --_this.state.outstandingRequests;
      checkDone(_this);
    });
  }

  /**
   * @ignore
   */

  function checkAborted(_this, callback) {
    if (_this.state.aborted) {
      if (typeof callback === 'function') {
        callback(new Error('this stream has been aborted'));
      }
      return true;
    }
    return false;
  }

  var GridFSBucketReadStream = /*@__PURE__*/getAugmentedNamespace(download);

  var Emitter = require$$0$1.EventEmitter;


  var shallowClone = require$$1$1.shallowClone;
  var toError = require$$1$1.toError;

  var executeLegacyOperation = require$$1$1.executeLegacyOperation;

  var DEFAULT_GRIDFS_BUCKET_OPTIONS = {
    bucketName: 'fs',
    chunkSizeBytes: 255 * 1024
  };

  var gridfsStream = GridFSBucket;

  /**
   * Constructor for a streaming GridFS interface
   * @class
   * @extends external:EventEmitter
   * @param {Db} db A db handle
   * @param {object} [options] Optional settings.
   * @param {string} [options.bucketName="fs"] The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.
   * @param {number} [options.chunkSizeBytes=255 * 1024] Number of bytes stored in each chunk. Defaults to 255KB
   * @param {object} [options.writeConcern] Optional write concern to be passed to write operations, for instance `{ w: 1 }`
   * @param {object} [options.readPreference] Optional read preference to be passed to read operations
   * @fires GridFSBucketWriteStream#index
   */

  function GridFSBucket(db, options) {
    Emitter.apply(this);
    this.setMaxListeners(0);

    if (options && typeof options === 'object') {
      options = shallowClone(options);
      var keys = Object.keys(DEFAULT_GRIDFS_BUCKET_OPTIONS);
      for (var i = 0; i < keys.length; ++i) {
        if (!options[keys[i]]) {
          options[keys[i]] = DEFAULT_GRIDFS_BUCKET_OPTIONS[keys[i]];
        }
      }
    } else {
      options = DEFAULT_GRIDFS_BUCKET_OPTIONS;
    }

    this.s = {
      db: db,
      options: options,
      _chunksCollection: db.collection(options.bucketName + '.chunks'),
      _filesCollection: db.collection(options.bucketName + '.files'),
      checkedIndexes: false,
      calledOpenUploadStream: false,
      promiseLibrary: db.s.promiseLibrary || Promise
    };
  }

  util$2.inherits(GridFSBucket, Emitter);

  /**
   * When the first call to openUploadStream is made, the upload stream will
   * check to see if it needs to create the proper indexes on the chunks and
   * files collections. This event is fired either when 1) it determines that
   * no index creation is necessary, 2) when it successfully creates the
   * necessary indexes.
   *
   * @event GridFSBucket#index
   * @type {Error}
   */

  /**
   * Returns a writable stream (GridFSBucketWriteStream) for writing
   * buffers to GridFS. The stream's 'id' property contains the resulting
   * file's id.
   * @method
   * @param {string} filename The value of the 'filename' key in the files doc
   * @param {object} [options] Optional settings.
   * @param {number} [options.chunkSizeBytes] Optional overwrite this bucket's chunkSizeBytes for this file
   * @param {object} [options.metadata] Optional object to store in the file document's `metadata` field
   * @param {string} [options.contentType] Optional string to store in the file document's `contentType` field
   * @param {array} [options.aliases] Optional array of strings to store in the file document's `aliases` field
   * @param {boolean} [options.disableMD5=false] If true, disables adding an md5 field to file data
   * @return {GridFSBucketWriteStream}
   */

  GridFSBucket.prototype.openUploadStream = function(filename, options) {
    if (options) {
      options = shallowClone(options);
    } else {
      options = {};
    }
    if (!options.chunkSizeBytes) {
      options.chunkSizeBytes = this.s.options.chunkSizeBytes;
    }
    return new upload(this, filename, options);
  };

  /**
   * Returns a writable stream (GridFSBucketWriteStream) for writing
   * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting
   * file's id.
   * @method
   * @param {string|number|object} id A custom id used to identify the file
   * @param {string} filename The value of the 'filename' key in the files doc
   * @param {object} [options] Optional settings.
   * @param {number} [options.chunkSizeBytes] Optional overwrite this bucket's chunkSizeBytes for this file
   * @param {object} [options.metadata] Optional object to store in the file document's `metadata` field
   * @param {string} [options.contentType] Optional string to store in the file document's `contentType` field
   * @param {array} [options.aliases] Optional array of strings to store in the file document's `aliases` field
   * @param {boolean} [options.disableMD5=false] If true, disables adding an md5 field to file data
   * @return {GridFSBucketWriteStream}
   */

  GridFSBucket.prototype.openUploadStreamWithId = function(id, filename, options) {
    if (options) {
      options = shallowClone(options);
    } else {
      options = {};
    }

    if (!options.chunkSizeBytes) {
      options.chunkSizeBytes = this.s.options.chunkSizeBytes;
    }

    options.id = id;

    return new upload(this, filename, options);
  };

  /**
   * Returns a readable stream (GridFSBucketReadStream) for streaming file
   * data from GridFS.
   * @method
   * @param {ObjectId} id The id of the file doc
   * @param {Object} [options] Optional settings.
   * @param {Number} [options.start] Optional 0-based offset in bytes to start streaming from
   * @param {Number} [options.end] Optional 0-based offset in bytes to stop streaming before
   * @return {GridFSBucketReadStream}
   */

  GridFSBucket.prototype.openDownloadStream = function(id, options) {
    var filter = { _id: id };
    options = {
      start: options && options.start,
      end: options && options.end
    };

    return new GridFSBucketReadStream(
      this.s._chunksCollection,
      this.s._filesCollection,
      this.s.options.readPreference,
      filter,
      options
    );
  };

  /**
   * Deletes a file with the given id
   * @method
   * @param {ObjectId} id The id of the file doc
   * @param {GridFSBucket~errorCallback} [callback]
   */

  GridFSBucket.prototype.delete = function(id, callback) {
    return executeLegacyOperation(this.s.db.s.topology, _delete, [this, id, callback], {
      skipSessions: true
    });
  };

  /**
   * @ignore
   */

  function _delete(_this, id, callback) {
    _this.s._filesCollection.deleteOne({ _id: id }, function(error, res) {
      if (error) {
        return callback(error);
      }

      _this.s._chunksCollection.deleteMany({ files_id: id }, function(error) {
        if (error) {
          return callback(error);
        }

        // Delete orphaned chunks before returning FileNotFound
        if (!res.result.n) {
          var errmsg = 'FileNotFound: no file with id ' + id + ' found';
          return callback(new Error(errmsg));
        }

        callback();
      });
    });
  }

  /**
   * Convenience wrapper around find on the files collection
   * @method
   * @param {Object} filter
   * @param {Object} [options] Optional settings for cursor
   * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find|find command documentation}.
   * @param {number} [options.limit] Optional limit for cursor
   * @param {number} [options.maxTimeMS] Optional maxTimeMS for cursor
   * @param {boolean} [options.noCursorTimeout] Optionally set cursor's `noCursorTimeout` flag
   * @param {number} [options.skip] Optional skip for cursor
   * @param {object} [options.sort] Optional sort for cursor
   * @return {Cursor}
   */

  GridFSBucket.prototype.find = function(filter, options) {
    filter = filter || {};
    options = options || {};

    var cursor = this.s._filesCollection.find(filter);

    if (options.batchSize != null) {
      cursor.batchSize(options.batchSize);
    }
    if (options.limit != null) {
      cursor.limit(options.limit);
    }
    if (options.maxTimeMS != null) {
      cursor.maxTimeMS(options.maxTimeMS);
    }
    if (options.noCursorTimeout != null) {
      cursor.addCursorFlag('noCursorTimeout', options.noCursorTimeout);
    }
    if (options.skip != null) {
      cursor.skip(options.skip);
    }
    if (options.sort != null) {
      cursor.sort(options.sort);
    }

    return cursor;
  };

  /**
   * Returns a readable stream (GridFSBucketReadStream) for streaming the
   * file with the given name from GridFS. If there are multiple files with
   * the same name, this will stream the most recent file with the given name
   * (as determined by the `uploadDate` field). You can set the `revision`
   * option to change this behavior.
   * @method
   * @param {String} filename The name of the file to stream
   * @param {Object} [options] Optional settings
   * @param {number} [options.revision=-1] The revision number relative to the oldest file with the given filename. 0 gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the newest.
   * @param {Number} [options.start] Optional 0-based offset in bytes to start streaming from
   * @param {Number} [options.end] Optional 0-based offset in bytes to stop streaming before
   * @return {GridFSBucketReadStream}
   */

  GridFSBucket.prototype.openDownloadStreamByName = function(filename, options) {
    var sort = { uploadDate: -1 };
    var skip = null;
    if (options && options.revision != null) {
      if (options.revision >= 0) {
        sort = { uploadDate: 1 };
        skip = options.revision;
      } else {
        skip = -options.revision - 1;
      }
    }

    var filter = { filename: filename };
    options = {
      sort: sort,
      skip: skip,
      start: options && options.start,
      end: options && options.end
    };
    return new GridFSBucketReadStream(
      this.s._chunksCollection,
      this.s._filesCollection,
      this.s.options.readPreference,
      filter,
      options
    );
  };

  /**
   * Renames the file with the given _id to the given string
   * @method
   * @param {ObjectId} id the id of the file to rename
   * @param {String} filename new name for the file
   * @param {GridFSBucket~errorCallback} [callback]
   */

  GridFSBucket.prototype.rename = function(id, filename, callback) {
    return executeLegacyOperation(this.s.db.s.topology, _rename, [this, id, filename, callback], {
      skipSessions: true
    });
  };

  /**
   * @ignore
   */

  function _rename(_this, id, filename, callback) {
    var filter = { _id: id };
    var update = { $set: { filename: filename } };
    _this.s._filesCollection.updateOne(filter, update, function(error, res) {
      if (error) {
        return callback(error);
      }
      if (!res.result.n) {
        return callback(toError('File with id ' + id + ' not found'));
      }
      callback();
    });
  }

  /**
   * Removes this bucket's files collection, followed by its chunks collection.
   * @method
   * @param {GridFSBucket~errorCallback} [callback]
   */

  GridFSBucket.prototype.drop = function(callback) {
    return executeLegacyOperation(this.s.db.s.topology, _drop, [this, callback], {
      skipSessions: true
    });
  };

  /**
   * Return the db logger
   * @method
   * @return {Logger} return the db logger
   * @ignore
   */
  GridFSBucket.prototype.getLogger = function() {
    return this.s.db.s.logger;
  };

  /**
   * @ignore
   */

  function _drop(_this, callback) {
    _this.s._filesCollection.drop(function(error) {
      if (error) {
        return callback(error);
      }
      _this.s._chunksCollection.drop(function(error) {
        if (error) {
          return callback(error);
        }

        return callback();
      });
    });
  }

  var require$$5 = /*@__PURE__*/getAugmentedNamespace(server);

  var require$$6 = /*@__PURE__*/getAugmentedNamespace(replset);

  var require$$7 = /*@__PURE__*/getAugmentedNamespace(mongos);

  var require$$8 = /*@__PURE__*/getAugmentedNamespace(grid_store);

  // Core module



  // Set up the connect function
  const connect = mongo_client.connect;

  // Expose error class
  connect.MongoError = core.MongoError;
  connect.MongoNetworkError = core.MongoNetworkError;
  connect.MongoTimeoutError = core.MongoTimeoutError;
  connect.MongoServerSelectionError = core.MongoServerSelectionError;
  connect.MongoParseError = core.MongoParseError;
  connect.MongoWriteConcernError = core.MongoWriteConcernError;
  connect.MongoBulkWriteError = common.BulkWriteError;
  connect.BulkWriteError = connect.MongoBulkWriteError;

  // Actual driver classes exported
  connect.Admin = admin;
  connect.MongoClient = mongo_client;
  connect.Db = db;
  connect.Collection = require$$4$1;
  connect.Server = require$$5;
  connect.ReplSet = require$$6;
  connect.Mongos = require$$7;
  connect.ReadPreference = core.ReadPreference;
  connect.GridStore = require$$8;
  connect.Chunk = chunk;
  connect.Logger = core.Logger;
  connect.AggregationCursor = aggregation_cursor;
  connect.CommandCursor = command_cursor;
  connect.Cursor = cursor$1;
  connect.GridFSBucket = gridfsStream;
  // Exported to be used in tests not to be used anywhere else
  connect.CoreServer = core.Server;
  connect.CoreConnection = core.Connection;

  // BSON types exported
  connect.Binary = core.BSON.Binary;
  connect.Code = core.BSON.Code;
  connect.Map = core.BSON.Map;
  connect.DBRef = core.BSON.DBRef;
  connect.Double = core.BSON.Double;
  connect.Int32 = core.BSON.Int32;
  connect.Long = core.BSON.Long;
  connect.MinKey = core.BSON.MinKey;
  connect.MaxKey = core.BSON.MaxKey;
  connect.ObjectID = core.BSON.ObjectID;
  connect.ObjectId = core.BSON.ObjectID;
  connect.Symbol = core.BSON.Symbol;
  connect.Timestamp = core.BSON.Timestamp;
  connect.BSONRegExp = core.BSON.BSONRegExp;
  connect.Decimal128 = core.BSON.Decimal128;

  // Add connect method
  connect.connect = connect;

  // Set up the instrumentation method
  connect.instrument = function(options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    const instrumentation = new apm();
    instrumentation.instrument(connect.MongoClient, callback);
    return instrumentation;
  };

  // Set our exports to be the connect function
  var mongodb = connect;

  var groupBy = function(xs, key) {
      return xs.reduce(function(rv, x) {
        (rv[x[key]] = rv[x[key]] || []).push(x);
        return rv;
      }, {});
  };

  async function setupPlugin({ global, attachments, config }) {
      if (!config.databaseUrl) {
          throw new Error('Database Url not provided!')
      }
      if (!config.databaseName) {
          throw new Error('Database Name not provided!')
      }

      const client = await mongodb.MongoClient.connect(config.databaseUrl, { useNewUrlParser: true })
          .catch(err => { console.log(err); });

      if (!client) {
          throw new Error('Failed to setup client')
      }

      global.database = client.db(config.databaseName);
  }

  async function processEventBatch(batch, { config, global }) {
      if (!global.database) {
          throw new Error('No database initialized!')
      }

      batch.map((oneEvent) => {
          const { event, properties, $set, $set_once, distinct_id, team_id, site_url, now, sent_at, uuid, ..._discard } = oneEvent;
          const ip = properties?.['$ip'] || oneEvent.ip;
          const timestamp = oneEvent.timestamp || oneEvent.data?.timestamp || properties?.timestamp || now || sent_at;
          let ingestedProperties = properties;
          let elements = [];

          // only move prop to elements for the $autocapture action
          if (event === '$autocapture' && properties['$elements']) {
              const { $elements, ...props } = properties;
              ingestedProperties = props;
              elements = $elements;
          }

          return {
              uuid,
              event,
              properties: JSON.stringify(ingestedProperties || {}),
              elements: JSON.stringify(elements || {}),
              set: JSON.stringify($set || {}),
              set_once: JSON.stringify($set_once || {}),
              distinct_id,
              team_id,
              ip,
              site_url,
              timestamp: timestamp ? global.bigQueryClient.timestamp(timestamp) : null,
          }
      });


      var events = groupBy(ros, "event");

      try {
          for (var event in events) {
              var col = global.database.collection(event);
              await col.insertMany(events[event], { ordered: false });
          }
      } catch (error) {
          throw new Error(`Error inserting into mongodb! ${JSON.stringify(error.errors)}`)
      }

      return batch
  }

  module.exports.setupPlugin = setupPlugin;
  module.exports.processEventBatch = processEventBatch;

})));
